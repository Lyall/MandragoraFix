#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: A005_Tutorial_Inquisitor_Sequence

#include "Basic.hpp"

#include "CinematicCamera_structs.hpp"


namespace SDK::Params
{

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x0110 (0x0110 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrawlerHero_C*                      K2Node_DynamicCast_AsBP_Brawler_Hero;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Inquisitor_C*                       K2Node_CustomEvent_BP_Inquisitor_1;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_InquisitorBG1_Kezka_C*              K2Node_CustomEvent_BP_InquisitorBG1;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstanceBase*                      K2Node_DynamicCast_AsAnim_Instance_Base;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstanceBase*                      K2Node_DynamicCast_AsAnim_Instance_Base_1;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_InquisitorBG2_Olen_C*               K2Node_CustomEvent_BP_InquisitorBG2;               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GuardBowNPC_C*                      K2Node_CustomEvent_BP_GuardBowNPC;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_2;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPStartAnim_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstanceBase*                      K2Node_DynamicCast_AsAnim_Instance_Base_2;         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCineCameraComponent*                   K2Node_CustomEvent_CameraComponent;                // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraLensSettings                    K2Node_MakeStruct_CameraLensSettings;              // 0x0098(0x0018)(NoDestructor)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrawlerHero_C*                      K2Node_DynamicCast_AsBP_Brawler_Hero_1;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrawlerHero_C*                      K2Node_DynamicCast_AsBP_Brawler_Hero_2;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TrainingSpearman1_C*                K2Node_CustomEvent_BP_TrainingSpearman1;           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_TrainingSpearman2_C*                K2Node_CustomEvent_BP_TrainingSpearman2;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPStartAnim_ReturnValue_1;                // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPStartAnim_ReturnValue_2;                // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Inquisitor_C*                       K2Node_CustomEvent_BP_Inquisitor;                  // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_3;            // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Maddick_Anim_C*                     K2Node_DynamicCast_AsBP_Maddick_Anim;              // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000110, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_AsBP_Brawler_Hero) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_AsBP_Brawler_Hero' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Inquisitor_1) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Inquisitor_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_InquisitorBG1) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_InquisitorBG1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetAnimInstance_ReturnValue) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_AsAnim_Instance_Base) == 0x000038, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_AsAnim_Instance_Base' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000048, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_AsAnim_Instance_Base_1) == 0x000050, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_AsAnim_Instance_Base_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_InquisitorBG2) == 0x000060, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_InquisitorBG2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_GuardBowNPC) == 0x000068, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_GuardBowNPC' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetAnimInstance_ReturnValue_2) == 0x000070, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetAnimInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_BPStartAnim_ReturnValue) == 0x000078, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_BPStartAnim_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_AsAnim_Instance_Base_2) == 0x000080, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_AsAnim_Instance_Base_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_bSuccess_3) == 0x000088, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_CameraComponent) == 0x000090, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_CameraComponent' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_MakeStruct_CameraLensSettings) == 0x000098, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_MakeStruct_CameraLensSettings' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x0000B0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_AsBP_Brawler_Hero_1) == 0x0000B8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_AsBP_Brawler_Hero_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_bSuccess_4) == 0x0000C0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_AsBP_Brawler_Hero_2) == 0x0000C8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_AsBP_Brawler_Hero_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_bSuccess_5) == 0x0000D0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_TrainingSpearman1) == 0x0000D8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_TrainingSpearman1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_TrainingSpearman2) == 0x0000E0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_TrainingSpearman2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_BPStartAnim_ReturnValue_1) == 0x0000E8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_BPStartAnim_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_BPStartAnim_ReturnValue_2) == 0x0000E9, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_BPStartAnim_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Inquisitor) == 0x0000F0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Inquisitor' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetAnimInstance_ReturnValue_3) == 0x0000F8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetAnimInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_AsBP_Maddick_Anim) == 0x000100, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_AsBP_Maddick_Anim' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_bSuccess_6) == 0x000108, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.BP_Inquisitor_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Inquisitor_Event_1 final
{
public:
	class ABP_Inquisitor_C*                       BP_Inquisitor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Inquisitor_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Inquisitor_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_Inquisitor_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_Inquisitor_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_Inquisitor_Event_1, BP_Inquisitor) == 0x000000, "Member 'SequenceDirector_C_BP_Inquisitor_Event_1::BP_Inquisitor' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.BP_TrainingSpearman2_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_TrainingSpearman2_Event_1 final
{
public:
	class ABP_TrainingSpearman2_C*                BP_TrainingSpearman2;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_TrainingSpearman2_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_TrainingSpearman2_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_TrainingSpearman2_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_TrainingSpearman2_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_TrainingSpearman2_Event_1, BP_TrainingSpearman2) == 0x000000, "Member 'SequenceDirector_C_BP_TrainingSpearman2_Event_1::BP_TrainingSpearman2' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.BP_TrainingSpearman1_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_TrainingSpearman1_Event_1 final
{
public:
	class ABP_TrainingSpearman1_C*                BP_TrainingSpearman1;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_TrainingSpearman1_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_TrainingSpearman1_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_TrainingSpearman1_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_TrainingSpearman1_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_TrainingSpearman1_Event_1, BP_TrainingSpearman1) == 0x000000, "Member 'SequenceDirector_C_BP_TrainingSpearman1_Event_1::BP_TrainingSpearman1' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.SetCameraLensSettings
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SetCameraLensSettings final
{
public:
	class UCineCameraComponent*                   CameraComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SetCameraLensSettings) == 0x000008, "Wrong alignment on SequenceDirector_C_SetCameraLensSettings");
static_assert(sizeof(SequenceDirector_C_SetCameraLensSettings) == 0x000008, "Wrong size on SequenceDirector_C_SetCameraLensSettings");
static_assert(offsetof(SequenceDirector_C_SetCameraLensSettings, CameraComponent) == 0x000000, "Member 'SequenceDirector_C_SetCameraLensSettings::CameraComponent' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.BowNpcInteractStart
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BowNpcInteractStart final
{
public:
	class ABP_GuardBowNPC_C*                      BP_GuardBowNPC;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BowNpcInteractStart) == 0x000008, "Wrong alignment on SequenceDirector_C_BowNpcInteractStart");
static_assert(sizeof(SequenceDirector_C_BowNpcInteractStart) == 0x000008, "Wrong size on SequenceDirector_C_BowNpcInteractStart");
static_assert(offsetof(SequenceDirector_C_BowNpcInteractStart, BP_GuardBowNPC) == 0x000000, "Member 'SequenceDirector_C_BowNpcInteractStart::BP_GuardBowNPC' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.BP_InquisitorBG2_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_InquisitorBG2_Event_0 final
{
public:
	class ABP_InquisitorBG2_Olen_C*               BP_InquisitorBG2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_InquisitorBG2_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_InquisitorBG2_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_InquisitorBG2_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_InquisitorBG2_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_InquisitorBG2_Event_0, BP_InquisitorBG2) == 0x000000, "Member 'SequenceDirector_C_BP_InquisitorBG2_Event_0::BP_InquisitorBG2' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.BP_InquisitorBG1_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_InquisitorBG1_Event_0 final
{
public:
	class ABP_InquisitorBG1_Kezka_C*              BP_InquisitorBG1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_InquisitorBG1_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_InquisitorBG1_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_InquisitorBG1_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_InquisitorBG1_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_InquisitorBG1_Event_0, BP_InquisitorBG1) == 0x000000, "Member 'SequenceDirector_C_BP_InquisitorBG1_Event_0::BP_InquisitorBG1' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.BP_Inquisitor_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Inquisitor_Event_0 final
{
public:
	class ABP_Inquisitor_C*                       BP_Inquisitor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Inquisitor_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Inquisitor_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Inquisitor_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Inquisitor_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Inquisitor_Event_0, BP_Inquisitor) == 0x000000, "Member 'SequenceDirector_C_BP_Inquisitor_Event_0::BP_Inquisitor' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class ABP_Inquisitor_C*                       BP_Inquisitor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, BP_Inquisitor) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::BP_Inquisitor' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class ABP_Inquisitor_C*                       BP_Inquisitor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, BP_Inquisitor) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::BP_Inquisitor' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2 final
{
public:
	class ABP_InquisitorBG1_Kezka_C*              BP_InquisitorBG1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2, BP_InquisitorBG1) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2::BP_InquisitorBG1' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3 final
{
public:
	class ABP_InquisitorBG2_Olen_C*               BP_InquisitorBG2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3, BP_InquisitorBG2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3::BP_InquisitorBG2' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_7
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7 final
{
public:
	class ABP_GuardBowNPC_C*                      BP_GuardBowNPC;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7, BP_GuardBowNPC) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7::BP_GuardBowNPC' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_8
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8 final
{
public:
	class UCineCameraComponent*                   CameraComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8, CameraComponent) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8::CameraComponent' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_9
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9 final
{
public:
	class ABP_TrainingSpearman1_C*                BP_TrainingSpearman1;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9, BP_TrainingSpearman1) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9::BP_TrainingSpearman1' has a wrong offset!");

// Function A005_Tutorial_Inquisitor_Sequence.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_10
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10 final
{
public:
	class ABP_TrainingSpearman2_C*                BP_TrainingSpearman2;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10, BP_TrainingSpearman2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10::BP_TrainingSpearman2' has a wrong offset!");

}

