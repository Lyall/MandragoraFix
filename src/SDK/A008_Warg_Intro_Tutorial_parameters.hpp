#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: A008_Warg_Intro_Tutorial

#include "Basic.hpp"


namespace SDK::Params
{

// Function A008_Warg_Intro_Tutorial.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2 final
{
public:
	class ABP_InquisitorBG2_Olen_C*               BP_InquisitorBG2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2, BP_InquisitorBG2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2::BP_InquisitorBG2' has a wrong offset!");

// Function A008_Warg_Intro_Tutorial.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class ABP_InquisitorBG1_Kezka_C*              BP_InquisitorBG1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, BP_InquisitorBG1) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::BP_InquisitorBG1' has a wrong offset!");

// Function A008_Warg_Intro_Tutorial.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class ABP_Inquisitor_C*                       BP_Inquisitor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, BP_Inquisitor) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::BP_Inquisitor' has a wrong offset!");

// Function A008_Warg_Intro_Tutorial.SequenceDirector_C.BP_Inquisitor_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Inquisitor_Event_0 final
{
public:
	class ABP_Inquisitor_C*                       BP_Inquisitor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Inquisitor_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Inquisitor_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Inquisitor_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Inquisitor_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Inquisitor_Event_0, BP_Inquisitor) == 0x000000, "Member 'SequenceDirector_C_BP_Inquisitor_Event_0::BP_Inquisitor' has a wrong offset!");

// Function A008_Warg_Intro_Tutorial.SequenceDirector_C.BP_InquisitorBG1_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_InquisitorBG1_Event_0 final
{
public:
	class ABP_InquisitorBG1_Kezka_C*              BP_InquisitorBG1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_InquisitorBG1_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_InquisitorBG1_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_InquisitorBG1_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_InquisitorBG1_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_InquisitorBG1_Event_0, BP_InquisitorBG1) == 0x000000, "Member 'SequenceDirector_C_BP_InquisitorBG1_Event_0::BP_InquisitorBG1' has a wrong offset!");

// Function A008_Warg_Intro_Tutorial.SequenceDirector_C.BP_InquisitorBG2_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_InquisitorBG2_Event_0 final
{
public:
	class ABP_InquisitorBG2_Olen_C*               BP_InquisitorBG2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_InquisitorBG2_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_InquisitorBG2_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_InquisitorBG2_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_InquisitorBG2_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_InquisitorBG2_Event_0, BP_InquisitorBG2) == 0x000000, "Member 'SequenceDirector_C_BP_InquisitorBG2_Event_0::BP_InquisitorBG2' has a wrong offset!");

// Function A008_Warg_Intro_Tutorial.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x0068 (0x0068 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_InquisitorBG2_Olen_C*               K2Node_CustomEvent_BP_InquisitorBG2;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Inquisitor_C*                       K2Node_CustomEvent_BP_Inquisitor;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstanceBase*                      K2Node_DynamicCast_AsAnim_Instance_Base;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstanceBase*                      K2Node_DynamicCast_AsAnim_Instance_Base_1;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_InquisitorBG1_Kezka_C*              K2Node_CustomEvent_BP_InquisitorBG1;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_2;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstanceBase*                      K2Node_DynamicCast_AsAnim_Instance_Base_2;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000068, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_InquisitorBG2) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_InquisitorBG2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Inquisitor) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Inquisitor' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_AsAnim_Instance_Base) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_AsAnim_Instance_Base' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_AsAnim_Instance_Base_1) == 0x000038, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_AsAnim_Instance_Base_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_InquisitorBG1) == 0x000048, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_InquisitorBG1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetAnimInstance_ReturnValue_2) == 0x000050, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetAnimInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_AsAnim_Instance_Base_2) == 0x000058, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_AsAnim_Instance_Base_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

}

