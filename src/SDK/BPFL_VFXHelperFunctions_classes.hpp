#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_VFXHelperFunctions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Niagara_structs.hpp"
#include "E_DecalRandomRotations_structs.hpp"
#include "E_SurfaceEffectType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_VFXHelperFunctions.BPFL_VFXHelperFunctions_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_VFXHelperFunctions_C final : public UBlueprintFunctionLibrary
{
public:
	static void AttachXYZArrows(class USceneComponent* Component, float Arrow_Size, float Arrow_Length, const struct FVector& OriginOffset, class UObject* __WorldContext);
	static void SpawnArrow(class USceneComponent* Component, const struct FVector& Offset, class UObject* __WorldContext, class UArrowComponent** Arrow);
	static void ArrowSetup(class UArrowComponent* Arrow, float ArrowSize, float ArrowLength, const struct FRotator& Rotation, const struct FLinearColor& Color, class UObject* __WorldContext);
	static void SpawnSystemWithFixedFacing(class ACharacterBase* Target, const struct FVector& OriginOffset, class UNiagaraSystem* SystemTemplate, ENCPoolMethod PoolingMethod, bool Debug_, class UObject* __WorldContext, class UNiagaraComponent** System);
	static class UNiagaraComponent* SpawnSurfaceTypeSystemAtLocation(const struct FVector& SurfaceLocation, const struct FTransform& VFXTransform, E_SurfaceEffectType EffectType, float ColorScaleMultiply, class UObject* __WorldContext, bool* bSuccess);
	static void SpawnUniformSizedDecals(class ACharacterBase* Target, class UMaterialInterface* DecalMaterial, float DecalSizeMin, float DecalSizeMax, int32 DecalAmount, const struct FVector& LocationMin, const struct FVector& LocationMax, const struct FVector& LocationOffset, float DecalLifetime, float FadeInDuration, float FadeOutDuration, bool Debug, const struct FRotator& OverrideRotation, E_DecalRandomRotations RandomRotate, int32 SortOrder, class UObject* __WorldContext);
	static void GetAbilityComponent(class ACharacterBase* Character, class FName AbilityName, class UClass* AbilityComponent, class UObject* __WorldContext, class UAbilityComponent** OutComponent);
	static void PlayTempDissolve(class AMandragoraGameMode* ManGameMode, class AEnemyCharacter* EnemyCharacter, class UObject* __WorldContext, class ABP_TEMP_Dissolve_C** VE);
	static void TurnOffEffectsWithTag(class ACharacterBase* Character, class FName Tag, class UObject* __WorldContext);
	static void GetChaoticEnergiesDefaults(class UObject* __WorldContext, struct FLinearColor* CE_Color, float* CE_NormalCheck);
	static void SetMaterialTimer(class UMeshComponent* MeshComponent, float LifeTime, class UObject* __WorldContext);
	static void CacheDynamicMaterials(class UMeshComponent* Target, class UObject* __WorldContext, TArray<class UMaterialInstanceDynamic*>* DynamicMaterials);
	static void SetScalarParamaterOnMaterialLayer(TArray<class UMaterialInstanceDynamic*>& Target, EMaterialParameterAssociation Association, class FName ParameterName, class UMaterialFunctionInterface* LayerFunction, float Value, class UObject* __WorldContext);
	static void SetVectorParamaterOnMaterialLayer(TArray<class UMaterialInstanceDynamic*>& Target, EMaterialParameterAssociation Association, class FName ParameterName, class UMaterialFunctionInterface* LayerFunction, const struct FLinearColor& Value, class UObject* __WorldContext);
	static void WorldPositionToScreenUV(const struct FVector& WorldPosition, class UObject* __WorldContext, float* U, float* V);
	static void PlayRadialBlurAtLocation(const struct FVector& WorldPosition, float ForTime, float BlurRadius, float BlurStrength, class UObject* __WorldContext);
	static void GetSurfaceByWorldLocation(const struct FVector& WorldPosition, class UObject* __WorldContext, class ASurfaceTypeVolume** SurfaceType, class FString* Name_0);
	static void EaseOutCirc(float In, class UObject* __WorldContext, float* Out);
	static void EaseOutCubic(float In, class UObject* __WorldContext, float* Out);
	static void GetWorldPositionAsScreenUV(const struct FVector& WorldPosition, class UObject* __WorldContext, float* U, float* V);
	static class UDecalComponent* SpawnUniformSizedDecalsInActor(class AActor* Actor, class UMaterialInterface* DecalMaterial, float DecalSizeMin, float DecalSizeMax, int32 DecalAmount, const struct FVector& LocationMin, const struct FVector& LocationMax, const struct FVector& LocationOffset, float DecalLifetime, float FadeInDuration, float FadeOutDuration, bool Debug, const struct FRotator& OverrideRotation, E_DecalRandomRotations RandomRotate, int32 SortOrder, class UObject* __WorldContext);
	static class UDecalComponent* SpawnWorldDecals(class UMaterialInterface* DecalMaterial, float DecalSize, const struct FVector& Location, float DecalLifetime, float FadeInDuration, float FadeOutDuration, bool Debug, const struct FRotator& OverrideRotation, E_DecalRandomRotations RandomRotate, class UObject* __WorldContext, class UMaterialInstanceDynamic** DynamicMaterial);
	static void SetMaterialTimerOnMaterial(class UMaterialInstanceDynamic* DynamicMaterial, float LifeTime, class UObject* __WorldContext);
	static void OverrideCharacterMaterial(class USkeletalMeshComponent* SkeletalMeshComponent, class UMaterialInstanceDynamic* OverrideMaterial, class UObject* __WorldContext, TArray<class UMaterialInstanceDynamic*>* PreviousMaterials, TArray<class UMaterialInstanceConstant*>* PreviousMaterialsConstant, bool* bSuccess);
	static void EntropyEnemyDie(class UFXSystemComponent* EntropyEnemyDie_0, class UFXSystemComponent* EntropyLiving, class AEnemyCharacter* EnemyCharacter, class UObject* __WorldContext);
	static void GetAbilityComponentByClass(class ACharacterBase* Character, class UClass* AbilityClass, class UClass* AbilityComponent, class UObject* __WorldContext, class UAbilityComponent** OutComponent);
	static void GetSceneComponentByName(TArray<class USceneComponent*>& Components, class FName ComponentName, class UObject* __WorldContext, class USceneComponent** SceneComponent, bool* Found);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_VFXHelperFunctions_C">();
	}
	static class UBPFL_VFXHelperFunctions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_VFXHelperFunctions_C>();
	}
};
static_assert(alignof(UBPFL_VFXHelperFunctions_C) == 0x000008, "Wrong alignment on UBPFL_VFXHelperFunctions_C");
static_assert(sizeof(UBPFL_VFXHelperFunctions_C) == 0x000028, "Wrong size on UBPFL_VFXHelperFunctions_C");

}

