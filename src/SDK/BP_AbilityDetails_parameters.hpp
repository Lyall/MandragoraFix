#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AbilityDetails

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_AbilityDetails.BP_AbilityDetails_C.ExecuteUbergraph_BP_AbilityDetails
// 0x0044 (0x0044 - 0x0000)
struct BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails) == 0x000004, "Wrong alignment on BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails");
static_assert(sizeof(BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails) == 0x000044, "Wrong size on BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails");
static_assert(offsetof(BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails, EntryPoint) == 0x000000, "Member 'BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_AbilityDetails_C_ExecuteUbergraph_BP_AbilityDetails::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function BP_AbilityDetails.BP_AbilityDetails_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_AbilityDetails_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityDetails_C_Tick) == 0x000004, "Wrong alignment on BP_AbilityDetails_C_Tick");
static_assert(sizeof(BP_AbilityDetails_C_Tick) == 0x00003C, "Wrong size on BP_AbilityDetails_C_Tick");
static_assert(offsetof(BP_AbilityDetails_C_Tick, MyGeometry) == 0x000000, "Member 'BP_AbilityDetails_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_AbilityDetails_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_AbilityDetails.BP_AbilityDetails_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilityDetails_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilityDetails_C_PreConstruct) == 0x000001, "Wrong alignment on BP_AbilityDetails_C_PreConstruct");
static_assert(sizeof(BP_AbilityDetails_C_PreConstruct) == 0x000001, "Wrong size on BP_AbilityDetails_C_PreConstruct");
static_assert(offsetof(BP_AbilityDetails_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_AbilityDetails_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_AbilityDetails.BP_AbilityDetails_C.UpdateDetailsPanel
// 0x00A0 (0x00A0 - 0x0000)
struct BP_AbilityDetails_C_UpdateDetailsPanel final
{
public:
	class FText                                   Param_Name_0;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Description;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   CostText;                                          // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Requirements_0;                                    // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UTexture2D*                             Icon_0;                                            // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 AbilityBaseClass;                                  // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxUpgrades;                                     // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InLearnedUpgrades;                                 // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Temp_object_Variable;                              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               K2Node_Select_Default;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityDetails_C_UpdateDetailsPanel) == 0x000008, "Wrong alignment on BP_AbilityDetails_C_UpdateDetailsPanel");
static_assert(sizeof(BP_AbilityDetails_C_UpdateDetailsPanel) == 0x0000A0, "Wrong size on BP_AbilityDetails_C_UpdateDetailsPanel");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, Param_Name_0) == 0x000000, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::Param_Name_0' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, Description) == 0x000018, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::Description' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, CostText) == 0x000030, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::CostText' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, Requirements_0) == 0x000048, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::Requirements_0' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, Icon_0) == 0x000060, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::Icon_0' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, AbilityBaseClass) == 0x000068, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::AbilityBaseClass' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, InMaxUpgrades) == 0x000070, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::InMaxUpgrades' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, InLearnedUpgrades) == 0x000074, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::InLearnedUpgrades' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, Temp_bool_Variable) == 0x000078, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, CallFunc_IsValidClass_ReturnValue) == 0x000079, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, Temp_object_Variable) == 0x000080, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000090, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_UpdateDetailsPanel, K2Node_Select_Default) == 0x000098, "Member 'BP_AbilityDetails_C_UpdateDetailsPanel::K2Node_Select_Default' has a wrong offset!");

// Function BP_AbilityDetails.BP_AbilityDetails_C.FadeIn
// 0x0008 (0x0008 - 0x0000)
struct BP_AbilityDetails_C_FadeIn final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityDetails_C_FadeIn) == 0x000008, "Wrong alignment on BP_AbilityDetails_C_FadeIn");
static_assert(sizeof(BP_AbilityDetails_C_FadeIn) == 0x000008, "Wrong size on BP_AbilityDetails_C_FadeIn");
static_assert(offsetof(BP_AbilityDetails_C_FadeIn, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_AbilityDetails_C_FadeIn::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_AbilityDetails.BP_AbilityDetails_C.FadeOut
// 0x0008 (0x0008 - 0x0000)
struct BP_AbilityDetails_C_FadeOut final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityDetails_C_FadeOut) == 0x000008, "Wrong alignment on BP_AbilityDetails_C_FadeOut");
static_assert(sizeof(BP_AbilityDetails_C_FadeOut) == 0x000008, "Wrong size on BP_AbilityDetails_C_FadeOut");
static_assert(offsetof(BP_AbilityDetails_C_FadeOut, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_AbilityDetails_C_FadeOut::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_AbilityDetails.BP_AbilityDetails_C.SetIconVisible
// 0x0005 (0x0005 - 0x0000)
struct BP_AbilityDetails_C_SetIconVisible final
{
public:
	bool                                          InIconVisible;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityDetails_C_SetIconVisible) == 0x000001, "Wrong alignment on BP_AbilityDetails_C_SetIconVisible");
static_assert(sizeof(BP_AbilityDetails_C_SetIconVisible) == 0x000005, "Wrong size on BP_AbilityDetails_C_SetIconVisible");
static_assert(offsetof(BP_AbilityDetails_C_SetIconVisible, InIconVisible) == 0x000000, "Member 'BP_AbilityDetails_C_SetIconVisible::InIconVisible' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetIconVisible, Temp_bool_Variable) == 0x000001, "Member 'BP_AbilityDetails_C_SetIconVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetIconVisible, Temp_byte_Variable) == 0x000002, "Member 'BP_AbilityDetails_C_SetIconVisible::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetIconVisible, Temp_byte_Variable_1) == 0x000003, "Member 'BP_AbilityDetails_C_SetIconVisible::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetIconVisible, K2Node_Select_Default) == 0x000004, "Member 'BP_AbilityDetails_C_SetIconVisible::K2Node_Select_Default' has a wrong offset!");

// Function BP_AbilityDetails.BP_AbilityDetails_C.IsValidItem
// 0x0010 (0x0010 - 0x0000)
struct BP_AbilityDetails_C_IsValidItem final
{
public:
	class UManItemSlotBase*                       ManItemSlotBase;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilityDetails_C_IsValidItem) == 0x000008, "Wrong alignment on BP_AbilityDetails_C_IsValidItem");
static_assert(sizeof(BP_AbilityDetails_C_IsValidItem) == 0x000010, "Wrong size on BP_AbilityDetails_C_IsValidItem");
static_assert(offsetof(BP_AbilityDetails_C_IsValidItem, ManItemSlotBase) == 0x000000, "Member 'BP_AbilityDetails_C_IsValidItem::ManItemSlotBase' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_IsValidItem, ReturnValue) == 0x000008, "Member 'BP_AbilityDetails_C_IsValidItem::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_IsValidItem, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_AbilityDetails_C_IsValidItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_IsValidItem, CallFunc_IsValid_ReturnValue_1) == 0x00000A, "Member 'BP_AbilityDetails_C_IsValidItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_AbilityDetails.BP_AbilityDetails_C.SetUpgrades
// 0x0188 (0x0188 - 0x0000)
struct BP_AbilityDetails_C_SetUpgrades final
{
public:
	int32                                         InMaxUpgrades;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InLearnedUpgrades;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_4;                            // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_5;                            // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_6;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_7;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_8;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_9;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_10;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_11;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_12;                           // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_13;                           // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_14;                           // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_15;                           // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_16;                           // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_17;                           // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_18;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_19;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_20;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_21;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_22;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_23;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_24;                           // 0x00DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_25;                           // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_26;                           // 0x00EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_27;                           // 0x00F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_28;                           // 0x00FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_29;                           // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_5;                               // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x012C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0134(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_2;                           // 0x013C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_3;                           // 0x0144(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_4;                           // 0x014C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15E[0x2];                                      // 0x015E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_5;                           // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 K2Node_DynamicCast_AsImage;                        // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_6;                           // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityDetails_C_SetUpgrades) == 0x000008, "Wrong alignment on BP_AbilityDetails_C_SetUpgrades");
static_assert(sizeof(BP_AbilityDetails_C_SetUpgrades) == 0x000188, "Wrong size on BP_AbilityDetails_C_SetUpgrades");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, InMaxUpgrades) == 0x000000, "Member 'BP_AbilityDetails_C_SetUpgrades::InMaxUpgrades' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, InLearnedUpgrades) == 0x000004, "Member 'BP_AbilityDetails_C_SetUpgrades::InLearnedUpgrades' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_int_Variable) == 0x000008, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable) == 0x00000C, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_1) == 0x000014, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_2) == 0x00001C, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_3) == 0x000024, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_4) == 0x00002C, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_5) == 0x000034, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_int_Variable_1) == 0x00003C, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_6) == 0x000040, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_7) == 0x000048, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_8) == 0x000050, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_9) == 0x000058, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_10) == 0x000060, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_11) == 0x000068, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_int_Variable_2) == 0x000070, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_12) == 0x000074, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_13) == 0x00007C, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_14) == 0x000084, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_15) == 0x00008C, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_16) == 0x000094, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_17) == 0x00009C, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_int_Variable_3) == 0x0000A4, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_18) == 0x0000A8, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_19) == 0x0000B0, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_20) == 0x0000B8, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_21) == 0x0000C0, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_22) == 0x0000C8, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_23) == 0x0000D0, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_int_Variable_4) == 0x0000D8, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_24) == 0x0000DC, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_25) == 0x0000E4, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_26) == 0x0000EC, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_27) == 0x0000F4, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_28) == 0x0000FC, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_struct_Variable_29) == 0x000104, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_struct_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_bool_Variable) == 0x00010C, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_object_Variable) == 0x000110, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_object_Variable_1) == 0x000118, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_bool_Variable_1) == 0x000120, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_byte_Variable) == 0x000121, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_byte_Variable_1) == 0x000122, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, Temp_int_Variable_5) == 0x000124, "Member 'BP_AbilityDetails_C_SetUpgrades::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, CallFunc_Add_IntInt_ReturnValue) == 0x000128, "Member 'BP_AbilityDetails_C_SetUpgrades::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, K2Node_Select_Default) == 0x00012C, "Member 'BP_AbilityDetails_C_SetUpgrades::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, K2Node_Select_Default_1) == 0x000134, "Member 'BP_AbilityDetails_C_SetUpgrades::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, K2Node_Select_Default_2) == 0x00013C, "Member 'BP_AbilityDetails_C_SetUpgrades::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, K2Node_Select_Default_3) == 0x000144, "Member 'BP_AbilityDetails_C_SetUpgrades::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, K2Node_Select_Default_4) == 0x00014C, "Member 'BP_AbilityDetails_C_SetUpgrades::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, CallFunc_GetChildrenCount_ReturnValue) == 0x000154, "Member 'BP_AbilityDetails_C_SetUpgrades::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, CallFunc_Subtract_IntInt_ReturnValue) == 0x000158, "Member 'BP_AbilityDetails_C_SetUpgrades::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, CallFunc_Greater_IntInt_ReturnValue) == 0x00015C, "Member 'BP_AbilityDetails_C_SetUpgrades::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00015D, "Member 'BP_AbilityDetails_C_SetUpgrades::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, K2Node_Select_Default_5) == 0x000160, "Member 'BP_AbilityDetails_C_SetUpgrades::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000168, "Member 'BP_AbilityDetails_C_SetUpgrades::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, CallFunc_GetChildAt_ReturnValue) == 0x000170, "Member 'BP_AbilityDetails_C_SetUpgrades::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, K2Node_DynamicCast_AsImage) == 0x000178, "Member 'BP_AbilityDetails_C_SetUpgrades::K2Node_DynamicCast_AsImage' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, K2Node_DynamicCast_bSuccess) == 0x000180, "Member 'BP_AbilityDetails_C_SetUpgrades::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_SetUpgrades, K2Node_Select_Default_6) == 0x000181, "Member 'BP_AbilityDetails_C_SetUpgrades::K2Node_Select_Default_6' has a wrong offset!");

// Function BP_AbilityDetails.BP_AbilityDetails_C.ToggleSmallScreen
// 0x00E8 (0x00E8 - 0x0000)
struct BP_AbilityDetails_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             Temp_object_Variable_2;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_3;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_Select_Default;                             // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDataTable*                             K2Node_Select_Default_1;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             K2Node_Select_Default_2;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_3;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0090(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityDetails_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_AbilityDetails_C_ToggleSmallScreen");
static_assert(sizeof(BP_AbilityDetails_C_ToggleSmallScreen) == 0x0000E8, "Wrong size on BP_AbilityDetails_C_ToggleSmallScreen");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, K2Node_MakeStruct_Margin) == 0x000004, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, K2Node_MakeStruct_Margin_1) == 0x000014, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x000024, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, Temp_object_Variable) == 0x000028, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, Temp_object_Variable_1) == 0x000030, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, Temp_bool_Variable_2) == 0x000038, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, Temp_object_Variable_2) == 0x000040, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, Temp_object_Variable_3) == 0x000048, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, Temp_bool_Variable_3) == 0x000050, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, Temp_int_Variable) == 0x000054, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, Temp_int_Variable_1) == 0x000058, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, CallFunc_SlotAsVerticalBoxSlot_ReturnValue) == 0x000060, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::CallFunc_SlotAsVerticalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, K2Node_Select_Default) == 0x000068, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x000078, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, K2Node_Select_Default_2) == 0x000080, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, K2Node_Select_Default_3) == 0x000088, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_AbilityDetails_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo) == 0x000090, "Member 'BP_AbilityDetails_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

}

