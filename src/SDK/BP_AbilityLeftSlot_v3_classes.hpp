#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AbilityLeftSlot_v3

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_classes.hpp"
#include "UMG_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_AbilityLeftSlot_v3.BP_AbilityLeftSlot_v3_C
// 0x0100 (0x03C8 - 0x02C8)
class UBP_AbilityLeftSlot_v3_C final : public UAbilitySlotUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       EquipStateAnim;                                    // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HoverAnim;                                         // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HighlightAnimLocked;                               // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HighlightAnim;                                     // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Bg;                                                // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                ButtonFrame;                                       // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_InteractButton_Normal_C*            ControllerKey;                                     // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame_CrossHighlight;                              // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame_EquipState;                                  // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame_Focused;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame_Highlighted;                                 // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame_Hovered;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame_Normal;                                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IconImage;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IconLocked;                                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LockeLevelText;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnUpdate;                                          // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UTexture2D*                             BPIcon;                                            // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsHighlighted;                                     // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UBP_AbilityLeftSlot_v3_C* ItemReference)> OnFocus;                                           // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsSelected;                                        // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LockedLevel;                                       // 0x0388(0x0018)(Edit, BlueprintVisible)
	bool                                          IsSwapped;                                         // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCrossHighlighted;                                // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShowLockedLevel;                                   // 0x03A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsEquipState;                                      // 0x03A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             FrameTextureNormal;                                // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameTextureHighlight;                             // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameTextureSelection;                             // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameTextureEquip;                                 // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AbilityLeftSlot_v3(int32 EntryPoint);
	void OnHighlighted(bool bHighlighted, bool bAnimate);
	void OnUnfocused(bool bAnimate);
	void OnFocused(bool bAnimate);
	void OnToggleEquipState(bool bEquipState);
	void BndEvt__ButtonFrame_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__ButtonFrame_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature();
	void OnSetSlot(const class UTexture2D* InIcon, bool bGhostIcon);
	void OnToggleSwapped(bool bSwapped);
	void OnToggleSelected(bool bSelected, bool bPlayAnim);
	void OnToggleCrossHighlight(bool bCrossHighlight);
	void OnToggleLocked(bool bLocked, const class FText& LockedLevel_0);
	void OnToggleActive(bool bActive);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void PreConstruct(bool IsDesignTime);
	void ToggleActive(bool InIsActive);
	void BP_Set_Slot(class UTexture2D* InIcon, bool InGhostIcon);
	void SetIcon(class UTexture2D* InIcon, bool InGhostIcon);
	void SetSelected(bool PlayAnim);
	void SetUnselected(bool PlayAnim);
	void ToggleLocked(bool InIsLocked, const class FText& InLockedLevel);
	void ToggleSelected(bool InIsSelected, bool PlayAnim);
	void SetPassiveSkill(bool InIsPassiveSkill);
	void ToggleSwapped(bool inIsSwapped);
	void ToggleCrossHighlight(bool inIsCrossHighlighted);
	void ToggleEquipState(bool InEquipState);
	void InitTextures();
	void SetHighlighted(bool Highlighted, bool PlayAnim);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AbilityLeftSlot_v3_C">();
	}
	static class UBP_AbilityLeftSlot_v3_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AbilityLeftSlot_v3_C>();
	}
};
static_assert(alignof(UBP_AbilityLeftSlot_v3_C) == 0x000008, "Wrong alignment on UBP_AbilityLeftSlot_v3_C");
static_assert(sizeof(UBP_AbilityLeftSlot_v3_C) == 0x0003C8, "Wrong size on UBP_AbilityLeftSlot_v3_C");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, UberGraphFrame) == 0x0002C8, "Member 'UBP_AbilityLeftSlot_v3_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, EquipStateAnim) == 0x0002D0, "Member 'UBP_AbilityLeftSlot_v3_C::EquipStateAnim' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, HoverAnim) == 0x0002D8, "Member 'UBP_AbilityLeftSlot_v3_C::HoverAnim' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, HighlightAnimLocked) == 0x0002E0, "Member 'UBP_AbilityLeftSlot_v3_C::HighlightAnimLocked' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, HighlightAnim) == 0x0002E8, "Member 'UBP_AbilityLeftSlot_v3_C::HighlightAnim' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, Bg) == 0x0002F0, "Member 'UBP_AbilityLeftSlot_v3_C::Bg' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, ButtonFrame) == 0x0002F8, "Member 'UBP_AbilityLeftSlot_v3_C::ButtonFrame' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, ControllerKey) == 0x000300, "Member 'UBP_AbilityLeftSlot_v3_C::ControllerKey' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, Frame_CrossHighlight) == 0x000308, "Member 'UBP_AbilityLeftSlot_v3_C::Frame_CrossHighlight' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, Frame_EquipState) == 0x000310, "Member 'UBP_AbilityLeftSlot_v3_C::Frame_EquipState' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, Frame_Focused) == 0x000318, "Member 'UBP_AbilityLeftSlot_v3_C::Frame_Focused' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, Frame_Highlighted) == 0x000320, "Member 'UBP_AbilityLeftSlot_v3_C::Frame_Highlighted' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, Frame_Hovered) == 0x000328, "Member 'UBP_AbilityLeftSlot_v3_C::Frame_Hovered' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, Frame_Normal) == 0x000330, "Member 'UBP_AbilityLeftSlot_v3_C::Frame_Normal' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, IconImage) == 0x000338, "Member 'UBP_AbilityLeftSlot_v3_C::IconImage' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, IconLocked) == 0x000340, "Member 'UBP_AbilityLeftSlot_v3_C::IconLocked' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, LockeLevelText) == 0x000348, "Member 'UBP_AbilityLeftSlot_v3_C::LockeLevelText' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, OnUpdate) == 0x000350, "Member 'UBP_AbilityLeftSlot_v3_C::OnUpdate' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, BPIcon) == 0x000360, "Member 'UBP_AbilityLeftSlot_v3_C::BPIcon' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, IsHighlighted) == 0x000368, "Member 'UBP_AbilityLeftSlot_v3_C::IsHighlighted' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, OnFocus) == 0x000370, "Member 'UBP_AbilityLeftSlot_v3_C::OnFocus' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, IsSelected) == 0x000380, "Member 'UBP_AbilityLeftSlot_v3_C::IsSelected' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, LockedLevel) == 0x000388, "Member 'UBP_AbilityLeftSlot_v3_C::LockedLevel' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, IsSwapped) == 0x0003A0, "Member 'UBP_AbilityLeftSlot_v3_C::IsSwapped' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, IsCrossHighlighted) == 0x0003A1, "Member 'UBP_AbilityLeftSlot_v3_C::IsCrossHighlighted' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, ShowLockedLevel) == 0x0003A2, "Member 'UBP_AbilityLeftSlot_v3_C::ShowLockedLevel' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, IsEquipState) == 0x0003A3, "Member 'UBP_AbilityLeftSlot_v3_C::IsEquipState' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, FrameTextureNormal) == 0x0003A8, "Member 'UBP_AbilityLeftSlot_v3_C::FrameTextureNormal' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, FrameTextureHighlight) == 0x0003B0, "Member 'UBP_AbilityLeftSlot_v3_C::FrameTextureHighlight' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, FrameTextureSelection) == 0x0003B8, "Member 'UBP_AbilityLeftSlot_v3_C::FrameTextureSelection' has a wrong offset!");
static_assert(offsetof(UBP_AbilityLeftSlot_v3_C, FrameTextureEquip) == 0x0003C0, "Member 'UBP_AbilityLeftSlot_v3_C::FrameTextureEquip' has a wrong offset!");

}

