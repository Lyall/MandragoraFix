#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AbilitySlot_v3

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.ExecuteUbergraph_BP_AbilitySlot_v3
// 0x00A0 (0x00A0 - 0x0000)
struct BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bActive;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bLocked;                              // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_LockedLevel;                          // 0x0048(0x0018)(ConstParm)
	bool                                          K2Node_Event_bCrossHighlight;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bSelected;                            // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPlayAnim_1;                          // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bSwapped;                             // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture2D*                       K2Node_Event_InIcon;                               // 0x0068(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bGhostIcon;                           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEquipped;                            // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bEquipState;                          // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAbilitySet1Contain;                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAbilitySet2Contain;                  // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bUnknown;                             // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate_2;                           // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_Event_InMaxUpgrades;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InLearnedUpgrades;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPlayAnim;                            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bHighlighted;                         // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3");
static_assert(sizeof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3) == 0x0000A0, "Wrong size on BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, EntryPoint) == 0x000000, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bActive) == 0x000044, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bActive' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bLocked) == 0x000045, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bLocked' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_LockedLevel) == 0x000048, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_LockedLevel' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bCrossHighlight) == 0x000060, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bCrossHighlight' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bSelected) == 0x000061, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bSelected' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bPlayAnim_1) == 0x000062, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bPlayAnim_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bSwapped) == 0x000063, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bSwapped' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_InIcon) == 0x000068, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_InIcon' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bGhostIcon) == 0x000070, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bGhostIcon' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, CallFunc_PlayAnimation_ReturnValue) == 0x000078, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, CallFunc_PlayAnimation_ReturnValue_1) == 0x000080, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bEquipped) == 0x000088, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bEquipped' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bEquipState) == 0x000089, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bEquipState' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bAbilitySet1Contain) == 0x00008A, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bAbilitySet1Contain' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bAbilitySet2Contain) == 0x00008B, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bAbilitySet2Contain' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bUnknown) == 0x00008C, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bUnknown' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bAnimate_2) == 0x00008D, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bAnimate_2' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bAnimate_1) == 0x00008E, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, CallFunc_IsAnimationPlaying_ReturnValue) == 0x00008F, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_InMaxUpgrades) == 0x000090, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_InMaxUpgrades' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_InLearnedUpgrades) == 0x000094, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_InLearnedUpgrades' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bPlayAnim) == 0x000098, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bPlayAnim' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bHighlighted) == 0x000099, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bHighlighted' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3, K2Node_Event_bAnimate) == 0x00009A, "Member 'BP_AbilitySlot_v3_C_ExecuteUbergraph_BP_AbilitySlot_v3::K2Node_Event_bAnimate' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnHighlighted
// 0x0002 (0x0002 - 0x0000)
struct BP_AbilitySlot_v3_C_OnHighlighted final
{
public:
	bool                                          bHighlighted;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnHighlighted) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnHighlighted");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnHighlighted) == 0x000002, "Wrong size on BP_AbilitySlot_v3_C_OnHighlighted");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnHighlighted, bHighlighted) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnHighlighted::bHighlighted' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnHighlighted, bAnimate) == 0x000001, "Member 'BP_AbilitySlot_v3_C_OnHighlighted::bAnimate' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnPlayLearnAbilityAnim
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_OnPlayLearnAbilityAnim final
{
public:
	bool                                          bPlayAnim;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnPlayLearnAbilityAnim) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnPlayLearnAbilityAnim");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnPlayLearnAbilityAnim) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_OnPlayLearnAbilityAnim");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnPlayLearnAbilityAnim, bPlayAnim) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnPlayLearnAbilityAnim::bPlayAnim' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnSetUpgrades
// 0x0008 (0x0008 - 0x0000)
struct BP_AbilitySlot_v3_C_OnSetUpgrades final
{
public:
	int32                                         InMaxUpgrades;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InLearnedUpgrades;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnSetUpgrades) == 0x000004, "Wrong alignment on BP_AbilitySlot_v3_C_OnSetUpgrades");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnSetUpgrades) == 0x000008, "Wrong size on BP_AbilitySlot_v3_C_OnSetUpgrades");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnSetUpgrades, InMaxUpgrades) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnSetUpgrades::InMaxUpgrades' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnSetUpgrades, InLearnedUpgrades) == 0x000004, "Member 'BP_AbilitySlot_v3_C_OnSetUpgrades::InLearnedUpgrades' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnUnfocused
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_OnUnfocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnUnfocused) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnUnfocused");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnUnfocused) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_OnUnfocused");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnUnfocused, bAnimate) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnUnfocused::bAnimate' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnFocused
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_OnFocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnFocused) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnFocused");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnFocused) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_OnFocused");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnFocused, bAnimate) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnFocused::bAnimate' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnToggleUnknown
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_OnToggleUnknown final
{
public:
	bool                                          bUnknown;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnToggleUnknown) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnToggleUnknown");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnToggleUnknown) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_OnToggleUnknown");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnToggleUnknown, bUnknown) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnToggleUnknown::bUnknown' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnSetEquips
// 0x0002 (0x0002 - 0x0000)
struct BP_AbilitySlot_v3_C_OnSetEquips final
{
public:
	bool                                          bAbilitySet1Contain;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAbilitySet2Contain;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnSetEquips) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnSetEquips");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnSetEquips) == 0x000002, "Wrong size on BP_AbilitySlot_v3_C_OnSetEquips");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnSetEquips, bAbilitySet1Contain) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnSetEquips::bAbilitySet1Contain' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnSetEquips, bAbilitySet2Contain) == 0x000001, "Member 'BP_AbilitySlot_v3_C_OnSetEquips::bAbilitySet2Contain' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnToggleEquipState
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_OnToggleEquipState final
{
public:
	bool                                          bEquipState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnToggleEquipState) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnToggleEquipState");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnToggleEquipState) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_OnToggleEquipState");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnToggleEquipState, bEquipState) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnToggleEquipState::bEquipState' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnToggleEquipped
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_OnToggleEquipped final
{
public:
	bool                                          bEquipped;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnToggleEquipped) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnToggleEquipped");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnToggleEquipped) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_OnToggleEquipped");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnToggleEquipped, bEquipped) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnToggleEquipped::bEquipped' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnSetSlot
// 0x0010 (0x0010 - 0x0000)
struct BP_AbilitySlot_v3_C_OnSetSlot final
{
public:
	const class UTexture2D*                       InIcon;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGhostIcon;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnSetSlot) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_OnSetSlot");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnSetSlot) == 0x000010, "Wrong size on BP_AbilitySlot_v3_C_OnSetSlot");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnSetSlot, InIcon) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnSetSlot::InIcon' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnSetSlot, bGhostIcon) == 0x000008, "Member 'BP_AbilitySlot_v3_C_OnSetSlot::bGhostIcon' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnToggleSwapped
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_OnToggleSwapped final
{
public:
	bool                                          bSwapped;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnToggleSwapped) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnToggleSwapped");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnToggleSwapped) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_OnToggleSwapped");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnToggleSwapped, bSwapped) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnToggleSwapped::bSwapped' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnToggleSelected
// 0x0002 (0x0002 - 0x0000)
struct BP_AbilitySlot_v3_C_OnToggleSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPlayAnim;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnToggleSelected) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnToggleSelected");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnToggleSelected) == 0x000002, "Wrong size on BP_AbilitySlot_v3_C_OnToggleSelected");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnToggleSelected, bSelected) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnToggleSelected::bSelected' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnToggleSelected, bPlayAnim) == 0x000001, "Member 'BP_AbilitySlot_v3_C_OnToggleSelected::bPlayAnim' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnToggleCrossHighlight
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_OnToggleCrossHighlight final
{
public:
	bool                                          bCrossHighlight;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnToggleCrossHighlight) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnToggleCrossHighlight");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnToggleCrossHighlight) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_OnToggleCrossHighlight");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnToggleCrossHighlight, bCrossHighlight) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnToggleCrossHighlight::bCrossHighlight' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnToggleLocked
// 0x0020 (0x0020 - 0x0000)
struct BP_AbilitySlot_v3_C_OnToggleLocked final
{
public:
	bool                                          bLocked;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LockedLevel_0;                                     // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnToggleLocked) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_OnToggleLocked");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnToggleLocked) == 0x000020, "Wrong size on BP_AbilitySlot_v3_C_OnToggleLocked");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnToggleLocked, bLocked) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnToggleLocked::bLocked' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnToggleLocked, LockedLevel_0) == 0x000008, "Member 'BP_AbilitySlot_v3_C_OnToggleLocked::LockedLevel_0' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.OnToggleActive
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_OnToggleActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_OnToggleActive) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_OnToggleActive");
static_assert(sizeof(BP_AbilitySlot_v3_C_OnToggleActive) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_OnToggleActive");
static_assert(offsetof(BP_AbilitySlot_v3_C_OnToggleActive, bActive) == 0x000000, "Member 'BP_AbilitySlot_v3_C_OnToggleActive::bActive' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_AbilitySlot_v3_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_Tick) == 0x000004, "Wrong alignment on BP_AbilitySlot_v3_C_Tick");
static_assert(sizeof(BP_AbilitySlot_v3_C_Tick) == 0x00003C, "Wrong size on BP_AbilitySlot_v3_C_Tick");
static_assert(offsetof(BP_AbilitySlot_v3_C_Tick, MyGeometry) == 0x000000, "Member 'BP_AbilitySlot_v3_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_AbilitySlot_v3_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_PreConstruct) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_PreConstruct");
static_assert(sizeof(BP_AbilitySlot_v3_C_PreConstruct) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_PreConstruct");
static_assert(offsetof(BP_AbilitySlot_v3_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_AbilitySlot_v3_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.ToggleActive
// 0x0068 (0x0068 - 0x0000)
struct BP_AbilitySlot_v3_C_ToggleActive final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_ToggleActive) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_ToggleActive");
static_assert(sizeof(BP_AbilitySlot_v3_C_ToggleActive) == 0x000068, "Wrong size on BP_AbilitySlot_v3_C_ToggleActive");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, InIsActive) == 0x000000, "Member 'BP_AbilitySlot_v3_C_ToggleActive::InIsActive' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, Temp_bool_Variable) == 0x000001, "Member 'BP_AbilitySlot_v3_C_ToggleActive::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, Temp_float_Variable) == 0x000004, "Member 'BP_AbilitySlot_v3_C_ToggleActive::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, Temp_float_Variable_1) == 0x000008, "Member 'BP_AbilitySlot_v3_C_ToggleActive::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_AbilitySlot_v3_C_ToggleActive::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, Temp_object_Variable) == 0x000010, "Member 'BP_AbilitySlot_v3_C_ToggleActive::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, Temp_object_Variable_1) == 0x000018, "Member 'BP_AbilitySlot_v3_C_ToggleActive::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, Temp_bool_Variable_2) == 0x000020, "Member 'BP_AbilitySlot_v3_C_ToggleActive::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, Temp_struct_Variable) == 0x000024, "Member 'BP_AbilitySlot_v3_C_ToggleActive::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, Temp_struct_Variable_1) == 0x000034, "Member 'BP_AbilitySlot_v3_C_ToggleActive::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, K2Node_Select_Default) == 0x000044, "Member 'BP_AbilitySlot_v3_C_ToggleActive::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, K2Node_Select_Default_1) == 0x000054, "Member 'BP_AbilitySlot_v3_C_ToggleActive::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000058, "Member 'BP_AbilitySlot_v3_C_ToggleActive::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleActive, K2Node_Select_Default_2) == 0x000060, "Member 'BP_AbilitySlot_v3_C_ToggleActive::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.BP Set Slot
// 0x0008 (0x0008 - 0x0000)
struct BP_AbilitySlot_v3_C_BP_Set_Slot final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_BP_Set_Slot) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_BP_Set_Slot");
static_assert(sizeof(BP_AbilitySlot_v3_C_BP_Set_Slot) == 0x000008, "Wrong size on BP_AbilitySlot_v3_C_BP_Set_Slot");
static_assert(offsetof(BP_AbilitySlot_v3_C_BP_Set_Slot, InIcon) == 0x000000, "Member 'BP_AbilitySlot_v3_C_BP_Set_Slot::InIcon' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.SetIcon
// 0x0020 (0x0020 - 0x0000)
struct BP_AbilitySlot_v3_C_SetIcon final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_SetIcon) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_SetIcon");
static_assert(sizeof(BP_AbilitySlot_v3_C_SetIcon) == 0x000020, "Wrong size on BP_AbilitySlot_v3_C_SetIcon");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetIcon, InIcon) == 0x000000, "Member 'BP_AbilitySlot_v3_C_SetIcon::InIcon' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetIcon, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BP_AbilitySlot_v3_C_SetIcon::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetIcon, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000010, "Member 'BP_AbilitySlot_v3_C_SetIcon::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetIcon, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_AbilitySlot_v3_C_SetIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.SetSelected
// 0x0010 (0x0010 - 0x0000)
struct BP_AbilitySlot_v3_C_SetSelected final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_SetSelected) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_SetSelected");
static_assert(sizeof(BP_AbilitySlot_v3_C_SetSelected) == 0x000010, "Wrong size on BP_AbilitySlot_v3_C_SetSelected");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetSelected, PlayAnim) == 0x000000, "Member 'BP_AbilitySlot_v3_C_SetSelected::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetSelected, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_AbilitySlot_v3_C_SetSelected::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.SetUnselected
// 0x0018 (0x0018 - 0x0000)
struct BP_AbilitySlot_v3_C_SetUnselected final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_SetUnselected) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_SetUnselected");
static_assert(sizeof(BP_AbilitySlot_v3_C_SetUnselected) == 0x000018, "Wrong size on BP_AbilitySlot_v3_C_SetUnselected");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUnselected, PlayAnim) == 0x000000, "Member 'BP_AbilitySlot_v3_C_SetUnselected::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUnselected, Temp_bool_Variable) == 0x000001, "Member 'BP_AbilitySlot_v3_C_SetUnselected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUnselected, Temp_float_Variable) == 0x000004, "Member 'BP_AbilitySlot_v3_C_SetUnselected::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUnselected, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'BP_AbilitySlot_v3_C_SetUnselected::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUnselected, K2Node_Select_Default) == 0x00000C, "Member 'BP_AbilitySlot_v3_C_SetUnselected::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUnselected, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_AbilitySlot_v3_C_SetUnselected::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.ToggleLocked
// 0x0030 (0x0030 - 0x0000)
struct BP_AbilitySlot_v3_C_ToggleLocked final
{
public:
	bool                                          InIsLocked;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InLockedLevel;                                     // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_ToggleLocked) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_ToggleLocked");
static_assert(sizeof(BP_AbilitySlot_v3_C_ToggleLocked) == 0x000030, "Wrong size on BP_AbilitySlot_v3_C_ToggleLocked");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, InIsLocked) == 0x000000, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::InIsLocked' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, InLockedLevel) == 0x000008, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::InLockedLevel' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, Temp_bool_Variable) == 0x000020, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, Temp_byte_Variable) == 0x000021, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, Temp_byte_Variable_1) == 0x000022, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, Temp_bool_Variable_1) == 0x000023, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, Temp_byte_Variable_2) == 0x000024, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, Temp_byte_Variable_3) == 0x000025, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, Temp_bool_Variable_2) == 0x000026, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, Temp_byte_Variable_4) == 0x000027, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, Temp_byte_Variable_5) == 0x000028, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, K2Node_Select_Default) == 0x000029, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, K2Node_Select_Default_1) == 0x00002B, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleLocked, K2Node_Select_Default_2) == 0x00002C, "Member 'BP_AbilitySlot_v3_C_ToggleLocked::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.ToggleSelected
// 0x0003 (0x0003 - 0x0000)
struct BP_AbilitySlot_v3_C_ToggleSelected final
{
public:
	bool                                          InIsSelected;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayAnim;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_ToggleSelected) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_ToggleSelected");
static_assert(sizeof(BP_AbilitySlot_v3_C_ToggleSelected) == 0x000003, "Wrong size on BP_AbilitySlot_v3_C_ToggleSelected");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleSelected, InIsSelected) == 0x000000, "Member 'BP_AbilitySlot_v3_C_ToggleSelected::InIsSelected' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleSelected, PlayAnim) == 0x000001, "Member 'BP_AbilitySlot_v3_C_ToggleSelected::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleSelected, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000002, "Member 'BP_AbilitySlot_v3_C_ToggleSelected::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.SetPassiveSkill
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_SetPassiveSkill final
{
public:
	bool                                          InIsPassiveSkill;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_SetPassiveSkill) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_SetPassiveSkill");
static_assert(sizeof(BP_AbilitySlot_v3_C_SetPassiveSkill) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_SetPassiveSkill");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetPassiveSkill, InIsPassiveSkill) == 0x000000, "Member 'BP_AbilitySlot_v3_C_SetPassiveSkill::InIsPassiveSkill' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.ToggleSwapped
// 0x0005 (0x0005 - 0x0000)
struct BP_AbilitySlot_v3_C_ToggleSwapped final
{
public:
	bool                                          inIsSwapped;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_ToggleSwapped) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_ToggleSwapped");
static_assert(sizeof(BP_AbilitySlot_v3_C_ToggleSwapped) == 0x000005, "Wrong size on BP_AbilitySlot_v3_C_ToggleSwapped");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleSwapped, inIsSwapped) == 0x000000, "Member 'BP_AbilitySlot_v3_C_ToggleSwapped::inIsSwapped' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleSwapped, Temp_bool_Variable) == 0x000001, "Member 'BP_AbilitySlot_v3_C_ToggleSwapped::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleSwapped, Temp_byte_Variable) == 0x000002, "Member 'BP_AbilitySlot_v3_C_ToggleSwapped::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleSwapped, Temp_byte_Variable_1) == 0x000003, "Member 'BP_AbilitySlot_v3_C_ToggleSwapped::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleSwapped, K2Node_Select_Default) == 0x000004, "Member 'BP_AbilitySlot_v3_C_ToggleSwapped::K2Node_Select_Default' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.ToggleCrossHighlight
// 0x0005 (0x0005 - 0x0000)
struct BP_AbilitySlot_v3_C_ToggleCrossHighlight final
{
public:
	bool                                          inIsCrossHighlighted;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_ToggleCrossHighlight) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_ToggleCrossHighlight");
static_assert(sizeof(BP_AbilitySlot_v3_C_ToggleCrossHighlight) == 0x000005, "Wrong size on BP_AbilitySlot_v3_C_ToggleCrossHighlight");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleCrossHighlight, inIsCrossHighlighted) == 0x000000, "Member 'BP_AbilitySlot_v3_C_ToggleCrossHighlight::inIsCrossHighlighted' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleCrossHighlight, Temp_bool_Variable) == 0x000001, "Member 'BP_AbilitySlot_v3_C_ToggleCrossHighlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleCrossHighlight, Temp_byte_Variable) == 0x000002, "Member 'BP_AbilitySlot_v3_C_ToggleCrossHighlight::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleCrossHighlight, Temp_byte_Variable_1) == 0x000003, "Member 'BP_AbilitySlot_v3_C_ToggleCrossHighlight::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleCrossHighlight, K2Node_Select_Default) == 0x000004, "Member 'BP_AbilitySlot_v3_C_ToggleCrossHighlight::K2Node_Select_Default' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.ToggleEquipState
// 0x0010 (0x0010 - 0x0000)
struct BP_AbilitySlot_v3_C_ToggleEquipState final
{
public:
	bool                                          InEquipState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_ToggleEquipState) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_ToggleEquipState");
static_assert(sizeof(BP_AbilitySlot_v3_C_ToggleEquipState) == 0x000010, "Wrong size on BP_AbilitySlot_v3_C_ToggleEquipState");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleEquipState, InEquipState) == 0x000000, "Member 'BP_AbilitySlot_v3_C_ToggleEquipState::InEquipState' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleEquipState, Temp_bool_Variable) == 0x000001, "Member 'BP_AbilitySlot_v3_C_ToggleEquipState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleEquipState, Temp_byte_Variable) == 0x000002, "Member 'BP_AbilitySlot_v3_C_ToggleEquipState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleEquipState, Temp_byte_Variable_1) == 0x000003, "Member 'BP_AbilitySlot_v3_C_ToggleEquipState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleEquipState, K2Node_Select_Default) == 0x000004, "Member 'BP_AbilitySlot_v3_C_ToggleEquipState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleEquipState, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_AbilitySlot_v3_C_ToggleEquipState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.ToggleEquipped
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilitySlot_v3_C_ToggleEquipped final
{
public:
	bool                                          InEquipped;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_ToggleEquipped) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_ToggleEquipped");
static_assert(sizeof(BP_AbilitySlot_v3_C_ToggleEquipped) == 0x000001, "Wrong size on BP_AbilitySlot_v3_C_ToggleEquipped");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleEquipped, InEquipped) == 0x000000, "Member 'BP_AbilitySlot_v3_C_ToggleEquipped::InEquipped' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.ToggleUnknown
// 0x000A (0x000A - 0x0000)
struct BP_AbilitySlot_v3_C_ToggleUnknown final
{
public:
	bool                                          InIsUnknown;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_ToggleUnknown) == 0x000001, "Wrong alignment on BP_AbilitySlot_v3_C_ToggleUnknown");
static_assert(sizeof(BP_AbilitySlot_v3_C_ToggleUnknown) == 0x00000A, "Wrong size on BP_AbilitySlot_v3_C_ToggleUnknown");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleUnknown, InIsUnknown) == 0x000000, "Member 'BP_AbilitySlot_v3_C_ToggleUnknown::InIsUnknown' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleUnknown, Temp_bool_Variable) == 0x000001, "Member 'BP_AbilitySlot_v3_C_ToggleUnknown::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleUnknown, Temp_byte_Variable) == 0x000002, "Member 'BP_AbilitySlot_v3_C_ToggleUnknown::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleUnknown, Temp_byte_Variable_1) == 0x000003, "Member 'BP_AbilitySlot_v3_C_ToggleUnknown::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleUnknown, Temp_bool_Variable_1) == 0x000004, "Member 'BP_AbilitySlot_v3_C_ToggleUnknown::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleUnknown, Temp_byte_Variable_2) == 0x000005, "Member 'BP_AbilitySlot_v3_C_ToggleUnknown::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleUnknown, Temp_byte_Variable_3) == 0x000006, "Member 'BP_AbilitySlot_v3_C_ToggleUnknown::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleUnknown, CallFunc_BooleanOR_ReturnValue) == 0x000007, "Member 'BP_AbilitySlot_v3_C_ToggleUnknown::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleUnknown, K2Node_Select_Default) == 0x000008, "Member 'BP_AbilitySlot_v3_C_ToggleUnknown::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_ToggleUnknown, K2Node_Select_Default_1) == 0x000009, "Member 'BP_AbilitySlot_v3_C_ToggleUnknown::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.SetUpgrades
// 0x0190 (0x0190 - 0x0000)
struct BP_AbilitySlot_v3_C_SetUpgrades final
{
public:
	int32                                         InMaxUpgrades;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InLearnedUpgrades;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_4;                            // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_5;                            // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_6;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_7;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_8;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_9;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_10;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_11;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_12;                           // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_13;                           // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_14;                           // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_15;                           // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_16;                           // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_17;                           // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_18;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_19;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_20;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_21;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_22;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_23;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_24;                           // 0x00DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_25;                           // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_26;                           // 0x00EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_27;                           // 0x00F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_28;                           // 0x00FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_29;                           // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_5;                               // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x012C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0134(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_2;                           // 0x013C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_3;                           // 0x0144(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_4;                           // 0x014C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_5;                           // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 K2Node_DynamicCast_AsImage;                        // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_6;                           // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_SetUpgrades) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_SetUpgrades");
static_assert(sizeof(BP_AbilitySlot_v3_C_SetUpgrades) == 0x000190, "Wrong size on BP_AbilitySlot_v3_C_SetUpgrades");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, InMaxUpgrades) == 0x000000, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::InMaxUpgrades' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, InLearnedUpgrades) == 0x000004, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::InLearnedUpgrades' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_int_Variable) == 0x000008, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable) == 0x00000C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_1) == 0x000014, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_2) == 0x00001C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_3) == 0x000024, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_4) == 0x00002C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_5) == 0x000034, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_int_Variable_1) == 0x00003C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_6) == 0x000040, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_7) == 0x000048, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_8) == 0x000050, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_9) == 0x000058, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_10) == 0x000060, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_11) == 0x000068, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_int_Variable_2) == 0x000070, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_12) == 0x000074, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_13) == 0x00007C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_14) == 0x000084, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_15) == 0x00008C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_16) == 0x000094, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_17) == 0x00009C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_int_Variable_3) == 0x0000A4, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_18) == 0x0000A8, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_19) == 0x0000B0, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_20) == 0x0000B8, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_21) == 0x0000C0, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_22) == 0x0000C8, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_23) == 0x0000D0, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_int_Variable_4) == 0x0000D8, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_24) == 0x0000DC, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_25) == 0x0000E4, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_26) == 0x0000EC, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_27) == 0x0000F4, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_28) == 0x0000FC, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_struct_Variable_29) == 0x000104, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_struct_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_bool_Variable) == 0x00010C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_object_Variable) == 0x000110, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_object_Variable_1) == 0x000118, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_bool_Variable_1) == 0x000120, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_byte_Variable) == 0x000121, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_byte_Variable_1) == 0x000122, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, Temp_int_Variable_5) == 0x000124, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, CallFunc_Add_IntInt_ReturnValue) == 0x000128, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, K2Node_Select_Default) == 0x00012C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, K2Node_Select_Default_1) == 0x000134, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, K2Node_Select_Default_2) == 0x00013C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, K2Node_Select_Default_3) == 0x000144, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, K2Node_Select_Default_4) == 0x00014C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, CallFunc_GetChildrenCount_ReturnValue) == 0x000154, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, CallFunc_Greater_IntInt_ReturnValue) == 0x000158, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, CallFunc_Subtract_IntInt_ReturnValue) == 0x00015C, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000160, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, K2Node_Select_Default_5) == 0x000168, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000170, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, CallFunc_GetChildAt_ReturnValue) == 0x000178, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, K2Node_DynamicCast_AsImage) == 0x000180, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::K2Node_DynamicCast_AsImage' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, K2Node_DynamicCast_bSuccess) == 0x000188, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetUpgrades, K2Node_Select_Default_6) == 0x000189, "Member 'BP_AbilitySlot_v3_C_SetUpgrades::K2Node_Select_Default_6' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.Set Equips
// 0x0048 (0x0048 - 0x0000)
struct BP_AbilitySlot_v3_C_Set_Equips final
{
public:
	bool                                          InSlot1Equipped;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InSlot2Equipped;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_Set_Equips) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_Set_Equips");
static_assert(sizeof(BP_AbilitySlot_v3_C_Set_Equips) == 0x000048, "Wrong size on BP_AbilitySlot_v3_C_Set_Equips");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, InSlot1Equipped) == 0x000000, "Member 'BP_AbilitySlot_v3_C_Set_Equips::InSlot1Equipped' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, InSlot2Equipped) == 0x000001, "Member 'BP_AbilitySlot_v3_C_Set_Equips::InSlot2Equipped' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, Temp_bool_Variable) == 0x000002, "Member 'BP_AbilitySlot_v3_C_Set_Equips::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'BP_AbilitySlot_v3_C_Set_Equips::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, Temp_byte_Variable) == 0x000004, "Member 'BP_AbilitySlot_v3_C_Set_Equips::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, Temp_byte_Variable_1) == 0x000005, "Member 'BP_AbilitySlot_v3_C_Set_Equips::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, Temp_bool_Variable_1) == 0x000006, "Member 'BP_AbilitySlot_v3_C_Set_Equips::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, Temp_object_Variable) == 0x000008, "Member 'BP_AbilitySlot_v3_C_Set_Equips::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, K2Node_Select_Default) == 0x000010, "Member 'BP_AbilitySlot_v3_C_Set_Equips::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, Temp_object_Variable_1) == 0x000018, "Member 'BP_AbilitySlot_v3_C_Set_Equips::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, Temp_bool_Variable_2) == 0x000020, "Member 'BP_AbilitySlot_v3_C_Set_Equips::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, Temp_object_Variable_2) == 0x000028, "Member 'BP_AbilitySlot_v3_C_Set_Equips::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, Temp_object_Variable_3) == 0x000030, "Member 'BP_AbilitySlot_v3_C_Set_Equips::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, K2Node_Select_Default_1) == 0x000038, "Member 'BP_AbilitySlot_v3_C_Set_Equips::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_Set_Equips, K2Node_Select_Default_2) == 0x000040, "Member 'BP_AbilitySlot_v3_C_Set_Equips::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.PlayLearnAbilityAnim
// 0x0018 (0x0018 - 0x0000)
struct BP_AbilitySlot_v3_C_PlayLearnAbilityAnim final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilitySlot_v3_C_PlayLearnAbilityAnim) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_PlayLearnAbilityAnim");
static_assert(sizeof(BP_AbilitySlot_v3_C_PlayLearnAbilityAnim) == 0x000018, "Wrong size on BP_AbilitySlot_v3_C_PlayLearnAbilityAnim");
static_assert(offsetof(BP_AbilitySlot_v3_C_PlayLearnAbilityAnim, PlayAnim) == 0x000000, "Member 'BP_AbilitySlot_v3_C_PlayLearnAbilityAnim::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_PlayLearnAbilityAnim, Temp_bool_Variable) == 0x000001, "Member 'BP_AbilitySlot_v3_C_PlayLearnAbilityAnim::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_PlayLearnAbilityAnim, Temp_float_Variable) == 0x000004, "Member 'BP_AbilitySlot_v3_C_PlayLearnAbilityAnim::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_PlayLearnAbilityAnim, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'BP_AbilitySlot_v3_C_PlayLearnAbilityAnim::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_PlayLearnAbilityAnim, K2Node_Select_Default) == 0x00000C, "Member 'BP_AbilitySlot_v3_C_PlayLearnAbilityAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_PlayLearnAbilityAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_AbilitySlot_v3_C_PlayLearnAbilityAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_AbilitySlot_v3.BP_AbilitySlot_v3_C.SetHighlighted
// 0x0028 (0x0028 - 0x0000)
struct BP_AbilitySlot_v3_C_SetHighlighted final
{
public:
	bool                                          Highlighted;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayAnim;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilitySlot_v3_C_SetHighlighted) == 0x000008, "Wrong alignment on BP_AbilitySlot_v3_C_SetHighlighted");
static_assert(sizeof(BP_AbilitySlot_v3_C_SetHighlighted) == 0x000028, "Wrong size on BP_AbilitySlot_v3_C_SetHighlighted");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, Highlighted) == 0x000000, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::Highlighted' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, PlayAnim) == 0x000001, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, Temp_bool_Variable) == 0x000002, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, Temp_byte_Variable) == 0x000003, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, Temp_byte_Variable_1) == 0x000004, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, Temp_bool_Variable_1) == 0x000005, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, CallFunc_GetRenderOpacity_ReturnValue) == 0x000008, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, K2Node_Select_Default) == 0x00000C, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, K2Node_Select_Default_1) == 0x000014, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilitySlot_v3_C_SetHighlighted, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000020, "Member 'BP_AbilitySlot_v3_C_SetHighlighted::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

}

