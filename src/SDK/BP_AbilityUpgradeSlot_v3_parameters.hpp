#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AbilityUpgradeSlot_v3

#include "Basic.hpp"

#include "man_structs.hpp"
#include "SlateCore_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.ExecuteUbergraph_BP_AbilityUpgradeSlot_v3
// 0x00A8 (0x00A8 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_UpgradeIconID;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0008(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x001C(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue_1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0034(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture2D*                       K2Node_Event_InIcon;                               // 0x0088(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityUpgradeState                          K2Node_Event_InAbilityUpgradeState;                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESkillUpgradeConnectionType>           K2Node_Event_SkillUpgradeConnectionTypes;          // 0x0098(0x0010)(ConstParm, ReferenceParm)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3) == 0x0000A8, "Wrong size on BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, EntryPoint) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, K2Node_Event_UpgradeIconID) == 0x000004, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::K2Node_Event_UpgradeIconID' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, Temp_delegate_Variable) == 0x000008, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, CallFunc_PostEvent_ReturnValue) == 0x000018, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, Temp_delegate_Variable_1) == 0x00001C, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, CallFunc_PostEvent_ReturnValue_1) == 0x00002C, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::CallFunc_PostEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, K2Node_Event_IsDesignTime) == 0x000030, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, K2Node_Event_MyGeometry) == 0x000034, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, K2Node_Event_InDeltaTime) == 0x00006C, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, CallFunc_PlayAnimation_ReturnValue) == 0x000070, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, CallFunc_PlayAnimation_ReturnValue_1) == 0x000078, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, K2Node_Event_bAnimate_1) == 0x000080, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, K2Node_Event_bAnimate) == 0x000081, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, K2Node_Event_InIcon) == 0x000088, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::K2Node_Event_InIcon' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, K2Node_Event_InAbilityUpgradeState) == 0x000090, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::K2Node_Event_InAbilityUpgradeState' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3, K2Node_Event_SkillUpgradeConnectionTypes) == 0x000098, "Member 'BP_AbilityUpgradeSlot_v3_C_ExecuteUbergraph_BP_AbilityUpgradeSlot_v3::K2Node_Event_SkillUpgradeConnectionTypes' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.OnSetUpgradeIcon
// 0x0004 (0x0004 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_OnSetUpgradeIcon final
{
public:
	int32                                         UpgradeIconID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_OnSetUpgradeIcon) == 0x000004, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_OnSetUpgradeIcon");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_OnSetUpgradeIcon) == 0x000004, "Wrong size on BP_AbilityUpgradeSlot_v3_C_OnSetUpgradeIcon");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_OnSetUpgradeIcon, UpgradeIconID) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_OnSetUpgradeIcon::UpgradeIconID' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.OnSetConnectionsVisibility
// 0x0010 (0x0010 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_OnSetConnectionsVisibility final
{
public:
	TArray<ESkillUpgradeConnectionType>           SkillUpgradeConnectionTypes;                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_OnSetConnectionsVisibility) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_OnSetConnectionsVisibility");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_OnSetConnectionsVisibility) == 0x000010, "Wrong size on BP_AbilityUpgradeSlot_v3_C_OnSetConnectionsVisibility");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_OnSetConnectionsVisibility, SkillUpgradeConnectionTypes) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_OnSetConnectionsVisibility::SkillUpgradeConnectionTypes' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.OnSetState
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_OnSetState final
{
public:
	EAbilityUpgradeState                          InAbilityUpgradeState;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_OnSetState) == 0x000001, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_OnSetState");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_OnSetState) == 0x000001, "Wrong size on BP_AbilityUpgradeSlot_v3_C_OnSetState");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_OnSetState, InAbilityUpgradeState) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_OnSetState::InAbilityUpgradeState' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.OnSetIcon
// 0x0008 (0x0008 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_OnSetIcon final
{
public:
	const class UTexture2D*                       InIcon;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_OnSetIcon) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_OnSetIcon");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_OnSetIcon) == 0x000008, "Wrong size on BP_AbilityUpgradeSlot_v3_C_OnSetIcon");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_OnSetIcon, InIcon) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_OnSetIcon::InIcon' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.OnUnfocused
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_OnUnfocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_OnUnfocused) == 0x000001, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_OnUnfocused");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_OnUnfocused) == 0x000001, "Wrong size on BP_AbilityUpgradeSlot_v3_C_OnUnfocused");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_OnUnfocused, bAnimate) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_OnUnfocused::bAnimate' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.OnFocused
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_OnFocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_OnFocused) == 0x000001, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_OnFocused");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_OnFocused) == 0x000001, "Wrong size on BP_AbilityUpgradeSlot_v3_C_OnFocused");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_OnFocused, bAnimate) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_OnFocused::bAnimate' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_Tick) == 0x000004, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_Tick");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_Tick) == 0x00003C, "Wrong size on BP_AbilityUpgradeSlot_v3_C_Tick");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Tick, MyGeometry) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_AbilityUpgradeSlot_v3_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_PreConstruct) == 0x000001, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_PreConstruct");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_PreConstruct) == 0x000001, "Wrong size on BP_AbilityUpgradeSlot_v3_C_PreConstruct");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.SetIcon
// 0x0020 (0x0020 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_SetIcon final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_SetIcon) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_SetIcon");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_SetIcon) == 0x000020, "Wrong size on BP_AbilityUpgradeSlot_v3_C_SetIcon");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetIcon, InIcon) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_SetIcon::InIcon' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetIcon, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_AbilityUpgradeSlot_v3_C_SetIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetIcon, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'BP_AbilityUpgradeSlot_v3_C_SetIcon::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetIcon, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000018, "Member 'BP_AbilityUpgradeSlot_v3_C_SetIcon::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.Set Highlighted
// 0x0018 (0x0018 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_Set_Highlighted final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_Set_Highlighted) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_Set_Highlighted");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_Set_Highlighted) == 0x000018, "Wrong size on BP_AbilityUpgradeSlot_v3_C_Set_Highlighted");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Highlighted, PlayAnim) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Highlighted::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Highlighted, Temp_bool_Variable) == 0x000001, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Highlighted::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Highlighted, Temp_float_Variable) == 0x000004, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Highlighted::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Highlighted, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Highlighted::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Highlighted, K2Node_Select_Default) == 0x00000C, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Highlighted::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Highlighted, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Highlighted::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.SetUnhighlighted
// 0x0010 (0x0010 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_SetUnhighlighted final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_SetUnhighlighted) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_SetUnhighlighted");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_SetUnhighlighted) == 0x000010, "Wrong size on BP_AbilityUpgradeSlot_v3_C_SetUnhighlighted");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUnhighlighted, PlayAnim) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUnhighlighted::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUnhighlighted, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUnhighlighted::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.ToggleSelected
// 0x0003 (0x0003 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_ToggleSelected final
{
public:
	bool                                          InIsSelected;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayAnim;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_ToggleSelected) == 0x000001, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_ToggleSelected");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_ToggleSelected) == 0x000003, "Wrong size on BP_AbilityUpgradeSlot_v3_C_ToggleSelected");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ToggleSelected, InIsSelected) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_ToggleSelected::InIsSelected' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ToggleSelected, PlayAnim) == 0x000001, "Member 'BP_AbilityUpgradeSlot_v3_C_ToggleSelected::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_ToggleSelected, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000002, "Member 'BP_AbilityUpgradeSlot_v3_C_ToggleSelected::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.SetState
// 0x0170 (0x0170 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_SetState final
{
public:
	EAbilityUpgradeState                          InNodeState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityUpgradeState                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityUpgradeState                          Temp_byte_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityUpgradeState                          Temp_byte_Variable_2;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_7;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_8;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_9;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityUpgradeState                          Temp_byte_Variable_3;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_10;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_11;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_12;                           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_13;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_14;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityUpgradeState                          Temp_byte_Variable_4;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_15;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_16;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_17;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_18;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_19;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityUpgradeState                          Temp_byte_Variable_5;                              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_5;                             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_8;                             // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityUpgradeState                          Temp_byte_Variable_6;                              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_10;                            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_11;                            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_12;                            // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_13;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_14;                            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityUpgradeState                          Temp_byte_Variable_7;                              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_15;                            // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_16;                            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_17;                            // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_18;                            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_19;                            // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0124(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default_2;                           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_3;                           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_4;                           // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_5;                           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_6;                           // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_7;                           // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_SetState) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_SetState");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_SetState) == 0x000170, "Wrong size on BP_AbilityUpgradeSlot_v3_C_SetState");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, InNodeState) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::InNodeState' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_byte_Variable) == 0x000001, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable) == 0x000008, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_1) == 0x000010, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_2) == 0x000018, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_3) == 0x000020, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_4) == 0x000028, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_byte_Variable_1) == 0x000030, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable) == 0x000034, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_1) == 0x000038, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_2) == 0x00003C, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_3) == 0x000040, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_4) == 0x000044, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_byte_Variable_2) == 0x000048, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_5) == 0x000050, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_6) == 0x000058, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_7) == 0x000060, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_8) == 0x000068, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_9) == 0x000070, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_byte_Variable_3) == 0x000078, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_10) == 0x000080, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_11) == 0x000088, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_12) == 0x000090, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_13) == 0x000098, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_14) == 0x0000A0, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_byte_Variable_4) == 0x0000A8, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_15) == 0x0000B0, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_16) == 0x0000B8, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_17) == 0x0000C0, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_18) == 0x0000C8, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_object_Variable_19) == 0x0000D0, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_byte_Variable_5) == 0x0000D8, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_5) == 0x0000DC, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_6) == 0x0000E0, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_7) == 0x0000E4, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_8) == 0x0000E8, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_9) == 0x0000EC, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_byte_Variable_6) == 0x0000F0, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_10) == 0x0000F4, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_11) == 0x0000F8, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_12) == 0x0000FC, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_13) == 0x000100, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_14) == 0x000104, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_byte_Variable_7) == 0x000108, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_15) == 0x00010C, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_16) == 0x000110, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_17) == 0x000114, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_18) == 0x000118, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, Temp_float_Variable_19) == 0x00011C, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::Temp_float_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, K2Node_Select_Default) == 0x000120, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, K2Node_MakeStruct_Margin) == 0x000124, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, K2Node_Select_Default_1) == 0x000134, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, K2Node_Select_Default_2) == 0x000138, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, K2Node_Select_Default_3) == 0x000140, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, K2Node_Select_Default_4) == 0x000148, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, K2Node_Select_Default_5) == 0x000150, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, K2Node_Select_Default_6) == 0x000158, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, K2Node_Select_Default_7) == 0x00015C, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000160, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetState, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000168, "Member 'BP_AbilityUpgradeSlot_v3_C_SetState::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.Set Connections Visibility
// 0x0028 (0x0028 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility final
{
public:
	TArray<ESkillUpgradeConnectionType>           SkillUpgradeConnectionTypes;                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillUpgradeConnectionType                   CallFunc_Array_Get_Item;                           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility) == 0x000028, "Wrong size on BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility, SkillUpgradeConnectionTypes) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility::SkillUpgradeConnectionTypes' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility, CallFunc_Array_Get_Item) == 0x00001C, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility, K2Node_SwitchEnum_CmpSuccess) == 0x000024, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility, CallFunc_Less_IntInt_ReturnValue) == 0x000025, "Member 'BP_AbilityUpgradeSlot_v3_C_Set_Connections_Visibility::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.UpgradeStart
// 0x0020 (0x0020 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_UpgradeStart final
{
public:
	float                                         MaxKeyTimerHoldTime;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_UpgradeStart) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_UpgradeStart");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_UpgradeStart) == 0x000020, "Wrong size on BP_AbilityUpgradeSlot_v3_C_UpgradeStart");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeStart, MaxKeyTimerHoldTime) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeStart::MaxKeyTimerHoldTime' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeStart, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeStart::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeStart, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeStart::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeStart, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000010, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeStart::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeStart, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeStart::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.UpgradeEnd
// 0x0020 (0x0020 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_UpgradeEnd final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_UpgradeEnd) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_UpgradeEnd");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_UpgradeEnd) == 0x000020, "Wrong size on BP_AbilityUpgradeSlot_v3_C_UpgradeEnd");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeEnd, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeEnd::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeEnd, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeEnd::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeEnd, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000010, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeEnd::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeEnd, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeEnd::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.UpgradeAbort
// 0x0018 (0x0018 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_UpgradeAbort final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_UpgradeAbort) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_UpgradeAbort");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_UpgradeAbort) == 0x000018, "Wrong size on BP_AbilityUpgradeSlot_v3_C_UpgradeAbort");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeAbort, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeAbort::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeAbort, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000008, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeAbort::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_UpgradeAbort, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_AbilityUpgradeSlot_v3_C_UpgradeAbort::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_AbilityUpgradeSlot_v3.BP_AbilityUpgradeSlot_v3_C.SetUpgradeIcon
// 0x0048 (0x0048 - 0x0000)
struct BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon final
{
public:
	int32                                         InUpgradeID;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon) == 0x000008, "Wrong alignment on BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon");
static_assert(sizeof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon) == 0x000048, "Wrong size on BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon, InUpgradeID) == 0x000000, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon::InUpgradeID' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon, Temp_int_Variable) == 0x000004, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon, Temp_object_Variable) == 0x000008, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon, Temp_object_Variable_1) == 0x000010, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon, Temp_object_Variable_2) == 0x000018, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon, Temp_object_Variable_3) == 0x000020, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon, Temp_object_Variable_4) == 0x000028, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon, Temp_object_Variable_5) == 0x000030, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000038, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon, K2Node_Select_Default) == 0x000040, "Member 'BP_AbilityUpgradeSlot_v3_C_SetUpgradeIcon::K2Node_Select_Default' has a wrong offset!");

}

