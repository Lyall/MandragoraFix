#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ActiveAbilitiesWindow_v3

#include "Basic.hpp"

#include "man_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3
// 0x01D0 (0x01D0 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AnimDuration_1;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0030(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Name;                                 // 0x0070(0x0018)(ConstParm)
	class FText                                   K2Node_Event_Description;                          // 0x0088(0x0018)(ConstParm)
	class FText                                   K2Node_Event_FlavorText;                           // 0x00A0(0x0018)(ConstParm)
	class FText                                   K2Node_Event_CostText;                             // 0x00B8(0x0018)(ConstParm)
	class FText                                   K2Node_Event_Requirements_1;                       // 0x00D0(0x0018)(ConstParm)
	const class UTexture2D*                       K2Node_Event_Icon;                                 // 0x00E8(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UAbilityBase>               K2Node_Event_AbilityClass;                         // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         K2Node_Event_MaxUpgrades_1;                        // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_LearnedUpgrades_1;                    // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_FilterName;                           // 0x0108(0x0018)(ConstParm)
	EWeaponType                                   K2Node_Event_InWeaponTypeFilter;                   // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPlayChangeFilterSound;               // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_MaxUpgrades;                          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_LearnedUpgrades;                      // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_ComponentBoundEvent_WidgetReference_5;      // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_ComponentBoundEvent_WidgetReference_4;      // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_ComponentBoundEvent_WidgetReference_3;      // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_ComponentBoundEvent_WidgetReference_2;      // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_ComponentBoundEvent_WidgetReference_1;      // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_ComponentBoundEvent_WidgetReference;        // 0x0158(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_Event_Upgrades;                             // 0x0160(0x0010)(ConstParm, ReferenceParm)
	class FText                                   K2Node_Event_Requirements;                         // 0x0170(0x0018)(ConstParm)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UBP_AbilityLeftSlot_v3_C* ItemReference)> K2Node_CreateDelegate_OutputDelegate;              // 0x01AC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UBP_AbilityLeftSlot_v3_C* ItemReference)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x01BC(0x0010)(ZeroConstructor, NoDestructor)
	EInputDisplay                                 K2Node_Event_InInputDisplay;                       // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InControlDisplay;                     // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3) == 0x0001D0, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, EntryPoint) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, Temp_bool_Variable) == 0x000004, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_AnimDuration_1) == 0x000008, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x00000C, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_AnimDuration) == 0x000010, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x000020, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, CallFunc_PlayAnimation_ReturnValue_1) == 0x000028, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_MyGeometry) == 0x000030, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_InDeltaTime) == 0x000068, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_Name) == 0x000070, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_Description) == 0x000088, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_Description' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_FlavorText) == 0x0000A0, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_FlavorText' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_CostText) == 0x0000B8, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_CostText' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_Requirements_1) == 0x0000D0, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_Requirements_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_Icon) == 0x0000E8, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_Icon' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_AbilityClass) == 0x0000F0, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_AbilityClass' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_MaxUpgrades_1) == 0x0000F8, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_MaxUpgrades_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_LearnedUpgrades_1) == 0x0000FC, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_LearnedUpgrades_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, CallFunc_IsValidClass_ReturnValue) == 0x000100, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_FilterName) == 0x000108, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_FilterName' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_InWeaponTypeFilter) == 0x000120, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_InWeaponTypeFilter' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_bPlayChangeFilterSound) == 0x000121, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_bPlayChangeFilterSound' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_SwitchEnum_CmpSuccess) == 0x000122, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_MaxUpgrades) == 0x000124, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_MaxUpgrades' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_LearnedUpgrades) == 0x000128, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_LearnedUpgrades' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_ComponentBoundEvent_WidgetReference_5) == 0x000130, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_ComponentBoundEvent_WidgetReference_5' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_ComponentBoundEvent_WidgetReference_4) == 0x000138, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_ComponentBoundEvent_WidgetReference_4' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_ComponentBoundEvent_WidgetReference_3) == 0x000140, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_ComponentBoundEvent_WidgetReference_3' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_ComponentBoundEvent_WidgetReference_2) == 0x000148, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_ComponentBoundEvent_WidgetReference_2' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_ComponentBoundEvent_WidgetReference_1) == 0x000150, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_ComponentBoundEvent_WidgetReference_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_ComponentBoundEvent_WidgetReference) == 0x000158, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_ComponentBoundEvent_WidgetReference' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_Upgrades) == 0x000160, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_Upgrades' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_Requirements) == 0x000170, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_Requirements' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_IsDesignTime) == 0x000188, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, Temp_float_Variable) == 0x00018C, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, Temp_float_Variable_1) == 0x000190, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Select_Default) == 0x000194, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, CallFunc_Array_Add_ReturnValue) == 0x000198, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, CallFunc_Array_Add_ReturnValue_1) == 0x00019C, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, CallFunc_Array_Add_ReturnValue_2) == 0x0001A0, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, CallFunc_Array_Add_ReturnValue_3) == 0x0001A4, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, CallFunc_Array_Add_ReturnValue_4) == 0x0001A8, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_CreateDelegate_OutputDelegate) == 0x0001AC, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_CreateDelegate_OutputDelegate_1) == 0x0001BC, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_InInputDisplay) == 0x0001CC, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3, K2Node_Event_InControlDisplay) == 0x0001CD, "Member 'BP_ActiveAbilitiesWindow_v3_C_ExecuteUbergraph_BP_ActiveAbilitiesWindow_v3::K2Node_Event_InControlDisplay' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.OnSetInputDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_OnSetInputDisplay final
{
public:
	EInputDisplay                                 InInputDisplay;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 InControlDisplay;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_OnSetInputDisplay) == 0x000001, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_OnSetInputDisplay");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_OnSetInputDisplay) == 0x000002, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_OnSetInputDisplay");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnSetInputDisplay, InInputDisplay) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnSetInputDisplay::InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnSetInputDisplay, InControlDisplay) == 0x000001, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnSetInputDisplay::InControlDisplay' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_PreConstruct) == 0x000001, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_PreConstruct");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_PreConstruct) == 0x000001, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_PreConstruct");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.OnUpdateUpgradesPanel
// 0x0028 (0x0028 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_OnUpdateUpgradesPanel final
{
public:
	TArray<class FText>                           Upgrades;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   Requirements;                                      // 0x0010(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateUpgradesPanel) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_OnUpdateUpgradesPanel");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateUpgradesPanel) == 0x000028, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_OnUpdateUpgradesPanel");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateUpgradesPanel, Upgrades) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnUpdateUpgradesPanel::Upgrades' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateUpgradesPanel, Requirements) == 0x000010, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnUpdateUpgradesPanel::Requirements' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Relic_K2Node_ComponentBoundEvent_9_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Relic_K2Node_ComponentBoundEvent_9_OnClicked__DelegateSignature final
{
public:
	class UWidget*                                WidgetReference;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Relic_K2Node_ComponentBoundEvent_9_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Relic_K2Node_ComponentBoundEvent_9_OnClicked__DelegateSignature");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Relic_K2Node_ComponentBoundEvent_9_OnClicked__DelegateSignature) == 0x000008, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Relic_K2Node_ComponentBoundEvent_9_OnClicked__DelegateSignature");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Relic_K2Node_ComponentBoundEvent_9_OnClicked__DelegateSignature, WidgetReference) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Relic_K2Node_ComponentBoundEvent_9_OnClicked__DelegateSignature::WidgetReference' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_WyldRune_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_WyldRune_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature final
{
public:
	class UWidget*                                WidgetReference;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_WyldRune_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_WyldRune_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_WyldRune_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature) == 0x000008, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_WyldRune_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_WyldRune_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature, WidgetReference) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_WyldRune_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature::WidgetReference' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Crossbow_K2Node_ComponentBoundEvent_6_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Crossbow_K2Node_ComponentBoundEvent_6_OnClicked__DelegateSignature final
{
public:
	class UWidget*                                WidgetReference;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Crossbow_K2Node_ComponentBoundEvent_6_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Crossbow_K2Node_ComponentBoundEvent_6_OnClicked__DelegateSignature");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Crossbow_K2Node_ComponentBoundEvent_6_OnClicked__DelegateSignature) == 0x000008, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Crossbow_K2Node_ComponentBoundEvent_6_OnClicked__DelegateSignature");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Crossbow_K2Node_ComponentBoundEvent_6_OnClicked__DelegateSignature, WidgetReference) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_Crossbow_K2Node_ComponentBoundEvent_6_OnClicked__DelegateSignature::WidgetReference' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_ChaosRune_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_ChaosRune_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature final
{
public:
	class UWidget*                                WidgetReference;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_ChaosRune_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_ChaosRune_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_ChaosRune_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature) == 0x000008, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_ChaosRune_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_ChaosRune_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature, WidgetReference) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_ChaosRune_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature::WidgetReference' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_FireRune_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_FireRune_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature final
{
public:
	class UWidget*                                WidgetReference;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_FireRune_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_FireRune_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_FireRune_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature) == 0x000008, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_FireRune_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_FireRune_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature, WidgetReference) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_FireRune_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature::WidgetReference' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_PhysicalWeapons_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_PhysicalWeapons_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature final
{
public:
	class UWidget*                                WidgetReference;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_PhysicalWeapons_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_PhysicalWeapons_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_PhysicalWeapons_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature) == 0x000008, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_PhysicalWeapons_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_PhysicalWeapons_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature, WidgetReference) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BndEvt__BP_ActiveAbilitiesWindow_v3_FilterSlot_PhysicalWeapons_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature::WidgetReference' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.OnSetUpgrades
// 0x0008 (0x0008 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_OnSetUpgrades final
{
public:
	int32                                         MaxUpgrades;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LearnedUpgrades;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_OnSetUpgrades) == 0x000004, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_OnSetUpgrades");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_OnSetUpgrades) == 0x000008, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_OnSetUpgrades");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnSetUpgrades, MaxUpgrades) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnSetUpgrades::MaxUpgrades' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnSetUpgrades, LearnedUpgrades) == 0x000004, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnSetUpgrades::LearnedUpgrades' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.OnSetFilterName
// 0x0020 (0x0020 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_OnSetFilterName final
{
public:
	class FText                                   FilterName_0;                                      // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EWeaponType                                   InWeaponTypeFilter;                                // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayChangeFilterSound;                            // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_OnSetFilterName) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_OnSetFilterName");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_OnSetFilterName) == 0x000020, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_OnSetFilterName");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnSetFilterName, FilterName_0) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnSetFilterName::FilterName_0' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnSetFilterName, InWeaponTypeFilter) == 0x000018, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnSetFilterName::InWeaponTypeFilter' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnSetFilterName, bPlayChangeFilterSound) == 0x000019, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnSetFilterName::bPlayChangeFilterSound' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.OnUpdateDetailsPanel
// 0x0090 (0x0090 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   Description;                                       // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   FlavorText;                                        // 0x0030(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   CostText;                                          // 0x0048(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   Requirements;                                      // 0x0060(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	const class UTexture2D*                       Icon;                                              // 0x0078(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UAbilityBase>               AbilityClass;                                      // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         MaxUpgrades;                                       // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LearnedUpgrades;                                   // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel) == 0x000090, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel, Name_0) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel::Name_0' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel, Description) == 0x000018, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel::Description' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel, FlavorText) == 0x000030, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel::FlavorText' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel, CostText) == 0x000048, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel::CostText' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel, Requirements) == 0x000060, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel::Requirements' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel, Icon) == 0x000078, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel::Icon' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel, AbilityClass) == 0x000080, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel::AbilityClass' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel, MaxUpgrades) == 0x000088, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel::MaxUpgrades' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel, LearnedUpgrades) == 0x00008C, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnUpdateDetailsPanel::LearnedUpgrades' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_Tick) == 0x000004, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_Tick");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_Tick) == 0x00003C, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_Tick");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_Tick, MyGeometry) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_ActiveAbilitiesWindow_v3_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_OnHide) == 0x000004, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_OnHide");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_OnHide) == 0x000004, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_OnHide");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_OnShow) == 0x000004, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_OnShow");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_OnShow) == 0x000004, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_OnShow");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BtnHotkeyBClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyBClicked final
{
public:
	bool                                          OpenPauseMenu;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyBClicked) == 0x000001, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyBClicked");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyBClicked) == 0x000001, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyBClicked");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyBClicked, OpenPauseMenu) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyBClicked::OpenPauseMenu' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BtnHotkeyAClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyAClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyAClicked) == 0x000001, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyAClicked");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyAClicked) == 0x000001, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyAClicked");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyAClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyAClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BtnHotkeyLTClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLTClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLTClicked) == 0x000001, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLTClicked");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLTClicked) == 0x000001, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLTClicked");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLTClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLTClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BtnHotkeyRTClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRTClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRTClicked) == 0x000001, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRTClicked");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRTClicked) == 0x000001, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRTClicked");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRTClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRTClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BtnHotkeyRBClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRBClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRBClicked) == 0x000001, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRBClicked");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRBClicked) == 0x000001, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRBClicked");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRBClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyRBClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BtnHotkeyLBClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLBClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLBClicked) == 0x000001, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLBClicked");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLBClicked) == 0x000001, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLBClicked");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLBClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyLBClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.SetUpgradesPanel
// 0x0080 (0x0080 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel final
{
public:
	TArray<class FText>                           Upgrades;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   Requirements;                                      // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Array_Get_Item;                           // 0x0038(0x0018)()
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x0050(0x0018)()
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManRichTextBlock*                      CallFunc_Array_Get_Item_1;                         // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel) == 0x000080, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel, Upgrades) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel::Upgrades' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel, Requirements) == 0x000010, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel::Requirements' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel, CallFunc_GetEmptyText_ReturnValue) == 0x000050, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000068, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpgradesPanel::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.SetBtnHotkeyRSState
// 0x0010 (0x0010 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState final
{
public:
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScrollOffsetOfEnd_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScrollOffsetOfEnd_ReturnValue_1;       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState) == 0x000004, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState) == 0x000010, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState, CallFunc_GetScrollOffsetOfEnd_ReturnValue) == 0x000004, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState::CallFunc_GetScrollOffsetOfEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState, CallFunc_GetScrollOffsetOfEnd_ReturnValue_1) == 0x00000C, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnHotkeyRSState::CallFunc_GetScrollOffsetOfEnd_ReturnValue_1' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.SetUpdateRequirementsState
// 0x0008 (0x0008 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_SetUpdateRequirementsState final
{
public:
	float                                         CallFunc_GetScrollOffsetOfEnd_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_SetUpdateRequirementsState) == 0x000004, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_SetUpdateRequirementsState");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_SetUpdateRequirementsState) == 0x000008, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_SetUpdateRequirementsState");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpdateRequirementsState, CallFunc_GetScrollOffsetOfEnd_ReturnValue) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpdateRequirementsState::CallFunc_GetScrollOffsetOfEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUpdateRequirementsState, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUpdateRequirementsState::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.SetEquipState
// 0x00B0 (0x00B0 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_SetEquipState final
{
public:
	bool                                          InEquipState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0040(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0058(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0078(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0090(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_SetEquipState");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState) == 0x0000B0, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_SetEquipState");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, InEquipState) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::InEquipState' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, Temp_bool_Variable) == 0x000001, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, Temp_text_Variable) == 0x000008, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, Temp_text_Variable_1) == 0x000020, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, Temp_bool_Variable_1) == 0x000038, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, Temp_text_Variable_2) == 0x000040, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, Temp_text_Variable_3) == 0x000058, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, Temp_bool_Variable_2) == 0x000070, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, Temp_byte_Variable) == 0x000071, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, Temp_byte_Variable_1) == 0x000072, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, CallFunc_Not_PreBool_ReturnValue) == 0x000073, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, K2Node_Select_Default) == 0x000078, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, K2Node_Select_Default_1) == 0x000090, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetEquipState, K2Node_Select_Default_2) == 0x0000A8, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetEquipState::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BtnHotkeyYClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyYClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyYClicked) == 0x000001, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyYClicked");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyYClicked) == 0x000001, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyYClicked");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyYClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyYClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.SetUnequipState
// 0x00B0 (0x00B0 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_SetUnequipState final
{
public:
	bool                                          InUnequipState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0040(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0058(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0078(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0090(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_SetUnequipState");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState) == 0x0000B0, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_SetUnequipState");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, InUnequipState) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::InUnequipState' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, Temp_bool_Variable) == 0x000001, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, Temp_text_Variable) == 0x000008, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, Temp_text_Variable_1) == 0x000020, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, Temp_bool_Variable_1) == 0x000038, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, Temp_text_Variable_2) == 0x000040, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, Temp_text_Variable_3) == 0x000058, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, Temp_bool_Variable_2) == 0x000070, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, Temp_byte_Variable) == 0x000071, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, Temp_byte_Variable_1) == 0x000072, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, CallFunc_Not_PreBool_ReturnValue) == 0x000073, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, K2Node_Select_Default) == 0x000078, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, K2Node_Select_Default_1) == 0x000090, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetUnequipState, K2Node_Select_Default_2) == 0x0000A8, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetUnequipState::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.ChangeFilter
// 0x0018 (0x0018 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_ChangeFilter final
{
public:
	class UWidget*                                WidgetReference;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ActiveAbilitiesWindow_FilterSlot_v3_C* K2Node_DynamicCast_AsBP_Active_Abilities_Window_Filter_Slot_V_3; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWeaponType                                   CallFunc_GetAbilityWeaponType_ReturnValue;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFilterEnabled_ReturnValue;              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_ChangeFilter) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_ChangeFilter");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_ChangeFilter) == 0x000018, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_ChangeFilter");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ChangeFilter, WidgetReference) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_ChangeFilter::WidgetReference' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ChangeFilter, K2Node_DynamicCast_AsBP_Active_Abilities_Window_Filter_Slot_V_3) == 0x000008, "Member 'BP_ActiveAbilitiesWindow_v3_C_ChangeFilter::K2Node_DynamicCast_AsBP_Active_Abilities_Window_Filter_Slot_V_3' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ChangeFilter, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_ActiveAbilitiesWindow_v3_C_ChangeFilter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ChangeFilter, CallFunc_GetAbilityWeaponType_ReturnValue) == 0x000011, "Member 'BP_ActiveAbilitiesWindow_v3_C_ChangeFilter::CallFunc_GetAbilityWeaponType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_ChangeFilter, CallFunc_IsFilterEnabled_ReturnValue) == 0x000012, "Member 'BP_ActiveAbilitiesWindow_v3_C_ChangeFilter::CallFunc_IsFilterEnabled_ReturnValue' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.HighlightActivePanel
// 0x0020 (0x0020 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel final
{
public:
	bool                                          InEquipState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel) == 0x000020, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel, InEquipState) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel::InEquipState' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel, Temp_bool_Variable) == 0x000001, "Member 'BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel, Temp_object_Variable) == 0x000008, "Member 'BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel, Temp_object_Variable_1) == 0x000010, "Member 'BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel, K2Node_Select_Default) == 0x000018, "Member 'BP_ActiveAbilitiesWindow_v3_C_HighlightActivePanel::K2Node_Select_Default' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.HighlightActiveSet1
// 0x0008 (0x0008 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet1 final
{
public:
	class UBP_AbilityLeftSlot_v3_C*               InSlot;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet1) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet1");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet1) == 0x000008, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet1");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet1, InSlot) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet1::InSlot' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.HighlightActiveSet2
// 0x0008 (0x0008 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet2 final
{
public:
	class UBP_AbilityLeftSlot_v3_C*               InSlot;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet2) == 0x000008, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet2");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet2) == 0x000008, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet2");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet2, InSlot) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_HighlightActiveSet2::InSlot' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.BtnHotkeyXClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyXClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyXClicked) == 0x000001, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyXClicked");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyXClicked) == 0x000001, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyXClicked");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyXClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_BtnHotkeyXClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_ActiveAbilitiesWindow_v3.BP_ActiveAbilitiesWindow_v3_C.SetBtnCloseVisibility
// 0x000B (0x000B - 0x0000)
struct BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility final
{
public:
	EInputDisplay                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 CallFunc_GetInputDisplay_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility) == 0x000001, "Wrong alignment on BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility");
static_assert(sizeof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility) == 0x00000B, "Wrong size on BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility, Temp_byte_Variable) == 0x000000, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility, Temp_byte_Variable_2) == 0x000002, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility, Temp_byte_Variable_3) == 0x000003, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility, Temp_byte_Variable_4) == 0x000004, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility, Temp_byte_Variable_5) == 0x000005, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility, Temp_byte_Variable_6) == 0x000006, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility, Temp_byte_Variable_7) == 0x000007, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility, Temp_byte_Variable_8) == 0x000008, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility, CallFunc_GetInputDisplay_ReturnValue) == 0x000009, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility::CallFunc_GetInputDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility, K2Node_Select_Default) == 0x00000A, "Member 'BP_ActiveAbilitiesWindow_v3_C_SetBtnCloseVisibility::K2Node_Select_Default' has a wrong offset!");

}

