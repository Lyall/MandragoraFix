#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Alchemist

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_VendorActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Alchemist.BP_Alchemist_C
// 0x0070 (0x0910 - 0x08A0)
class ABP_Alchemist_C final : public ABP_VendorActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Alchemist_C;                     // 0x08A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak1;                                               // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           Ak;                                                // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Alchemist_PipeSmoke;                            // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_AlchemistCat;                                   // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMiniMapActorComponent*                 MiniMapActor;                                      // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        NotifMarker;                                       // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SpeechBubbleComponent_C*            BP_SpeechBubbleComponent;                          // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractPrompWidgetComponent_C*     BP_InteractPrompWidgetComponent;                   // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Alchemist;                                      // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTriggerBoxComponent*                   TriggerBox;                                        // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       CameraSphere;                                      // 0x0900(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Alchemist_Anim_C*                   Alchemist;                                         // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveBeginPlay();
	void VisualVolumeEnter(class ALevelVisualVolume* Volume);
	void OnVfxEvent(class FName VfxEventType);
	void ExecuteUbergraph_BP_Alchemist(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Alchemist_C">();
	}
	static class ABP_Alchemist_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Alchemist_C>();
	}
};
static_assert(alignof(ABP_Alchemist_C) == 0x000008, "Wrong alignment on ABP_Alchemist_C");
static_assert(sizeof(ABP_Alchemist_C) == 0x000910, "Wrong size on ABP_Alchemist_C");
static_assert(offsetof(ABP_Alchemist_C, UberGraphFrame_BP_Alchemist_C) == 0x0008A0, "Member 'ABP_Alchemist_C::UberGraphFrame_BP_Alchemist_C' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, Ak1) == 0x0008A8, "Member 'ABP_Alchemist_C::Ak1' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, Ak) == 0x0008B0, "Member 'ABP_Alchemist_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, NS_Alchemist_PipeSmoke) == 0x0008B8, "Member 'ABP_Alchemist_C::NS_Alchemist_PipeSmoke' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, SK_AlchemistCat) == 0x0008C0, "Member 'ABP_Alchemist_C::SK_AlchemistCat' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, Scene) == 0x0008C8, "Member 'ABP_Alchemist_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, MiniMapActor) == 0x0008D0, "Member 'ABP_Alchemist_C::MiniMapActor' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, NotifMarker) == 0x0008D8, "Member 'ABP_Alchemist_C::NotifMarker' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, BP_SpeechBubbleComponent) == 0x0008E0, "Member 'ABP_Alchemist_C::BP_SpeechBubbleComponent' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, BP_InteractPrompWidgetComponent) == 0x0008E8, "Member 'ABP_Alchemist_C::BP_InteractPrompWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, SK_Alchemist) == 0x0008F0, "Member 'ABP_Alchemist_C::SK_Alchemist' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, TriggerBox) == 0x0008F8, "Member 'ABP_Alchemist_C::TriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, CameraSphere) == 0x000900, "Member 'ABP_Alchemist_C::CameraSphere' has a wrong offset!");
static_assert(offsetof(ABP_Alchemist_C, Alchemist) == 0x000908, "Member 'ABP_Alchemist_C::Alchemist' has a wrong offset!");

}

