#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnimatedProgressBarMagicArmor

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor
// 0x0068 (0x0068 - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_NewMin;                               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_NewMax;                               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_LengthRatio;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_NewValue;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHighlightChange;                     // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNeedExtraHighlight;                  // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor) == 0x000008, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor) == 0x000068, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, EntryPoint) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, K2Node_Event_MyGeometry) == 0x000004, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, K2Node_Event_IsDesignTime) == 0x000040, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000048, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, K2Node_Event_NewMin) == 0x000050, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::K2Node_Event_NewMin' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, K2Node_Event_NewMax) == 0x000054, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::K2Node_Event_NewMax' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, K2Node_Event_LengthRatio) == 0x000058, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::K2Node_Event_LengthRatio' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, K2Node_Event_bAnimate_1) == 0x00005C, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, K2Node_Event_NewValue) == 0x000060, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::K2Node_Event_NewValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, K2Node_Event_bHighlightChange) == 0x000064, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::K2Node_Event_bHighlightChange' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, K2Node_Event_bAnimate) == 0x000065, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor, K2Node_Event_bNeedExtraHighlight) == 0x000066, "Member 'BP_AnimatedProgressBarMagicArmor_C_ExecuteUbergraph_BP_AnimatedProgressBarMagicArmor::K2Node_Event_bNeedExtraHighlight' has a wrong offset!");

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_Tick) == 0x000004, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_Tick");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_Tick) == 0x00003C, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_Tick");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Tick, MyGeometry) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_AnimatedProgressBarMagicArmor_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.OnSetNewValue
// 0x0008 (0x0008 - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHighlightChange;                                  // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNeedExtraHighlight;                               // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue) == 0x000004, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue) == 0x000008, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue, NewValue) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue::NewValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue, bHighlightChange) == 0x000004, "Member 'BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue::bHighlightChange' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue, bAnimate) == 0x000005, "Member 'BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue::bAnimate' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue, bNeedExtraHighlight) == 0x000006, "Member 'BP_AnimatedProgressBarMagicArmor_C_OnSetNewValue::bNeedExtraHighlight' has a wrong offset!");

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.OnSetNewMinMax
// 0x0010 (0x0010 - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax final
{
public:
	float                                         NewMin;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewMax;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LengthRatio;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAnimate;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax) == 0x000004, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax) == 0x000010, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax, NewMin) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax::NewMin' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax, NewMax) == 0x000004, "Member 'BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax::NewMax' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax, LengthRatio) == 0x000008, "Member 'BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax::LengthRatio' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax, bAnimate) == 0x00000C, "Member 'BP_AnimatedProgressBarMagicArmor_C_OnSetNewMinMax::bAnimate' has a wrong offset!");

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_PreConstruct) == 0x000001, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_PreConstruct");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_PreConstruct) == 0x000001, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_PreConstruct");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.SetNewValue
// 0x0024 (0x0024 - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_SetNewValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HighlightChange_0;                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Animate;                                           // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_NormalizeToRange_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue) == 0x000004, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_SetNewValue");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue) == 0x000024, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_SetNewValue");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, NewValue) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::NewValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, HighlightChange_0) == 0x000004, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::HighlightChange_0' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, Animate) == 0x000005, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::Animate' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000006, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000007, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000010, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000014, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, CallFunc_Abs_ReturnValue) == 0x000018, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_SetNewValue, CallFunc_NormalizeToRange_ReturnValue) == 0x000020, "Member 'BP_AnimatedProgressBarMagicArmor_C_SetNewValue::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.UpdateHighlight
// 0x001C (0x001C - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight final
{
public:
	float                                         CurrentPercent_0;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewPercent;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight) == 0x000004, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight) == 0x00001C, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight, CurrentPercent_0) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight::CurrentPercent_0' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight, NewPercent) == 0x000004, "Member 'BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight::NewPercent' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight, Temp_bool_Variable) == 0x000008, "Member 'BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight, Temp_float_Variable) == 0x000014, "Member 'BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight, K2Node_Select_Default) == 0x000018, "Member 'BP_AnimatedProgressBarMagicArmor_C_UpdateHighlight::K2Node_Select_Default' has a wrong offset!");

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.TestWithRandom
// 0x0004 (0x0004 - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_TestWithRandom final
{
public:
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_TestWithRandom) == 0x000004, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_TestWithRandom");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_TestWithRandom) == 0x000004, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_TestWithRandom");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_TestWithRandom, CallFunc_RandomFloatInRange_ReturnValue) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_TestWithRandom::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.Set New Min Max
// 0x0010 (0x0010 - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max final
{
public:
	float                                         NewMin;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewMax;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LengthRatio;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate_;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max) == 0x000004, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max) == 0x000010, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max, NewMin) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max::NewMin' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max, NewMax) == 0x000004, "Member 'BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max::NewMax' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max, LengthRatio) == 0x000008, "Member 'BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max::LengthRatio' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max, Animate_) == 0x00000C, "Member 'BP_AnimatedProgressBarMagicArmor_C_Set_New_Min_Max::Animate_' has a wrong offset!");

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.AnimateBar
// 0x0028 (0x0028 - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_AnimateBar final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar) == 0x000004, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_AnimateBar");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar) == 0x000028, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_AnimateBar");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar, InDeltaTime) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_AnimateBar::InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AnimatedProgressBarMagicArmor_C_AnimateBar::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_AnimatedProgressBarMagicArmor_C_AnimateBar::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_AnimatedProgressBarMagicArmor_C_AnimateBar::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000010, "Member 'BP_AnimatedProgressBarMagicArmor_C_AnimateBar::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_AnimatedProgressBarMagicArmor_C_AnimateBar::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_AnimatedProgressBarMagicArmor_C_AnimateBar::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar, CallFunc_Abs_ReturnValue) == 0x00001C, "Member 'BP_AnimatedProgressBarMagicArmor_C_AnimateBar::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000020, "Member 'BP_AnimatedProgressBarMagicArmor_C_AnimateBar::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_AnimateBar, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000024, "Member 'BP_AnimatedProgressBarMagicArmor_C_AnimateBar::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.Resize Bar
// 0x0038 (0x0038 - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_Resize_Bar final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LengthRatio;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate;                                           // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar) == 0x000008, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_Resize_Bar");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar) == 0x000038, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_Resize_Bar");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, Min) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::Min' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, Max) == 0x000004, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::Max' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, LengthRatio) == 0x000008, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::LengthRatio' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, Animate) == 0x00000C, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::Animate' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, Temp_bool_Variable) == 0x00000D, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000020, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, K2Node_Select_Default) == 0x00002C, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_Resize_Bar, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_AnimatedProgressBarMagicArmor_C_Resize_Bar::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AnimatedProgressBarMagicArmor.BP_AnimatedProgressBarMagicArmor_C.OnPaint
// 0x0030 (0x0030 - 0x0000)
struct BP_AnimatedProgressBarMagicArmor_C_OnPaint final
{
public:
	struct FPaintContext                          Context;                                           // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBarMagicArmor_C_OnPaint) == 0x000008, "Wrong alignment on BP_AnimatedProgressBarMagicArmor_C_OnPaint");
static_assert(sizeof(BP_AnimatedProgressBarMagicArmor_C_OnPaint) == 0x000030, "Wrong size on BP_AnimatedProgressBarMagicArmor_C_OnPaint");
static_assert(offsetof(BP_AnimatedProgressBarMagicArmor_C_OnPaint, Context) == 0x000000, "Member 'BP_AnimatedProgressBarMagicArmor_C_OnPaint::Context' has a wrong offset!");

}

