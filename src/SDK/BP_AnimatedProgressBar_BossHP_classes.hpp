#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnimatedProgressBar_BossHP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "man_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C
// 0x00E0 (0x0388 - 0x02A8)
class UBP_AnimatedProgressBar_BossHP_C final : public UHUDAnimatedProgressBarUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimateBarrierDamageText;                          // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimateDamageText;                                 // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FadeOutAnim;                                       // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FadeInAnim;                                        // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UProgressBar*                           Bar;                                               // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             BarrierDamageText;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               BarSizeBox;                                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             BossName;                                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DamageText;                                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 End;                                               // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame_Glow;                                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame_Normal;                                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_AnimatedProgressBarLightBarrier_C*  LightBarrier;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_0;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         CurrentPercent;                                    // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisplayPercent;                                    // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinValue;                                          // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimSpeed;                                         // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxValue;                                          // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentValue;                                      // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HighlightChange;                                   // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           HighlightColorDecrease;                            // 0x0344(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BarMaterial;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               EndMaterial;                                       // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBelowZero;                                       // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LengthRatioValue;                                  // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(float NewWidth, bool Animate)> ResizeBarFrame;                                    // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Visible;                                           // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMiniBoss;                                        // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsTwoStage;                                        // 0x0382(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          RequestAnimateBar;                                 // 0x0383(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMandragora;                                      // 0x0384(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsSmallScreen;                                     // 0x0385(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_BP_AnimatedProgressBar_BossHP(int32 EntryPoint);
	void OnSetBarrierDamageValue(int32 InBarrierDamageValue);
	void OnHideBarrierDamageText();
	void OnShowBarrierDamageText();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnSetDamageValue(int32 InDamageValue, bool bInCriticalHit);
	void OnHideDamageText();
	void OnShowDamageText();
	void OnSetNewValue(float NewValue, bool bHighlightChange, bool bAnimate, bool bNeedExtraHighlight);
	void OnSetNewMinMax(float NewMin, float NewMax, float LengthRatio, bool bAnimate);
	void PreConstruct(bool IsDesignTime);
	void SetNewValue(float NewValue, bool HighlightChange_0, bool Animate);
	void UpdateHighlight(float CurrentPercent_0, float NewPercent);
	void TestWithRandom();
	void SetNewMinMax(float NewMin, float NewMax, bool Animate_);
	void AnimateBar(float InDeltaTime);
	void AnimateBarColor();
	void Set_Boss_Name(const class FText& InBossName);
	void FadeIn();
	void FadeOut();
	void Toggle_Mini_Boss(bool InIsMiniBoss);
	void ToggleTwoStage(bool InIsTwoStage);
	void SetBossBar(bool InMiniBoss, bool InTwoStageBossBar, bool InMandragora);
	void SetLightBarrier(float LightBarrierCurrentValue, float LightBarrierMaxValue);
	void SetDamageTextOffset();
	void ToggleMandragora(bool InIsMandragora);
	void SetDamageTextVisible(bool InVisible);
	void SetBarrierDamageTextVisible(bool InVisible);
	void ToggleSmallScreen(bool InIsSmallScreen);

	void OnPaint(struct FPaintContext& Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AnimatedProgressBar_BossHP_C">();
	}
	static class UBP_AnimatedProgressBar_BossHP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AnimatedProgressBar_BossHP_C>();
	}
};
static_assert(alignof(UBP_AnimatedProgressBar_BossHP_C) == 0x000008, "Wrong alignment on UBP_AnimatedProgressBar_BossHP_C");
static_assert(sizeof(UBP_AnimatedProgressBar_BossHP_C) == 0x000388, "Wrong size on UBP_AnimatedProgressBar_BossHP_C");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, UberGraphFrame) == 0x0002A8, "Member 'UBP_AnimatedProgressBar_BossHP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, AnimateBarrierDamageText) == 0x0002B0, "Member 'UBP_AnimatedProgressBar_BossHP_C::AnimateBarrierDamageText' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, AnimateDamageText) == 0x0002B8, "Member 'UBP_AnimatedProgressBar_BossHP_C::AnimateDamageText' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, FadeOutAnim) == 0x0002C0, "Member 'UBP_AnimatedProgressBar_BossHP_C::FadeOutAnim' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, FadeInAnim) == 0x0002C8, "Member 'UBP_AnimatedProgressBar_BossHP_C::FadeInAnim' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, Bar) == 0x0002D0, "Member 'UBP_AnimatedProgressBar_BossHP_C::Bar' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, BarrierDamageText) == 0x0002D8, "Member 'UBP_AnimatedProgressBar_BossHP_C::BarrierDamageText' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, BarSizeBox) == 0x0002E0, "Member 'UBP_AnimatedProgressBar_BossHP_C::BarSizeBox' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, BossName) == 0x0002E8, "Member 'UBP_AnimatedProgressBar_BossHP_C::BossName' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, DamageText) == 0x0002F0, "Member 'UBP_AnimatedProgressBar_BossHP_C::DamageText' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, End) == 0x0002F8, "Member 'UBP_AnimatedProgressBar_BossHP_C::End' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, Frame_Glow) == 0x000300, "Member 'UBP_AnimatedProgressBar_BossHP_C::Frame_Glow' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, Frame_Normal) == 0x000308, "Member 'UBP_AnimatedProgressBar_BossHP_C::Frame_Normal' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, LightBarrier) == 0x000310, "Member 'UBP_AnimatedProgressBar_BossHP_C::LightBarrier' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, Overlay_0) == 0x000318, "Member 'UBP_AnimatedProgressBar_BossHP_C::Overlay_0' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, SizeBox) == 0x000320, "Member 'UBP_AnimatedProgressBar_BossHP_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, CurrentPercent) == 0x000328, "Member 'UBP_AnimatedProgressBar_BossHP_C::CurrentPercent' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, DisplayPercent) == 0x00032C, "Member 'UBP_AnimatedProgressBar_BossHP_C::DisplayPercent' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, MinValue) == 0x000330, "Member 'UBP_AnimatedProgressBar_BossHP_C::MinValue' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, AnimSpeed) == 0x000334, "Member 'UBP_AnimatedProgressBar_BossHP_C::AnimSpeed' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, MaxValue) == 0x000338, "Member 'UBP_AnimatedProgressBar_BossHP_C::MaxValue' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, CurrentValue) == 0x00033C, "Member 'UBP_AnimatedProgressBar_BossHP_C::CurrentValue' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, HighlightChange) == 0x000340, "Member 'UBP_AnimatedProgressBar_BossHP_C::HighlightChange' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, HighlightColorDecrease) == 0x000344, "Member 'UBP_AnimatedProgressBar_BossHP_C::HighlightColorDecrease' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, BarMaterial) == 0x000358, "Member 'UBP_AnimatedProgressBar_BossHP_C::BarMaterial' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, EndMaterial) == 0x000360, "Member 'UBP_AnimatedProgressBar_BossHP_C::EndMaterial' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, IsBelowZero) == 0x000368, "Member 'UBP_AnimatedProgressBar_BossHP_C::IsBelowZero' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, LengthRatioValue) == 0x00036C, "Member 'UBP_AnimatedProgressBar_BossHP_C::LengthRatioValue' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, ResizeBarFrame) == 0x000370, "Member 'UBP_AnimatedProgressBar_BossHP_C::ResizeBarFrame' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, Visible) == 0x000380, "Member 'UBP_AnimatedProgressBar_BossHP_C::Visible' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, IsMiniBoss) == 0x000381, "Member 'UBP_AnimatedProgressBar_BossHP_C::IsMiniBoss' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, IsTwoStage) == 0x000382, "Member 'UBP_AnimatedProgressBar_BossHP_C::IsTwoStage' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, RequestAnimateBar) == 0x000383, "Member 'UBP_AnimatedProgressBar_BossHP_C::RequestAnimateBar' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, IsMandragora) == 0x000384, "Member 'UBP_AnimatedProgressBar_BossHP_C::IsMandragora' has a wrong offset!");
static_assert(offsetof(UBP_AnimatedProgressBar_BossHP_C, IsSmallScreen) == 0x000385, "Member 'UBP_AnimatedProgressBar_BossHP_C::IsSmallScreen' has a wrong offset!");

}

