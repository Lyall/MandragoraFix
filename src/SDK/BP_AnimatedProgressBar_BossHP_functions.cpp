#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnimatedProgressBar_BossHP

#include "Basic.hpp"

#include "BP_AnimatedProgressBar_BossHP_classes.hpp"
#include "BP_AnimatedProgressBar_BossHP_parameters.hpp"


namespace SDK
{

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.ExecuteUbergraph_BP_AnimatedProgressBar_BossHP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AnimatedProgressBar_BossHP_C::ExecuteUbergraph_BP_AnimatedProgressBar_BossHP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "ExecuteUbergraph_BP_AnimatedProgressBar_BossHP");

	Params::BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnSetBarrierDamageValue
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   InBarrierDamageValue                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AnimatedProgressBar_BossHP_C::OnSetBarrierDamageValue(int32 InBarrierDamageValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "OnSetBarrierDamageValue");

	Params::BP_AnimatedProgressBar_BossHP_C_OnSetBarrierDamageValue Parms{};

	Parms.InBarrierDamageValue = InBarrierDamageValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnHideBarrierDamageText
// (Event, Protected, BlueprintEvent)

void UBP_AnimatedProgressBar_BossHP_C::OnHideBarrierDamageText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "OnHideBarrierDamageText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnShowBarrierDamageText
// (Event, Protected, BlueprintEvent)

void UBP_AnimatedProgressBar_BossHP_C::OnShowBarrierDamageText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "OnShowBarrierDamageText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AnimatedProgressBar_BossHP_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "Tick");

	Params::BP_AnimatedProgressBar_BossHP_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnSetDamageValue
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   InDamageValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInCriticalHit                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::OnSetDamageValue(int32 InDamageValue, bool bInCriticalHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "OnSetDamageValue");

	Params::BP_AnimatedProgressBar_BossHP_C_OnSetDamageValue Parms{};

	Parms.InDamageValue = InDamageValue;
	Parms.bInCriticalHit = bInCriticalHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnHideDamageText
// (Event, Protected, BlueprintEvent)

void UBP_AnimatedProgressBar_BossHP_C::OnHideDamageText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "OnHideDamageText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnShowDamageText
// (Event, Protected, BlueprintEvent)

void UBP_AnimatedProgressBar_BossHP_C::OnShowDamageText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "OnShowDamageText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnSetNewValue
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHighlightChange                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAnimate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNeedExtraHighlight                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::OnSetNewValue(float NewValue, bool bHighlightChange, bool bAnimate, bool bNeedExtraHighlight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "OnSetNewValue");

	Params::BP_AnimatedProgressBar_BossHP_C_OnSetNewValue Parms{};

	Parms.NewValue = NewValue;
	Parms.bHighlightChange = bHighlightChange;
	Parms.bAnimate = bAnimate;
	Parms.bNeedExtraHighlight = bNeedExtraHighlight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnSetNewMinMax
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewMin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewMax                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LengthRatio                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAnimate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::OnSetNewMinMax(float NewMin, float NewMax, float LengthRatio, bool bAnimate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "OnSetNewMinMax");

	Params::BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax Parms{};

	Parms.NewMin = NewMin;
	Parms.NewMax = NewMax;
	Parms.LengthRatio = LengthRatio;
	Parms.bAnimate = bAnimate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "PreConstruct");

	Params::BP_AnimatedProgressBar_BossHP_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetNewValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HighlightChange_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Animate                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::SetNewValue(float NewValue, bool HighlightChange_0, bool Animate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "SetNewValue");

	Params::BP_AnimatedProgressBar_BossHP_C_SetNewValue Parms{};

	Parms.NewValue = NewValue;
	Parms.HighlightChange_0 = HighlightChange_0;
	Parms.Animate = Animate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.UpdateHighlight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentPercent_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewPercent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AnimatedProgressBar_BossHP_C::UpdateHighlight(float CurrentPercent_0, float NewPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "UpdateHighlight");

	Params::BP_AnimatedProgressBar_BossHP_C_UpdateHighlight Parms{};

	Parms.CurrentPercent_0 = CurrentPercent_0;
	Parms.NewPercent = NewPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.TestWithRandom
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AnimatedProgressBar_BossHP_C::TestWithRandom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "TestWithRandom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetNewMinMax
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewMin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewMax                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Animate_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::SetNewMinMax(float NewMin, float NewMax, bool Animate_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "SetNewMinMax");

	Params::BP_AnimatedProgressBar_BossHP_C_SetNewMinMax Parms{};

	Parms.NewMin = NewMin;
	Parms.NewMax = NewMax;
	Parms.Animate_ = Animate_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.AnimateBar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AnimatedProgressBar_BossHP_C::AnimateBar(float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "AnimateBar");

	Params::BP_AnimatedProgressBar_BossHP_C_AnimateBar Parms{};

	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.AnimateBarColor
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AnimatedProgressBar_BossHP_C::AnimateBarColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "AnimateBarColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.Set Boss Name
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InBossName                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_AnimatedProgressBar_BossHP_C::Set_Boss_Name(const class FText& InBossName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "Set Boss Name");

	Params::BP_AnimatedProgressBar_BossHP_C_Set_Boss_Name Parms{};

	Parms.InBossName = std::move(InBossName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.FadeIn
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AnimatedProgressBar_BossHP_C::FadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "FadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.FadeOut
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AnimatedProgressBar_BossHP_C::FadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "FadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.Toggle Mini Boss
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsMiniBoss                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::Toggle_Mini_Boss(bool InIsMiniBoss)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "Toggle Mini Boss");

	Params::BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss Parms{};

	Parms.InIsMiniBoss = InIsMiniBoss;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.ToggleTwoStage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsTwoStage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::ToggleTwoStage(bool InIsTwoStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "ToggleTwoStage");

	Params::BP_AnimatedProgressBar_BossHP_C_ToggleTwoStage Parms{};

	Parms.InIsTwoStage = InIsTwoStage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetBossBar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InMiniBoss                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InTwoStageBossBar                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InMandragora                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::SetBossBar(bool InMiniBoss, bool InTwoStageBossBar, bool InMandragora)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "SetBossBar");

	Params::BP_AnimatedProgressBar_BossHP_C_SetBossBar Parms{};

	Parms.InMiniBoss = InMiniBoss;
	Parms.InTwoStageBossBar = InTwoStageBossBar;
	Parms.InMandragora = InMandragora;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetLightBarrier
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   LightBarrierCurrentValue                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LightBarrierMaxValue                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AnimatedProgressBar_BossHP_C::SetLightBarrier(float LightBarrierCurrentValue, float LightBarrierMaxValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "SetLightBarrier");

	Params::BP_AnimatedProgressBar_BossHP_C_SetLightBarrier Parms{};

	Parms.LightBarrierCurrentValue = LightBarrierCurrentValue;
	Parms.LightBarrierMaxValue = LightBarrierMaxValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetDamageTextOffset
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AnimatedProgressBar_BossHP_C::SetDamageTextOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "SetDamageTextOffset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.ToggleMandragora
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsMandragora                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::ToggleMandragora(bool InIsMandragora)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "ToggleMandragora");

	Params::BP_AnimatedProgressBar_BossHP_C_ToggleMandragora Parms{};

	Parms.InIsMandragora = InIsMandragora;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetDamageTextVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::SetDamageTextVisible(bool InVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "SetDamageTextVisible");

	Params::BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible Parms{};

	Parms.InVisible = InVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetBarrierDamageTextVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::SetBarrierDamageTextVisible(bool InVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "SetBarrierDamageTextVisible");

	Params::BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible Parms{};

	Parms.InVisible = InVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.ToggleSmallScreen
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsSmallScreen                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::ToggleSmallScreen(bool InIsSmallScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "ToggleSmallScreen");

	Params::BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen Parms{};

	Parms.InIsSmallScreen = InIsSmallScreen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnPaint
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FPaintContext                    Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBP_AnimatedProgressBar_BossHP_C::OnPaint(struct FPaintContext& Context) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimatedProgressBar_BossHP_C", "OnPaint");

	Params::BP_AnimatedProgressBar_BossHP_C_OnPaint Parms{};

	Parms.Context = std::move(Context);

	UObject::ProcessEvent(Func, &Parms);

	Context = std::move(Parms.Context);
}

}

