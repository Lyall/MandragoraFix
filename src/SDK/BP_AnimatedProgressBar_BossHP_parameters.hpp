#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnimatedProgressBar_BossHP

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.ExecuteUbergraph_BP_AnimatedProgressBar_BossHP
// 0x0140 (0x0140 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_NewMin;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_NewMax;                               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_LengthRatio;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_NewValue;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHighlightChange;                     // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNeedExtraHighlight;                  // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InDamageValue;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInCriticalHit;                       // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0080(0x0028)()
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x00A8(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00C8(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0104(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         K2Node_Event_InBarrierDamageValue;                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_IntToText_ReturnValue_1;                  // 0x0118(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue_1;         // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP) == 0x000008, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP) == 0x000140, "Wrong size on BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, EntryPoint) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, Temp_bool_Variable) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, Temp_struct_Variable) == 0x000008, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, Temp_struct_Variable_1) == 0x000018, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, Temp_bool_Variable_1) == 0x000028, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, Temp_struct_Variable_2) == 0x00002C, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, Temp_struct_Variable_3) == 0x000034, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_IsDesignTime) == 0x00003C, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000040, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_NewMin) == 0x000048, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_NewMin' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_NewMax) == 0x00004C, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_NewMax' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_LengthRatio) == 0x000050, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_LengthRatio' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_bAnimate_1) == 0x000054, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_NewValue) == 0x000058, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_NewValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_bHighlightChange) == 0x00005C, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_bHighlightChange' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_bAnimate) == 0x00005D, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_bNeedExtraHighlight) == 0x00005E, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_bNeedExtraHighlight' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_InDamageValue) == 0x000060, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_InDamageValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_bInCriticalHit) == 0x000064, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_bInCriticalHit' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Select_Default) == 0x000068, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Select_Default_1) == 0x000078, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_MakeStruct_SlateColor) == 0x000080, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, CallFunc_IntToText_ReturnValue) == 0x0000A8, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::CallFunc_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, CallFunc_PlayAnimation_ReturnValue) == 0x0000C0, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_MyGeometry) == 0x0000C8, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_InDeltaTime) == 0x000100, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_CreateDelegate_OutputDelegate) == 0x000104, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, K2Node_Event_InBarrierDamageValue) == 0x000114, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::K2Node_Event_InBarrierDamageValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, CallFunc_IntToText_ReturnValue_1) == 0x000118, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::CallFunc_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, CallFunc_PlayAnimation_ReturnValue_1) == 0x000130, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000138, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP, CallFunc_IsAnimationPlaying_ReturnValue_1) == 0x000139, "Member 'BP_AnimatedProgressBar_BossHP_C_ExecuteUbergraph_BP_AnimatedProgressBar_BossHP::CallFunc_IsAnimationPlaying_ReturnValue_1' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnSetBarrierDamageValue
// 0x0004 (0x0004 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_OnSetBarrierDamageValue final
{
public:
	int32                                         InBarrierDamageValue;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_OnSetBarrierDamageValue) == 0x000004, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_OnSetBarrierDamageValue");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_OnSetBarrierDamageValue) == 0x000004, "Wrong size on BP_AnimatedProgressBar_BossHP_C_OnSetBarrierDamageValue");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnSetBarrierDamageValue, InBarrierDamageValue) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_OnSetBarrierDamageValue::InBarrierDamageValue' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_Tick) == 0x000004, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_Tick");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_Tick) == 0x00003C, "Wrong size on BP_AnimatedProgressBar_BossHP_C_Tick");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Tick, MyGeometry) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_AnimatedProgressBar_BossHP_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnSetDamageValue
// 0x0008 (0x0008 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_OnSetDamageValue final
{
public:
	int32                                         InDamageValue;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInCriticalHit;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_OnSetDamageValue) == 0x000004, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_OnSetDamageValue");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_OnSetDamageValue) == 0x000008, "Wrong size on BP_AnimatedProgressBar_BossHP_C_OnSetDamageValue");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnSetDamageValue, InDamageValue) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_OnSetDamageValue::InDamageValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnSetDamageValue, bInCriticalHit) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_OnSetDamageValue::bInCriticalHit' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnSetNewValue
// 0x0008 (0x0008 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_OnSetNewValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHighlightChange;                                  // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNeedExtraHighlight;                               // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_OnSetNewValue) == 0x000004, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_OnSetNewValue");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_OnSetNewValue) == 0x000008, "Wrong size on BP_AnimatedProgressBar_BossHP_C_OnSetNewValue");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnSetNewValue, NewValue) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_OnSetNewValue::NewValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnSetNewValue, bHighlightChange) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_OnSetNewValue::bHighlightChange' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnSetNewValue, bAnimate) == 0x000005, "Member 'BP_AnimatedProgressBar_BossHP_C_OnSetNewValue::bAnimate' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnSetNewValue, bNeedExtraHighlight) == 0x000006, "Member 'BP_AnimatedProgressBar_BossHP_C_OnSetNewValue::bNeedExtraHighlight' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnSetNewMinMax
// 0x0010 (0x0010 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax final
{
public:
	float                                         NewMin;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewMax;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LengthRatio;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAnimate;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax) == 0x000004, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax) == 0x000010, "Wrong size on BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax, NewMin) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax::NewMin' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax, NewMax) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax::NewMax' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax, LengthRatio) == 0x000008, "Member 'BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax::LengthRatio' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax, bAnimate) == 0x00000C, "Member 'BP_AnimatedProgressBar_BossHP_C_OnSetNewMinMax::bAnimate' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_PreConstruct) == 0x000001, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_PreConstruct");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_PreConstruct) == 0x000001, "Wrong size on BP_AnimatedProgressBar_BossHP_C_PreConstruct");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetNewValue
// 0x0048 (0x0048 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_SetNewValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HighlightChange_0;                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Animate;                                           // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_NormalizeToRange_ReturnValue;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_SetNewValue) == 0x000008, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_SetNewValue");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_SetNewValue) == 0x000048, "Wrong size on BP_AnimatedProgressBar_BossHP_C_SetNewValue");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, NewValue) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::NewValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, HighlightChange_0) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::HighlightChange_0' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, Animate) == 0x000005, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::Animate' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_MakeVector2D_ReturnValue) == 0x000024, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_MakeVector2D_ReturnValue_1) == 0x00002C, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000034, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_Abs_ReturnValue) == 0x000038, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_BooleanAND_ReturnValue) == 0x00003D, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewValue, CallFunc_NormalizeToRange_ReturnValue) == 0x000040, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewValue::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.UpdateHighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_UpdateHighlight final
{
public:
	float                                         CurrentPercent_0;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewPercent;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_UpdateHighlight) == 0x000004, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_UpdateHighlight");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_UpdateHighlight) == 0x000008, "Wrong size on BP_AnimatedProgressBar_BossHP_C_UpdateHighlight");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_UpdateHighlight, CurrentPercent_0) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_UpdateHighlight::CurrentPercent_0' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_UpdateHighlight, NewPercent) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_UpdateHighlight::NewPercent' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.TestWithRandom
// 0x0004 (0x0004 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_TestWithRandom final
{
public:
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_TestWithRandom) == 0x000004, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_TestWithRandom");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_TestWithRandom) == 0x000004, "Wrong size on BP_AnimatedProgressBar_BossHP_C_TestWithRandom");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_TestWithRandom, CallFunc_RandomFloatInRange_ReturnValue) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_TestWithRandom::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetNewMinMax
// 0x000C (0x000C - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_SetNewMinMax final
{
public:
	float                                         NewMin;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewMax;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate_;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_SetNewMinMax) == 0x000004, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_SetNewMinMax");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_SetNewMinMax) == 0x00000C, "Wrong size on BP_AnimatedProgressBar_BossHP_C_SetNewMinMax");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewMinMax, NewMin) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewMinMax::NewMin' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewMinMax, NewMax) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewMinMax::NewMax' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetNewMinMax, Animate_) == 0x000008, "Member 'BP_AnimatedProgressBar_BossHP_C_SetNewMinMax::Animate_' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.AnimateBar
// 0x0040 (0x0040 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_AnimateBar final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_AnimateBar) == 0x000008, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_AnimateBar");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_AnimateBar) == 0x000040, "Wrong size on BP_AnimatedProgressBar_BossHP_C_AnimateBar");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, InDeltaTime) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000010, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_MakeVector2D_ReturnValue) == 0x00001C, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_MakeVector2D_ReturnValue_1) == 0x000024, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000030, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_Abs_ReturnValue) == 0x000034, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000038, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_AnimateBar, CallFunc_FInterpTo_Constant_ReturnValue) == 0x00003C, "Member 'BP_AnimatedProgressBar_BossHP_C_AnimateBar::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.Set Boss Name
// 0x0018 (0x0018 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_Set_Boss_Name final
{
public:
	class FText                                   InBossName;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_Set_Boss_Name) == 0x000008, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_Set_Boss_Name");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_Set_Boss_Name) == 0x000018, "Wrong size on BP_AnimatedProgressBar_BossHP_C_Set_Boss_Name");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Set_Boss_Name, InBossName) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_Set_Boss_Name::InBossName' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.FadeIn
// 0x0008 (0x0008 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_FadeIn final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_FadeIn) == 0x000008, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_FadeIn");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_FadeIn) == 0x000008, "Wrong size on BP_AnimatedProgressBar_BossHP_C_FadeIn");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_FadeIn, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_FadeIn::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.FadeOut
// 0x0008 (0x0008 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_FadeOut final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_FadeOut) == 0x000008, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_FadeOut");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_FadeOut) == 0x000008, "Wrong size on BP_AnimatedProgressBar_BossHP_C_FadeOut");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_FadeOut, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_FadeOut::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.Toggle Mini Boss
// 0x0170 (0x0170 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss final
{
public:
	bool                                          InIsMiniBoss;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BarWidthMiniboss;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BarWidthBoss;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_7;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_8;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_9;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_10;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_10;                             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_11;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_3;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_4;                           // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                             K2Node_Select_Default_5;                           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_6;                           // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0114(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0124(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_2;          // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_7;                           // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_8;                           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_9;                           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_10;                          // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss) == 0x000008, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss) == 0x000170, "Wrong size on BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, InIsMiniBoss) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::InIsMiniBoss' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, BarWidthMiniboss) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::BarWidthMiniboss' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, BarWidthBoss) == 0x000008, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::BarWidthBoss' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_bool_Variable) == 0x00000C, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable) == 0x000010, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable_1) == 0x000018, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_bool_Variable_1) == 0x000020, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable_2) == 0x000028, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable_3) == 0x000030, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_bool_Variable_2) == 0x000038, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable_4) == 0x000040, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable_5) == 0x000048, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_bool_Variable_3) == 0x000050, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable_6) == 0x000058, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable_7) == 0x000060, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_bool_Variable_4) == 0x000068, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_float_Variable) == 0x00006C, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_float_Variable_1) == 0x000070, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_bool_Variable_5) == 0x000074, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable_8) == 0x000078, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_bool_Variable_6) == 0x000080, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_float_Variable_2) == 0x000084, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_float_Variable_3) == 0x000088, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_bool_Variable_7) == 0x00008C, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_bool_Variable_8) == 0x00008D, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable_9) == 0x000090, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_bool_Variable_9) == 0x000098, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable_10) == 0x0000A0, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_bool_Variable_10) == 0x0000A8, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, Temp_object_Variable_11) == 0x0000B0, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_Select_Default) == 0x0000B8, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_Select_Default_1) == 0x0000C0, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_Select_Default_2) == 0x0000C8, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_Select_Default_3) == 0x0000D0, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x0000D8, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_Select_Default_4) == 0x0000E0, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x0000E8, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_MakeStruct_Margin) == 0x0000F0, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_Select_Default_5) == 0x000100, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000108, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_Select_Default_6) == 0x00010C, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000110, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_MakeStruct_Margin_1) == 0x000114, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, CallFunc_MakeVector2D_ReturnValue) == 0x000124, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, CallFunc_SlotAsOverlaySlot_ReturnValue_2) == 0x000130, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::CallFunc_SlotAsOverlaySlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_Select_Default_7) == 0x000138, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_Select_Default_8) == 0x000140, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000148, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_Select_Default_9) == 0x000150, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_Select_Default_10) == 0x000158, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000160, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss, K2Node_DynamicCast_bSuccess) == 0x000168, "Member 'BP_AnimatedProgressBar_BossHP_C_Toggle_Mini_Boss::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.ToggleTwoStage
// 0x0001 (0x0001 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_ToggleTwoStage final
{
public:
	bool                                          InIsTwoStage;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_ToggleTwoStage) == 0x000001, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_ToggleTwoStage");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_ToggleTwoStage) == 0x000001, "Wrong size on BP_AnimatedProgressBar_BossHP_C_ToggleTwoStage");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleTwoStage, InIsTwoStage) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleTwoStage::InIsTwoStage' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetBossBar
// 0x0003 (0x0003 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_SetBossBar final
{
public:
	bool                                          InMiniBoss;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InTwoStageBossBar;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InMandragora;                                      // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_SetBossBar) == 0x000001, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_SetBossBar");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_SetBossBar) == 0x000003, "Wrong size on BP_AnimatedProgressBar_BossHP_C_SetBossBar");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetBossBar, InMiniBoss) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_SetBossBar::InMiniBoss' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetBossBar, InTwoStageBossBar) == 0x000001, "Member 'BP_AnimatedProgressBar_BossHP_C_SetBossBar::InTwoStageBossBar' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetBossBar, InMandragora) == 0x000002, "Member 'BP_AnimatedProgressBar_BossHP_C_SetBossBar::InMandragora' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetLightBarrier
// 0x0014 (0x0014 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_SetLightBarrier final
{
public:
	float                                         LightBarrierCurrentValue;                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightBarrierMaxValue;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_SetLightBarrier) == 0x000004, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_SetLightBarrier");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_SetLightBarrier) == 0x000014, "Wrong size on BP_AnimatedProgressBar_BossHP_C_SetLightBarrier");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetLightBarrier, LightBarrierCurrentValue) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_SetLightBarrier::LightBarrierCurrentValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetLightBarrier, LightBarrierMaxValue) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_SetLightBarrier::LightBarrierMaxValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetLightBarrier, Temp_bool_Variable) == 0x000008, "Member 'BP_AnimatedProgressBar_BossHP_C_SetLightBarrier::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetLightBarrier, Temp_byte_Variable) == 0x000009, "Member 'BP_AnimatedProgressBar_BossHP_C_SetLightBarrier::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetLightBarrier, Temp_byte_Variable_1) == 0x00000A, "Member 'BP_AnimatedProgressBar_BossHP_C_SetLightBarrier::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetLightBarrier, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000B, "Member 'BP_AnimatedProgressBar_BossHP_C_SetLightBarrier::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetLightBarrier, K2Node_Select_Default) == 0x00000C, "Member 'BP_AnimatedProgressBar_BossHP_C_SetLightBarrier::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetLightBarrier, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AnimatedProgressBar_BossHP_C_SetLightBarrier::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetDamageTextOffset
// 0x0030 (0x0030 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset final
{
public:
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset) == 0x000004, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset) == 0x000030, "Wrong size on BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset, CallFunc_IsVisible_ReturnValue) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset, CallFunc_BreakVector2D_X) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset, CallFunc_BreakVector2D_Y) == 0x000008, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset, CallFunc_MakeVector2D_ReturnValue) == 0x00000C, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset, CallFunc_FMax_ReturnValue) == 0x000024, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset, CallFunc_MakeVector2D_ReturnValue_1) == 0x000028, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextOffset::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.ToggleMandragora
// 0x0088 (0x0088 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_ToggleMandragora final
{
public:
	bool                                          InIsMandragora;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0058(0x0028)()
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora) == 0x000008, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_ToggleMandragora");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora) == 0x000088, "Wrong size on BP_AnimatedProgressBar_BossHP_C_ToggleMandragora");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, InIsMandragora) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::InIsMandragora' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, Temp_bool_Variable) == 0x000001, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, Temp_float_Variable) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, Temp_float_Variable_1) == 0x000008, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, Temp_struct_Variable) == 0x000010, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, Temp_struct_Variable_1) == 0x000020, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, K2Node_Select_Default) == 0x000030, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, K2Node_Select_Default_1) == 0x000034, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, K2Node_MakeStruct_Margin) == 0x000044, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, K2Node_MakeStruct_SlateColor) == 0x000058, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleMandragora, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000080, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleMandragora::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetDamageTextVisible
// 0x0005 (0x0005 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible) == 0x000001, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible) == 0x000005, "Wrong size on BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible, InVisible) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible::InVisible' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible, Temp_bool_Variable) == 0x000001, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible, Temp_byte_Variable) == 0x000002, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible, Temp_byte_Variable_1) == 0x000003, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible, K2Node_Select_Default) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_SetDamageTextVisible::K2Node_Select_Default' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.SetBarrierDamageTextVisible
// 0x0005 (0x0005 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible) == 0x000001, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible) == 0x000005, "Wrong size on BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible, InVisible) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible::InVisible' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible, Temp_bool_Variable) == 0x000001, "Member 'BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible, Temp_byte_Variable) == 0x000002, "Member 'BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible, Temp_byte_Variable_1) == 0x000003, "Member 'BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible, K2Node_Select_Default) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_SetBarrierDamageTextVisible::K2Node_Select_Default' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.ToggleSmallScreen
// 0x0068 (0x0068 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0010(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen) == 0x000068, "Wrong size on BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen, Temp_int_Variable) == 0x000004, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen, Temp_int_Variable_1) == 0x000008, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen, K2Node_Select_Default) == 0x00000C, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo) == 0x000010, "Member 'BP_AnimatedProgressBar_BossHP_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function BP_AnimatedProgressBar_BossHP.BP_AnimatedProgressBar_BossHP_C.OnPaint
// 0x0030 (0x0030 - 0x0000)
struct BP_AnimatedProgressBar_BossHP_C_OnPaint final
{
public:
	struct FPaintContext                          Context;                                           // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(BP_AnimatedProgressBar_BossHP_C_OnPaint) == 0x000008, "Wrong alignment on BP_AnimatedProgressBar_BossHP_C_OnPaint");
static_assert(sizeof(BP_AnimatedProgressBar_BossHP_C_OnPaint) == 0x000030, "Wrong size on BP_AnimatedProgressBar_BossHP_C_OnPaint");
static_assert(offsetof(BP_AnimatedProgressBar_BossHP_C_OnPaint, Context) == 0x000000, "Member 'BP_AnimatedProgressBar_BossHP_C_OnPaint::Context' has a wrong offset!");

}

