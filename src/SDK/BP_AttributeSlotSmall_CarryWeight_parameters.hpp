#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AttributeSlotSmall_CarryWeight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AttributeSlotSmall_CarryWeight.BP_AttributeSlotSmall_CarryWeight_C.ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight
// 0x000C (0x000C - 0x0000)
struct BP_AttributeSlotSmall_CarryWeight_C_ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AttributeSlotSmall_CarryWeight_C_ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight) == 0x000004, "Wrong alignment on BP_AttributeSlotSmall_CarryWeight_C_ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight");
static_assert(sizeof(BP_AttributeSlotSmall_CarryWeight_C_ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight) == 0x00000C, "Wrong size on BP_AttributeSlotSmall_CarryWeight_C_ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight, EntryPoint) == 0x000000, "Member 'BP_AttributeSlotSmall_CarryWeight_C_ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight, K2Node_Event_Value) == 0x000004, "Member 'BP_AttributeSlotSmall_CarryWeight_C_ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight, K2Node_Event_IsDesignTime) == 0x000008, "Member 'BP_AttributeSlotSmall_CarryWeight_C_ExecuteUbergraph_BP_AttributeSlotSmall_CarryWeight::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function BP_AttributeSlotSmall_CarryWeight.BP_AttributeSlotSmall_CarryWeight_C.OnSetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct BP_AttributeSlotSmall_CarryWeight_C_OnSetCurrentValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttributeSlotSmall_CarryWeight_C_OnSetCurrentValue) == 0x000004, "Wrong alignment on BP_AttributeSlotSmall_CarryWeight_C_OnSetCurrentValue");
static_assert(sizeof(BP_AttributeSlotSmall_CarryWeight_C_OnSetCurrentValue) == 0x000004, "Wrong size on BP_AttributeSlotSmall_CarryWeight_C_OnSetCurrentValue");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_OnSetCurrentValue, Value) == 0x000000, "Member 'BP_AttributeSlotSmall_CarryWeight_C_OnSetCurrentValue::Value' has a wrong offset!");

// Function BP_AttributeSlotSmall_CarryWeight.BP_AttributeSlotSmall_CarryWeight_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_AttributeSlotSmall_CarryWeight_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AttributeSlotSmall_CarryWeight_C_PreConstruct) == 0x000001, "Wrong alignment on BP_AttributeSlotSmall_CarryWeight_C_PreConstruct");
static_assert(sizeof(BP_AttributeSlotSmall_CarryWeight_C_PreConstruct) == 0x000001, "Wrong size on BP_AttributeSlotSmall_CarryWeight_C_PreConstruct");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_AttributeSlotSmall_CarryWeight_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_AttributeSlotSmall_CarryWeight.BP_AttributeSlotSmall_CarryWeight_C.SetCurrentCarryWeightValue
// 0x0020 (0x0020 - 0x0000)
struct BP_AttributeSlotSmall_CarryWeight_C_SetCurrentCarryWeightValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetFormattedValueText_ReturnValue;        // 0x0008(0x0018)()
};
static_assert(alignof(BP_AttributeSlotSmall_CarryWeight_C_SetCurrentCarryWeightValue) == 0x000008, "Wrong alignment on BP_AttributeSlotSmall_CarryWeight_C_SetCurrentCarryWeightValue");
static_assert(sizeof(BP_AttributeSlotSmall_CarryWeight_C_SetCurrentCarryWeightValue) == 0x000020, "Wrong size on BP_AttributeSlotSmall_CarryWeight_C_SetCurrentCarryWeightValue");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetCurrentCarryWeightValue, Value) == 0x000000, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetCurrentCarryWeightValue::Value' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetCurrentCarryWeightValue, CallFunc_GetFormattedValueText_ReturnValue) == 0x000008, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetCurrentCarryWeightValue::CallFunc_GetFormattedValueText_ReturnValue' has a wrong offset!");

// Function BP_AttributeSlotSmall_CarryWeight.BP_AttributeSlotSmall_CarryWeight_C.SetMaxValue
// 0x00A0 (0x00A0 - 0x0000)
struct BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0030(0x0028)()
	class FText                                   CallFunc_GetFormattedValueText_ReturnValue;        // 0x0058(0x0018)()
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x0078(0x0028)()
};
static_assert(alignof(BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue) == 0x000008, "Wrong alignment on BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue");
static_assert(sizeof(BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue) == 0x0000A0, "Wrong size on BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue, Value) == 0x000000, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue::Value' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue, K2Node_MakeStruct_SlateColor_1) == 0x000030, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue, CallFunc_GetFormattedValueText_ReturnValue) == 0x000058, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue::CallFunc_GetFormattedValueText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue, CallFunc_Less_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000071, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue, K2Node_MakeStruct_SlateColor_2) == 0x000078, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetMaxValue::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");

// Function BP_AttributeSlotSmall_CarryWeight.BP_AttributeSlotSmall_CarryWeight_C.SetPercent
// 0x0130 (0x0130 - 0x0000)
struct BP_AttributeSlotSmall_CarryWeight_C_SetPercent final
{
public:
	class FText                                   TextFormat;                                        // 0x0000(0x0018)(Edit, BlueprintVisible)
	float                                         Percent;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0020(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0048(0x0028)()
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x0078(0x0028)()
	class FText                                   CallFunc_FloatToText_ReturnValue;                  // 0x00A0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00B8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00F8(0x0010)(ReferenceParm)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0110(0x0018)()
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent) == 0x000008, "Wrong alignment on BP_AttributeSlotSmall_CarryWeight_C_SetPercent");
static_assert(sizeof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent) == 0x000130, "Wrong size on BP_AttributeSlotSmall_CarryWeight_C_SetPercent");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, TextFormat) == 0x000000, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::TextFormat' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, Percent) == 0x000018, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::Percent' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, K2Node_MakeStruct_SlateColor) == 0x000020, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, K2Node_MakeStruct_SlateColor_1) == 0x000048, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, CallFunc_Less_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000071, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, K2Node_MakeStruct_SlateColor_2) == 0x000078, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, CallFunc_FloatToText_ReturnValue) == 0x0000A0, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::CallFunc_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, K2Node_MakeStruct_FormatArgumentData) == 0x0000B8, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, K2Node_MakeArray_Array) == 0x0000F8, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000108, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, CallFunc_Format_ReturnValue) == 0x000110, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_SetPercent, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000128, "Member 'BP_AttributeSlotSmall_CarryWeight_C_SetPercent::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AttributeSlotSmall_CarryWeight.BP_AttributeSlotSmall_CarryWeight_C.Toggle Highlight
// 0x0030 (0x0030 - 0x0000)
struct BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight final
{
public:
	bool                                          InIsHighlighted;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight) == 0x000004, "Wrong alignment on BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight");
static_assert(sizeof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight) == 0x000030, "Wrong size on BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight, InIsHighlighted) == 0x000000, "Member 'BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight::InIsHighlighted' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight, Temp_bool_Variable) == 0x000001, "Member 'BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight, Temp_float_Variable) == 0x000004, "Member 'BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight, Temp_float_Variable_1) == 0x000008, "Member 'BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight, Temp_float_Variable_2) == 0x000010, "Member 'BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight, Temp_float_Variable_3) == 0x000014, "Member 'BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight, K2Node_Select_Default) == 0x000018, "Member 'BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight, K2Node_Select_Default_1) == 0x00001C, "Member 'BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight, K2Node_MakeStruct_LinearColor) == 0x000020, "Member 'BP_AttributeSlotSmall_CarryWeight_C_Toggle_Highlight::K2Node_MakeStruct_LinearColor' has a wrong offset!");

}

