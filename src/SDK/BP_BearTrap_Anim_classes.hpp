#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BearTrap_Anim

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "man_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass BP_BearTrap_Anim.BP_BearTrap_Anim_C
// 0x0410 (0x0AB0 - 0x06A0)
class UBP_BearTrap_Anim_C final : public UAnimInstanceBase
{
public:
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x06A8(0x0030)()
	struct FAnimNode_BlendListByInt               AnimGraphNode_BlendListByInt;                      // 0x06D8(0x00A8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0780(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0800(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0880(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0900(0x00A8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x09A8(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0A28(0x0080)()
	bool                                          IsOpen;                                            // 0x0AA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BearTrap_Anim(int32 EntryPoint);
	void OnAnimStartRequest(class UAnimID* AnimID);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BearTrap_Anim_C">();
	}
	static class UBP_BearTrap_Anim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BearTrap_Anim_C>();
	}
};
static_assert(alignof(UBP_BearTrap_Anim_C) == 0x000010, "Wrong alignment on UBP_BearTrap_Anim_C");
static_assert(sizeof(UBP_BearTrap_Anim_C) == 0x000AB0, "Wrong size on UBP_BearTrap_Anim_C");
static_assert(offsetof(UBP_BearTrap_Anim_C, UberGraphFrame) == 0x0006A0, "Member 'UBP_BearTrap_Anim_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BearTrap_Anim_C, AnimGraphNode_Root) == 0x0006A8, "Member 'UBP_BearTrap_Anim_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UBP_BearTrap_Anim_C, AnimGraphNode_BlendListByInt) == 0x0006D8, "Member 'UBP_BearTrap_Anim_C::AnimGraphNode_BlendListByInt' has a wrong offset!");
static_assert(offsetof(UBP_BearTrap_Anim_C, AnimGraphNode_SequencePlayer_4) == 0x000780, "Member 'UBP_BearTrap_Anim_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UBP_BearTrap_Anim_C, AnimGraphNode_SequencePlayer_3) == 0x000800, "Member 'UBP_BearTrap_Anim_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UBP_BearTrap_Anim_C, AnimGraphNode_SequencePlayer_2) == 0x000880, "Member 'UBP_BearTrap_Anim_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UBP_BearTrap_Anim_C, AnimGraphNode_BlendListByBool) == 0x000900, "Member 'UBP_BearTrap_Anim_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UBP_BearTrap_Anim_C, AnimGraphNode_SequencePlayer_1) == 0x0009A8, "Member 'UBP_BearTrap_Anim_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UBP_BearTrap_Anim_C, AnimGraphNode_SequencePlayer) == 0x000A28, "Member 'UBP_BearTrap_Anim_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UBP_BearTrap_Anim_C, IsOpen) == 0x000AA8, "Member 'UBP_BearTrap_Anim_C::IsOpen' has a wrong offset!");

}

