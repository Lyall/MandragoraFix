#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BestiaryUpdatedNotification

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_BestiaryUpdatedNotification.BP_BestiaryUpdatedNotification_C.ExecuteUbergraph_BP_BestiaryUpdatedNotification
// 0x0008 (0x0008 - 0x0000)
struct BP_BestiaryUpdatedNotification_C_ExecuteUbergraph_BP_BestiaryUpdatedNotification final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BestiaryUpdatedNotification_C_ExecuteUbergraph_BP_BestiaryUpdatedNotification) == 0x000004, "Wrong alignment on BP_BestiaryUpdatedNotification_C_ExecuteUbergraph_BP_BestiaryUpdatedNotification");
static_assert(sizeof(BP_BestiaryUpdatedNotification_C_ExecuteUbergraph_BP_BestiaryUpdatedNotification) == 0x000008, "Wrong size on BP_BestiaryUpdatedNotification_C_ExecuteUbergraph_BP_BestiaryUpdatedNotification");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ExecuteUbergraph_BP_BestiaryUpdatedNotification, EntryPoint) == 0x000000, "Member 'BP_BestiaryUpdatedNotification_C_ExecuteUbergraph_BP_BestiaryUpdatedNotification::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ExecuteUbergraph_BP_BestiaryUpdatedNotification, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_BestiaryUpdatedNotification_C_ExecuteUbergraph_BP_BestiaryUpdatedNotification::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function BP_BestiaryUpdatedNotification.BP_BestiaryUpdatedNotification_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_BestiaryUpdatedNotification_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BestiaryUpdatedNotification_C_PreConstruct) == 0x000001, "Wrong alignment on BP_BestiaryUpdatedNotification_C_PreConstruct");
static_assert(sizeof(BP_BestiaryUpdatedNotification_C_PreConstruct) == 0x000001, "Wrong size on BP_BestiaryUpdatedNotification_C_PreConstruct");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_BestiaryUpdatedNotification_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_BestiaryUpdatedNotification.BP_BestiaryUpdatedNotification_C.ShowNotification
// 0x0010 (0x0010 - 0x0000)
struct BP_BestiaryUpdatedNotification_C_ShowNotification final
{
public:
	float                                         Timeout;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BestiaryUpdatedNotification_C_ShowNotification) == 0x000008, "Wrong alignment on BP_BestiaryUpdatedNotification_C_ShowNotification");
static_assert(sizeof(BP_BestiaryUpdatedNotification_C_ShowNotification) == 0x000010, "Wrong size on BP_BestiaryUpdatedNotification_C_ShowNotification");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ShowNotification, Timeout) == 0x000000, "Member 'BP_BestiaryUpdatedNotification_C_ShowNotification::Timeout' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ShowNotification, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000004, "Member 'BP_BestiaryUpdatedNotification_C_ShowNotification::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ShowNotification, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_BestiaryUpdatedNotification_C_ShowNotification::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_BestiaryUpdatedNotification.BP_BestiaryUpdatedNotification_C.HideNotification
// 0x0008 (0x0008 - 0x0000)
struct BP_BestiaryUpdatedNotification_C_HideNotification final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BestiaryUpdatedNotification_C_HideNotification) == 0x000008, "Wrong alignment on BP_BestiaryUpdatedNotification_C_HideNotification");
static_assert(sizeof(BP_BestiaryUpdatedNotification_C_HideNotification) == 0x000008, "Wrong size on BP_BestiaryUpdatedNotification_C_HideNotification");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_HideNotification, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_BestiaryUpdatedNotification_C_HideNotification::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_BestiaryUpdatedNotification.BP_BestiaryUpdatedNotification_C.ToggleSmallScreen
// 0x0048 (0x0048 - 0x0000)
struct BP_BestiaryUpdatedNotification_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_2;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_BestiaryUpdatedNotification_C_ToggleSmallScreen");
static_assert(sizeof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen) == 0x000048, "Wrong size on BP_BestiaryUpdatedNotification_C_ToggleSmallScreen");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, Temp_float_Variable) == 0x000004, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, Temp_float_Variable_1) == 0x000008, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, Temp_struct_Variable) == 0x000010, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, Temp_struct_Variable_1) == 0x000018, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, Temp_bool_Variable_2) == 0x000020, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, Temp_byte_Variable) == 0x000021, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, Temp_byte_Variable_1) == 0x000022, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, K2Node_Select_Default) == 0x000023, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x000024, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, K2Node_MakeStruct_Margin) == 0x000028, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000038, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BestiaryUpdatedNotification_C_ToggleSmallScreen, K2Node_Select_Default_2) == 0x000040, "Member 'BP_BestiaryUpdatedNotification_C_ToggleSmallScreen::K2Node_Select_Default_2' has a wrong offset!");

}

