#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BrawlerBloodBuildup_VisualEntity

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "S_BrawlerBloodstainArea_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "man_classes.hpp"
#include "E_BrawlerBloodstainArea_structs.hpp"
#include "S_BrawlerBloodstainAreaNiagaraParams_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BrawlerBloodBuildup_VisualEntity.BP_BrawlerBloodBuildup_VisualEntity_C
// 0x0190 (0x04E0 - 0x0350)
class ABP_BrawlerBloodBuildup_VisualEntity_C final : public ABloodStainVisualEntity
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<class USkeletalMeshComponent*, class UNiagaraComponent*> NiagaraMap;                                        // 0x0358(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UNiagaraComponent*>              NiagaraComponents;                                 // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class ABP_BrawlerHero_C*                      Character;                                         // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ModelActor_C*                       CharacterWeapon;                                   // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventory*                             HeroInventory;                                     // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NiagaraSystemAsset;                                // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DamagePosition;                                    // 0x03D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RelativeDamagePosition;                            // 0x03E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplashRadius;                                      // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Stage;                                             // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDamageTakenVFXDataAsset*               BloodSourceAsset;                                  // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 DefaultBloodStainColor;                            // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_BrawlerBloodstainArea>       BloodStainAreas;                                   // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<E_BrawlerBloodstainArea, struct FVector2D> SlotRange;                                         // 0x0418(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 DebugText;                                         // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Debug;                                             // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkinnedMeshComponent*                  Target;                                            // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FallbackMesh;                                      // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_BrawlerBloodstainArea, struct FS_BrawlerBloodstainAreaNiagaraParams> SlotNiagaraParams;                                 // 0x0490(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_BP_BrawlerBloodBuildup_VisualEntity(int32 EntryPoint);
	void OnKill();
	void OnSlotUpdated(class UInventorySlot* InventorySlot);
	void BloodStainBuildupRefresh();
	void BloodStainBuildupTimeout();
	void BloodStainBuildupPostConstructionFinished(const struct FVector& DamagePosition_0, float SplashRadius_0, int32 Stage_0, class UDamageTakenVFXDataAsset* BloodSourceAsset_0);
	void AddAndInitializeNiagaraComponents();
	void PopulateBloodstainAreas();
	void AddBloodStainArea(const E_BrawlerBloodstainArea& BloodStainArea, bool* bSuccess);
	void AddNiagaraComponent(E_BrawlerBloodstainArea Area, class USkeletalMeshComponent* SkeletalMesh);
	void CheckSlotMeshComponent(const E_BrawlerBloodstainArea& BloodStainArea, class USkeletalMeshComponent** SlotMeshComponent, bool* bIsValid);
	void UpdateBloodstainAreas();
	void InitializeNiagaraParameters(class USkeletalMeshComponent* SkeletalMeshComponent, class UNiagaraComponent* NiagaraComponent, int32 ID);
	void InitializeNiagaraParametersByArea(const E_BrawlerBloodstainArea Area);
	void UpdateNiagaraParameters(class UFXSystemComponent* NiagaraComponent, int32 ID);
	void GetBloodSourceAssetColor(struct FLinearColor* Color, bool* bIsValid);
	void AddDebugText(const class FString& String);
	void PrintDebugText();
	void GetDefaults(const struct FVector& DamagePosition_0, float SplashRadius_0, int32 Stage_0, class UDamageTakenVFXDataAsset* BloodSourceAsset_0);
	void GetWeapon();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BrawlerBloodBuildup_VisualEntity_C">();
	}
	static class ABP_BrawlerBloodBuildup_VisualEntity_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BrawlerBloodBuildup_VisualEntity_C>();
	}
};
static_assert(alignof(ABP_BrawlerBloodBuildup_VisualEntity_C) == 0x000008, "Wrong alignment on ABP_BrawlerBloodBuildup_VisualEntity_C");
static_assert(sizeof(ABP_BrawlerBloodBuildup_VisualEntity_C) == 0x0004E0, "Wrong size on ABP_BrawlerBloodBuildup_VisualEntity_C");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, UberGraphFrame) == 0x000350, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, NiagaraMap) == 0x000358, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::NiagaraMap' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, NiagaraComponents) == 0x0003A8, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::NiagaraComponents' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, Character) == 0x0003B8, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::Character' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, CharacterWeapon) == 0x0003C0, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::CharacterWeapon' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, HeroInventory) == 0x0003C8, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::HeroInventory' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, NiagaraSystemAsset) == 0x0003D0, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::NiagaraSystemAsset' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, DamagePosition) == 0x0003D8, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::DamagePosition' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, RelativeDamagePosition) == 0x0003E4, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::RelativeDamagePosition' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, SplashRadius) == 0x0003F0, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::SplashRadius' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, Stage) == 0x0003F4, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::Stage' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, BloodSourceAsset) == 0x0003F8, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::BloodSourceAsset' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, DefaultBloodStainColor) == 0x000400, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::DefaultBloodStainColor' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, BloodStainAreas) == 0x000408, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::BloodStainAreas' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, SlotRange) == 0x000418, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::SlotRange' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, DebugText) == 0x000468, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::DebugText' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, Debug) == 0x000478, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, Target) == 0x000480, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::Target' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, FallbackMesh) == 0x000488, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::FallbackMesh' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerBloodBuildup_VisualEntity_C, SlotNiagaraParams) == 0x000490, "Member 'ABP_BrawlerBloodBuildup_VisualEntity_C::SlotNiagaraParams' has a wrong offset!");

}

