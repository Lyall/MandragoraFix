#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BrawlerHero

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_structs.hpp"
#include "man_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BrawlerHero.BP_BrawlerHero_C
// 0x0350 (0x2050 - 0x1D00)
class ABP_BrawlerHero_C final : public ABrawlerHero
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1D00(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        AkListener;                                        // 0x1D08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_EntropicEssence_CollectImpact;                  // 0x1D10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FaceRotator;                                       // 0x1D18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CinematicGhost_C*                   BP_CinematicGhost;                                 // 0x1D20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_GlideWings;                                     // 0x1D28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 WitchLantern1;                                     // 0x1D30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 WitchLantern;                                      // 0x1D38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SEHaloVFXPos;                                      // 0x1D40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USurfaceEffectComponent*                FootRightEffect;                                   // 0x1D48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USurfaceEffectComponent*                FootLeftEffect;                                    // 0x1D50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USlotHandlerComponent*                  SlotHandler;                                       // 0x1D58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCableComponent*                        GrapplingHookRope;                                 // 0x1D60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      EssenceOnPC;                                       // 0x1D68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ObjectFadeOrigin;                                  // 0x1D70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UManBoxComponent*                       VisualBoxCollider;                                 // 0x1D78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                AirAttackHitBox4;                                  // 0x1D80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                Arm_R_UpperHit;                                    // 0x1D88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                Arm_R_LowerHit;                                    // 0x1D90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                Arm_L_LowerHit;                                    // 0x1D98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                Arm_L_UpperHit;                                    // 0x1DA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            CharacterHaloBillboard;                            // 0x1DA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        StandingHeadPosition;                              // 0x1DB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTriggerBoxComponent*                   InteractBox;                                       // 0x1DB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_BloodSplash_beheaded;                           // 0x1DC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SpeechBubbleComponent_C*            BP_SpeechBubbleComponent;                          // 0x1DC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                AirAttackHitBox;                                   // 0x1DD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                AirAttackHitBox3;                                  // 0x1DD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                AirAttackHitBox2;                                  // 0x1DE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SwordTrail_ParticleSystem_Dup;                     // 0x1DE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                GroundSlamHitBox;                                  // 0x1DF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       CameraSphere;                                      // 0x1DF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                FatalityHitbox;                                    // 0x1E00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Leg_R_Lower;                                       // 0x1E08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Leg_R_Upper;                                       // 0x1E10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Arm_R_Lower;                                       // 0x1E18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Arm_R_Upper;                                       // 0x1E20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Leg_L_Lower;                                       // 0x1E28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Leg_L_Upper;                                       // 0x1E30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Arm_L_Lower;                                       // 0x1E38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Arm_L_Upper;                                       // 0x1E40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Head;                                              // 0x1E48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Torso;                                             // 0x1E50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                HiltHitBox;                                        // 0x1E58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                SwordHitBox_old;                                   // 0x1E60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         GlideWingDissolve_Dissolve_EC16BECC4CD98053AC58D2802496B28C; // 0x1E68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            GlideWingDissolve__Direction_EC16BECC4CD98053AC58D2802496B28C; // 0x1E6C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E6D[0x3];                                     // 0x1E6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     GlideWingDissolve;                                 // 0x1E70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Dissolve_9840F9F447A98A1A78AADE827AD20F8C; // 0x1E78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Diffuse_Multiplier_9840F9F447A98A1A78AADE827AD20F8C; // 0x1E7C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_9840F9F447A98A1A78AADE827AD20F8C; // 0x1E80(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E81[0x7];                                     // 0x1E81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x1E88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageFlash_Flash_BF3A7EC8441ABBE328D024966FE62C8C; // 0x1E90(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DamageFlash__Direction_BF3A7EC8441ABBE328D024966FE62C8C; // 0x1E94(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E95[0x3];                                     // 0x1E95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DamageFlash;                                       // 0x1E98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(float ElapsedTime)> QuestTick;                                         // 0x1EA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              NewEventDispatcher_0;                              // 0x1EB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         KeyHelper;                                         // 0x1EC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VisibleBody;                                       // 0x1EC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BodySlot;                                          // 0x1EC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalTime;                                         // 0x1ECC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChargeDetect;                                      // 0x1ED0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1ED1[0x3];                                     // 0x1ED1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x1ED4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FPS;                                               // 0x1ED8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                position;                                          // 0x1EDC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastPosition;                                      // 0x1EE8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HeavyAttackStatus;                                 // 0x1EF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EF5[0x3];                                     // 0x1EF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               NS_OutputMaterial_Instance_01;                     // 0x1EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HeavyAttackFXMaterial_Instance_01;                 // 0x1F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HeroDynamicMaterialInstance_Sword;                 // 0x1F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeroSwordSlotName;                                 // 0x1F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACineCameraActor*                       CineCameraActor;                                   // 0x1F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntensityMul;                                      // 0x1F20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntensityDistanceMod;                              // 0x1F24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActorDistance;                                     // 0x1F28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalHurtPercent;                                 // 0x1F2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          SeriouslyHurtVO;                                   // 0x1F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          NormalHurtVO;                                      // 0x1F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          SlightlyHurtVO;                                    // 0x1F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeriouslyHurtPercentage;                           // 0x1F48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalHurtPercentage;                              // 0x1F4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlightlyHurtPercentage;                            // 0x1F50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XOffset;                                           // 0x1F54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              RuneTurn;                                          // 0x1F58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 GrapplingHook;                                     // 0x1F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ULevelSequence* LevelSequence)> SequenceEnded;                                     // 0x1F70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ULevelSequencePlayer*                   LevelSequencePlayer;                               // 0x1F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StatusEffectVOTimer;                               // 0x1F88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamageSubType                                PreviousAOEHitFlashType;                           // 0x1F8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AOEHitFlashCanExecute;                             // 0x1F8D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F8E[0x2];                                     // 0x1F8E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AOEHitFlashTime;                                   // 0x1F90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AOEHitFlashCooldown;                               // 0x1F94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Astral;                                            // 0x1F98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fire;                                              // 0x1FA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Frost;                                             // 0x1FB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Poison;                                            // 0x1FC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VoidGold;                                          // 0x1FD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Void;                                              // 0x1FE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDamageFlags                           Damage_Value_Damage_Flags_0;                       // 0x1FF8(0x0024)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FLinearColor                           Physical;                                          // 0x201C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_202C[0x4];                                     // 0x202C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 LastInteract;                                      // 0x2030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVisualEntity*                          LanternRiftOpenVE;                                 // 0x2038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InteractedObject;                                  // 0x2040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BrawlerHero(int32 EntryPoint);
	void OnHealthChangedEvent_Event_0(float preHealth, float postHealth);
	void OnLifeAuraChanged_Event_0();
	void OnLanternStateSwitch_Event_0(bool bActive);
	void OnVfxAnimStopped(class UAnimID* AnimID);
	void OnVfxAnimStarted(class UAnimID* AnimID);
	void InteractStarted(class UOnInteractAbility* OnInteractAbility);
	void OnStatusEffectChanged(EStatusEffectChange Change, EStatusEffectType StatusType, class AActor* SourceEntity, int32 StackNum);
	void HeroRespawnEvent(class AHeroBase* Hero);
	void HoldInteractCancelled(class AActor* InteractedActor);
	void HoldInteractStarted(class AActor* InteractedActor);
	void EntropicEssencePickup();
	void BPDamageTakenEvent_Event_0(class UAbilityController* Source, class UAbilityController* Bullet, class UAbilityController* Target, class UAbilityBase* Ability, float effectiveDamage, const struct FDamageValue& DamageValue);
	void OnHitCameraShake(TSubclassOf<class UGameCameraShake> CameraShake);
	void OnOverlayBlendIn();
	void OnOverlayBlendOut();
	void ResumeLevelSequence();
	void PauseLevelSequence();
	void OnFinished();
	void OnPlayLevelSequence(class ULevelSequence* LevelSequence, const TArray<class AActor*>& Actors, const TArray<struct FMovieSceneObjectBindingID>& Bindings, float BlendInDuration, float BlendOutDuration);
	void KSHalberdierExplo();
	void CharacterHit(class ACharacterBase* Source, class ACharacterBase* Target, class UAbilityBase* Ability, class UAnimID* Anim);
	void OnDeathScreenFadeComplete();
	void PlayerCombatVOEvent(bool bTaunt);
	void OnGrapplingHookEnd();
	void OnGrapplingHookStart(class AActor* GrapplingHook_0);
	void EssencePickup_SETUP();
	void EssencePickup();
	void OnTurnStarted();
	void ReceiveTick(float DeltaSeconds);
	void OnFinished_Event();
	void OnLevelSequence(class ULevelSequence* LevelSequence, const struct FTransform& WorldTransform, float BlendInDuration, float BlendOutDuration);
	void CustomEvent_0(class AActorSoul* Source, class AActorSoul* Target, class UAbilityBase* Ability, class UAnimID* Anim, float effectiveDamage, const struct FDamageValue& OriginalDamageValue, const struct FDamageValue& DamageValue);
	void LocalHitEvent(class ACharacterBase* Source, class ACharacterBase* Target, class UAbilityBase* Ability, class UAnimID* Anim);
	void OnVfxEvent(class FName VfxEventType);
	void ReceiveBeginPlay();
	void DT_FireMelt();
	void EVFXGraph(class FName VfxEventType);
	void OnKilled_Event(class UObject* Killer, class UAbilityController* KillerAbilityController);
	void BeginDeathGraph();
	void GlideWingEnd();
	void BPPostBeginPlay();
	void OnStunnedEvent();
	void OnStaggeredEvent();
	void InpActEvt_ResetFreeCamera_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_ToggleFreeCamera_K2Node_InputActionEvent_1(const struct FKey& Key);
	void DamageFlash__UpdateFunc();
	void DamageFlash__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void GlideWingDissolve__UpdateFunc();
	void GlideWingDissolve__FinishedFunc();
	void Force_Feedback(const struct FVector& SourceLocation, float SourceRotation);
	void Force_Feedback_Thrall(const struct FVector& SourceLocation, float SourceRotation);
	void Force_Feedback_Thrall_Steps(const struct FVector& SourceLocation, float SourceRotation);
	void StatusEffectVO(EStatusEffectType StatusEffectType);
	void TrapVOs(class FName TrapType);
	void Force_Feedback_Explosion(const struct FVector& SourceLocation, float SourceRotation, float Intensity);
	void SoundOnDamageReceived(const struct FDamageValue& Damage);
	void SoundOnAnimationEvent(const struct FAnimEventParam& Param);
	void Force_Feedback_Vertical(const struct FVector& SourceLocation, float SourceRotation, float Intensity, class UForceFeedbackEffect* ForceFeedbackRight, class UForceFeedbackEffect* ForceFeedbackLeft, class UClass* CameraShake, float XOffset_0, class UForceFeedbackComponent** FF1, class UForceFeedbackComponent** FF2, class UForceFeedbackComponent** FF3, class UForceFeedbackComponent** FF4);
	void AddPostProcessMaterialsToGameCamera();
	void PrintCameraSettings();
	void InvokeAOEHitFlashEffect(EDamageSubType DamageType);
	void AOEHitFlashReset();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BrawlerHero_C">();
	}
	static class ABP_BrawlerHero_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BrawlerHero_C>();
	}
};
static_assert(alignof(ABP_BrawlerHero_C) == 0x000010, "Wrong alignment on ABP_BrawlerHero_C");
static_assert(sizeof(ABP_BrawlerHero_C) == 0x002050, "Wrong size on ABP_BrawlerHero_C");
static_assert(offsetof(ABP_BrawlerHero_C, UberGraphFrame) == 0x001D00, "Member 'ABP_BrawlerHero_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, AkListener) == 0x001D08, "Member 'ABP_BrawlerHero_C::AkListener' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, NS_EntropicEssence_CollectImpact) == 0x001D10, "Member 'ABP_BrawlerHero_C::NS_EntropicEssence_CollectImpact' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, FaceRotator) == 0x001D18, "Member 'ABP_BrawlerHero_C::FaceRotator' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, BP_CinematicGhost) == 0x001D20, "Member 'ABP_BrawlerHero_C::BP_CinematicGhost' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, NS_GlideWings) == 0x001D28, "Member 'ABP_BrawlerHero_C::NS_GlideWings' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, WitchLantern1) == 0x001D30, "Member 'ABP_BrawlerHero_C::WitchLantern1' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, WitchLantern) == 0x001D38, "Member 'ABP_BrawlerHero_C::WitchLantern' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, SEHaloVFXPos) == 0x001D40, "Member 'ABP_BrawlerHero_C::SEHaloVFXPos' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, FootRightEffect) == 0x001D48, "Member 'ABP_BrawlerHero_C::FootRightEffect' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, FootLeftEffect) == 0x001D50, "Member 'ABP_BrawlerHero_C::FootLeftEffect' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, SlotHandler) == 0x001D58, "Member 'ABP_BrawlerHero_C::SlotHandler' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, GrapplingHookRope) == 0x001D60, "Member 'ABP_BrawlerHero_C::GrapplingHookRope' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, EssenceOnPC) == 0x001D68, "Member 'ABP_BrawlerHero_C::EssenceOnPC' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, ObjectFadeOrigin) == 0x001D70, "Member 'ABP_BrawlerHero_C::ObjectFadeOrigin' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, VisualBoxCollider) == 0x001D78, "Member 'ABP_BrawlerHero_C::VisualBoxCollider' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, AirAttackHitBox4) == 0x001D80, "Member 'ABP_BrawlerHero_C::AirAttackHitBox4' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Arm_R_UpperHit) == 0x001D88, "Member 'ABP_BrawlerHero_C::Arm_R_UpperHit' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Arm_R_LowerHit) == 0x001D90, "Member 'ABP_BrawlerHero_C::Arm_R_LowerHit' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Arm_L_LowerHit) == 0x001D98, "Member 'ABP_BrawlerHero_C::Arm_L_LowerHit' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Arm_L_UpperHit) == 0x001DA0, "Member 'ABP_BrawlerHero_C::Arm_L_UpperHit' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, CharacterHaloBillboard) == 0x001DA8, "Member 'ABP_BrawlerHero_C::CharacterHaloBillboard' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, StandingHeadPosition) == 0x001DB0, "Member 'ABP_BrawlerHero_C::StandingHeadPosition' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, InteractBox) == 0x001DB8, "Member 'ABP_BrawlerHero_C::InteractBox' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, PS_BloodSplash_beheaded) == 0x001DC0, "Member 'ABP_BrawlerHero_C::PS_BloodSplash_beheaded' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, BP_SpeechBubbleComponent) == 0x001DC8, "Member 'ABP_BrawlerHero_C::BP_SpeechBubbleComponent' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, AirAttackHitBox) == 0x001DD0, "Member 'ABP_BrawlerHero_C::AirAttackHitBox' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, AirAttackHitBox3) == 0x001DD8, "Member 'ABP_BrawlerHero_C::AirAttackHitBox3' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, AirAttackHitBox2) == 0x001DE0, "Member 'ABP_BrawlerHero_C::AirAttackHitBox2' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, SwordTrail_ParticleSystem_Dup) == 0x001DE8, "Member 'ABP_BrawlerHero_C::SwordTrail_ParticleSystem_Dup' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, GroundSlamHitBox) == 0x001DF0, "Member 'ABP_BrawlerHero_C::GroundSlamHitBox' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, CameraSphere) == 0x001DF8, "Member 'ABP_BrawlerHero_C::CameraSphere' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, FatalityHitbox) == 0x001E00, "Member 'ABP_BrawlerHero_C::FatalityHitbox' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Leg_R_Lower) == 0x001E08, "Member 'ABP_BrawlerHero_C::Leg_R_Lower' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Leg_R_Upper) == 0x001E10, "Member 'ABP_BrawlerHero_C::Leg_R_Upper' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Arm_R_Lower) == 0x001E18, "Member 'ABP_BrawlerHero_C::Arm_R_Lower' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Arm_R_Upper) == 0x001E20, "Member 'ABP_BrawlerHero_C::Arm_R_Upper' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Leg_L_Lower) == 0x001E28, "Member 'ABP_BrawlerHero_C::Leg_L_Lower' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Leg_L_Upper) == 0x001E30, "Member 'ABP_BrawlerHero_C::Leg_L_Upper' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Arm_L_Lower) == 0x001E38, "Member 'ABP_BrawlerHero_C::Arm_L_Lower' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Arm_L_Upper) == 0x001E40, "Member 'ABP_BrawlerHero_C::Arm_L_Upper' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Head) == 0x001E48, "Member 'ABP_BrawlerHero_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Torso) == 0x001E50, "Member 'ABP_BrawlerHero_C::Torso' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, HiltHitBox) == 0x001E58, "Member 'ABP_BrawlerHero_C::HiltHitBox' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, SwordHitBox_old) == 0x001E60, "Member 'ABP_BrawlerHero_C::SwordHitBox_old' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, GlideWingDissolve_Dissolve_EC16BECC4CD98053AC58D2802496B28C) == 0x001E68, "Member 'ABP_BrawlerHero_C::GlideWingDissolve_Dissolve_EC16BECC4CD98053AC58D2802496B28C' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, GlideWingDissolve__Direction_EC16BECC4CD98053AC58D2802496B28C) == 0x001E6C, "Member 'ABP_BrawlerHero_C::GlideWingDissolve__Direction_EC16BECC4CD98053AC58D2802496B28C' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, GlideWingDissolve) == 0x001E70, "Member 'ABP_BrawlerHero_C::GlideWingDissolve' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Timeline_0_Dissolve_9840F9F447A98A1A78AADE827AD20F8C) == 0x001E78, "Member 'ABP_BrawlerHero_C::Timeline_0_Dissolve_9840F9F447A98A1A78AADE827AD20F8C' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Timeline_0_Diffuse_Multiplier_9840F9F447A98A1A78AADE827AD20F8C) == 0x001E7C, "Member 'ABP_BrawlerHero_C::Timeline_0_Diffuse_Multiplier_9840F9F447A98A1A78AADE827AD20F8C' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Timeline_0__Direction_9840F9F447A98A1A78AADE827AD20F8C) == 0x001E80, "Member 'ABP_BrawlerHero_C::Timeline_0__Direction_9840F9F447A98A1A78AADE827AD20F8C' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Timeline_0) == 0x001E88, "Member 'ABP_BrawlerHero_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, DamageFlash_Flash_BF3A7EC8441ABBE328D024966FE62C8C) == 0x001E90, "Member 'ABP_BrawlerHero_C::DamageFlash_Flash_BF3A7EC8441ABBE328D024966FE62C8C' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, DamageFlash__Direction_BF3A7EC8441ABBE328D024966FE62C8C) == 0x001E94, "Member 'ABP_BrawlerHero_C::DamageFlash__Direction_BF3A7EC8441ABBE328D024966FE62C8C' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, DamageFlash) == 0x001E98, "Member 'ABP_BrawlerHero_C::DamageFlash' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, QuestTick) == 0x001EA0, "Member 'ABP_BrawlerHero_C::QuestTick' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, NewEventDispatcher_0) == 0x001EB0, "Member 'ABP_BrawlerHero_C::NewEventDispatcher_0' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, KeyHelper) == 0x001EC0, "Member 'ABP_BrawlerHero_C::KeyHelper' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, VisibleBody) == 0x001EC4, "Member 'ABP_BrawlerHero_C::VisibleBody' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, BodySlot) == 0x001EC8, "Member 'ABP_BrawlerHero_C::BodySlot' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, TotalTime) == 0x001ECC, "Member 'ABP_BrawlerHero_C::TotalTime' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, ChargeDetect) == 0x001ED0, "Member 'ABP_BrawlerHero_C::ChargeDetect' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Time) == 0x001ED4, "Member 'ABP_BrawlerHero_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, FPS) == 0x001ED8, "Member 'ABP_BrawlerHero_C::FPS' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, position) == 0x001EDC, "Member 'ABP_BrawlerHero_C::position' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, LastPosition) == 0x001EE8, "Member 'ABP_BrawlerHero_C::LastPosition' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, HeavyAttackStatus) == 0x001EF4, "Member 'ABP_BrawlerHero_C::HeavyAttackStatus' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, NS_OutputMaterial_Instance_01) == 0x001EF8, "Member 'ABP_BrawlerHero_C::NS_OutputMaterial_Instance_01' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, HeavyAttackFXMaterial_Instance_01) == 0x001F00, "Member 'ABP_BrawlerHero_C::HeavyAttackFXMaterial_Instance_01' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, HeroDynamicMaterialInstance_Sword) == 0x001F08, "Member 'ABP_BrawlerHero_C::HeroDynamicMaterialInstance_Sword' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, HeroSwordSlotName) == 0x001F10, "Member 'ABP_BrawlerHero_C::HeroSwordSlotName' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, CineCameraActor) == 0x001F18, "Member 'ABP_BrawlerHero_C::CineCameraActor' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, IntensityMul) == 0x001F20, "Member 'ABP_BrawlerHero_C::IntensityMul' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, IntensityDistanceMod) == 0x001F24, "Member 'ABP_BrawlerHero_C::IntensityDistanceMod' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, ActorDistance) == 0x001F28, "Member 'ABP_BrawlerHero_C::ActorDistance' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, NormalHurtPercent) == 0x001F2C, "Member 'ABP_BrawlerHero_C::NormalHurtPercent' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, SeriouslyHurtVO) == 0x001F30, "Member 'ABP_BrawlerHero_C::SeriouslyHurtVO' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, NormalHurtVO) == 0x001F38, "Member 'ABP_BrawlerHero_C::NormalHurtVO' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, SlightlyHurtVO) == 0x001F40, "Member 'ABP_BrawlerHero_C::SlightlyHurtVO' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, SeriouslyHurtPercentage) == 0x001F48, "Member 'ABP_BrawlerHero_C::SeriouslyHurtPercentage' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, NormalHurtPercentage) == 0x001F4C, "Member 'ABP_BrawlerHero_C::NormalHurtPercentage' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, SlightlyHurtPercentage) == 0x001F50, "Member 'ABP_BrawlerHero_C::SlightlyHurtPercentage' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, XOffset) == 0x001F54, "Member 'ABP_BrawlerHero_C::XOffset' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, RuneTurn) == 0x001F58, "Member 'ABP_BrawlerHero_C::RuneTurn' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, GrapplingHook) == 0x001F68, "Member 'ABP_BrawlerHero_C::GrapplingHook' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, SequenceEnded) == 0x001F70, "Member 'ABP_BrawlerHero_C::SequenceEnded' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, LevelSequencePlayer) == 0x001F80, "Member 'ABP_BrawlerHero_C::LevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, StatusEffectVOTimer) == 0x001F88, "Member 'ABP_BrawlerHero_C::StatusEffectVOTimer' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, PreviousAOEHitFlashType) == 0x001F8C, "Member 'ABP_BrawlerHero_C::PreviousAOEHitFlashType' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, AOEHitFlashCanExecute) == 0x001F8D, "Member 'ABP_BrawlerHero_C::AOEHitFlashCanExecute' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, AOEHitFlashTime) == 0x001F90, "Member 'ABP_BrawlerHero_C::AOEHitFlashTime' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, AOEHitFlashCooldown) == 0x001F94, "Member 'ABP_BrawlerHero_C::AOEHitFlashCooldown' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Astral) == 0x001F98, "Member 'ABP_BrawlerHero_C::Astral' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Fire) == 0x001FA8, "Member 'ABP_BrawlerHero_C::Fire' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Frost) == 0x001FB8, "Member 'ABP_BrawlerHero_C::Frost' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Poison) == 0x001FC8, "Member 'ABP_BrawlerHero_C::Poison' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, VoidGold) == 0x001FD8, "Member 'ABP_BrawlerHero_C::VoidGold' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Void) == 0x001FE8, "Member 'ABP_BrawlerHero_C::Void' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Damage_Value_Damage_Flags_0) == 0x001FF8, "Member 'ABP_BrawlerHero_C::Damage_Value_Damage_Flags_0' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, Physical) == 0x00201C, "Member 'ABP_BrawlerHero_C::Physical' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, LastInteract) == 0x002030, "Member 'ABP_BrawlerHero_C::LastInteract' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, LanternRiftOpenVE) == 0x002038, "Member 'ABP_BrawlerHero_C::LanternRiftOpenVE' has a wrong offset!");
static_assert(offsetof(ABP_BrawlerHero_C, InteractedObject) == 0x002040, "Member 'ABP_BrawlerHero_C::InteractedObject' has a wrong offset!");

}

