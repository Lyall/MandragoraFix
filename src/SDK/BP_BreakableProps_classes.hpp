#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BreakableProps

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_BreakableProps_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "man_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BreakableProps.BP_BreakableProps_C
// 0x00D0 (0x08D8 - 0x0808)
class ABP_BreakableProps_C : public AChestBaseActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0808(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak;                                                // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      DestroyVFX;                                        // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Collision;                                         // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDestructibleComponent*                 Destructible;                                      // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Fade_49C41D46436B3311DBA0209562BF6CB5;  // 0x0850(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_49C41D46436B3311DBA0209562BF6CB5; // 0x0854(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_855[0x3];                                      // 0x0855(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BreakableProps                              PropToUse;                                         // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_861[0x3];                                      // 0x0861(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitBeforeChunkDissolve;                           // 0x0864(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableCallableDamage;                              // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_869[0x3];                                      // 0x0869(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CollisionScale;                                    // 0x086C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_879[0x3];                                      // 0x0879(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AddedAccelLow;                                     // 0x087C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AddedAccelHigh;                                    // 0x0888(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasBroken_;                                        // 0x0894(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_895[0x3];                                      // 0x0895(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0898(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParticleSize;                                      // 0x08A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParticleSizeVariation;                             // 0x08AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnBox;                                          // 0x08B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DiffuseMultiplier;                                 // 0x08BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ShineColor;                                        // 0x08C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityBase*                           CallableDamagePassive;                             // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BreakableProps(int32 EntryPoint);
	void BPPostBeginPlay();
	void WorldRespawnEvent();
	void BPPostSaveLoaded();
	void DamageTaken(class AActorSoul* Source, class AActorSoul* Target, class UAbilityBase* Ability, class UAnimID* Anim, float effectiveDamage, const struct FDamageValue& OriginalDamageValue, const struct FDamageValue& DamageValue);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void SnapToGroundZ();
	void zPlayDestroyParticle();
	void SetupAndActivateParticle();
	void SelectPropFromDT(class FName RowName);
	void SetupMaterial();
	void Break(bool* bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BreakableProps_C">();
	}
	static class ABP_BreakableProps_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BreakableProps_C>();
	}
};
static_assert(alignof(ABP_BreakableProps_C) == 0x000008, "Wrong alignment on ABP_BreakableProps_C");
static_assert(sizeof(ABP_BreakableProps_C) == 0x0008D8, "Wrong size on ABP_BreakableProps_C");
static_assert(offsetof(ABP_BreakableProps_C, UberGraphFrame) == 0x000808, "Member 'ABP_BreakableProps_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, Ak) == 0x000810, "Member 'ABP_BreakableProps_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, Niagara) == 0x000818, "Member 'ABP_BreakableProps_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, TextRender) == 0x000820, "Member 'ABP_BreakableProps_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, DestroyVFX) == 0x000828, "Member 'ABP_BreakableProps_C::DestroyVFX' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, ParticleSystem) == 0x000830, "Member 'ABP_BreakableProps_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, Collision) == 0x000838, "Member 'ABP_BreakableProps_C::Collision' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, Destructible) == 0x000840, "Member 'ABP_BreakableProps_C::Destructible' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, DefaultSceneRoot) == 0x000848, "Member 'ABP_BreakableProps_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, Timeline_0_Fade_49C41D46436B3311DBA0209562BF6CB5) == 0x000850, "Member 'ABP_BreakableProps_C::Timeline_0_Fade_49C41D46436B3311DBA0209562BF6CB5' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, Timeline_0__Direction_49C41D46436B3311DBA0209562BF6CB5) == 0x000854, "Member 'ABP_BreakableProps_C::Timeline_0__Direction_49C41D46436B3311DBA0209562BF6CB5' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, Timeline_0) == 0x000858, "Member 'ABP_BreakableProps_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, PropToUse) == 0x000860, "Member 'ABP_BreakableProps_C::PropToUse' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, WaitBeforeChunkDissolve) == 0x000864, "Member 'ABP_BreakableProps_C::WaitBeforeChunkDissolve' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, EnableCallableDamage) == 0x000868, "Member 'ABP_BreakableProps_C::EnableCallableDamage' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, CollisionScale) == 0x00086C, "Member 'ABP_BreakableProps_C::CollisionScale' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, Debug) == 0x000878, "Member 'ABP_BreakableProps_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, AddedAccelLow) == 0x00087C, "Member 'ABP_BreakableProps_C::AddedAccelLow' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, AddedAccelHigh) == 0x000888, "Member 'ABP_BreakableProps_C::AddedAccelHigh' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, WasBroken_) == 0x000894, "Member 'ABP_BreakableProps_C::WasBroken_' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, Color) == 0x000898, "Member 'ABP_BreakableProps_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, ParticleSize) == 0x0008A8, "Member 'ABP_BreakableProps_C::ParticleSize' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, ParticleSizeVariation) == 0x0008AC, "Member 'ABP_BreakableProps_C::ParticleSizeVariation' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, SpawnBox) == 0x0008B0, "Member 'ABP_BreakableProps_C::SpawnBox' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, DiffuseMultiplier) == 0x0008BC, "Member 'ABP_BreakableProps_C::DiffuseMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, ShineColor) == 0x0008C0, "Member 'ABP_BreakableProps_C::ShineColor' has a wrong offset!");
static_assert(offsetof(ABP_BreakableProps_C, CallableDamagePassive) == 0x0008D0, "Member 'ABP_BreakableProps_C::CallableDamagePassive' has a wrong offset!");

}

