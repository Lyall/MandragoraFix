#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BreakableWall

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_DestructibleWalls_structs.hpp"
#include "man_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BreakableWall.BP_BreakableWall_C
// 0x02C8 (0x0AA0 - 0x07D8)
class ABP_BreakableWall_C final : public AActorBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   FadeWallHelper;                                    // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           Ak;                                                // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FadeEndVisual;                                     // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FaseStartVisual;                                   // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FadeDirectionArrow;                                // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   VFX_Transform;                                     // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Hurt3;                                             // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Hurt2;                                             // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Hurt1;                                             // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDynamicPlatformBox*                    DynamicPlatformBox;                                // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMiniMapActorComponent*                 MiniMapActor;                                      // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Support4;                                          // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Support3;                                          // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Support2;                                          // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Support1;                                          // 0x0870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Collision;                                         // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtBox*                               HurtBox;                                           // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDestructibleComponent*                 Destructible;                                      // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FadeWallTimeline_Fade_00BC56E7434A19D66501E5B182DE71E0; // 0x0890(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FadeWallTimeline__Direction_00BC56E7434A19D66501E5B182DE71E0; // 0x0894(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_895[0x3];                                      // 0x0895(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FadeWallTimeline;                                  // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BreakablesFadeTimeline_Fade_CE14EC8A4B7BA868FAABD19750824EDF; // 0x08A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BreakablesFadeTimeline__Direction_CE14EC8A4B7BA868FAABD19750824EDF; // 0x08A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A5[0x3];                                      // 0x08A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BreakablesFadeTimeline;                            // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DestructibleWalls                           WallToUse;                                         // 0x08B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSupport1;                                       // 0x08B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseSupport2;                                       // 0x08B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseSupport3;                                       // 0x08B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseSupport4;                                       // 0x08B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B5[0x3];                                      // 0x08B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location_s1;                                       // 0x08B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation_s1;                                       // 0x08C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Scale_s1;                                          // 0x08D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location_s2;                                       // 0x08DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation_s2;                                       // 0x08E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Scale_s2;                                          // 0x08F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location_s3;                                       // 0x0900(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation_s3;                                       // 0x090C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Scale_s3;                                          // 0x0918(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location_s4;                                       // 0x0924(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation_s4;                                       // 0x0930(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Scale_s4;                                          // 0x093C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomHurt;                                     // 0x0948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_949[0x3];                                      // 0x0949(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Hurt1_Location;                                    // 0x094C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hurt1_Radius;                                      // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hurt1_Impulse;                                     // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Hurt2_Location;                                    // 0x0960(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hurt2_Radius;                                      // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaitBeforeChunkDissolve;                           // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LowerDiffuse;                                      // 0x0974(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_975[0x3];                                      // 0x0975(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FadeStart;                                         // 0x0978(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FadeEnd;                                           // 0x0984(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AStaticMeshActor*>               StaticMeshReference;                               // 0x0990(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	float                                         FadeDirectionOverride;                             // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A4[0x4];                                      // 0x09A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      FadeMaterial;                                      // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeSmoothness;                                    // 0x09B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeSpeedOverride;                                 // 0x09B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_fog_fx_C*>                   FogActors;                                         // 0x09B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	struct FVector                                FadeDirectionOverrideV;                            // 0x09C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Flip_Fade_Direction;                               // 0x09D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CollisionAndHurtboxScale;                          // 0x09D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_9E4[0x4];                                      // 0x09E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          DestroyedSound;                                    // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBeenHit;                                        // 0x09F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F1[0x3];                                      // 0x09F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Hurt3_Location;                                    // 0x09F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hurt3_Radius;                                      // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RuntimeDebug;                                      // 0x0A04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A05[0x3];                                      // 0x0A05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        HurtLocations;                                     // 0x0A08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 HurtRadii;                                         // 0x0A18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          PlayerAdjustedImpulse;                             // 0x0A28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseHintParticle_;                                  // 0x0A29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HintParticleSetup;                                 // 0x0A2A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2B[0x1];                                      // 0x0A2B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ParticleDensity;                                   // 0x0A2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ParticlesTransform;                                // 0x0A30(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class UNiagaraSystem*                         OverrideHintParticleSystem;                        // 0x0A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadEvent;                                         // 0x0A68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A69[0x7];                                      // 0x0A69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       FadeMaterials;                                     // 0x0A70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          WasBroken_;                                        // 0x0A80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A81[0x7];                                      // 0x0A81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          ExtraHitSound;                                     // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hurt2_Impulse;                                     // 0x0A90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hurt3_Impulse;                                     // 0x0A94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DestructibleWalls                           PrevWallToUse;                                     // 0x0A98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FadeMeshes_;                                       // 0x0A99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BreakableWall(int32 EntryPoint);
	void BPPostBeginPlay();
	void OnKilled(class UObject* Killer, class UAbilityController* KillerAbilityController);
	void BPPostSaveLoaded();
	void Damage3();
	void DAMAGE2();
	void DAMAGE1();
	void Fade(bool Instant);
	void DamageTaken(class AActorSoul* Source, class AActorSoul* Target, class UAbilityBase* Ability, class UAnimID* Anim, float effectiveDamage, const struct FDamageValue& OriginalDamageValue, const struct FDamageValue& DamageValue);
	void BreakablesFadeTimeline__UpdateFunc();
	void BreakablesFadeTimeline__FinishedFunc();
	void FadeWallTimeline__UpdateFunc();
	void FadeWallTimeline__FinishedFunc();
	void UserConstructionScript();
	void SetSupportOffsets(class UStaticMeshComponent* Support, const struct FVector& Location, const struct FVector& Scale, const struct FRotator& Rotation);
	void GetHurtLocationAndRadius(int32 N, struct FVector* Location, float* Radius);
	void SetHurtLocationAndRadius(int32 N, const struct FVector& Location, float Radius);
	struct FVector GetHurtLocationRelative(int32 N);
	void SetHintVFXParameters();
	void SetHiddenWallMaterialParameters(bool* Success);
	void UpdateDTEntry();
	void FadeOutFogFXActors(float Fade);
	void FadeOutMeshes(float Fade);
	void SomeWarnings();
	void CheckVisualizers();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BreakableWall_C">();
	}
	static class ABP_BreakableWall_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BreakableWall_C>();
	}
};
static_assert(alignof(ABP_BreakableWall_C) == 0x000010, "Wrong alignment on ABP_BreakableWall_C");
static_assert(sizeof(ABP_BreakableWall_C) == 0x000AA0, "Wrong size on ABP_BreakableWall_C");
static_assert(offsetof(ABP_BreakableWall_C, UberGraphFrame) == 0x0007D8, "Member 'ABP_BreakableWall_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeWallHelper) == 0x0007E0, "Member 'ABP_BreakableWall_C::FadeWallHelper' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Ak) == 0x0007E8, "Member 'ABP_BreakableWall_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Arrow1) == 0x0007F0, "Member 'ABP_BreakableWall_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeEndVisual) == 0x0007F8, "Member 'ABP_BreakableWall_C::FadeEndVisual' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FaseStartVisual) == 0x000800, "Member 'ABP_BreakableWall_C::FaseStartVisual' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeDirectionArrow) == 0x000808, "Member 'ABP_BreakableWall_C::FadeDirectionArrow' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Arrow) == 0x000810, "Member 'ABP_BreakableWall_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Niagara) == 0x000818, "Member 'ABP_BreakableWall_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, VFX_Transform) == 0x000820, "Member 'ABP_BreakableWall_C::VFX_Transform' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt3) == 0x000828, "Member 'ABP_BreakableWall_C::Hurt3' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt2) == 0x000830, "Member 'ABP_BreakableWall_C::Hurt2' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt1) == 0x000838, "Member 'ABP_BreakableWall_C::Hurt1' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, DynamicPlatformBox) == 0x000840, "Member 'ABP_BreakableWall_C::DynamicPlatformBox' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, MiniMapActor) == 0x000848, "Member 'ABP_BreakableWall_C::MiniMapActor' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Billboard) == 0x000850, "Member 'ABP_BreakableWall_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Support4) == 0x000858, "Member 'ABP_BreakableWall_C::Support4' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Support3) == 0x000860, "Member 'ABP_BreakableWall_C::Support3' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Support2) == 0x000868, "Member 'ABP_BreakableWall_C::Support2' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Support1) == 0x000870, "Member 'ABP_BreakableWall_C::Support1' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Collision) == 0x000878, "Member 'ABP_BreakableWall_C::Collision' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, HurtBox) == 0x000880, "Member 'ABP_BreakableWall_C::HurtBox' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Destructible) == 0x000888, "Member 'ABP_BreakableWall_C::Destructible' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeWallTimeline_Fade_00BC56E7434A19D66501E5B182DE71E0) == 0x000890, "Member 'ABP_BreakableWall_C::FadeWallTimeline_Fade_00BC56E7434A19D66501E5B182DE71E0' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeWallTimeline__Direction_00BC56E7434A19D66501E5B182DE71E0) == 0x000894, "Member 'ABP_BreakableWall_C::FadeWallTimeline__Direction_00BC56E7434A19D66501E5B182DE71E0' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeWallTimeline) == 0x000898, "Member 'ABP_BreakableWall_C::FadeWallTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, BreakablesFadeTimeline_Fade_CE14EC8A4B7BA868FAABD19750824EDF) == 0x0008A0, "Member 'ABP_BreakableWall_C::BreakablesFadeTimeline_Fade_CE14EC8A4B7BA868FAABD19750824EDF' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, BreakablesFadeTimeline__Direction_CE14EC8A4B7BA868FAABD19750824EDF) == 0x0008A4, "Member 'ABP_BreakableWall_C::BreakablesFadeTimeline__Direction_CE14EC8A4B7BA868FAABD19750824EDF' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, BreakablesFadeTimeline) == 0x0008A8, "Member 'ABP_BreakableWall_C::BreakablesFadeTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, WallToUse) == 0x0008B0, "Member 'ABP_BreakableWall_C::WallToUse' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, UseSupport1) == 0x0008B1, "Member 'ABP_BreakableWall_C::UseSupport1' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, UseSupport2) == 0x0008B2, "Member 'ABP_BreakableWall_C::UseSupport2' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, UseSupport3) == 0x0008B3, "Member 'ABP_BreakableWall_C::UseSupport3' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, UseSupport4) == 0x0008B4, "Member 'ABP_BreakableWall_C::UseSupport4' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Location_s1) == 0x0008B8, "Member 'ABP_BreakableWall_C::Location_s1' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Rotation_s1) == 0x0008C4, "Member 'ABP_BreakableWall_C::Rotation_s1' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Scale_s1) == 0x0008D0, "Member 'ABP_BreakableWall_C::Scale_s1' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Location_s2) == 0x0008DC, "Member 'ABP_BreakableWall_C::Location_s2' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Rotation_s2) == 0x0008E8, "Member 'ABP_BreakableWall_C::Rotation_s2' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Scale_s2) == 0x0008F4, "Member 'ABP_BreakableWall_C::Scale_s2' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Location_s3) == 0x000900, "Member 'ABP_BreakableWall_C::Location_s3' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Rotation_s3) == 0x00090C, "Member 'ABP_BreakableWall_C::Rotation_s3' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Scale_s3) == 0x000918, "Member 'ABP_BreakableWall_C::Scale_s3' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Location_s4) == 0x000924, "Member 'ABP_BreakableWall_C::Location_s4' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Rotation_s4) == 0x000930, "Member 'ABP_BreakableWall_C::Rotation_s4' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Scale_s4) == 0x00093C, "Member 'ABP_BreakableWall_C::Scale_s4' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, UseCustomHurt) == 0x000948, "Member 'ABP_BreakableWall_C::UseCustomHurt' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt1_Location) == 0x00094C, "Member 'ABP_BreakableWall_C::Hurt1_Location' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt1_Radius) == 0x000958, "Member 'ABP_BreakableWall_C::Hurt1_Radius' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt1_Impulse) == 0x00095C, "Member 'ABP_BreakableWall_C::Hurt1_Impulse' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt2_Location) == 0x000960, "Member 'ABP_BreakableWall_C::Hurt2_Location' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt2_Radius) == 0x00096C, "Member 'ABP_BreakableWall_C::Hurt2_Radius' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, WaitBeforeChunkDissolve) == 0x000970, "Member 'ABP_BreakableWall_C::WaitBeforeChunkDissolve' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, LowerDiffuse) == 0x000974, "Member 'ABP_BreakableWall_C::LowerDiffuse' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeStart) == 0x000978, "Member 'ABP_BreakableWall_C::FadeStart' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeEnd) == 0x000984, "Member 'ABP_BreakableWall_C::FadeEnd' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, StaticMeshReference) == 0x000990, "Member 'ABP_BreakableWall_C::StaticMeshReference' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeDirectionOverride) == 0x0009A0, "Member 'ABP_BreakableWall_C::FadeDirectionOverride' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeMaterial) == 0x0009A8, "Member 'ABP_BreakableWall_C::FadeMaterial' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeSmoothness) == 0x0009B0, "Member 'ABP_BreakableWall_C::FadeSmoothness' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeSpeedOverride) == 0x0009B4, "Member 'ABP_BreakableWall_C::FadeSpeedOverride' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FogActors) == 0x0009B8, "Member 'ABP_BreakableWall_C::FogActors' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeDirectionOverrideV) == 0x0009C8, "Member 'ABP_BreakableWall_C::FadeDirectionOverrideV' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Flip_Fade_Direction) == 0x0009D4, "Member 'ABP_BreakableWall_C::Flip_Fade_Direction' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, CollisionAndHurtboxScale) == 0x0009D8, "Member 'ABP_BreakableWall_C::CollisionAndHurtboxScale' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, DestroyedSound) == 0x0009E8, "Member 'ABP_BreakableWall_C::DestroyedSound' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, HasBeenHit) == 0x0009F0, "Member 'ABP_BreakableWall_C::HasBeenHit' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt3_Location) == 0x0009F4, "Member 'ABP_BreakableWall_C::Hurt3_Location' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt3_Radius) == 0x000A00, "Member 'ABP_BreakableWall_C::Hurt3_Radius' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, RuntimeDebug) == 0x000A04, "Member 'ABP_BreakableWall_C::RuntimeDebug' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, HurtLocations) == 0x000A08, "Member 'ABP_BreakableWall_C::HurtLocations' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, HurtRadii) == 0x000A18, "Member 'ABP_BreakableWall_C::HurtRadii' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, PlayerAdjustedImpulse) == 0x000A28, "Member 'ABP_BreakableWall_C::PlayerAdjustedImpulse' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, UseHintParticle_) == 0x000A29, "Member 'ABP_BreakableWall_C::UseHintParticle_' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, HintParticleSetup) == 0x000A2A, "Member 'ABP_BreakableWall_C::HintParticleSetup' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, ParticleDensity) == 0x000A2C, "Member 'ABP_BreakableWall_C::ParticleDensity' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, ParticlesTransform) == 0x000A30, "Member 'ABP_BreakableWall_C::ParticlesTransform' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, OverrideHintParticleSystem) == 0x000A60, "Member 'ABP_BreakableWall_C::OverrideHintParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, LoadEvent) == 0x000A68, "Member 'ABP_BreakableWall_C::LoadEvent' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeMaterials) == 0x000A70, "Member 'ABP_BreakableWall_C::FadeMaterials' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, WasBroken_) == 0x000A80, "Member 'ABP_BreakableWall_C::WasBroken_' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, ExtraHitSound) == 0x000A88, "Member 'ABP_BreakableWall_C::ExtraHitSound' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt2_Impulse) == 0x000A90, "Member 'ABP_BreakableWall_C::Hurt2_Impulse' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, Hurt3_Impulse) == 0x000A94, "Member 'ABP_BreakableWall_C::Hurt3_Impulse' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, PrevWallToUse) == 0x000A98, "Member 'ABP_BreakableWall_C::PrevWallToUse' has a wrong offset!");
static_assert(offsetof(ABP_BreakableWall_C, FadeMeshes_) == 0x000A99, "Member 'ABP_BreakableWall_C::FadeMeshes_' has a wrong offset!");

}

