#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BreakableWall

#include "Basic.hpp"

#include "BP_BreakableWall_classes.hpp"
#include "BP_BreakableWall_parameters.hpp"


namespace SDK
{

// Function BP_BreakableWall.BP_BreakableWall_C.ExecuteUbergraph_BP_BreakableWall
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BreakableWall_C::ExecuteUbergraph_BP_BreakableWall(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "ExecuteUbergraph_BP_BreakableWall");

	Params::BP_BreakableWall_C_ExecuteUbergraph_BP_BreakableWall Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BreakableWall.BP_BreakableWall_C.BPPostBeginPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BreakableWall_C::BPPostBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "BPPostBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.OnKilled
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAbilityController*               KillerAbilityController                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BreakableWall_C::OnKilled(class UObject* Killer, class UAbilityController* KillerAbilityController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "OnKilled");

	Params::BP_BreakableWall_C_OnKilled Parms{};

	Parms.Killer = Killer;
	Parms.KillerAbilityController = KillerAbilityController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BreakableWall.BP_BreakableWall_C.BPPostSaveLoaded
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BreakableWall_C::BPPostSaveLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "BPPostSaveLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.Damage3
// (BlueprintCallable, BlueprintEvent)

void ABP_BreakableWall_C::Damage3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "Damage3");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.DAMAGE2
// (BlueprintCallable, BlueprintEvent)

void ABP_BreakableWall_C::DAMAGE2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "DAMAGE2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.DAMAGE1
// (BlueprintCallable, BlueprintEvent)

void ABP_BreakableWall_C::DAMAGE1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "DAMAGE1");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.Fade
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Instant                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BreakableWall_C::Fade(bool Instant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "Fade");

	Params::BP_BreakableWall_C_Fade Parms{};

	Parms.Instant = Instant;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BreakableWall.BP_BreakableWall_C.DamageTaken
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActorSoul*                       Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActorSoul*                       Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAbilityBase*                     Ability                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimID*                          Anim                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   effectiveDamage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDamageValue                     OriginalDamageValue                                    (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// struct FDamageValue                     DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ABP_BreakableWall_C::DamageTaken(class AActorSoul* Source, class AActorSoul* Target, class UAbilityBase* Ability, class UAnimID* Anim, float effectiveDamage, const struct FDamageValue& OriginalDamageValue, const struct FDamageValue& DamageValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "DamageTaken");

	Params::BP_BreakableWall_C_DamageTaken Parms{};

	Parms.Source = Source;
	Parms.Target = Target;
	Parms.Ability = Ability;
	Parms.Anim = Anim;
	Parms.effectiveDamage = effectiveDamage;
	Parms.OriginalDamageValue = std::move(OriginalDamageValue);
	Parms.DamageValue = std::move(DamageValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BreakableWall.BP_BreakableWall_C.BreakablesFadeTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_BreakableWall_C::BreakablesFadeTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "BreakablesFadeTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.BreakablesFadeTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_BreakableWall_C::BreakablesFadeTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "BreakablesFadeTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.FadeWallTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_BreakableWall_C::FadeWallTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "FadeWallTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.FadeWallTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_BreakableWall_C::FadeWallTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "FadeWallTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BreakableWall_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.SetSupportOffsets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             Support                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BreakableWall_C::SetSupportOffsets(class UStaticMeshComponent* Support, const struct FVector& Location, const struct FVector& Scale, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "SetSupportOffsets");

	Params::BP_BreakableWall_C_SetSupportOffsets Parms{};

	Parms.Support = Support;
	Parms.Location = std::move(Location);
	Parms.Scale = std::move(Scale);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BreakableWall.BP_BreakableWall_C.GetHurtLocationAndRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   N                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BreakableWall_C::GetHurtLocationAndRadius(int32 N, struct FVector* Location, float* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "GetHurtLocationAndRadius");

	Params::BP_BreakableWall_C_GetHurtLocationAndRadius Parms{};

	Parms.N = N;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Radius != nullptr)
		*Radius = Parms.Radius;
}


// Function BP_BreakableWall.BP_BreakableWall_C.SetHurtLocationAndRadius
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   N                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BreakableWall_C::SetHurtLocationAndRadius(int32 N, const struct FVector& Location, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "SetHurtLocationAndRadius");

	Params::BP_BreakableWall_C_SetHurtLocationAndRadius Parms{};

	Parms.N = N;
	Parms.Location = std::move(Location);
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BreakableWall.BP_BreakableWall_C.GetHurtLocationRelative
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   N                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_BreakableWall_C::GetHurtLocationRelative(int32 N)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "GetHurtLocationRelative");

	Params::BP_BreakableWall_C_GetHurtLocationRelative Parms{};

	Parms.N = N;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BreakableWall.BP_BreakableWall_C.SetHintVFXParameters
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BreakableWall_C::SetHintVFXParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "SetHintVFXParameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.SetHiddenWallMaterialParameters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BreakableWall_C::SetHiddenWallMaterialParameters(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "SetHiddenWallMaterialParameters");

	Params::BP_BreakableWall_C_SetHiddenWallMaterialParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_BreakableWall.BP_BreakableWall_C.UpdateDTEntry
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BreakableWall_C::UpdateDTEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "UpdateDTEntry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.FadeOutFogFXActors
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Fade                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BreakableWall_C::FadeOutFogFXActors(float Fade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "FadeOutFogFXActors");

	Params::BP_BreakableWall_C_FadeOutFogFXActors Parms{};

	Parms.Fade = Fade;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BreakableWall.BP_BreakableWall_C.FadeOutMeshes
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Fade                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BreakableWall_C::FadeOutMeshes(float Fade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "FadeOutMeshes");

	Params::BP_BreakableWall_C_FadeOutMeshes Parms{};

	Parms.Fade = Fade;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BreakableWall.BP_BreakableWall_C.SomeWarnings
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BreakableWall_C::SomeWarnings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "SomeWarnings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BreakableWall.BP_BreakableWall_C.CheckVisualizers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BreakableWall_C::CheckVisualizers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BreakableWall_C", "CheckVisualizers");

	UObject::ProcessEvent(Func, nullptr);
}

}

