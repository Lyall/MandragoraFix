#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterWindow_CarryWeight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_CharacterWindow_CarryWeight.BP_CharacterWindow_CarryWeight_C
// 0x0090 (0x02F0 - 0x0260)
class UBP_CharacterWindow_CarryWeight_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextBlock*                             CurrentValueCaption;                               // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             EquipLoad;                                         // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MaxValueCaption;                                   // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             PercentCaption;                                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_2;                                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMap<EEquipLoadIndicator, struct FSlateColor> AttributeColors;                                   // 0x0290(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MaxValue;                                          // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentValue;                                      // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSmallScreen;                                     // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_BP_CharacterWindow_CarryWeight(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void SetCurrentValue(float Value, EEquipLoadIndicator Color);
	void SetMaxValue(float Value, EEquipLoadIndicator Color);
	void SetColor(EEquipLoadIndicator Color);
	void SetPercent();
	void SetText();
	void ToggleSmallScreen(bool InIsSmallScreen);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterWindow_CarryWeight_C">();
	}
	static class UBP_CharacterWindow_CarryWeight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterWindow_CarryWeight_C>();
	}
};
static_assert(alignof(UBP_CharacterWindow_CarryWeight_C) == 0x000008, "Wrong alignment on UBP_CharacterWindow_CarryWeight_C");
static_assert(sizeof(UBP_CharacterWindow_CarryWeight_C) == 0x0002F0, "Wrong size on UBP_CharacterWindow_CarryWeight_C");
static_assert(offsetof(UBP_CharacterWindow_CarryWeight_C, UberGraphFrame) == 0x000260, "Member 'UBP_CharacterWindow_CarryWeight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CharacterWindow_CarryWeight_C, CurrentValueCaption) == 0x000268, "Member 'UBP_CharacterWindow_CarryWeight_C::CurrentValueCaption' has a wrong offset!");
static_assert(offsetof(UBP_CharacterWindow_CarryWeight_C, EquipLoad) == 0x000270, "Member 'UBP_CharacterWindow_CarryWeight_C::EquipLoad' has a wrong offset!");
static_assert(offsetof(UBP_CharacterWindow_CarryWeight_C, MaxValueCaption) == 0x000278, "Member 'UBP_CharacterWindow_CarryWeight_C::MaxValueCaption' has a wrong offset!");
static_assert(offsetof(UBP_CharacterWindow_CarryWeight_C, PercentCaption) == 0x000280, "Member 'UBP_CharacterWindow_CarryWeight_C::PercentCaption' has a wrong offset!");
static_assert(offsetof(UBP_CharacterWindow_CarryWeight_C, TextBlock_2) == 0x000288, "Member 'UBP_CharacterWindow_CarryWeight_C::TextBlock_2' has a wrong offset!");
static_assert(offsetof(UBP_CharacterWindow_CarryWeight_C, AttributeColors) == 0x000290, "Member 'UBP_CharacterWindow_CarryWeight_C::AttributeColors' has a wrong offset!");
static_assert(offsetof(UBP_CharacterWindow_CarryWeight_C, MaxValue) == 0x0002E0, "Member 'UBP_CharacterWindow_CarryWeight_C::MaxValue' has a wrong offset!");
static_assert(offsetof(UBP_CharacterWindow_CarryWeight_C, CurrentValue) == 0x0002E4, "Member 'UBP_CharacterWindow_CarryWeight_C::CurrentValue' has a wrong offset!");
static_assert(offsetof(UBP_CharacterWindow_CarryWeight_C, IsSmallScreen) == 0x0002E8, "Member 'UBP_CharacterWindow_CarryWeight_C::IsSmallScreen' has a wrong offset!");

}

