#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterWindow_CarryWeight

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "man_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterWindow_CarryWeight.BP_CharacterWindow_CarryWeight_C.ExecuteUbergraph_BP_CharacterWindow_CarryWeight
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterWindow_CarryWeight_C_ExecuteUbergraph_BP_CharacterWindow_CarryWeight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_CarryWeight_C_ExecuteUbergraph_BP_CharacterWindow_CarryWeight) == 0x000004, "Wrong alignment on BP_CharacterWindow_CarryWeight_C_ExecuteUbergraph_BP_CharacterWindow_CarryWeight");
static_assert(sizeof(BP_CharacterWindow_CarryWeight_C_ExecuteUbergraph_BP_CharacterWindow_CarryWeight) == 0x000008, "Wrong size on BP_CharacterWindow_CarryWeight_C_ExecuteUbergraph_BP_CharacterWindow_CarryWeight");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ExecuteUbergraph_BP_CharacterWindow_CarryWeight, EntryPoint) == 0x000000, "Member 'BP_CharacterWindow_CarryWeight_C_ExecuteUbergraph_BP_CharacterWindow_CarryWeight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ExecuteUbergraph_BP_CharacterWindow_CarryWeight, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_CharacterWindow_CarryWeight_C_ExecuteUbergraph_BP_CharacterWindow_CarryWeight::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function BP_CharacterWindow_CarryWeight.BP_CharacterWindow_CarryWeight_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_CarryWeight_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_CarryWeight_C_PreConstruct) == 0x000001, "Wrong alignment on BP_CharacterWindow_CarryWeight_C_PreConstruct");
static_assert(sizeof(BP_CharacterWindow_CarryWeight_C_PreConstruct) == 0x000001, "Wrong size on BP_CharacterWindow_CarryWeight_C_PreConstruct");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_CharacterWindow_CarryWeight_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_CharacterWindow_CarryWeight.BP_CharacterWindow_CarryWeight_C.SetCurrentValue
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterWindow_CarryWeight_C_SetCurrentValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEquipLoadIndicator                           Color;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FloatToText_ReturnValue;                  // 0x0008(0x0018)()
	struct FSlateColor                            CallFunc_Map_Find_Value;                           // 0x0020(0x0028)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_CarryWeight_C_SetCurrentValue) == 0x000008, "Wrong alignment on BP_CharacterWindow_CarryWeight_C_SetCurrentValue");
static_assert(sizeof(BP_CharacterWindow_CarryWeight_C_SetCurrentValue) == 0x000050, "Wrong size on BP_CharacterWindow_CarryWeight_C_SetCurrentValue");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetCurrentValue, Value) == 0x000000, "Member 'BP_CharacterWindow_CarryWeight_C_SetCurrentValue::Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetCurrentValue, Color) == 0x000004, "Member 'BP_CharacterWindow_CarryWeight_C_SetCurrentValue::Color' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetCurrentValue, CallFunc_FloatToText_ReturnValue) == 0x000008, "Member 'BP_CharacterWindow_CarryWeight_C_SetCurrentValue::CallFunc_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetCurrentValue, CallFunc_Map_Find_Value) == 0x000020, "Member 'BP_CharacterWindow_CarryWeight_C_SetCurrentValue::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetCurrentValue, CallFunc_Map_Find_ReturnValue) == 0x000048, "Member 'BP_CharacterWindow_CarryWeight_C_SetCurrentValue::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_CarryWeight.BP_CharacterWindow_CarryWeight_C.SetMaxValue
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterWindow_CarryWeight_C_SetMaxValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEquipLoadIndicator                           Color;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FloatToText_ReturnValue;                  // 0x0008(0x0018)()
	struct FSlateColor                            CallFunc_Map_Find_Value;                           // 0x0020(0x0028)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_CarryWeight_C_SetMaxValue) == 0x000008, "Wrong alignment on BP_CharacterWindow_CarryWeight_C_SetMaxValue");
static_assert(sizeof(BP_CharacterWindow_CarryWeight_C_SetMaxValue) == 0x000050, "Wrong size on BP_CharacterWindow_CarryWeight_C_SetMaxValue");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetMaxValue, Value) == 0x000000, "Member 'BP_CharacterWindow_CarryWeight_C_SetMaxValue::Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetMaxValue, Color) == 0x000004, "Member 'BP_CharacterWindow_CarryWeight_C_SetMaxValue::Color' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetMaxValue, CallFunc_FloatToText_ReturnValue) == 0x000008, "Member 'BP_CharacterWindow_CarryWeight_C_SetMaxValue::CallFunc_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetMaxValue, CallFunc_Map_Find_Value) == 0x000020, "Member 'BP_CharacterWindow_CarryWeight_C_SetMaxValue::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetMaxValue, CallFunc_Map_Find_ReturnValue) == 0x000048, "Member 'BP_CharacterWindow_CarryWeight_C_SetMaxValue::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_CarryWeight.BP_CharacterWindow_CarryWeight_C.SetColor
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterWindow_CarryWeight_C_SetColor final
{
public:
	EEquipLoadIndicator                           Color;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            CallFunc_Map_Find_Value;                           // 0x0008(0x0028)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_CarryWeight_C_SetColor) == 0x000008, "Wrong alignment on BP_CharacterWindow_CarryWeight_C_SetColor");
static_assert(sizeof(BP_CharacterWindow_CarryWeight_C_SetColor) == 0x000038, "Wrong size on BP_CharacterWindow_CarryWeight_C_SetColor");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetColor, Color) == 0x000000, "Member 'BP_CharacterWindow_CarryWeight_C_SetColor::Color' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetColor, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_CharacterWindow_CarryWeight_C_SetColor::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetColor, CallFunc_Map_Find_ReturnValue) == 0x000030, "Member 'BP_CharacterWindow_CarryWeight_C_SetColor::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_CarryWeight.BP_CharacterWindow_CarryWeight_C.SetPercent
// 0x00B0 (0x00B0 - 0x0000)
struct BP_CharacterWindow_CarryWeight_C_SetPercent final
{
public:
	class FText                                   TextFormat;                                        // 0x0000(0x0018)(Edit, BlueprintVisible)
	float                                         Percent;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FloatToText_ReturnValue;                  // 0x0020(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ReferenceParm)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0090(0x0018)()
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_CarryWeight_C_SetPercent) == 0x000008, "Wrong alignment on BP_CharacterWindow_CarryWeight_C_SetPercent");
static_assert(sizeof(BP_CharacterWindow_CarryWeight_C_SetPercent) == 0x0000B0, "Wrong size on BP_CharacterWindow_CarryWeight_C_SetPercent");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetPercent, TextFormat) == 0x000000, "Member 'BP_CharacterWindow_CarryWeight_C_SetPercent::TextFormat' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetPercent, Percent) == 0x000018, "Member 'BP_CharacterWindow_CarryWeight_C_SetPercent::Percent' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetPercent, CallFunc_FloatToText_ReturnValue) == 0x000020, "Member 'BP_CharacterWindow_CarryWeight_C_SetPercent::CallFunc_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetPercent, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'BP_CharacterWindow_CarryWeight_C_SetPercent::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetPercent, K2Node_MakeArray_Array) == 0x000078, "Member 'BP_CharacterWindow_CarryWeight_C_SetPercent::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetPercent, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000088, "Member 'BP_CharacterWindow_CarryWeight_C_SetPercent::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetPercent, CallFunc_Format_ReturnValue) == 0x000090, "Member 'BP_CharacterWindow_CarryWeight_C_SetPercent::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetPercent, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000A8, "Member 'BP_CharacterWindow_CarryWeight_C_SetPercent::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_CarryWeight.BP_CharacterWindow_CarryWeight_C.SetText
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterWindow_CarryWeight_C_SetText final
{
public:
	class FText                                   CallFunc_GetColonText_ReturnValue;                 // 0x0000(0x0018)()
};
static_assert(alignof(BP_CharacterWindow_CarryWeight_C_SetText) == 0x000008, "Wrong alignment on BP_CharacterWindow_CarryWeight_C_SetText");
static_assert(sizeof(BP_CharacterWindow_CarryWeight_C_SetText) == 0x000018, "Wrong size on BP_CharacterWindow_CarryWeight_C_SetText");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_SetText, CallFunc_GetColonText_ReturnValue) == 0x000000, "Member 'BP_CharacterWindow_CarryWeight_C_SetText::CallFunc_GetColonText_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_CarryWeight.BP_CharacterWindow_CarryWeight_C.ToggleSmallScreen
// 0x0208 (0x0208 - 0x0000)
struct BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_4;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_6;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_7;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_8;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_9;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_2;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_3;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_4;                           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0050(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_1;                 // 0x00A8(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_2;                 // 0x0100(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_3;                 // 0x0158(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_4;                 // 0x01B0(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen");
static_assert(sizeof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen) == 0x000208, "Wrong size on BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_int_Variable) == 0x000004, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_int_Variable_1) == 0x000008, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_int_Variable_2) == 0x000010, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_int_Variable_3) == 0x000014, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_bool_Variable_2) == 0x000018, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_int_Variable_4) == 0x00001C, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_int_Variable_5) == 0x000020, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_bool_Variable_3) == 0x000024, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_int_Variable_6) == 0x000028, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_int_Variable_7) == 0x00002C, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_bool_Variable_4) == 0x000030, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_int_Variable_8) == 0x000034, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_int_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, Temp_int_Variable_9) == 0x000038, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::Temp_int_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, K2Node_Select_Default) == 0x00003C, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x000040, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, K2Node_Select_Default_2) == 0x000044, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, K2Node_Select_Default_3) == 0x000048, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, K2Node_Select_Default_4) == 0x00004C, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo) == 0x000050, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_1) == 0x0000A8, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_2) == 0x000100, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_3) == 0x000158, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_4) == 0x0001B0, "Member 'BP_CharacterWindow_CarryWeight_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_4' has a wrong offset!");

}

