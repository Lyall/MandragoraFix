#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterWindow_InventoryFilterSlot

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot
// 0x01D8 (0x01D8 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInTransmogSlot;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry_1;                         // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInEnabled;                           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInVisible_1;                         // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Event_ItemIcon;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInSelected;                          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_SlotNameText;                         // 0x0058(0x0018)(ConstParm)
	bool                                          K2Node_Event_bInVisible;                           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_ElapsedCooldownPercent;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_TimeLeft;                             // 0x0078(0x0018)(ConstParm)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0090(0x0038)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x00C8(0x0070)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x0138(0x0070)(ConstParm)
	TArray<class UTexture2D*>                     K2Node_Event_InPermanentEnchantIcons;              // 0x01A8(0x0010)(ConstParm, ReferenceParm)
	TArray<class UTexture2D*>                     K2Node_Event_InTemporaryEnchantIcons;              // 0x01B8(0x0010)(ConstParm, ReferenceParm)
	int32                                         K2Node_Event_InStackNum;                           // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInIsStackable;                       // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bShadowMode;                          // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInLocked;                            // 0x01CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInEquippedItemMode;                  // 0x01CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInTwoHandedLocked;                   // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInUnavailable;                       // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot) == 0x0001D8, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, EntryPoint) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_bInTransmogSlot) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_bInTransmogSlot' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_IsDesignTime) == 0x000005, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_MyGeometry_1) == 0x000008, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_MyGeometry_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_bInEnabled) == 0x000044, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_bInEnabled' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_bInVisible_1) == 0x000045, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_bInVisible_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_ItemIcon) == 0x000048, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_ItemIcon' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_bInSelected) == 0x000050, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_bInSelected' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_SlotNameText) == 0x000058, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_SlotNameText' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_bInVisible) == 0x000070, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_bInVisible' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, CallFunc_Not_PreBool_ReturnValue) == 0x000071, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_ElapsedCooldownPercent) == 0x000074, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_ElapsedCooldownPercent' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_TimeLeft) == 0x000078, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_TimeLeft' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_MyGeometry) == 0x000090, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_MouseEvent_1) == 0x0000C8, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_MouseEvent) == 0x000138, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_InPermanentEnchantIcons) == 0x0001A8, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_InPermanentEnchantIcons' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_InTemporaryEnchantIcons) == 0x0001B8, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_InTemporaryEnchantIcons' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_InStackNum) == 0x0001C8, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_InStackNum' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_bInIsStackable) == 0x0001CC, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_bInIsStackable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_bShadowMode) == 0x0001CD, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_bShadowMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_bInLocked) == 0x0001CE, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_bInLocked' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_bInEquippedItemMode) == 0x0001CF, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_bInEquippedItemMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_bInTwoHandedLocked) == 0x0001D0, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_bInTwoHandedLocked' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot, K2Node_Event_bInUnavailable) == 0x0001D1, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ExecuteUbergraph_BP_CharacterWindow_InventoryFilterSlot::K2Node_Event_bInUnavailable' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnSetTransmogSlot
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnSetTransmogSlot final
{
public:
	bool                                          bInTransmogSlot;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetTransmogSlot) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnSetTransmogSlot");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetTransmogSlot) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnSetTransmogSlot");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetTransmogSlot, bInTransmogSlot) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetTransmogSlot::bInTransmogSlot' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnSetUnavailable
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnSetUnavailable final
{
public:
	bool                                          bInUnavailable;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetUnavailable) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnSetUnavailable");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetUnavailable) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnSetUnavailable");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetUnavailable, bInUnavailable) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetUnavailable::bInUnavailable' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnSetTwoHandedLocked
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnSetTwoHandedLocked final
{
public:
	bool                                          bInTwoHandedLocked;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetTwoHandedLocked) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnSetTwoHandedLocked");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetTwoHandedLocked) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnSetTwoHandedLocked");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetTwoHandedLocked, bInTwoHandedLocked) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetTwoHandedLocked::bInTwoHandedLocked' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnSetEquippedItemMode
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnSetEquippedItemMode final
{
public:
	bool                                          bInEquippedItemMode;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetEquippedItemMode) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnSetEquippedItemMode");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetEquippedItemMode) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnSetEquippedItemMode");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetEquippedItemMode, bInEquippedItemMode) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetEquippedItemMode::bInEquippedItemMode' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnSetLocked
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnSetLocked final
{
public:
	bool                                          bInLocked;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetLocked) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnSetLocked");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetLocked) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnSetLocked");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetLocked, bInLocked) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetLocked::bInLocked' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnStackNumChanged
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnStackNumChanged final
{
public:
	int32                                         InStackNum;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInIsStackable;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bShadowMode;                                       // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnStackNumChanged) == 0x000004, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnStackNumChanged");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnStackNumChanged) == 0x000008, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnStackNumChanged");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnStackNumChanged, InStackNum) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnStackNumChanged::InStackNum' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnStackNumChanged, bInIsStackable) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnStackNumChanged::bInIsStackable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnStackNumChanged, bShadowMode) == 0x000005, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnStackNumChanged::bShadowMode' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnTemporaryEnchantIconsChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnTemporaryEnchantIconsChanged final
{
public:
	TArray<class UTexture2D*>                     InTemporaryEnchantIcons;                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnTemporaryEnchantIconsChanged) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnTemporaryEnchantIconsChanged");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnTemporaryEnchantIconsChanged) == 0x000010, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnTemporaryEnchantIconsChanged");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnTemporaryEnchantIconsChanged, InTemporaryEnchantIcons) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnTemporaryEnchantIconsChanged::InTemporaryEnchantIcons' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnPermanentEnchantIconsChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnPermanentEnchantIconsChanged final
{
public:
	TArray<class UTexture2D*>                     InPermanentEnchantIcons;                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnPermanentEnchantIconsChanged) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnPermanentEnchantIconsChanged");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnPermanentEnchantIconsChanged) == 0x000010, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnPermanentEnchantIconsChanged");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnPermanentEnchantIconsChanged, InPermanentEnchantIcons) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnPermanentEnchantIconsChanged::InPermanentEnchantIcons' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnMouseLeave) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnMouseLeave");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnMouseLeave) == 0x000070, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnMouseLeave");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnMouseEnter) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnMouseEnter");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnMouseEnter) == 0x0000A8, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnMouseEnter");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnSetCountdown
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnSetCountdown final
{
public:
	float                                         ElapsedCooldownPercent;                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimeLeft;                                          // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetCountdown) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnSetCountdown");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetCountdown) == 0x000020, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnSetCountdown");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetCountdown, ElapsedCooldownPercent) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetCountdown::ElapsedCooldownPercent' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetCountdown, TimeLeft) == 0x000008, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetCountdown::TimeLeft' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnToggleNewItemWarning
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnToggleNewItemWarning final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnToggleNewItemWarning) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnToggleNewItemWarning");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnToggleNewItemWarning) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnToggleNewItemWarning");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnToggleNewItemWarning, bInVisible) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnToggleNewItemWarning::bInVisible' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnSetSlotNameText
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnSetSlotNameText final
{
public:
	class FText                                   SlotNameText;                                      // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetSlotNameText) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnSetSlotNameText");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetSlotNameText) == 0x000018, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnSetSlotNameText");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetSlotNameText, SlotNameText) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetSlotNameText::SlotNameText' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnSetSelected
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnSetSelected final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetSelected) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnSetSelected");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetSelected) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnSetSelected");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetSelected, bInSelected) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetSelected::bInSelected' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnSetItemIcon
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnSetItemIcon final
{
public:
	class UTexture2D*                             ItemIcon_0;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetItemIcon) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnSetItemIcon");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetItemIcon) == 0x000008, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnSetItemIcon");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetItemIcon, ItemIcon_0) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetItemIcon::ItemIcon_0' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnSetVisible
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnSetVisible final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetVisible) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnSetVisible");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetVisible) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnSetVisible");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetVisible, bInVisible) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetVisible::bInVisible' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.OnSetEnabled
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_OnSetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetEnabled) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_OnSetEnabled");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetEnabled) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_OnSetEnabled");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_OnSetEnabled, bInEnabled) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_OnSetEnabled::bInEnabled' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_Tick) == 0x000004, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_Tick");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_Tick) == 0x00003C, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_Tick");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Tick, MyGeometry) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_PreConstruct) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_PreConstruct");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_PreConstruct) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_PreConstruct");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.SetVisible
// 0x0005 (0x0005 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_SetVisible final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_SetVisible) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_SetVisible");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_SetVisible) == 0x000005, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_SetVisible");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetVisible, InVisible) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetVisible::InVisible' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetVisible, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetVisible, Temp_byte_Variable) == 0x000002, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetVisible::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetVisible, Temp_byte_Variable_1) == 0x000003, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetVisible::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetVisible, K2Node_Select_Default) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetVisible::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.SetSlotName
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_SetSlotName final
{
public:
	class FText                                   InSlotName;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_SetSlotName) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_SetSlotName");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_SetSlotName) == 0x000018, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_SetSlotName");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetSlotName, InSlotName) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetSlotName::InSlotName' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.Init
// 0x0048 (0x0048 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_Init final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_3;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_4;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_Init) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_Init");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_Init) == 0x000048, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_Init");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, Temp_bool_Variable) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, Temp_bool_Variable_1) == 0x000001, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, Temp_bool_Variable_2) == 0x000002, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, Temp_bool_Variable_3) == 0x000003, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, Temp_byte_Variable) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, Temp_byte_Variable_1) == 0x000005, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, K2Node_Select_Default) == 0x000008, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, Temp_bool_Variable_4) == 0x000010, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000018, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, K2Node_Select_Default_1) == 0x000020, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, K2Node_Select_Default_2) == 0x000028, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000030, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, K2Node_Select_Default_3) == 0x000038, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Init, K2Node_Select_Default_4) == 0x000040, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Init::K2Node_Select_Default_4' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.SetSelected
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_SetSelected final
{
public:
	bool                                          InSelected;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_SetSelected) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_SetSelected");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_SetSelected) == 0x000018, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_SetSelected");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetSelected, InSelected) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetSelected::InSelected' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetSelected, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetSelected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetSelected, Temp_byte_Variable) == 0x000002, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetSelected::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetSelected, Temp_byte_Variable_1) == 0x000003, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetSelected::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetSelected, K2Node_Select_Default) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetSelected::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetSelected, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetSelected::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetSelected, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000010, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetSelected::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.SetEnabled
// 0x0009 (0x0009 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled final
{
public:
	bool                                          InIsEnabled;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled) == 0x000009, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled, InIsEnabled) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled::InIsEnabled' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled, Temp_byte_Variable) == 0x000002, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled, Temp_byte_Variable_1) == 0x000003, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled, Temp_bool_Variable_1) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled, Temp_byte_Variable_2) == 0x000005, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled, Temp_byte_Variable_3) == 0x000006, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled, K2Node_Select_Default) == 0x000007, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled, K2Node_Select_Default_1) == 0x000008, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetEnabled::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.SetItemIcon
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_SetItemIcon final
{
public:
	class UTexture2D*                             InItemIcon;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_SetItemIcon) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_SetItemIcon");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_SetItemIcon) == 0x000010, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_SetItemIcon");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetItemIcon, InItemIcon) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetItemIcon::InItemIcon' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetItemIcon, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetItemIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.Show Item Icon
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_Show_Item_Icon final
{
public:
	bool                                          InItemIconVisible;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_Show_Item_Icon) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_Show_Item_Icon");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_Show_Item_Icon) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_Show_Item_Icon");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Show_Item_Icon, InItemIconVisible) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Show_Item_Icon::InItemIconVisible' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.ToggleNewItemWarning
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InAnimate;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning) == 0x000018, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning, InVisible) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning::InVisible' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning, InAnimate) == 0x000001, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning::InAnimate' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning, Temp_bool_Variable) == 0x000002, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning, Temp_float_Variable) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning, K2Node_Select_Default) == 0x00000C, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleNewItemWarning::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.SetCountdown
// 0x0060 (0x0060 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown final
{
public:
	float                                         PercentLeft;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimeLeft;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x0020(0x0018)()
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown) == 0x000060, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown, PercentLeft) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown::PercentLeft' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown, TimeLeft) == 0x000008, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown::TimeLeft' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown, CallFunc_GetEmptyText_ReturnValue) == 0x000020, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000040, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000050, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCountdown::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.ToggleActiveFilterHighlight
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight final
{
public:
	bool                                          inEnabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight) == 0x000028, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight, inEnabled) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight::inEnabled' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight, Temp_byte_Variable) == 0x000002, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight, Temp_byte_Variable_1) == 0x000003, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight, Temp_bool_Variable_1) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight, Temp_float_Variable) == 0x000008, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight, Temp_float_Variable_1) == 0x00000C, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight, K2Node_Select_Default) == 0x000010, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight, CallFunc_BooleanAND_ReturnValue) == 0x000020, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight, K2Node_Select_Default_1) == 0x000024, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleActiveFilterHighlight::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.SetCount
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_SetCount final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stackable;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShadowMode;                                        // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0010(0x0018)()
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_SetCount) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_SetCount");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_SetCount) == 0x000028, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_SetCount");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCount, Quantity) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCount::Quantity' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCount, Stackable) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCount::Stackable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCount, ShadowMode) == 0x000005, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCount::ShadowMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCount, Temp_bool_Variable) == 0x000006, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCount, Temp_byte_Variable) == 0x000007, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCount, Temp_byte_Variable_1) == 0x000008, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCount::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCount, K2Node_Select_Default) == 0x000009, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetCount, CallFunc_IntToText_ReturnValue) == 0x000010, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetCount::CallFunc_IntToText_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.PlayQuickUseAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_PlayQuickUseAnim final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_PlayQuickUseAnim) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_PlayQuickUseAnim");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_PlayQuickUseAnim) == 0x000008, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_PlayQuickUseAnim");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_PlayQuickUseAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_PlayQuickUseAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.Set Locked
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_Set_Locked final
{
public:
	bool                                          InIsLocked;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_Set_Locked) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_Set_Locked");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_Set_Locked) == 0x000001, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_Set_Locked");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Set_Locked, InIsLocked) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Set_Locked::InIsLocked' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.PlayUnlockAnim
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_PlayUnlockAnim final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_PlayUnlockAnim) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_PlayUnlockAnim");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_PlayUnlockAnim) == 0x000018, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_PlayUnlockAnim");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_PlayUnlockAnim, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_PlayUnlockAnim::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_PlayUnlockAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_PlayUnlockAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.Toggle2HandedLock
// 0x0005 (0x0005 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock) == 0x000005, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock, InVisible) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock::InVisible' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock, Temp_byte_Variable) == 0x000002, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock, Temp_byte_Variable_1) == 0x000003, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock, K2Node_Select_Default) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_Toggle2HandedLock::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.SetUnavailable
// 0x0138 (0x0138 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable final
{
public:
	bool                                          InUnavailable;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x007C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_7;                            // 0x008C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_4;                           // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_5;                           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_6;                           // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0110(0x0028)()
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable) == 0x000138, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, InUnavailable) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::InUnavailable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_bool_Variable) == 0x000002, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_struct_Variable) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_struct_Variable_1) == 0x000014, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_bool_Variable_1) == 0x000024, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_struct_Variable_2) == 0x000028, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_struct_Variable_3) == 0x000038, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_bool_Variable_2) == 0x000048, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_float_Variable) == 0x00004C, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_float_Variable_1) == 0x000050, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_bool_Variable_3) == 0x000054, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_struct_Variable_4) == 0x000058, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_struct_Variable_5) == 0x000068, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_bool_Variable_4) == 0x000078, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_struct_Variable_6) == 0x00007C, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_struct_Variable_7) == 0x00008C, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_bool_Variable_5) == 0x00009C, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_float_Variable_2) == 0x0000A0, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_float_Variable_3) == 0x0000A4, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, Temp_bool_Variable_6) == 0x0000A8, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, K2Node_Select_Default) == 0x0000AC, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, K2Node_Select_Default_1) == 0x0000BC, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, K2Node_Select_Default_2) == 0x0000C0, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, K2Node_Select_Default_3) == 0x0000D0, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, K2Node_Select_Default_4) == 0x0000E0, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, K2Node_Select_Default_5) == 0x0000F0, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000F8, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, K2Node_Select_Default_6) == 0x000100, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable, K2Node_MakeStruct_SlateColor) == 0x000110, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_SetUnavailable::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.UnlockAnimFinished
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_UnlockAnimFinished final
{
public:
	class UCharacterWindowUserWidget*             CallFunc_GetCharacterWindowUserWidget_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_UnlockAnimFinished) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_UnlockAnimFinished");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_UnlockAnimFinished) == 0x000008, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_UnlockAnimFinished");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_UnlockAnimFinished, CallFunc_GetCharacterWindowUserWidget_ReturnValue) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_UnlockAnimFinished::CallFunc_GetCharacterWindowUserWidget_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.ToggleShadowMode
// 0x00C0 (0x00C0 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode final
{
public:
	bool                                          InIsShadowMode;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0088(0x0028)()
	float                                         K2Node_Select_Default_3;                           // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode) == 0x000008, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode) == 0x0000C0, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, InIsShadowMode) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::InIsShadowMode' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, Temp_struct_Variable) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, Temp_struct_Variable_1) == 0x000014, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, Temp_bool_Variable_1) == 0x000024, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, Temp_struct_Variable_2) == 0x000028, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, Temp_struct_Variable_3) == 0x000038, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, Temp_bool_Variable_2) == 0x000048, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, Temp_bool_Variable_3) == 0x000049, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, Temp_float_Variable) == 0x00004C, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, Temp_float_Variable_1) == 0x000050, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, K2Node_Select_Default) == 0x000054, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, K2Node_Select_Default_1) == 0x000064, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, K2Node_Select_Default_2) == 0x000074, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, K2Node_MakeStruct_SlateColor) == 0x000088, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, K2Node_Select_Default_3) == 0x0000B0, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000B8, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleShadowMode::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow_InventoryFilterSlot.BP_CharacterWindow_InventoryFilterSlot_C.ToggleTransmogIndicator
// 0x0005 (0x0005 - 0x0000)
struct BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator final
{
public:
	bool                                          InTransmogSlot;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator) == 0x000001, "Wrong alignment on BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator");
static_assert(sizeof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator) == 0x000005, "Wrong size on BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator, InTransmogSlot) == 0x000000, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator::InTransmogSlot' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator, Temp_byte_Variable) == 0x000002, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator, Temp_byte_Variable_1) == 0x000003, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator, K2Node_Select_Default) == 0x000004, "Member 'BP_CharacterWindow_InventoryFilterSlot_C_ToggleTransmogIndicator::K2Node_Select_Default' has a wrong offset!");

}

