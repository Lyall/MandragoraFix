#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterWindow

#include "Basic.hpp"

#include "man_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterWindow.BP_CharacterWindow_C.ExecuteUbergraph_BP_CharacterWindow
// 0x0150 (0x0150 - 0x0000)
struct BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInStatsVisible;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x000C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroProperty                                 K2Node_Event_PropertyType;                         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Value;                                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RoundedFloatValue;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_RoundedIntValue;                      // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Event_Widget_1;                             // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           K2Node_Event_Item_1;                               // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInFilterView;                        // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemSlot                                     K2Node_Event_ItemSlot;                             // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_FilterName;                           // 0x00A0(0x0018)(ConstParm)
	class FText                                   K2Node_Event_SortName;                             // 0x00B8(0x0018)(ConstParm)
	class FText                                   K2Node_Event_ItemRequirementText;                  // 0x00D0(0x0018)(ConstParm)
	class UItemAbility*                           K2Node_Event_InItem;                               // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           K2Node_Event_InComparedItem;                       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEquipped;                            // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Event_Widget;                               // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           K2Node_Event_Item;                                 // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemAbility*                           K2Node_Event_InItemAbility;                        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetHeroName_ReturnValue;                  // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0130(0x0018)()
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EInputDisplay                                 K2Node_Event_InInputDisplay;                       // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InControlDisplay;                     // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow");
static_assert(sizeof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow) == 0x000150, "Wrong size on BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, EntryPoint) == 0x000000, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_bInStatsVisible) == 0x000004, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_bInStatsVisible' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, Temp_bool_Variable) == 0x000005, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, Temp_byte_Variable) == 0x000006, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, Temp_byte_Variable_1) == 0x000007, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_IsDesignTime) == 0x000008, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_MyGeometry) == 0x00000C, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_InDeltaTime) == 0x000044, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_AnimDuration_1) == 0x000048, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x00004C, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_AnimDuration) == 0x000050, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, CallFunc_PlayAnimation_ReturnValue) == 0x000058, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x000060, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, CallFunc_PlayAnimation_ReturnValue_1) == 0x000068, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_PropertyType) == 0x000070, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_PropertyType' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_Value) == 0x000074, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_RoundedFloatValue) == 0x000078, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_RoundedIntValue) == 0x00007C, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_bAnimate_1) == 0x000080, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_Widget_1) == 0x000088, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_Widget_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_Item_1) == 0x000090, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_Item_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_bInFilterView) == 0x000098, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_bInFilterView' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_ItemSlot) == 0x000099, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_ItemSlot' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_FilterName) == 0x0000A0, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_FilterName' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_SortName) == 0x0000B8, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_SortName' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_ItemRequirementText) == 0x0000D0, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_ItemRequirementText' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_InItem) == 0x0000E8, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_InItem' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_InComparedItem) == 0x0000F0, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_InComparedItem' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_bEquipped) == 0x0000F8, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_bEquipped' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_bAnimate) == 0x0000F9, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_Widget) == 0x000100, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_Widget' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_Item) == 0x000108, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_Item' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Select_Default) == 0x000110, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, CallFunc_IsValid_ReturnValue) == 0x000111, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_InItemAbility) == 0x000118, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_InItemAbility' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, CallFunc_GetHeroName_ReturnValue) == 0x000120, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::CallFunc_GetHeroName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, CallFunc_Conv_StringToText_ReturnValue) == 0x000130, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, CallFunc_BooleanAND_ReturnValue) == 0x000148, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_InInputDisplay) == 0x000149, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow, K2Node_Event_InControlDisplay) == 0x00014A, "Member 'BP_CharacterWindow_C_ExecuteUbergraph_BP_CharacterWindow::K2Node_Event_InControlDisplay' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnToggleStats
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_C_OnToggleStats final
{
public:
	bool                                          bInStatsVisible;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_OnToggleStats) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_OnToggleStats");
static_assert(sizeof(BP_CharacterWindow_C_OnToggleStats) == 0x000001, "Wrong size on BP_CharacterWindow_C_OnToggleStats");
static_assert(offsetof(BP_CharacterWindow_C_OnToggleStats, bInStatsVisible) == 0x000000, "Member 'BP_CharacterWindow_C_OnToggleStats::bInStatsVisible' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnSetInputDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterWindow_C_OnSetInputDisplay final
{
public:
	EInputDisplay                                 InInputDisplay;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 InControlDisplay;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_OnSetInputDisplay) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_OnSetInputDisplay");
static_assert(sizeof(BP_CharacterWindow_C_OnSetInputDisplay) == 0x000002, "Wrong size on BP_CharacterWindow_C_OnSetInputDisplay");
static_assert(offsetof(BP_CharacterWindow_C_OnSetInputDisplay, InInputDisplay) == 0x000000, "Member 'BP_CharacterWindow_C_OnSetInputDisplay::InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnSetInputDisplay, InControlDisplay) == 0x000001, "Member 'BP_CharacterWindow_C_OnSetInputDisplay::InControlDisplay' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnSetRequestEquippedItem
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterWindow_C_OnSetRequestEquippedItem final
{
public:
	class UItemAbility*                           InItemAbility;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_OnSetRequestEquippedItem) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_OnSetRequestEquippedItem");
static_assert(sizeof(BP_CharacterWindow_C_OnSetRequestEquippedItem) == 0x000008, "Wrong size on BP_CharacterWindow_C_OnSetRequestEquippedItem");
static_assert(offsetof(BP_CharacterWindow_C_OnSetRequestEquippedItem, InItemAbility) == 0x000000, "Member 'BP_CharacterWindow_C_OnSetRequestEquippedItem::InItemAbility' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnRemovedRingItem
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterWindow_C_OnRemovedRingItem final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_OnRemovedRingItem) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_OnRemovedRingItem");
static_assert(sizeof(BP_CharacterWindow_C_OnRemovedRingItem) == 0x000010, "Wrong size on BP_CharacterWindow_C_OnRemovedRingItem");
static_assert(offsetof(BP_CharacterWindow_C_OnRemovedRingItem, Widget) == 0x000000, "Member 'BP_CharacterWindow_C_OnRemovedRingItem::Widget' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnRemovedRingItem, Item) == 0x000008, "Member 'BP_CharacterWindow_C_OnRemovedRingItem::Item' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnUpdateEquippedItemDetailsPanel
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel final
{
public:
	class FText                                   ItemRequirementText;                               // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UItemAbility*                           InItem;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           InComparedItem;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEquipped;                                         // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel");
static_assert(sizeof(BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel) == 0x000030, "Wrong size on BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel");
static_assert(offsetof(BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel, ItemRequirementText) == 0x000000, "Member 'BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel::ItemRequirementText' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel, InItem) == 0x000018, "Member 'BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel::InItem' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel, InComparedItem) == 0x000020, "Member 'BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel::InComparedItem' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel, bEquipped) == 0x000028, "Member 'BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel::bEquipped' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel, bAnimate) == 0x000029, "Member 'BP_CharacterWindow_C_OnUpdateEquippedItemDetailsPanel::bAnimate' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnSortChanged
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterWindow_C_OnSortChanged final
{
public:
	class FText                                   SortName;                                          // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_CharacterWindow_C_OnSortChanged) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_OnSortChanged");
static_assert(sizeof(BP_CharacterWindow_C_OnSortChanged) == 0x000018, "Wrong size on BP_CharacterWindow_C_OnSortChanged");
static_assert(offsetof(BP_CharacterWindow_C_OnSortChanged, SortName) == 0x000000, "Member 'BP_CharacterWindow_C_OnSortChanged::SortName' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnSetFilterSlot
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterWindow_C_OnSetFilterSlot final
{
public:
	EItemSlot                                     ItemSlot;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FilterName;                                        // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_CharacterWindow_C_OnSetFilterSlot) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_OnSetFilterSlot");
static_assert(sizeof(BP_CharacterWindow_C_OnSetFilterSlot) == 0x000020, "Wrong size on BP_CharacterWindow_C_OnSetFilterSlot");
static_assert(offsetof(BP_CharacterWindow_C_OnSetFilterSlot, ItemSlot) == 0x000000, "Member 'BP_CharacterWindow_C_OnSetFilterSlot::ItemSlot' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnSetFilterSlot, FilterName) == 0x000008, "Member 'BP_CharacterWindow_C_OnSetFilterSlot::FilterName' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnSetFilterView
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_C_OnSetFilterView final
{
public:
	bool                                          bInFilterView;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_OnSetFilterView) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_OnSetFilterView");
static_assert(sizeof(BP_CharacterWindow_C_OnSetFilterView) == 0x000001, "Wrong size on BP_CharacterWindow_C_OnSetFilterView");
static_assert(offsetof(BP_CharacterWindow_C_OnSetFilterView, bInFilterView) == 0x000000, "Member 'BP_CharacterWindow_C_OnSetFilterView::bInFilterView' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnUseItem
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterWindow_C_OnUseItem final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_OnUseItem) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_OnUseItem");
static_assert(sizeof(BP_CharacterWindow_C_OnUseItem) == 0x000010, "Wrong size on BP_CharacterWindow_C_OnUseItem");
static_assert(offsetof(BP_CharacterWindow_C_OnUseItem, Widget) == 0x000000, "Member 'BP_CharacterWindow_C_OnUseItem::Widget' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnUseItem, Item) == 0x000008, "Member 'BP_CharacterWindow_C_OnUseItem::Item' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnPropertyChanged
// 0x0014 (0x0014 - 0x0000)
struct BP_CharacterWindow_C_OnPropertyChanged final
{
public:
	EHeroProperty                                 PropertyType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundedFloatValue;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundedIntValue;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAnimate;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_OnPropertyChanged) == 0x000004, "Wrong alignment on BP_CharacterWindow_C_OnPropertyChanged");
static_assert(sizeof(BP_CharacterWindow_C_OnPropertyChanged) == 0x000014, "Wrong size on BP_CharacterWindow_C_OnPropertyChanged");
static_assert(offsetof(BP_CharacterWindow_C_OnPropertyChanged, PropertyType) == 0x000000, "Member 'BP_CharacterWindow_C_OnPropertyChanged::PropertyType' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnPropertyChanged, Value) == 0x000004, "Member 'BP_CharacterWindow_C_OnPropertyChanged::Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnPropertyChanged, RoundedFloatValue) == 0x000008, "Member 'BP_CharacterWindow_C_OnPropertyChanged::RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnPropertyChanged, RoundedIntValue) == 0x00000C, "Member 'BP_CharacterWindow_C_OnPropertyChanged::RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_OnPropertyChanged, bAnimate) == 0x000010, "Member 'BP_CharacterWindow_C_OnPropertyChanged::bAnimate' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterWindow_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_OnHide) == 0x000004, "Wrong alignment on BP_CharacterWindow_C_OnHide");
static_assert(sizeof(BP_CharacterWindow_C_OnHide) == 0x000004, "Wrong size on BP_CharacterWindow_C_OnHide");
static_assert(offsetof(BP_CharacterWindow_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_CharacterWindow_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterWindow_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_OnShow) == 0x000004, "Wrong alignment on BP_CharacterWindow_C_OnShow");
static_assert(sizeof(BP_CharacterWindow_C_OnShow) == 0x000004, "Wrong size on BP_CharacterWindow_C_OnShow");
static_assert(offsetof(BP_CharacterWindow_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_CharacterWindow_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_CharacterWindow_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_Tick) == 0x000004, "Wrong alignment on BP_CharacterWindow_C_Tick");
static_assert(sizeof(BP_CharacterWindow_C_Tick) == 0x00003C, "Wrong size on BP_CharacterWindow_C_Tick");
static_assert(offsetof(BP_CharacterWindow_C_Tick, MyGeometry) == 0x000000, "Member 'BP_CharacterWindow_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_CharacterWindow_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_PreConstruct) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_PreConstruct");
static_assert(sizeof(BP_CharacterWindow_C_PreConstruct) == 0x000001, "Wrong size on BP_CharacterWindow_C_PreConstruct");
static_assert(offsetof(BP_CharacterWindow_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_CharacterWindow_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.BtnHotkeyBClicked
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterWindow_C_BtnHotkeyBClicked final
{
public:
	bool                                          OpenPauseMenu;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OnlyClose;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_BtnHotkeyBClicked) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_BtnHotkeyBClicked");
static_assert(sizeof(BP_CharacterWindow_C_BtnHotkeyBClicked) == 0x000002, "Wrong size on BP_CharacterWindow_C_BtnHotkeyBClicked");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyBClicked, OpenPauseMenu) == 0x000000, "Member 'BP_CharacterWindow_C_BtnHotkeyBClicked::OpenPauseMenu' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyBClicked, OnlyClose) == 0x000001, "Member 'BP_CharacterWindow_C_BtnHotkeyBClicked::OnlyClose' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.BtnHotkeyAClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_C_BtnHotkeyAClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_BtnHotkeyAClicked) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_BtnHotkeyAClicked");
static_assert(sizeof(BP_CharacterWindow_C_BtnHotkeyAClicked) == 0x000001, "Wrong size on BP_CharacterWindow_C_BtnHotkeyAClicked");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyAClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_CharacterWindow_C_BtnHotkeyAClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.BtnHotkeyLS_PressClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_C_BtnHotkeyLS_PressClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_BtnHotkeyLS_PressClicked) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_BtnHotkeyLS_PressClicked");
static_assert(sizeof(BP_CharacterWindow_C_BtnHotkeyLS_PressClicked) == 0x000001, "Wrong size on BP_CharacterWindow_C_BtnHotkeyLS_PressClicked");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyLS_PressClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_CharacterWindow_C_BtnHotkeyLS_PressClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.BP_PropertyChanged
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterWindow_C_BP_PropertyChanged final
{
public:
	EHeroProperty                                 HeroProperty;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundedFloatValue;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundedIntValue;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEquipLoadIndicator                           CallFunc_GetEquipLoadIndicatorColor_ReturnValue;   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEquipLoadIndicator                           CallFunc_GetEquipLoadIndicatorColor_ReturnValue_1; // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetLevelText_ReturnValue;                 // 0x0018(0x0018)()
};
static_assert(alignof(BP_CharacterWindow_C_BP_PropertyChanged) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_BP_PropertyChanged");
static_assert(sizeof(BP_CharacterWindow_C_BP_PropertyChanged) == 0x000030, "Wrong size on BP_CharacterWindow_C_BP_PropertyChanged");
static_assert(offsetof(BP_CharacterWindow_C_BP_PropertyChanged, HeroProperty) == 0x000000, "Member 'BP_CharacterWindow_C_BP_PropertyChanged::HeroProperty' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_PropertyChanged, Value) == 0x000004, "Member 'BP_CharacterWindow_C_BP_PropertyChanged::Value' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_PropertyChanged, RoundedFloatValue) == 0x000008, "Member 'BP_CharacterWindow_C_BP_PropertyChanged::RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_PropertyChanged, RoundedIntValue) == 0x00000C, "Member 'BP_CharacterWindow_C_BP_PropertyChanged::RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_PropertyChanged, Animate) == 0x000010, "Member 'BP_CharacterWindow_C_BP_PropertyChanged::Animate' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_PropertyChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'BP_CharacterWindow_C_BP_PropertyChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_PropertyChanged, CallFunc_GetEquipLoadIndicatorColor_ReturnValue) == 0x000012, "Member 'BP_CharacterWindow_C_BP_PropertyChanged::CallFunc_GetEquipLoadIndicatorColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_PropertyChanged, CallFunc_GetEquipLoadIndicatorColor_ReturnValue_1) == 0x000013, "Member 'BP_CharacterWindow_C_BP_PropertyChanged::CallFunc_GetEquipLoadIndicatorColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_PropertyChanged, CallFunc_GetLevelText_ReturnValue) == 0x000018, "Member 'BP_CharacterWindow_C_BP_PropertyChanged::CallFunc_GetLevelText_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.BtnHotkeyYClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_C_BtnHotkeyYClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_BtnHotkeyYClicked) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_BtnHotkeyYClicked");
static_assert(sizeof(BP_CharacterWindow_C_BtnHotkeyYClicked) == 0x000001, "Wrong size on BP_CharacterWindow_C_BtnHotkeyYClicked");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyYClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_CharacterWindow_C_BtnHotkeyYClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.BtnHotkeyRS_PressClicked
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterWindow_C_BtnHotkeyRS_PressClicked final
{
public:
	class UInventoryWindowUserWidget*             CallFunc_GetInventoryWindowUserWidget_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_BtnHotkeyRS_PressClicked) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_BtnHotkeyRS_PressClicked");
static_assert(sizeof(BP_CharacterWindow_C_BtnHotkeyRS_PressClicked) == 0x000010, "Wrong size on BP_CharacterWindow_C_BtnHotkeyRS_PressClicked");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyRS_PressClicked, CallFunc_GetInventoryWindowUserWidget_ReturnValue) == 0x000000, "Member 'BP_CharacterWindow_C_BtnHotkeyRS_PressClicked::CallFunc_GetInventoryWindowUserWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyRS_PressClicked, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_CharacterWindow_C_BtnHotkeyRS_PressClicked::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyRS_PressClicked, CallFunc_IsActive_ReturnValue) == 0x000009, "Member 'BP_CharacterWindow_C_BtnHotkeyRS_PressClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.ToggleStats
// 0x0040 (0x0040 - 0x0000)
struct BP_CharacterWindow_C_ToggleStats final
{
public:
	bool                                          InStatsVisible;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_ToggleStats) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_ToggleStats");
static_assert(sizeof(BP_CharacterWindow_C_ToggleStats) == 0x000040, "Wrong size on BP_CharacterWindow_C_ToggleStats");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, InStatsVisible) == 0x000000, "Member 'BP_CharacterWindow_C_ToggleStats::InStatsVisible' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterWindow_C_ToggleStats::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, Temp_float_Variable) == 0x000004, "Member 'BP_CharacterWindow_C_ToggleStats::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, Temp_float_Variable_1) == 0x000008, "Member 'BP_CharacterWindow_C_ToggleStats::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_CharacterWindow_C_ToggleStats::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, Temp_object_Variable) == 0x000010, "Member 'BP_CharacterWindow_C_ToggleStats::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, Temp_object_Variable_1) == 0x000018, "Member 'BP_CharacterWindow_C_ToggleStats::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, Temp_bool_Variable_2) == 0x000020, "Member 'BP_CharacterWindow_C_ToggleStats::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, Temp_byte_Variable) == 0x000021, "Member 'BP_CharacterWindow_C_ToggleStats::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, Temp_byte_Variable_1) == 0x000022, "Member 'BP_CharacterWindow_C_ToggleStats::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, K2Node_Select_Default) == 0x000028, "Member 'BP_CharacterWindow_C_ToggleStats::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'BP_CharacterWindow_C_ToggleStats::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, K2Node_Select_Default_1) == 0x000034, "Member 'BP_CharacterWindow_C_ToggleStats::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_ToggleStats, K2Node_Select_Default_2) == 0x000038, "Member 'BP_CharacterWindow_C_ToggleStats::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.Play Quick Use Animation
// 0x0080 (0x0080 - 0x0000)
struct BP_CharacterWindow_C_Play_Quick_Use_Animation final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           InItem;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScrollOffset_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_BPGetIcon_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue_1;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_Play_Quick_Use_Animation) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_Play_Quick_Use_Animation");
static_assert(sizeof(BP_CharacterWindow_C_Play_Quick_Use_Animation) == 0x000080, "Wrong size on BP_CharacterWindow_C_Play_Quick_Use_Animation");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, InWidget) == 0x000000, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::InWidget' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, InItem) == 0x000008, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::InItem' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_GetScrollOffset_ReturnValue) == 0x000014, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_GetScrollOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_BPGetIcon_ReturnValue) == 0x000018, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_BPGetIcon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000028, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000030, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_GetPosition_ReturnValue) == 0x000038, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_BreakVector2D_X) == 0x000040, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_BreakVector2D_Y) == 0x000044, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_Add_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000050, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_MakeVector2D_ReturnValue) == 0x000054, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000060, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000068, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_GetPosition_ReturnValue_1) == 0x000070, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_GetPosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_Play_Quick_Use_Animation, CallFunc_PlayAnimation_ReturnValue) == 0x000078, "Member 'BP_CharacterWindow_C_Play_Quick_Use_Animation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.BP_SetFilterView
// 0x0078 (0x0078 - 0x0000)
struct BP_CharacterWindow_C_BP_SetFilterView final
{
public:
	bool                                          InFilterView;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0018(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0030(0x0018)()
	bool                                          Temp_bool_Variable_3;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_2;                           // 0x0058(0x0018)()
	float                                         K2Node_Select_Default_3;                           // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_BP_SetFilterView) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_BP_SetFilterView");
static_assert(sizeof(BP_CharacterWindow_C_BP_SetFilterView) == 0x000078, "Wrong size on BP_CharacterWindow_C_BP_SetFilterView");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, InFilterView) == 0x000000, "Member 'BP_CharacterWindow_C_BP_SetFilterView::InFilterView' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_bool_Variable) == 0x000001, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_byte_Variable) == 0x000002, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_byte_Variable_1) == 0x000003, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_bool_Variable_1) == 0x000004, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_float_Variable) == 0x000008, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_float_Variable_1) == 0x00000C, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_bool_Variable_2) == 0x000010, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_text_Variable) == 0x000018, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_text_Variable_1) == 0x000030, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_bool_Variable_3) == 0x000048, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_byte_Variable_2) == 0x000049, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_byte_Variable_3) == 0x00004A, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_bool_Variable_4) == 0x00004B, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_byte_Variable_4) == 0x00004C, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, Temp_byte_Variable_5) == 0x00004D, "Member 'BP_CharacterWindow_C_BP_SetFilterView::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, CallFunc_Not_PreBool_ReturnValue) == 0x00004E, "Member 'BP_CharacterWindow_C_BP_SetFilterView::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, K2Node_Select_Default) == 0x00004F, "Member 'BP_CharacterWindow_C_BP_SetFilterView::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, K2Node_Select_Default_1) == 0x000050, "Member 'BP_CharacterWindow_C_BP_SetFilterView::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, K2Node_Select_Default_2) == 0x000058, "Member 'BP_CharacterWindow_C_BP_SetFilterView::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, K2Node_Select_Default_3) == 0x000070, "Member 'BP_CharacterWindow_C_BP_SetFilterView::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BP_SetFilterView, K2Node_Select_Default_4) == 0x000074, "Member 'BP_CharacterWindow_C_BP_SetFilterView::K2Node_Select_Default_4' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.BtnHotkeyXClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterWindow_C_BtnHotkeyXClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_BtnHotkeyXClicked) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_BtnHotkeyXClicked");
static_assert(sizeof(BP_CharacterWindow_C_BtnHotkeyXClicked) == 0x000001, "Wrong size on BP_CharacterWindow_C_BtnHotkeyXClicked");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyXClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_CharacterWindow_C_BtnHotkeyXClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.SetSetIndexFrames
// 0x0060 (0x0060 - 0x0000)
struct BP_CharacterWindow_C_SetSetIndexFrames final
{
public:
	bool                                          Highlight;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHeroCurrentItemSetIndex_ReturnValue;   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_1; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default_1;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_2; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default_2;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_3; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_4; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_SetSetIndexFrames) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_SetSetIndexFrames");
static_assert(sizeof(BP_CharacterWindow_C_SetSetIndexFrames) == 0x000060, "Wrong size on BP_CharacterWindow_C_SetSetIndexFrames");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, Highlight) == 0x000000, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::Highlight' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, Temp_int_Variable) == 0x000004, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, Temp_int_Variable_1) == 0x000008, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, Temp_int_Variable_2) == 0x00000C, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, Temp_bool_Variable) == 0x000010, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, Temp_byte_Variable) == 0x000011, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, Temp_byte_Variable_1) == 0x000012, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, Temp_bool_Variable_1) == 0x000013, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, Temp_byte_Variable_2) == 0x000014, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, Temp_byte_Variable_3) == 0x000015, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, CallFunc_GetHeroCurrentItemSetIndex_ReturnValue) == 0x000018, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::CallFunc_GetHeroCurrentItemSetIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, K2Node_Select_Default) == 0x000020, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_1) == 0x000028, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, K2Node_Select_Default_1) == 0x000030, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_2) == 0x000038, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, K2Node_Select_Default_2) == 0x000040, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, CallFunc_PlayAnimation_ReturnValue) == 0x000048, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_3) == 0x000050, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_4) == 0x000054, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::CallFunc_GetHeroCurrentItemSetIndex_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000058, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000059, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, K2Node_Select_Default_3) == 0x00005A, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetSetIndexFrames, K2Node_Select_Default_4) == 0x00005B, "Member 'BP_CharacterWindow_C_SetSetIndexFrames::K2Node_Select_Default_4' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.BtnHotkeyRSUpClicked
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterWindow_C_BtnHotkeyRSUpClicked final
{
public:
	bool                                          CallFunc_IsRotateCharacter_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_BtnHotkeyRSUpClicked) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_BtnHotkeyRSUpClicked");
static_assert(sizeof(BP_CharacterWindow_C_BtnHotkeyRSUpClicked) == 0x000002, "Wrong size on BP_CharacterWindow_C_BtnHotkeyRSUpClicked");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyRSUpClicked, CallFunc_IsRotateCharacter_ReturnValue) == 0x000000, "Member 'BP_CharacterWindow_C_BtnHotkeyRSUpClicked::CallFunc_IsRotateCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyRSUpClicked, CallFunc_IsActive_ReturnValue) == 0x000001, "Member 'BP_CharacterWindow_C_BtnHotkeyRSUpClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.BtnHotkeyRSDownClicked
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterWindow_C_BtnHotkeyRSDownClicked final
{
public:
	bool                                          CallFunc_IsRotateCharacter_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterWindow_C_BtnHotkeyRSDownClicked) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_BtnHotkeyRSDownClicked");
static_assert(sizeof(BP_CharacterWindow_C_BtnHotkeyRSDownClicked) == 0x000002, "Wrong size on BP_CharacterWindow_C_BtnHotkeyRSDownClicked");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyRSDownClicked, CallFunc_IsRotateCharacter_ReturnValue) == 0x000000, "Member 'BP_CharacterWindow_C_BtnHotkeyRSDownClicked::CallFunc_IsRotateCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_BtnHotkeyRSDownClicked, CallFunc_IsActive_ReturnValue) == 0x000001, "Member 'BP_CharacterWindow_C_BtnHotkeyRSDownClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.SetRequestEquippedItem
// 0x0140 (0x0140 - 0x0000)
struct BP_CharacterWindow_C_SetRequestEquippedItem final
{
public:
	class UItemAbility*                           InItemAbility;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0068(0x0018)()
	bool                                          Temp_bool_Variable_3;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_3;                              // 0x0088(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x00A0(0x0018)()
	bool                                          Temp_bool_Variable_4;                              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_1;                           // 0x00D0(0x0018)()
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x00E8(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_2;                           // 0x0108(0x0018)()
	class FText                                   K2Node_Select_Default_3;                           // 0x0120(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_SetRequestEquippedItem) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_SetRequestEquippedItem");
static_assert(sizeof(BP_CharacterWindow_C_SetRequestEquippedItem) == 0x000140, "Wrong size on BP_CharacterWindow_C_SetRequestEquippedItem");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, InItemAbility) == 0x000000, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::InItemAbility' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_bool_Variable) == 0x000008, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_struct_Variable) == 0x00000C, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_struct_Variable_1) == 0x00001C, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_bool_Variable_1) == 0x00002C, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_text_Variable) == 0x000030, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_text_Variable_1) == 0x000048, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_bool_Variable_2) == 0x000060, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_text_Variable_2) == 0x000068, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_bool_Variable_3) == 0x000080, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_text_Variable_3) == 0x000088, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_text_Variable_4) == 0x0000A0, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_bool_Variable_4) == 0x0000B8, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_byte_Variable) == 0x0000B9, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, Temp_byte_Variable_1) == 0x0000BA, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, CallFunc_IsValid_ReturnValue) == 0x0000BB, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, CallFunc_IsValid_ReturnValue_1) == 0x0000BC, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, K2Node_Select_Default) == 0x0000C0, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, K2Node_Select_Default_1) == 0x0000D0, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, CallFunc_GetEmptyText_ReturnValue) == 0x0000E8, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, CallFunc_IsValid_ReturnValue_2) == 0x000100, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, K2Node_Select_Default_2) == 0x000108, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, K2Node_Select_Default_3) == 0x000120, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, CallFunc_IsValid_ReturnValue_3) == 0x000138, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetRequestEquippedItem, K2Node_Select_Default_4) == 0x000139, "Member 'BP_CharacterWindow_C_SetRequestEquippedItem::K2Node_Select_Default_4' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.PlayRingRemoveAnimation
// 0x0058 (0x0058 - 0x0000)
struct BP_CharacterWindow_C_PlayRingRemoveAnimation final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           InItem;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_BPGetIcon_ReturnValue;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_PlayRingRemoveAnimation) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_PlayRingRemoveAnimation");
static_assert(sizeof(BP_CharacterWindow_C_PlayRingRemoveAnimation) == 0x000058, "Wrong size on BP_CharacterWindow_C_PlayRingRemoveAnimation");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, InWidget) == 0x000000, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::InWidget' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, InItem) == 0x000008, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::InItem' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, CallFunc_BPGetIcon_ReturnValue) == 0x000020, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::CallFunc_BPGetIcon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000030, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000038, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, CallFunc_GetPosition_ReturnValue) == 0x000040, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, CallFunc_BreakVector2D_X) == 0x000048, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, CallFunc_BreakVector2D_Y) == 0x00004C, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_PlayRingRemoveAnimation, CallFunc_MakeVector2D_ReturnValue) == 0x000050, "Member 'BP_CharacterWindow_C_PlayRingRemoveAnimation::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.PlayRightTooltipHighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterWindow_C_PlayRightTooltipHighlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_PlayRightTooltipHighlight) == 0x000008, "Wrong alignment on BP_CharacterWindow_C_PlayRightTooltipHighlight");
static_assert(sizeof(BP_CharacterWindow_C_PlayRightTooltipHighlight) == 0x000008, "Wrong size on BP_CharacterWindow_C_PlayRightTooltipHighlight");
static_assert(offsetof(BP_CharacterWindow_C_PlayRightTooltipHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_CharacterWindow_C_PlayRightTooltipHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_CharacterWindow.BP_CharacterWindow_C.SetBtnCloseVisibility
// 0x000B (0x000B - 0x0000)
struct BP_CharacterWindow_C_SetBtnCloseVisibility final
{
public:
	EInputDisplay                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 CallFunc_GetInputDisplay_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterWindow_C_SetBtnCloseVisibility) == 0x000001, "Wrong alignment on BP_CharacterWindow_C_SetBtnCloseVisibility");
static_assert(sizeof(BP_CharacterWindow_C_SetBtnCloseVisibility) == 0x00000B, "Wrong size on BP_CharacterWindow_C_SetBtnCloseVisibility");
static_assert(offsetof(BP_CharacterWindow_C_SetBtnCloseVisibility, Temp_byte_Variable) == 0x000000, "Member 'BP_CharacterWindow_C_SetBtnCloseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'BP_CharacterWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_2) == 0x000002, "Member 'BP_CharacterWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_3) == 0x000003, "Member 'BP_CharacterWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_4) == 0x000004, "Member 'BP_CharacterWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_5) == 0x000005, "Member 'BP_CharacterWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_6) == 0x000006, "Member 'BP_CharacterWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_7) == 0x000007, "Member 'BP_CharacterWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_8) == 0x000008, "Member 'BP_CharacterWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetBtnCloseVisibility, CallFunc_GetInputDisplay_ReturnValue) == 0x000009, "Member 'BP_CharacterWindow_C_SetBtnCloseVisibility::CallFunc_GetInputDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterWindow_C_SetBtnCloseVisibility, K2Node_Select_Default) == 0x00000A, "Member 'BP_CharacterWindow_C_SetBtnCloseVisibility::K2Node_Select_Default' has a wrong offset!");

}

