#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CheckPoint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "man_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CheckPoint.BP_CheckPoint_C
// 0x0168 (0x0970 - 0x0808)
class ABP_CheckPoint_C final : public AActorCheckPoint
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0808(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak;                                                // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Interact_BrawlerToCp;                           // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_CheckpointSmoke;                                // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CheckpointInactive_Sparks;                         // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoundingBoxComponent*                  BoundingBox;                                       // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractPrompWidgetComponent_C*     BP_InteractPrompWidgetComponent;                   // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Checkpoint_FireCyl;                             // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Checkpoint_Broken_FlyingPieces;                 // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Checkpoint_Broken_Inactive_Sparks;              // 0x0850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGeometryCacheComponent*                CP_FlyingState;                                    // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGeometryCacheComponent*                CP_BrokenState;                                    // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_MemePoint;                                      // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_CheckpointFirstInteract;                        // 0x0870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMiniMapActorComponent*                 MiniMapActor;                                      // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_SmallFog;                                       // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_BigFog;                                         // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      MeshTendrils_X_;                                   // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      MeshTendrils_X__0;                                 // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        InactiveMeshTendrils;                              // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FireActive_SparksWind;                             // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   HeroLight;                                         // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   CheckpointLight;                                   // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PPBoundingBox;                                     // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CheckpointFire_FirstInteract;                      // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Lerp_Alpha_6CD385AB46E4A97DB76C94A0C7921573;       // 0x08E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Lerp__Direction_6CD385AB46E4A97DB76C94A0C7921573;  // 0x08E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E5[0x3];                                      // 0x08E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Lerp;                                              // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TendrilsX__Rotation;                               // 0x08F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TendrilsX__Rotation_0;                             // 0x08F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TendrilSpawnRatePerSecond;                         // 0x08F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TendrilOpacity;                                    // 0x08FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindIntensity;                                     // 0x0900(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindIntensityGradient;                             // 0x0904(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FireWindDirection;                                 // 0x0908(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0914(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireLength;                                        // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireOpacity;                                       // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DEFAULT_Speed;                                     // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DEFAULT_FireLength;                                // 0x0924(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DEFAULT_FireOpacity;                               // 0x0928(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSmoke_;                                         // 0x092C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92D[0x3];                                      // 0x092D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OpacityMultiplier;                                 // 0x0930(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SmokeOffsetX_;                                     // 0x0934(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SmokeOffsetX__0;                                   // 0x0940(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBeenActivated_;                                 // 0x094C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_94D[0x3];                                      // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               PostProcessMaterial;                               // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KillInt;                                           // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MemeInt;                                           // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ActivatedSetupAnimation;                           // 0x0960(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ActivatedSetup_DeactivateInactiveVFX;              // 0x0968(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CheckPoint(int32 EntryPoint);
	void OnBPActivated(bool bFirstUnlock);
	void MapManagerLoaded(bool bCheckpoinUnlocked);
	void EActivatedSetup_DeactivateInactiveVFX();
	void EActivatedSetupAnimation();
	void OnCheckPointUnlockSequenceEnd(bool bSuccess);
	void BPPostBeginPlay();
	void Interact();
	void DeactivatedSetup(bool InEditor_);
	void CustomMessage(class FName Msg);
	void ActivatedSetup(bool InEditor_);
	void Lerp__ActivateParticles__EventFunc();
	void Lerp__UpdateFunc();
	void Lerp__FinishedFunc();
	void UserConstructionScript();
	void SetupRandomTendrils(class UFXSystemComponent* FXSystem, float TendrilOffsetRandom, float TendrilDelayRandom);
	void Activate();
	void Deactivate();
	void RotatingTendrils();
	void FireWindSetup(bool Runtime_);
	void SetDefaults();
	void DeactivatedSetup_WAS();
	void FogSetup(class UMeshComponent* FogComponent, const float FogDensity, float FogGlow, const float FogDepthFade);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CheckPoint_C">();
	}
	static class ABP_CheckPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CheckPoint_C>();
	}
};
static_assert(alignof(ABP_CheckPoint_C) == 0x000008, "Wrong alignment on ABP_CheckPoint_C");
static_assert(sizeof(ABP_CheckPoint_C) == 0x000970, "Wrong size on ABP_CheckPoint_C");
static_assert(offsetof(ABP_CheckPoint_C, UberGraphFrame) == 0x000808, "Member 'ABP_CheckPoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, Ak) == 0x000810, "Member 'ABP_CheckPoint_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, NS_Interact_BrawlerToCp) == 0x000818, "Member 'ABP_CheckPoint_C::NS_Interact_BrawlerToCp' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, NS_CheckpointSmoke) == 0x000820, "Member 'ABP_CheckPoint_C::NS_CheckpointSmoke' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, CheckpointInactive_Sparks) == 0x000828, "Member 'ABP_CheckPoint_C::CheckpointInactive_Sparks' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, BoundingBox) == 0x000830, "Member 'ABP_CheckPoint_C::BoundingBox' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, BP_InteractPrompWidgetComponent) == 0x000838, "Member 'ABP_CheckPoint_C::BP_InteractPrompWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, SM_Checkpoint_FireCyl) == 0x000840, "Member 'ABP_CheckPoint_C::SM_Checkpoint_FireCyl' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, NS_Checkpoint_Broken_FlyingPieces) == 0x000848, "Member 'ABP_CheckPoint_C::NS_Checkpoint_Broken_FlyingPieces' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, NS_Checkpoint_Broken_Inactive_Sparks) == 0x000850, "Member 'ABP_CheckPoint_C::NS_Checkpoint_Broken_Inactive_Sparks' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, CP_FlyingState) == 0x000858, "Member 'ABP_CheckPoint_C::CP_FlyingState' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, CP_BrokenState) == 0x000860, "Member 'ABP_CheckPoint_C::CP_BrokenState' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, NS_MemePoint) == 0x000868, "Member 'ABP_CheckPoint_C::NS_MemePoint' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, NS_CheckpointFirstInteract) == 0x000870, "Member 'ABP_CheckPoint_C::NS_CheckpointFirstInteract' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, MiniMapActor) == 0x000878, "Member 'ABP_CheckPoint_C::MiniMapActor' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, SM_SmallFog) == 0x000880, "Member 'ABP_CheckPoint_C::SM_SmallFog' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, SM_BigFog) == 0x000888, "Member 'ABP_CheckPoint_C::SM_BigFog' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, MeshTendrils_X_) == 0x000890, "Member 'ABP_CheckPoint_C::MeshTendrils_X_' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, MeshTendrils_X__0) == 0x000898, "Member 'ABP_CheckPoint_C::MeshTendrils_X__0' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, InactiveMeshTendrils) == 0x0008A0, "Member 'ABP_CheckPoint_C::InactiveMeshTendrils' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, FireActive_SparksWind) == 0x0008A8, "Member 'ABP_CheckPoint_C::FireActive_SparksWind' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, HeroLight) == 0x0008B0, "Member 'ABP_CheckPoint_C::HeroLight' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, CheckpointLight) == 0x0008B8, "Member 'ABP_CheckPoint_C::CheckpointLight' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, PostProcess) == 0x0008C0, "Member 'ABP_CheckPoint_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, PPBoundingBox) == 0x0008C8, "Member 'ABP_CheckPoint_C::PPBoundingBox' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, CheckpointFire_FirstInteract) == 0x0008D0, "Member 'ABP_CheckPoint_C::CheckpointFire_FirstInteract' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, DefaultSceneRoot) == 0x0008D8, "Member 'ABP_CheckPoint_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, Lerp_Alpha_6CD385AB46E4A97DB76C94A0C7921573) == 0x0008E0, "Member 'ABP_CheckPoint_C::Lerp_Alpha_6CD385AB46E4A97DB76C94A0C7921573' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, Lerp__Direction_6CD385AB46E4A97DB76C94A0C7921573) == 0x0008E4, "Member 'ABP_CheckPoint_C::Lerp__Direction_6CD385AB46E4A97DB76C94A0C7921573' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, Lerp) == 0x0008E8, "Member 'ABP_CheckPoint_C::Lerp' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, TendrilsX__Rotation) == 0x0008F0, "Member 'ABP_CheckPoint_C::TendrilsX__Rotation' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, TendrilsX__Rotation_0) == 0x0008F4, "Member 'ABP_CheckPoint_C::TendrilsX__Rotation_0' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, TendrilSpawnRatePerSecond) == 0x0008F8, "Member 'ABP_CheckPoint_C::TendrilSpawnRatePerSecond' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, TendrilOpacity) == 0x0008FC, "Member 'ABP_CheckPoint_C::TendrilOpacity' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, WindIntensity) == 0x000900, "Member 'ABP_CheckPoint_C::WindIntensity' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, WindIntensityGradient) == 0x000904, "Member 'ABP_CheckPoint_C::WindIntensityGradient' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, FireWindDirection) == 0x000908, "Member 'ABP_CheckPoint_C::FireWindDirection' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, Speed) == 0x000914, "Member 'ABP_CheckPoint_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, FireLength) == 0x000918, "Member 'ABP_CheckPoint_C::FireLength' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, FireOpacity) == 0x00091C, "Member 'ABP_CheckPoint_C::FireOpacity' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, DEFAULT_Speed) == 0x000920, "Member 'ABP_CheckPoint_C::DEFAULT_Speed' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, DEFAULT_FireLength) == 0x000924, "Member 'ABP_CheckPoint_C::DEFAULT_FireLength' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, DEFAULT_FireOpacity) == 0x000928, "Member 'ABP_CheckPoint_C::DEFAULT_FireOpacity' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, UseSmoke_) == 0x00092C, "Member 'ABP_CheckPoint_C::UseSmoke_' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, OpacityMultiplier) == 0x000930, "Member 'ABP_CheckPoint_C::OpacityMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, SmokeOffsetX_) == 0x000934, "Member 'ABP_CheckPoint_C::SmokeOffsetX_' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, SmokeOffsetX__0) == 0x000940, "Member 'ABP_CheckPoint_C::SmokeOffsetX__0' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, HasBeenActivated_) == 0x00094C, "Member 'ABP_CheckPoint_C::HasBeenActivated_' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, PostProcessMaterial) == 0x000950, "Member 'ABP_CheckPoint_C::PostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, KillInt) == 0x000958, "Member 'ABP_CheckPoint_C::KillInt' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, MemeInt) == 0x00095C, "Member 'ABP_CheckPoint_C::MemeInt' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, ActivatedSetupAnimation) == 0x000960, "Member 'ABP_CheckPoint_C::ActivatedSetupAnimation' has a wrong offset!");
static_assert(offsetof(ABP_CheckPoint_C, ActivatedSetup_DeactivateInactiveVFX) == 0x000968, "Member 'ABP_CheckPoint_C::ActivatedSetup_DeactivateInactiveVFX' has a wrong offset!");

}

