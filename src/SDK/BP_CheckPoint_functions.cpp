#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CheckPoint

#include "Basic.hpp"

#include "BP_CheckPoint_classes.hpp"
#include "BP_CheckPoint_parameters.hpp"


namespace SDK
{

// Function BP_CheckPoint.BP_CheckPoint_C.ExecuteUbergraph_BP_CheckPoint
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CheckPoint_C::ExecuteUbergraph_BP_CheckPoint(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "ExecuteUbergraph_BP_CheckPoint");

	Params::BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CheckPoint.BP_CheckPoint_C.OnBPActivated
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bFirstUnlock                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CheckPoint_C::OnBPActivated(bool bFirstUnlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "OnBPActivated");

	Params::BP_CheckPoint_C_OnBPActivated Parms{};

	Parms.bFirstUnlock = bFirstUnlock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CheckPoint.BP_CheckPoint_C.MapManagerLoaded
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bCheckpoinUnlocked                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CheckPoint_C::MapManagerLoaded(bool bCheckpoinUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "MapManagerLoaded");

	Params::BP_CheckPoint_C_MapManagerLoaded Parms{};

	Parms.bCheckpoinUnlocked = bCheckpoinUnlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CheckPoint.BP_CheckPoint_C.EActivatedSetup_DeactivateInactiveVFX
// (BlueprintCallable, BlueprintEvent)

void ABP_CheckPoint_C::EActivatedSetup_DeactivateInactiveVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "EActivatedSetup_DeactivateInactiveVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.EActivatedSetupAnimation
// (BlueprintCallable, BlueprintEvent)

void ABP_CheckPoint_C::EActivatedSetupAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "EActivatedSetupAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.OnCheckPointUnlockSequenceEnd
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CheckPoint_C::OnCheckPointUnlockSequenceEnd(bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "OnCheckPointUnlockSequenceEnd");

	Params::BP_CheckPoint_C_OnCheckPointUnlockSequenceEnd Parms{};

	Parms.bSuccess = bSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CheckPoint.BP_CheckPoint_C.BPPostBeginPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_CheckPoint_C::BPPostBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "BPPostBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.Interact
// (BlueprintCallable, BlueprintEvent)

void ABP_CheckPoint_C::Interact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "Interact");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.DeactivatedSetup
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEditor_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CheckPoint_C::DeactivatedSetup(bool InEditor_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "DeactivatedSetup");

	Params::BP_CheckPoint_C_DeactivatedSetup Parms{};

	Parms.InEditor_ = InEditor_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CheckPoint.BP_CheckPoint_C.CustomMessage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Msg                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CheckPoint_C::CustomMessage(class FName Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "CustomMessage");

	Params::BP_CheckPoint_C_CustomMessage Parms{};

	Parms.Msg = Msg;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CheckPoint.BP_CheckPoint_C.ActivatedSetup
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEditor_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CheckPoint_C::ActivatedSetup(bool InEditor_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "ActivatedSetup");

	Params::BP_CheckPoint_C_ActivatedSetup Parms{};

	Parms.InEditor_ = InEditor_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CheckPoint.BP_CheckPoint_C.Lerp__ActivateParticles__EventFunc
// (BlueprintEvent)

void ABP_CheckPoint_C::Lerp__ActivateParticles__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "Lerp__ActivateParticles__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.Lerp__UpdateFunc
// (BlueprintEvent)

void ABP_CheckPoint_C::Lerp__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "Lerp__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.Lerp__FinishedFunc
// (BlueprintEvent)

void ABP_CheckPoint_C::Lerp__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "Lerp__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_CheckPoint_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.SetupRandomTendrils
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFXSystemComponent*               FXSystem                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TendrilOffsetRandom                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TendrilDelayRandom                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CheckPoint_C::SetupRandomTendrils(class UFXSystemComponent* FXSystem, float TendrilOffsetRandom, float TendrilDelayRandom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "SetupRandomTendrils");

	Params::BP_CheckPoint_C_SetupRandomTendrils Parms{};

	Parms.FXSystem = FXSystem;
	Parms.TendrilOffsetRandom = TendrilOffsetRandom;
	Parms.TendrilDelayRandom = TendrilDelayRandom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CheckPoint.BP_CheckPoint_C.Activate
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CheckPoint_C::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "Activate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.Deactivate
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CheckPoint_C::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "Deactivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.RotatingTendrils
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CheckPoint_C::RotatingTendrils()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "RotatingTendrils");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.FireWindSetup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Runtime_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CheckPoint_C::FireWindSetup(bool Runtime_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "FireWindSetup");

	Params::BP_CheckPoint_C_FireWindSetup Parms{};

	Parms.Runtime_ = Runtime_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CheckPoint.BP_CheckPoint_C.SetDefaults
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CheckPoint_C::SetDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "SetDefaults");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.DeactivatedSetup_WAS
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CheckPoint_C::DeactivatedSetup_WAS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "DeactivatedSetup_WAS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CheckPoint.BP_CheckPoint_C.FogSetup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   FogComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FogDensity                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FogGlow                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FogDepthFade                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CheckPoint_C::FogSetup(class UMeshComponent* FogComponent, const float FogDensity, float FogGlow, const float FogDepthFade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CheckPoint_C", "FogSetup");

	Params::BP_CheckPoint_C_FogSetup Parms{};

	Parms.FogComponent = FogComponent;
	Parms.FogDensity = FogDensity;
	Parms.FogGlow = FogGlow;
	Parms.FogDepthFade = FogDepthFade;

	UObject::ProcessEvent(Func, &Parms);
}

}

