#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CheckPoint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_CheckPoint.BP_CheckPoint_C.ExecuteUbergraph_BP_CheckPoint
// 0x0158 (0x0158 - 0x0000)
struct BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0024(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_InEditor__1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x0060(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(class FName Msg)>              K2Node_CreateDelegate_OutputDelegate_2;            // 0x0070(0x0010)(ZeroConstructor, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_3;                       // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_4;                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_5;                       // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityController*                     CallFunc_GetAbilityController_ReturnValue;         // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_Msg;                            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCheckPointUnlocked_ReturnValue;         // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCheckPointUnlocked_ReturnValue_1;       // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_InEditor_;                      // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSuccess;                             // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bCheckpoinUnlocked;                   // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEvent_ReturnValue_1;                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue_2;                  // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFirstUnlock;                         // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrawlerHero_C*                      K2Node_DynamicCast_AsBP_Brawler_Hero;              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                CallFunc_Force_Feedback_Vertical_FF1;              // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                CallFunc_Force_Feedback_Vertical_FF2;              // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                CallFunc_Force_Feedback_Vertical_FF3;              // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                CallFunc_Force_Feedback_Vertical_FF4;              // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrawlerHero_C*                      K2Node_DynamicCast_AsBP_Brawler_Hero_1;            // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                CallFunc_Force_Feedback_Vertical_FF1_1;            // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                CallFunc_Force_Feedback_Vertical_FF2_1;            // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                CallFunc_Force_Feedback_Vertical_FF3_1;            // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                CallFunc_Force_Feedback_Vertical_FF4_1;            // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint) == 0x000008, "Wrong alignment on BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint");
static_assert(sizeof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint) == 0x000158, "Wrong size on BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, EntryPoint) == 0x000000, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, Temp_delegate_Variable) == 0x000004, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, Temp_delegate_Variable_1) == 0x000024, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000038, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_CustomEvent_InEditor__1) == 0x000040, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_CustomEvent_InEditor__1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_CreateDelegate_OutputDelegate_1) == 0x000044, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000058, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, Temp_delegate_Variable_2) == 0x000060, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_CreateDelegate_OutputDelegate_2) == 0x000070, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, Temp_float_Variable) == 0x000080, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, Temp_bool_Variable) == 0x000084, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_MapRangeClamped_ReturnValue) == 0x000088, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_Select_Default) == 0x00008C, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Lerp_ReturnValue) == 0x000090, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Lerp_ReturnValue_1) == 0x000094, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Lerp_ReturnValue_2) == 0x000098, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Lerp_ReturnValue_3) == 0x00009C, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Lerp_ReturnValue_4) == 0x0000A0, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000A4, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Lerp_ReturnValue_5) == 0x0000A8, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_GetAbilityController_ReturnValue) == 0x0000B0, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_GetAbilityController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_CustomEvent_Msg) == 0x0000B8, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_CustomEvent_Msg' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000C0, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_IsCheckPointUnlocked_ReturnValue) == 0x0000C1, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_IsCheckPointUnlocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_IsCheckPointUnlocked_ReturnValue_1) == 0x0000C2, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_IsCheckPointUnlocked_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_CustomEvent_InEditor_) == 0x0000C3, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_CustomEvent_InEditor_' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_PostEvent_ReturnValue) == 0x0000C4, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_Event_bSuccess) == 0x0000C8, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_Event_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_Event_bCheckpoinUnlocked) == 0x0000C9, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_Event_bCheckpoinUnlocked' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_PostEvent_ReturnValue_1) == 0x0000CC, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_PostEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_PostEvent_ReturnValue_2) == 0x0000D0, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_PostEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_Event_bFirstUnlock) == 0x0000D4, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_Event_bFirstUnlock' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_GetPlayerCharacter_ReturnValue) == 0x0000D8, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_DynamicCast_AsBP_Brawler_Hero) == 0x0000E0, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_DynamicCast_AsBP_Brawler_Hero' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000EC, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x0000F8, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Force_Feedback_Vertical_FF1) == 0x000100, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Force_Feedback_Vertical_FF1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Force_Feedback_Vertical_FF2) == 0x000108, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Force_Feedback_Vertical_FF2' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Force_Feedback_Vertical_FF3) == 0x000110, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Force_Feedback_Vertical_FF3' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Force_Feedback_Vertical_FF4) == 0x000118, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Force_Feedback_Vertical_FF4' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_DynamicCast_AsBP_Brawler_Hero_1) == 0x000120, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_DynamicCast_AsBP_Brawler_Hero_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, K2Node_DynamicCast_bSuccess_1) == 0x000128, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00012C, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Force_Feedback_Vertical_FF1_1) == 0x000138, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Force_Feedback_Vertical_FF1_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Force_Feedback_Vertical_FF2_1) == 0x000140, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Force_Feedback_Vertical_FF2_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Force_Feedback_Vertical_FF3_1) == 0x000148, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Force_Feedback_Vertical_FF3_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint, CallFunc_Force_Feedback_Vertical_FF4_1) == 0x000150, "Member 'BP_CheckPoint_C_ExecuteUbergraph_BP_CheckPoint::CallFunc_Force_Feedback_Vertical_FF4_1' has a wrong offset!");

// Function BP_CheckPoint.BP_CheckPoint_C.OnBPActivated
// 0x0001 (0x0001 - 0x0000)
struct BP_CheckPoint_C_OnBPActivated final
{
public:
	bool                                          bFirstUnlock;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CheckPoint_C_OnBPActivated) == 0x000001, "Wrong alignment on BP_CheckPoint_C_OnBPActivated");
static_assert(sizeof(BP_CheckPoint_C_OnBPActivated) == 0x000001, "Wrong size on BP_CheckPoint_C_OnBPActivated");
static_assert(offsetof(BP_CheckPoint_C_OnBPActivated, bFirstUnlock) == 0x000000, "Member 'BP_CheckPoint_C_OnBPActivated::bFirstUnlock' has a wrong offset!");

// Function BP_CheckPoint.BP_CheckPoint_C.MapManagerLoaded
// 0x0001 (0x0001 - 0x0000)
struct BP_CheckPoint_C_MapManagerLoaded final
{
public:
	bool                                          bCheckpoinUnlocked;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CheckPoint_C_MapManagerLoaded) == 0x000001, "Wrong alignment on BP_CheckPoint_C_MapManagerLoaded");
static_assert(sizeof(BP_CheckPoint_C_MapManagerLoaded) == 0x000001, "Wrong size on BP_CheckPoint_C_MapManagerLoaded");
static_assert(offsetof(BP_CheckPoint_C_MapManagerLoaded, bCheckpoinUnlocked) == 0x000000, "Member 'BP_CheckPoint_C_MapManagerLoaded::bCheckpoinUnlocked' has a wrong offset!");

// Function BP_CheckPoint.BP_CheckPoint_C.OnCheckPointUnlockSequenceEnd
// 0x0001 (0x0001 - 0x0000)
struct BP_CheckPoint_C_OnCheckPointUnlockSequenceEnd final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CheckPoint_C_OnCheckPointUnlockSequenceEnd) == 0x000001, "Wrong alignment on BP_CheckPoint_C_OnCheckPointUnlockSequenceEnd");
static_assert(sizeof(BP_CheckPoint_C_OnCheckPointUnlockSequenceEnd) == 0x000001, "Wrong size on BP_CheckPoint_C_OnCheckPointUnlockSequenceEnd");
static_assert(offsetof(BP_CheckPoint_C_OnCheckPointUnlockSequenceEnd, bSuccess) == 0x000000, "Member 'BP_CheckPoint_C_OnCheckPointUnlockSequenceEnd::bSuccess' has a wrong offset!");

// Function BP_CheckPoint.BP_CheckPoint_C.DeactivatedSetup
// 0x0001 (0x0001 - 0x0000)
struct BP_CheckPoint_C_DeactivatedSetup final
{
public:
	bool                                          InEditor_;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CheckPoint_C_DeactivatedSetup) == 0x000001, "Wrong alignment on BP_CheckPoint_C_DeactivatedSetup");
static_assert(sizeof(BP_CheckPoint_C_DeactivatedSetup) == 0x000001, "Wrong size on BP_CheckPoint_C_DeactivatedSetup");
static_assert(offsetof(BP_CheckPoint_C_DeactivatedSetup, InEditor_) == 0x000000, "Member 'BP_CheckPoint_C_DeactivatedSetup::InEditor_' has a wrong offset!");

// Function BP_CheckPoint.BP_CheckPoint_C.CustomMessage
// 0x0008 (0x0008 - 0x0000)
struct BP_CheckPoint_C_CustomMessage final
{
public:
	class FName                                   Msg;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CheckPoint_C_CustomMessage) == 0x000004, "Wrong alignment on BP_CheckPoint_C_CustomMessage");
static_assert(sizeof(BP_CheckPoint_C_CustomMessage) == 0x000008, "Wrong size on BP_CheckPoint_C_CustomMessage");
static_assert(offsetof(BP_CheckPoint_C_CustomMessage, Msg) == 0x000000, "Member 'BP_CheckPoint_C_CustomMessage::Msg' has a wrong offset!");

// Function BP_CheckPoint.BP_CheckPoint_C.ActivatedSetup
// 0x0001 (0x0001 - 0x0000)
struct BP_CheckPoint_C_ActivatedSetup final
{
public:
	bool                                          InEditor_;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CheckPoint_C_ActivatedSetup) == 0x000001, "Wrong alignment on BP_CheckPoint_C_ActivatedSetup");
static_assert(sizeof(BP_CheckPoint_C_ActivatedSetup) == 0x000001, "Wrong size on BP_CheckPoint_C_ActivatedSetup");
static_assert(offsetof(BP_CheckPoint_C_ActivatedSetup, InEditor_) == 0x000000, "Member 'BP_CheckPoint_C_ActivatedSetup::InEditor_' has a wrong offset!");

// Function BP_CheckPoint.BP_CheckPoint_C.SetupRandomTendrils
// 0x0090 (0x0090 - 0x0000)
struct BP_CheckPoint_C_SetupRandomTendrils final
{
public:
	class UFXSystemComponent*                     FXSystem;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TendrilOffsetRandom;                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TendrilDelayRandom;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CheckPoint_C_SetupRandomTendrils) == 0x000008, "Wrong alignment on BP_CheckPoint_C_SetupRandomTendrils");
static_assert(sizeof(BP_CheckPoint_C_SetupRandomTendrils) == 0x000090, "Wrong size on BP_CheckPoint_C_SetupRandomTendrils");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, FXSystem) == 0x000000, "Member 'BP_CheckPoint_C_SetupRandomTendrils::FXSystem' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, TendrilOffsetRandom) == 0x000008, "Member 'BP_CheckPoint_C_SetupRandomTendrils::TendrilOffsetRandom' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, TendrilDelayRandom) == 0x00000C, "Member 'BP_CheckPoint_C_SetupRandomTendrils::TendrilDelayRandom' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_RandomFloatInRange_ReturnValue) == 0x000024, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000028, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_BreakVector_X) == 0x00002C, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_BreakVector_Y) == 0x000030, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_BreakVector_Z) == 0x000034, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000038, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_Add_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000048, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_BreakVector_X_1) == 0x00004C, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_BreakVector_Y_1) == 0x000050, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_BreakVector_Z_1) == 0x000054, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000064, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_Add_VectorVector_ReturnValue) == 0x000068, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000074, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_MakeVector_ReturnValue_1) == 0x000078, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_SetupRandomTendrils, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000084, "Member 'BP_CheckPoint_C_SetupRandomTendrils::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");

// Function BP_CheckPoint.BP_CheckPoint_C.RotatingTendrils
// 0x0130 (0x0130 - 0x0000)
struct BP_CheckPoint_C_RotatingTendrils final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult;    // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult_1;  // 0x00A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_CheckPoint_C_RotatingTendrils) == 0x000004, "Wrong alignment on BP_CheckPoint_C_RotatingTendrils");
static_assert(sizeof(BP_CheckPoint_C_RotatingTendrils) == 0x000130, "Wrong size on BP_CheckPoint_C_RotatingTendrils");
static_assert(offsetof(BP_CheckPoint_C_RotatingTendrils, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_CheckPoint_C_RotatingTendrils::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_RotatingTendrils, CallFunc_MakeRotator_ReturnValue) == 0x000004, "Member 'BP_CheckPoint_C_RotatingTendrils::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_RotatingTendrils, CallFunc_K2_AddRelativeRotation_SweepHitResult) == 0x000010, "Member 'BP_CheckPoint_C_RotatingTendrils::CallFunc_K2_AddRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_RotatingTendrils, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000098, "Member 'BP_CheckPoint_C_RotatingTendrils::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_RotatingTendrils, CallFunc_MakeRotator_ReturnValue_1) == 0x00009C, "Member 'BP_CheckPoint_C_RotatingTendrils::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_RotatingTendrils, CallFunc_K2_AddRelativeRotation_SweepHitResult_1) == 0x0000A8, "Member 'BP_CheckPoint_C_RotatingTendrils::CallFunc_K2_AddRelativeRotation_SweepHitResult_1' has a wrong offset!");

// Function BP_CheckPoint.BP_CheckPoint_C.FireWindSetup
// 0x0008 (0x0008 - 0x0000)
struct BP_CheckPoint_C_FireWindSetup final
{
public:
	bool                                          Runtime_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CheckPoint_C_FireWindSetup) == 0x000004, "Wrong alignment on BP_CheckPoint_C_FireWindSetup");
static_assert(sizeof(BP_CheckPoint_C_FireWindSetup) == 0x000008, "Wrong size on BP_CheckPoint_C_FireWindSetup");
static_assert(offsetof(BP_CheckPoint_C_FireWindSetup, Runtime_) == 0x000000, "Member 'BP_CheckPoint_C_FireWindSetup::Runtime_' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_FireWindSetup, CallFunc_MapRangeClamped_ReturnValue) == 0x000004, "Member 'BP_CheckPoint_C_FireWindSetup::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_CheckPoint.BP_CheckPoint_C.DeactivatedSetup_WAS
// 0x0004 (0x0004 - 0x0000)
struct BP_CheckPoint_C_DeactivatedSetup_WAS final
{
public:
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CheckPoint_C_DeactivatedSetup_WAS) == 0x000004, "Wrong alignment on BP_CheckPoint_C_DeactivatedSetup_WAS");
static_assert(sizeof(BP_CheckPoint_C_DeactivatedSetup_WAS) == 0x000004, "Wrong size on BP_CheckPoint_C_DeactivatedSetup_WAS");
static_assert(offsetof(BP_CheckPoint_C_DeactivatedSetup_WAS, CallFunc_MapRangeClamped_ReturnValue) == 0x000000, "Member 'BP_CheckPoint_C_DeactivatedSetup_WAS::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_CheckPoint.BP_CheckPoint_C.FogSetup
// 0x0048 (0x0048 - 0x0000)
struct BP_CheckPoint_C_FogSetup final
{
public:
	class UMeshComponent*                         FogComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FogDensity;                                        // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FogGlow;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FogDepthFade;                                      // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 FogColor;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CheckPoint_C_FogSetup) == 0x000008, "Wrong alignment on BP_CheckPoint_C_FogSetup");
static_assert(sizeof(BP_CheckPoint_C_FogSetup) == 0x000048, "Wrong size on BP_CheckPoint_C_FogSetup");
static_assert(offsetof(BP_CheckPoint_C_FogSetup, FogComponent) == 0x000000, "Member 'BP_CheckPoint_C_FogSetup::FogComponent' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_FogSetup, FogDensity) == 0x000008, "Member 'BP_CheckPoint_C_FogSetup::FogDensity' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_FogSetup, FogGlow) == 0x00000C, "Member 'BP_CheckPoint_C_FogSetup::FogGlow' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_FogSetup, FogDepthFade) == 0x000010, "Member 'BP_CheckPoint_C_FogSetup::FogDepthFade' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_FogSetup, FogColor) == 0x000014, "Member 'BP_CheckPoint_C_FogSetup::FogColor' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_FogSetup, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_CheckPoint_C_FogSetup::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_FogSetup, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x00001C, "Member 'BP_CheckPoint_C_FogSetup::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_FogSetup, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x00002C, "Member 'BP_CheckPoint_C_FogSetup::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CheckPoint_C_FogSetup, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x00003C, "Member 'BP_CheckPoint_C_FogSetup::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");

}

