#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Conversation_Portrait

#include "Basic.hpp"

#include "man_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Conversation_Portrait.BP_Conversation_Portrait_C.ExecuteUbergraph_BP_Conversation_Portrait
// 0x0098 (0x0098 - 0x0000)
struct BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConversationSpeakerInfo               K2Node_Event_InSpeakerInfo;                        // 0x0048(0x0050)(ConstParm)
};
static_assert(alignof(BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait) == 0x000008, "Wrong alignment on BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait");
static_assert(sizeof(BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait) == 0x000098, "Wrong size on BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait");
static_assert(offsetof(BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait, EntryPoint) == 0x000000, "Member 'BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait, K2Node_Event_InSpeakerInfo) == 0x000048, "Member 'BP_Conversation_Portrait_C_ExecuteUbergraph_BP_Conversation_Portrait::K2Node_Event_InSpeakerInfo' has a wrong offset!");

// Function BP_Conversation_Portrait.BP_Conversation_Portrait_C.OnShowSlot
// 0x0050 (0x0050 - 0x0000)
struct BP_Conversation_Portrait_C_OnShowSlot final
{
public:
	struct FConversationSpeakerInfo               InSpeakerInfo;                                     // 0x0000(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Conversation_Portrait_C_OnShowSlot) == 0x000008, "Wrong alignment on BP_Conversation_Portrait_C_OnShowSlot");
static_assert(sizeof(BP_Conversation_Portrait_C_OnShowSlot) == 0x000050, "Wrong size on BP_Conversation_Portrait_C_OnShowSlot");
static_assert(offsetof(BP_Conversation_Portrait_C_OnShowSlot, InSpeakerInfo) == 0x000000, "Member 'BP_Conversation_Portrait_C_OnShowSlot::InSpeakerInfo' has a wrong offset!");

// Function BP_Conversation_Portrait.BP_Conversation_Portrait_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Conversation_Portrait_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Conversation_Portrait_C_Tick) == 0x000004, "Wrong alignment on BP_Conversation_Portrait_C_Tick");
static_assert(sizeof(BP_Conversation_Portrait_C_Tick) == 0x00003C, "Wrong size on BP_Conversation_Portrait_C_Tick");
static_assert(offsetof(BP_Conversation_Portrait_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Conversation_Portrait_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Conversation_Portrait_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Conversation_Portrait.BP_Conversation_Portrait_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Conversation_Portrait_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Conversation_Portrait_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Conversation_Portrait_C_PreConstruct");
static_assert(sizeof(BP_Conversation_Portrait_C_PreConstruct) == 0x000001, "Wrong size on BP_Conversation_Portrait_C_PreConstruct");
static_assert(offsetof(BP_Conversation_Portrait_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Conversation_Portrait_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Conversation_Portrait.BP_Conversation_Portrait_C.ShowSlot
// 0x0018 (0x0018 - 0x0000)
struct BP_Conversation_Portrait_C_ShowSlot final
{
public:
	bool                                          Animate;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Conversation_Portrait_C_ShowSlot) == 0x000008, "Wrong alignment on BP_Conversation_Portrait_C_ShowSlot");
static_assert(sizeof(BP_Conversation_Portrait_C_ShowSlot) == 0x000018, "Wrong size on BP_Conversation_Portrait_C_ShowSlot");
static_assert(offsetof(BP_Conversation_Portrait_C_ShowSlot, Animate) == 0x000000, "Member 'BP_Conversation_Portrait_C_ShowSlot::Animate' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_ShowSlot, Temp_bool_Variable) == 0x000001, "Member 'BP_Conversation_Portrait_C_ShowSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_ShowSlot, Temp_float_Variable) == 0x000004, "Member 'BP_Conversation_Portrait_C_ShowSlot::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_ShowSlot, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'BP_Conversation_Portrait_C_ShowSlot::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_ShowSlot, K2Node_Select_Default) == 0x00000C, "Member 'BP_Conversation_Portrait_C_ShowSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_ShowSlot, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_Conversation_Portrait_C_ShowSlot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Conversation_Portrait.BP_Conversation_Portrait_C.HideSlot
// 0x0008 (0x0008 - 0x0000)
struct BP_Conversation_Portrait_C_HideSlot final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Conversation_Portrait_C_HideSlot) == 0x000008, "Wrong alignment on BP_Conversation_Portrait_C_HideSlot");
static_assert(sizeof(BP_Conversation_Portrait_C_HideSlot) == 0x000008, "Wrong size on BP_Conversation_Portrait_C_HideSlot");
static_assert(offsetof(BP_Conversation_Portrait_C_HideSlot, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Conversation_Portrait_C_HideSlot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Conversation_Portrait.BP_Conversation_Portrait_C.SetSlot
// 0x0078 (0x0078 - 0x0000)
struct BP_Conversation_Portrait_C_SetSlot final
{
public:
	struct FConversationSpeakerInfo               SpeakerInfo_0;                                     // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Contains_ReturnValue;                     // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Contains_ReturnValue_1;                   // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Contains_ReturnValue_2;                   // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Contains_ReturnValue_3;                   // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Contains_ReturnValue_4;                   // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Contains_ReturnValue_5;                   // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Conversation_Portrait_C_SetSlot) == 0x000008, "Wrong alignment on BP_Conversation_Portrait_C_SetSlot");
static_assert(sizeof(BP_Conversation_Portrait_C_SetSlot) == 0x000078, "Wrong size on BP_Conversation_Portrait_C_SetSlot");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, SpeakerInfo_0) == 0x000000, "Member 'BP_Conversation_Portrait_C_SetSlot::SpeakerInfo_0' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, Temp_bool_Variable) == 0x000050, "Member 'BP_Conversation_Portrait_C_SetSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, Temp_struct_Variable) == 0x000054, "Member 'BP_Conversation_Portrait_C_SetSlot::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, Temp_struct_Variable_1) == 0x00005C, "Member 'BP_Conversation_Portrait_C_SetSlot::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_IsEmpty_ReturnValue) == 0x000064, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_Contains_ReturnValue) == 0x000065, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_Contains_ReturnValue_1) == 0x000066, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_Contains_ReturnValue_2) == 0x000067, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_Contains_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_Contains_ReturnValue_3) == 0x000068, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_Contains_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_Contains_ReturnValue_4) == 0x000069, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_Contains_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_Contains_ReturnValue_5) == 0x00006A, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_Contains_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_BooleanOR_ReturnValue) == 0x00006B, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_BooleanOR_ReturnValue_1) == 0x00006C, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_BooleanOR_ReturnValue_2) == 0x00006D, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_BooleanOR_ReturnValue_3) == 0x00006E, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, CallFunc_BooleanOR_ReturnValue_4) == 0x00006F, "Member 'BP_Conversation_Portrait_C_SetSlot::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSlot, K2Node_Select_Default) == 0x000070, "Member 'BP_Conversation_Portrait_C_SetSlot::K2Node_Select_Default' has a wrong offset!");

// Function BP_Conversation_Portrait.BP_Conversation_Portrait_C.SetHighlight
// 0x0020 (0x0020 - 0x0000)
struct BP_Conversation_Portrait_C_SetHighlight final
{
public:
	bool                                          InHighlighted;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Conversation_Portrait_C_SetHighlight) == 0x000008, "Wrong alignment on BP_Conversation_Portrait_C_SetHighlight");
static_assert(sizeof(BP_Conversation_Portrait_C_SetHighlight) == 0x000020, "Wrong size on BP_Conversation_Portrait_C_SetHighlight");
static_assert(offsetof(BP_Conversation_Portrait_C_SetHighlight, InHighlighted) == 0x000000, "Member 'BP_Conversation_Portrait_C_SetHighlight::InHighlighted' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetHighlight, Temp_bool_Variable) == 0x000001, "Member 'BP_Conversation_Portrait_C_SetHighlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetHighlight, K2Node_Select_Default) == 0x000008, "Member 'BP_Conversation_Portrait_C_SetHighlight::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_Conversation_Portrait_C_SetHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Conversation_Portrait_C_SetHighlight, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000018, "Member 'BP_Conversation_Portrait_C_SetHighlight::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_Conversation_Portrait.BP_Conversation_Portrait_C.SetSide
// 0x0001 (0x0001 - 0x0000)
struct BP_Conversation_Portrait_C_SetSide final
{
public:
	bool                                          InIsLeftSide;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Conversation_Portrait_C_SetSide) == 0x000001, "Wrong alignment on BP_Conversation_Portrait_C_SetSide");
static_assert(sizeof(BP_Conversation_Portrait_C_SetSide) == 0x000001, "Wrong size on BP_Conversation_Portrait_C_SetSide");
static_assert(offsetof(BP_Conversation_Portrait_C_SetSide, InIsLeftSide) == 0x000000, "Member 'BP_Conversation_Portrait_C_SetSide::InIsLeftSide' has a wrong offset!");

}

