#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CorruptedWisp_AI

#include "Basic.hpp"

#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_CorruptedWisp_AI.BP_CorruptedWisp_AI_C.ExecuteUbergraph_BP_CorruptedWisp_AI
// 0x0040 (0x0040 - 0x0000)
struct BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemyCharacter*                        CallFunc_GetEnemyCharacter_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CorruptedWisp_C*                    K2Node_DynamicCast_AsBP_Corrupted_Wisp;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x002C(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI) == 0x000008, "Wrong alignment on BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI");
static_assert(sizeof(BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI) == 0x000040, "Wrong size on BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI");
static_assert(offsetof(BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI, EntryPoint) == 0x000000, "Member 'BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI, CallFunc_GetEnemyCharacter_ReturnValue) == 0x000008, "Member 'BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI::CallFunc_GetEnemyCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI, K2Node_DynamicCast_AsBP_Corrupted_Wisp) == 0x000010, "Member 'BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI::K2Node_DynamicCast_AsBP_Corrupted_Wisp' has a wrong offset!");
static_assert(offsetof(BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI, Temp_delegate_Variable) == 0x00002C, "Member 'BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI, CallFunc_PostAkEvent_ReturnValue) == 0x00003C, "Member 'BP_CorruptedWisp_AI_C_ExecuteUbergraph_BP_CorruptedWisp_AI::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

}

