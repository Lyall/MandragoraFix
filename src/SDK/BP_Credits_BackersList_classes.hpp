#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Credits_BackersList

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_structs.hpp"
#include "man_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_Credits_BackersList.BP_Credits_BackersList_C
// 0x0098 (0x02F8 - 0x0260)
class UBP_Credits_BackersList_C final : public UCreditsObjectUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UManRichTextBlock*                      Col1;                                              // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UManRichTextBlock*                      Col2;                                              // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UManRichTextBlock*                      Col3;                                              // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_0;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_1;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_2;                                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         Column;                                            // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Col1Text;                                          // 0x02A8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   Col2Text;                                          // 0x02C0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   Col3Text;                                          // 0x02D8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          IsSmallScreen;                                     // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_BP_Credits_BackersList(int32 EntryPoint);
	void OnSetText(const class FText& InLeftText, const class FText& InCenterText, const class FText& InRightText);
	void PreConstruct(bool IsDesignTime);
	void SetTexts(const class FText& InCol1, const class FText& InCol2, const class FText& InCol3);
	void ToggleSmallScreen(bool InIsSmallScreen);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Credits_BackersList_C">();
	}
	static class UBP_Credits_BackersList_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Credits_BackersList_C>();
	}
};
static_assert(alignof(UBP_Credits_BackersList_C) == 0x000008, "Wrong alignment on UBP_Credits_BackersList_C");
static_assert(sizeof(UBP_Credits_BackersList_C) == 0x0002F8, "Wrong size on UBP_Credits_BackersList_C");
static_assert(offsetof(UBP_Credits_BackersList_C, UberGraphFrame) == 0x000260, "Member 'UBP_Credits_BackersList_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, Col1) == 0x000268, "Member 'UBP_Credits_BackersList_C::Col1' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, Col2) == 0x000270, "Member 'UBP_Credits_BackersList_C::Col2' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, Col3) == 0x000278, "Member 'UBP_Credits_BackersList_C::Col3' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, SizeBox) == 0x000280, "Member 'UBP_Credits_BackersList_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, SizeBox_0) == 0x000288, "Member 'UBP_Credits_BackersList_C::SizeBox_0' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, SizeBox_1) == 0x000290, "Member 'UBP_Credits_BackersList_C::SizeBox_1' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, SizeBox_2) == 0x000298, "Member 'UBP_Credits_BackersList_C::SizeBox_2' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, Column) == 0x0002A0, "Member 'UBP_Credits_BackersList_C::Column' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, Col1Text) == 0x0002A8, "Member 'UBP_Credits_BackersList_C::Col1Text' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, Col2Text) == 0x0002C0, "Member 'UBP_Credits_BackersList_C::Col2Text' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, Col3Text) == 0x0002D8, "Member 'UBP_Credits_BackersList_C::Col3Text' has a wrong offset!");
static_assert(offsetof(UBP_Credits_BackersList_C, IsSmallScreen) == 0x0002F0, "Member 'UBP_Credits_BackersList_C::IsSmallScreen' has a wrong offset!");

}

