#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Credits_Heading

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "man_structs.hpp"


namespace SDK::Params
{

// Function BP_Credits_Heading.BP_Credits_Heading_C.ExecuteUbergraph_BP_Credits_Heading
// 0x0058 (0x0058 - 0x0000)
struct BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESmallScreenMode                              CallFunc_GetSmallScreenMode_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESmallScreenMode                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_InLeftText;                           // 0x0010(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InCenterText;                         // 0x0028(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InRightText;                          // 0x0040(0x0018)(ConstParm)
};
static_assert(alignof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading) == 0x000008, "Wrong alignment on BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading");
static_assert(sizeof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading) == 0x000058, "Wrong size on BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, EntryPoint) == 0x000000, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, CallFunc_GetSmallScreenMode_ReturnValue) == 0x000004, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::CallFunc_GetSmallScreenMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, Temp_byte_Variable) == 0x000005, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, Temp_bool_Variable) == 0x000006, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, Temp_bool_Variable_1) == 0x000007, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, Temp_bool_Variable_2) == 0x000008, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, Temp_bool_Variable_3) == 0x000009, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, K2Node_Event_IsDesignTime) == 0x00000A, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, K2Node_Select_Default) == 0x00000B, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, K2Node_Event_InLeftText) == 0x000010, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::K2Node_Event_InLeftText' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, K2Node_Event_InCenterText) == 0x000028, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::K2Node_Event_InCenterText' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading, K2Node_Event_InRightText) == 0x000040, "Member 'BP_Credits_Heading_C_ExecuteUbergraph_BP_Credits_Heading::K2Node_Event_InRightText' has a wrong offset!");

// Function BP_Credits_Heading.BP_Credits_Heading_C.OnSetText
// 0x0048 (0x0048 - 0x0000)
struct BP_Credits_Heading_C_OnSetText final
{
public:
	class FText                                   InLeftText;                                        // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InCenterText;                                      // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InRightText;                                       // 0x0030(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Credits_Heading_C_OnSetText) == 0x000008, "Wrong alignment on BP_Credits_Heading_C_OnSetText");
static_assert(sizeof(BP_Credits_Heading_C_OnSetText) == 0x000048, "Wrong size on BP_Credits_Heading_C_OnSetText");
static_assert(offsetof(BP_Credits_Heading_C_OnSetText, InLeftText) == 0x000000, "Member 'BP_Credits_Heading_C_OnSetText::InLeftText' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_OnSetText, InCenterText) == 0x000018, "Member 'BP_Credits_Heading_C_OnSetText::InCenterText' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_OnSetText, InRightText) == 0x000030, "Member 'BP_Credits_Heading_C_OnSetText::InRightText' has a wrong offset!");

// Function BP_Credits_Heading.BP_Credits_Heading_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Credits_Heading_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Credits_Heading_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Credits_Heading_C_PreConstruct");
static_assert(sizeof(BP_Credits_Heading_C_PreConstruct) == 0x000001, "Wrong size on BP_Credits_Heading_C_PreConstruct");
static_assert(offsetof(BP_Credits_Heading_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Credits_Heading_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Credits_Heading.BP_Credits_Heading_C.SetTexts
// 0x0030 (0x0030 - 0x0000)
struct BP_Credits_Heading_C_SetTexts final
{
public:
	class FText                                   InHeading;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0018(0x0018)()
};
static_assert(alignof(BP_Credits_Heading_C_SetTexts) == 0x000008, "Wrong alignment on BP_Credits_Heading_C_SetTexts");
static_assert(sizeof(BP_Credits_Heading_C_SetTexts) == 0x000030, "Wrong size on BP_Credits_Heading_C_SetTexts");
static_assert(offsetof(BP_Credits_Heading_C_SetTexts, InHeading) == 0x000000, "Member 'BP_Credits_Heading_C_SetTexts::InHeading' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_SetTexts, CallFunc_TextToUpper_ReturnValue) == 0x000018, "Member 'BP_Credits_Heading_C_SetTexts::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");

// Function BP_Credits_Heading.BP_Credits_Heading_C.ToggleSmallScreen
// 0x0080 (0x0080 - 0x0000)
struct BP_Credits_Heading_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0020(0x0058)(HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Credits_Heading_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_Credits_Heading_C_ToggleSmallScreen");
static_assert(sizeof(BP_Credits_Heading_C_ToggleSmallScreen) == 0x000080, "Wrong size on BP_Credits_Heading_C_ToggleSmallScreen");
static_assert(offsetof(BP_Credits_Heading_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_Credits_Heading_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_Credits_Heading_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ToggleSmallScreen, Temp_int_Variable) == 0x000004, "Member 'BP_Credits_Heading_C_ToggleSmallScreen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ToggleSmallScreen, Temp_int_Variable_1) == 0x000008, "Member 'BP_Credits_Heading_C_ToggleSmallScreen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_Credits_Heading_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ToggleSmallScreen, Temp_float_Variable) == 0x000010, "Member 'BP_Credits_Heading_C_ToggleSmallScreen::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ToggleSmallScreen, Temp_float_Variable_1) == 0x000014, "Member 'BP_Credits_Heading_C_ToggleSmallScreen::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ToggleSmallScreen, K2Node_Select_Default) == 0x000018, "Member 'BP_Credits_Heading_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo) == 0x000020, "Member 'BP_Credits_Heading_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(BP_Credits_Heading_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x000078, "Member 'BP_Credits_Heading_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");

}

