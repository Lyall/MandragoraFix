#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Crow_Anim

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "man_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass BP_Crow_Anim.BP_Crow_Anim_C
// 0x0590 (0x0C30 - 0x06A0)
class UBP_Crow_Anim_C final : public UAnimInstanceBase
{
public:
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x06A8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x06D8(0x0080)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0758(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0780(0x0028)()
	struct FAnimNode_BlendListByInt               AnimGraphNode_BlendListByInt_1;                    // 0x07A8(0x00A8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0850(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x08D0(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0950(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x09D0(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0A00(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0A80(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0AB0(0x00B0)()
	struct FAnimNode_BlendListByInt               AnimGraphNode_BlendListByInt;                      // 0x0B60(0x00A8)()
	TMulticastInlineDelegate<void()>              FlyEnd;                                            // 0x0C08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         IdleBridgeStartTime;                               // 0x0C18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IdleBridgeChance;                                  // 0x0C1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IdleBridgeAnimIndex;                               // 0x0C20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IdleBridgeTimer;                                   // 0x0C24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayIdleBridge;                                    // 0x0C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Crow_Anim(int32 EntryPoint);
	void AnimNotify_OnLeaveIdleBridge();
	void AnimNotify_OnEnterIdleBridge();
	void AnimNotify_FlyAwayEnd();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Crow_Anim_AnimGraphNode_TransitionResult_3E74F6C04FDB44A69E3619B9F216C27B();
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Crow_Anim_C">();
	}
	static class UBP_Crow_Anim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Crow_Anim_C>();
	}
};
static_assert(alignof(UBP_Crow_Anim_C) == 0x000010, "Wrong alignment on UBP_Crow_Anim_C");
static_assert(sizeof(UBP_Crow_Anim_C) == 0x000C30, "Wrong size on UBP_Crow_Anim_C");
static_assert(offsetof(UBP_Crow_Anim_C, UberGraphFrame) == 0x0006A0, "Member 'UBP_Crow_Anim_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_Root) == 0x0006A8, "Member 'UBP_Crow_Anim_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_SequencePlayer_4) == 0x0006D8, "Member 'UBP_Crow_Anim_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_TransitionResult_1) == 0x000758, "Member 'UBP_Crow_Anim_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_TransitionResult) == 0x000780, "Member 'UBP_Crow_Anim_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_BlendListByInt_1) == 0x0007A8, "Member 'UBP_Crow_Anim_C::AnimGraphNode_BlendListByInt_1' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_SequencePlayer_3) == 0x000850, "Member 'UBP_Crow_Anim_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_SequencePlayer_2) == 0x0008D0, "Member 'UBP_Crow_Anim_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_SequencePlayer_1) == 0x000950, "Member 'UBP_Crow_Anim_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_StateResult_1) == 0x0009D0, "Member 'UBP_Crow_Anim_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_SequencePlayer) == 0x000A00, "Member 'UBP_Crow_Anim_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_StateResult) == 0x000A80, "Member 'UBP_Crow_Anim_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_StateMachine) == 0x000AB0, "Member 'UBP_Crow_Anim_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, AnimGraphNode_BlendListByInt) == 0x000B60, "Member 'UBP_Crow_Anim_C::AnimGraphNode_BlendListByInt' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, FlyEnd) == 0x000C08, "Member 'UBP_Crow_Anim_C::FlyEnd' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, IdleBridgeStartTime) == 0x000C18, "Member 'UBP_Crow_Anim_C::IdleBridgeStartTime' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, IdleBridgeChance) == 0x000C1C, "Member 'UBP_Crow_Anim_C::IdleBridgeChance' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, IdleBridgeAnimIndex) == 0x000C20, "Member 'UBP_Crow_Anim_C::IdleBridgeAnimIndex' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, IdleBridgeTimer) == 0x000C24, "Member 'UBP_Crow_Anim_C::IdleBridgeTimer' has a wrong offset!");
static_assert(offsetof(UBP_Crow_Anim_C, PlayIdleBridge) == 0x000C28, "Member 'UBP_Crow_Anim_C::PlayIdleBridge' has a wrong offset!");

}

