#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Door_ActorBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "man_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Door_ActorBase.BP_Door_ActorBase_C
// 0x01F8 (0x0A70 - 0x0878)
class ABP_Door_ActorBase_C : public ADoorActorBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0878(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak;                                                // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMiniMapActorComponent*                 MiniMapActor;                                      // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               DoorPortalFX;                                      // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PLight_Character;                                  // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EmissivePlane;                                     // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoundingBoxComponent*                  BoundingBox;                                       // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PLight_Main;                                       // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Flip;                                              // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Fade_22F33075420F4CBF6B5AFE857E64FF07;  // 0x08D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_22F33075420F4CBF6B5AFE857E64FF07; // 0x08D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D5[0x3];                                      // 0x08D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Door_ActorBase_C*                   LinkedDoor;                                        // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TeleportTarget;                                    // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InteractBubbleNeedKey;                             // 0x08F0(0x0018)(Edit, BlueprintVisible, SaveGame)
	class FText                                   InteractTextNeedKey;                               // 0x0908(0x0018)(Edit, BlueprintVisible, SaveGame)
	class FText                                   InteractTextUnopenable;                            // 0x0920(0x0018)(Edit, BlueprintVisible, SaveGame)
	class UClass*                                 KeylockedCustomKey;                                // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InteractText;                                      // 0x0940(0x0018)(Edit, BlueprintVisible, SaveGame)
	class FText                                   OpenedInteractText;                                // 0x0958(0x0018)(Edit, BlueprintVisible, SaveGame)
	bool                                          InteractOnlyOnce;                                  // 0x0970(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_971[0x7];                                      // 0x0971(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InteractTextBubbleUnopenable;                      // 0x0978(0x0018)(Edit, BlueprintVisible, SaveGame)
	bool                                          MainLight;                                         // 0x0990(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_991[0x3];                                      // 0x0991(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MainLight_Position;                                // 0x0994(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 MainLight_Color;                                   // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainLight_Radius;                                  // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainLight_Intensity;                               // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EditMode;                                          // 0x09AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Mirrored;                                          // 0x09AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlaneEnable;                                       // 0x09AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9AF[0x1];                                      // 0x09AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           PlaneColor;                                        // 0x09B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlaneEmissiveBoost;                                // 0x09C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlaneDepthFade;                                    // 0x09C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlaneVignetting;                                   // 0x09C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlaneOpacity;                                      // 0x09CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlanePosition;                                     // 0x09D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PlaneRotation;                                     // 0x09DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                PlaneScale;                                        // 0x09E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CharacterLight;                                    // 0x09F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F5[0x3];                                      // 0x09F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CharacterLight_Position;                           // 0x09F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CharacterLight_Color;                              // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterLight_Radius;                             // 0x0A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterLight_Intensity;                          // 0x0A0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnablePortalVFX;                                   // 0x0A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A11[0x3];                                      // 0x0A11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LightshaftColor;                                   // 0x0A14(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightshaftOpacity;                                 // 0x0A24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DustAmount;                                        // 0x0A28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LightshaftSource;                                  // 0x0A2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LightshaftPosition;                                // 0x0A38(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A44[0x4];                                      // 0x0A44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          OpenIdleAnim;                                      // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OldStyle;                                          // 0x0A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A51[0x7];                                      // 0x0A51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InteractTextOpen;                                  // 0x0A58(0x0018)(Edit, BlueprintVisible, SaveGame)

public:
	void StartOpened();
	void CloseDoor();
	void OpenDoor();
	void UserConstructionScript();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void BPPostBeginPlay();
	void OnBPStart(class UAbilityBase* InAbility);
	void OnVfxEvent(class FName VfxEventType);
	void ExecuteUbergraph_BP_Door_ActorBase(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Door_ActorBase_C">();
	}
	static class ABP_Door_ActorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Door_ActorBase_C>();
	}
};
static_assert(alignof(ABP_Door_ActorBase_C) == 0x000008, "Wrong alignment on ABP_Door_ActorBase_C");
static_assert(sizeof(ABP_Door_ActorBase_C) == 0x000A70, "Wrong size on ABP_Door_ActorBase_C");
static_assert(offsetof(ABP_Door_ActorBase_C, UberGraphFrame) == 0x000878, "Member 'ABP_Door_ActorBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, Ak) == 0x000880, "Member 'ABP_Door_ActorBase_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, MiniMapActor) == 0x000888, "Member 'ABP_Door_ActorBase_C::MiniMapActor' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, DoorPortalFX) == 0x000890, "Member 'ABP_Door_ActorBase_C::DoorPortalFX' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, PLight_Character) == 0x000898, "Member 'ABP_Door_ActorBase_C::PLight_Character' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, EmissivePlane) == 0x0008A0, "Member 'ABP_Door_ActorBase_C::EmissivePlane' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, BoundingBox) == 0x0008A8, "Member 'ABP_Door_ActorBase_C::BoundingBox' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, PLight_Main) == 0x0008B0, "Member 'ABP_Door_ActorBase_C::PLight_Main' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, Flip) == 0x0008B8, "Member 'ABP_Door_ActorBase_C::Flip' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, SkeletalMesh) == 0x0008C0, "Member 'ABP_Door_ActorBase_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, DefaultSceneRoot) == 0x0008C8, "Member 'ABP_Door_ActorBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, Timeline_0_Fade_22F33075420F4CBF6B5AFE857E64FF07) == 0x0008D0, "Member 'ABP_Door_ActorBase_C::Timeline_0_Fade_22F33075420F4CBF6B5AFE857E64FF07' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, Timeline_0__Direction_22F33075420F4CBF6B5AFE857E64FF07) == 0x0008D4, "Member 'ABP_Door_ActorBase_C::Timeline_0__Direction_22F33075420F4CBF6B5AFE857E64FF07' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, Timeline_0) == 0x0008D8, "Member 'ABP_Door_ActorBase_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, LinkedDoor) == 0x0008E0, "Member 'ABP_Door_ActorBase_C::LinkedDoor' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, TeleportTarget) == 0x0008E8, "Member 'ABP_Door_ActorBase_C::TeleportTarget' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, InteractBubbleNeedKey) == 0x0008F0, "Member 'ABP_Door_ActorBase_C::InteractBubbleNeedKey' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, InteractTextNeedKey) == 0x000908, "Member 'ABP_Door_ActorBase_C::InteractTextNeedKey' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, InteractTextUnopenable) == 0x000920, "Member 'ABP_Door_ActorBase_C::InteractTextUnopenable' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, KeylockedCustomKey) == 0x000938, "Member 'ABP_Door_ActorBase_C::KeylockedCustomKey' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, InteractText) == 0x000940, "Member 'ABP_Door_ActorBase_C::InteractText' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, OpenedInteractText) == 0x000958, "Member 'ABP_Door_ActorBase_C::OpenedInteractText' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, InteractOnlyOnce) == 0x000970, "Member 'ABP_Door_ActorBase_C::InteractOnlyOnce' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, InteractTextBubbleUnopenable) == 0x000978, "Member 'ABP_Door_ActorBase_C::InteractTextBubbleUnopenable' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, MainLight) == 0x000990, "Member 'ABP_Door_ActorBase_C::MainLight' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, MainLight_Position) == 0x000994, "Member 'ABP_Door_ActorBase_C::MainLight_Position' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, MainLight_Color) == 0x0009A0, "Member 'ABP_Door_ActorBase_C::MainLight_Color' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, MainLight_Radius) == 0x0009A4, "Member 'ABP_Door_ActorBase_C::MainLight_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, MainLight_Intensity) == 0x0009A8, "Member 'ABP_Door_ActorBase_C::MainLight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, EditMode) == 0x0009AC, "Member 'ABP_Door_ActorBase_C::EditMode' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, Mirrored) == 0x0009AD, "Member 'ABP_Door_ActorBase_C::Mirrored' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, PlaneEnable) == 0x0009AE, "Member 'ABP_Door_ActorBase_C::PlaneEnable' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, PlaneColor) == 0x0009B0, "Member 'ABP_Door_ActorBase_C::PlaneColor' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, PlaneEmissiveBoost) == 0x0009C0, "Member 'ABP_Door_ActorBase_C::PlaneEmissiveBoost' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, PlaneDepthFade) == 0x0009C4, "Member 'ABP_Door_ActorBase_C::PlaneDepthFade' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, PlaneVignetting) == 0x0009C8, "Member 'ABP_Door_ActorBase_C::PlaneVignetting' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, PlaneOpacity) == 0x0009CC, "Member 'ABP_Door_ActorBase_C::PlaneOpacity' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, PlanePosition) == 0x0009D0, "Member 'ABP_Door_ActorBase_C::PlanePosition' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, PlaneRotation) == 0x0009DC, "Member 'ABP_Door_ActorBase_C::PlaneRotation' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, PlaneScale) == 0x0009E8, "Member 'ABP_Door_ActorBase_C::PlaneScale' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, CharacterLight) == 0x0009F4, "Member 'ABP_Door_ActorBase_C::CharacterLight' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, CharacterLight_Position) == 0x0009F8, "Member 'ABP_Door_ActorBase_C::CharacterLight_Position' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, CharacterLight_Color) == 0x000A04, "Member 'ABP_Door_ActorBase_C::CharacterLight_Color' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, CharacterLight_Radius) == 0x000A08, "Member 'ABP_Door_ActorBase_C::CharacterLight_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, CharacterLight_Intensity) == 0x000A0C, "Member 'ABP_Door_ActorBase_C::CharacterLight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, EnablePortalVFX) == 0x000A10, "Member 'ABP_Door_ActorBase_C::EnablePortalVFX' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, LightshaftColor) == 0x000A14, "Member 'ABP_Door_ActorBase_C::LightshaftColor' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, LightshaftOpacity) == 0x000A24, "Member 'ABP_Door_ActorBase_C::LightshaftOpacity' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, DustAmount) == 0x000A28, "Member 'ABP_Door_ActorBase_C::DustAmount' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, LightshaftSource) == 0x000A2C, "Member 'ABP_Door_ActorBase_C::LightshaftSource' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, LightshaftPosition) == 0x000A38, "Member 'ABP_Door_ActorBase_C::LightshaftPosition' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, OpenIdleAnim) == 0x000A48, "Member 'ABP_Door_ActorBase_C::OpenIdleAnim' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, OldStyle) == 0x000A50, "Member 'ABP_Door_ActorBase_C::OldStyle' has a wrong offset!");
static_assert(offsetof(ABP_Door_ActorBase_C, InteractTextOpen) == 0x000A58, "Member 'ABP_Door_ActorBase_C::InteractTextOpen' has a wrong offset!");

}

