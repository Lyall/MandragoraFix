#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyHPBar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "man_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_EnemyHPBar.BP_EnemyHPBar_C
// 0x00C8 (0x0330 - 0x0268)
class UBP_EnemyHPBar_C final : public UEnemyHPBarUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0268(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimateDamageText;                                 // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FadeOutAnim;                                       // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FadeInAnim;                                        // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ShowHighlight;                                     // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Background;                                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           Bar;                                               // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DamageText;                                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 End;                                               // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_0;                                         // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBoxBar;                                        // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBoxFrame;                                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBoxWidget;                                     // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         CurrentPercent;                                    // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisplayPercent;                                    // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinValue;                                          // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimSpeed;                                         // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxValue;                                          // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentValue;                                      // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HighlightMaterial;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HighlightChange;                                   // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           HighlightColorDecrease;                            // 0x02F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightColorIncrease;                            // 0x0304(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BarMaterial;                                       // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FadeOutStarted;                                    // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         testvalue;                                         // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsElite;                                           // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          RequestAnimateBar;                                 // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSmall;                                           // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_BP_EnemyHPBar(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnHideDamageText();
	void OnSetDamageValue(int32 InDamageValue, bool bInCriticalHit);
	void OnShowDamageText();
	void PreConstruct(bool IsDesignTime);
	void SetNewValue(float NewValue, bool Animate, bool HighlightChange_0);
	void Update_Highlight(float CurrentPercent_0, float NewPercent);
	void TestWithRandom();
	void SetNewMinMax(float NewMin, float NewMax);
	void AnimateBar(float InDeltaTime);
	void AnimateBarColor();
	void FadeIn();
	void FadeOut(bool PlayAnim);
	void Init();
	void ToggleHPBarOpacity(bool Visible);
	void Toggle_Elite(bool InIsElite);
	void ToggleSmall(bool InIsSmall);

	void OnPaint(struct FPaintContext& Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemyHPBar_C">();
	}
	static class UBP_EnemyHPBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EnemyHPBar_C>();
	}
};
static_assert(alignof(UBP_EnemyHPBar_C) == 0x000008, "Wrong alignment on UBP_EnemyHPBar_C");
static_assert(sizeof(UBP_EnemyHPBar_C) == 0x000330, "Wrong size on UBP_EnemyHPBar_C");
static_assert(offsetof(UBP_EnemyHPBar_C, UberGraphFrame) == 0x000268, "Member 'UBP_EnemyHPBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, AnimateDamageText) == 0x000270, "Member 'UBP_EnemyHPBar_C::AnimateDamageText' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, FadeOutAnim) == 0x000278, "Member 'UBP_EnemyHPBar_C::FadeOutAnim' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, FadeInAnim) == 0x000280, "Member 'UBP_EnemyHPBar_C::FadeInAnim' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, ShowHighlight) == 0x000288, "Member 'UBP_EnemyHPBar_C::ShowHighlight' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, Background) == 0x000290, "Member 'UBP_EnemyHPBar_C::Background' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, Bar) == 0x000298, "Member 'UBP_EnemyHPBar_C::Bar' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, DamageText) == 0x0002A0, "Member 'UBP_EnemyHPBar_C::DamageText' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, End) == 0x0002A8, "Member 'UBP_EnemyHPBar_C::End' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, Overlay_0) == 0x0002B0, "Member 'UBP_EnemyHPBar_C::Overlay_0' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, SizeBoxBar) == 0x0002B8, "Member 'UBP_EnemyHPBar_C::SizeBoxBar' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, SizeBoxFrame) == 0x0002C0, "Member 'UBP_EnemyHPBar_C::SizeBoxFrame' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, SizeBoxWidget) == 0x0002C8, "Member 'UBP_EnemyHPBar_C::SizeBoxWidget' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, CurrentPercent) == 0x0002D0, "Member 'UBP_EnemyHPBar_C::CurrentPercent' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, DisplayPercent) == 0x0002D4, "Member 'UBP_EnemyHPBar_C::DisplayPercent' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, MinValue) == 0x0002D8, "Member 'UBP_EnemyHPBar_C::MinValue' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, AnimSpeed) == 0x0002DC, "Member 'UBP_EnemyHPBar_C::AnimSpeed' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, MaxValue) == 0x0002E0, "Member 'UBP_EnemyHPBar_C::MaxValue' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, CurrentValue) == 0x0002E4, "Member 'UBP_EnemyHPBar_C::CurrentValue' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, HighlightMaterial) == 0x0002E8, "Member 'UBP_EnemyHPBar_C::HighlightMaterial' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, HighlightChange) == 0x0002F0, "Member 'UBP_EnemyHPBar_C::HighlightChange' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, HighlightColorDecrease) == 0x0002F4, "Member 'UBP_EnemyHPBar_C::HighlightColorDecrease' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, HighlightColorIncrease) == 0x000304, "Member 'UBP_EnemyHPBar_C::HighlightColorIncrease' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, BarMaterial) == 0x000318, "Member 'UBP_EnemyHPBar_C::BarMaterial' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, FadeOutStarted) == 0x000320, "Member 'UBP_EnemyHPBar_C::FadeOutStarted' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, testvalue) == 0x000324, "Member 'UBP_EnemyHPBar_C::testvalue' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, IsElite) == 0x000328, "Member 'UBP_EnemyHPBar_C::IsElite' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, RequestAnimateBar) == 0x000329, "Member 'UBP_EnemyHPBar_C::RequestAnimateBar' has a wrong offset!");
static_assert(offsetof(UBP_EnemyHPBar_C, IsSmall) == 0x00032A, "Member 'UBP_EnemyHPBar_C::IsSmall' has a wrong offset!");

}

