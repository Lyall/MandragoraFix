#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyHPBar

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.ExecuteUbergraph_BP_EnemyHPBar
// 0x0130 (0x0130 - 0x0000)
struct BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InDamageValue;                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInCriticalHit;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0098(0x0018)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x00B0(0x0028)()
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x00D8(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar) == 0x000008, "Wrong alignment on BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar");
static_assert(sizeof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar) == 0x000130, "Wrong size on BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, EntryPoint) == 0x000000, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, K2Node_Event_MyGeometry) == 0x000004, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, Temp_bool_Variable) == 0x000040, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, Temp_int_Variable) == 0x000044, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, Temp_int_Variable_1) == 0x000048, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, Temp_bool_Variable_1) == 0x00004C, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, Temp_struct_Variable) == 0x000050, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, Temp_struct_Variable_1) == 0x000060, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, CallFunc_PlayAnimation_ReturnValue) == 0x000070, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, K2Node_Event_IsDesignTime) == 0x000078, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, K2Node_Event_InDamageValue) == 0x00007C, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::K2Node_Event_InDamageValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, K2Node_Event_bInCriticalHit) == 0x000080, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::K2Node_Event_bInCriticalHit' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, K2Node_Select_Default) == 0x000084, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, K2Node_Select_Default_1) == 0x000088, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, CallFunc_IntToText_ReturnValue) == 0x000098, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::CallFunc_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, K2Node_MakeStruct_SlateColor) == 0x0000B0, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar, K2Node_MakeStruct_SlateFontInfo) == 0x0000D8, "Member 'BP_EnemyHPBar_C_ExecuteUbergraph_BP_EnemyHPBar::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_EnemyHPBar_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyHPBar_C_Tick) == 0x000004, "Wrong alignment on BP_EnemyHPBar_C_Tick");
static_assert(sizeof(BP_EnemyHPBar_C_Tick) == 0x00003C, "Wrong size on BP_EnemyHPBar_C_Tick");
static_assert(offsetof(BP_EnemyHPBar_C_Tick, MyGeometry) == 0x000000, "Member 'BP_EnemyHPBar_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_EnemyHPBar_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.OnSetDamageValue
// 0x0008 (0x0008 - 0x0000)
struct BP_EnemyHPBar_C_OnSetDamageValue final
{
public:
	int32                                         InDamageValue;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInCriticalHit;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyHPBar_C_OnSetDamageValue) == 0x000004, "Wrong alignment on BP_EnemyHPBar_C_OnSetDamageValue");
static_assert(sizeof(BP_EnemyHPBar_C_OnSetDamageValue) == 0x000008, "Wrong size on BP_EnemyHPBar_C_OnSetDamageValue");
static_assert(offsetof(BP_EnemyHPBar_C_OnSetDamageValue, InDamageValue) == 0x000000, "Member 'BP_EnemyHPBar_C_OnSetDamageValue::InDamageValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_OnSetDamageValue, bInCriticalHit) == 0x000004, "Member 'BP_EnemyHPBar_C_OnSetDamageValue::bInCriticalHit' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_EnemyHPBar_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyHPBar_C_PreConstruct) == 0x000001, "Wrong alignment on BP_EnemyHPBar_C_PreConstruct");
static_assert(sizeof(BP_EnemyHPBar_C_PreConstruct) == 0x000001, "Wrong size on BP_EnemyHPBar_C_PreConstruct");
static_assert(offsetof(BP_EnemyHPBar_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_EnemyHPBar_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.SetNewValue
// 0x0024 (0x0024 - 0x0000)
struct BP_EnemyHPBar_C_SetNewValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HighlightChange_0;                                 // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_NormalizeToRange_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyHPBar_C_SetNewValue) == 0x000004, "Wrong alignment on BP_EnemyHPBar_C_SetNewValue");
static_assert(sizeof(BP_EnemyHPBar_C_SetNewValue) == 0x000024, "Wrong size on BP_EnemyHPBar_C_SetNewValue");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewValue, NewValue) == 0x000000, "Member 'BP_EnemyHPBar_C_SetNewValue::NewValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewValue, Animate) == 0x000004, "Member 'BP_EnemyHPBar_C_SetNewValue::Animate' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewValue, HighlightChange_0) == 0x000005, "Member 'BP_EnemyHPBar_C_SetNewValue::HighlightChange_0' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewValue, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_EnemyHPBar_C_SetNewValue::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewValue, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_EnemyHPBar_C_SetNewValue::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewValue, CallFunc_Abs_ReturnValue) == 0x000010, "Member 'BP_EnemyHPBar_C_SetNewValue::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewValue, CallFunc_MakeVector2D_ReturnValue) == 0x000014, "Member 'BP_EnemyHPBar_C_SetNewValue::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewValue, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_EnemyHPBar_C_SetNewValue::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewValue, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'BP_EnemyHPBar_C_SetNewValue::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewValue, CallFunc_NormalizeToRange_ReturnValue) == 0x000020, "Member 'BP_EnemyHPBar_C_SetNewValue::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.Update Highlight
// 0x0010 (0x0010 - 0x0000)
struct BP_EnemyHPBar_C_Update_Highlight final
{
public:
	float                                         CurrentPercent_0;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewPercent;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyHPBar_C_Update_Highlight) == 0x000008, "Wrong alignment on BP_EnemyHPBar_C_Update_Highlight");
static_assert(sizeof(BP_EnemyHPBar_C_Update_Highlight) == 0x000010, "Wrong size on BP_EnemyHPBar_C_Update_Highlight");
static_assert(offsetof(BP_EnemyHPBar_C_Update_Highlight, CurrentPercent_0) == 0x000000, "Member 'BP_EnemyHPBar_C_Update_Highlight::CurrentPercent_0' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Update_Highlight, NewPercent) == 0x000004, "Member 'BP_EnemyHPBar_C_Update_Highlight::NewPercent' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Update_Highlight, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BP_EnemyHPBar_C_Update_Highlight::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.TestWithRandom
// 0x0004 (0x0004 - 0x0000)
struct BP_EnemyHPBar_C_TestWithRandom final
{
public:
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyHPBar_C_TestWithRandom) == 0x000004, "Wrong alignment on BP_EnemyHPBar_C_TestWithRandom");
static_assert(sizeof(BP_EnemyHPBar_C_TestWithRandom) == 0x000004, "Wrong size on BP_EnemyHPBar_C_TestWithRandom");
static_assert(offsetof(BP_EnemyHPBar_C_TestWithRandom, CallFunc_RandomFloatInRange_ReturnValue) == 0x000000, "Member 'BP_EnemyHPBar_C_TestWithRandom::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.SetNewMinMax
// 0x0008 (0x0008 - 0x0000)
struct BP_EnemyHPBar_C_SetNewMinMax final
{
public:
	float                                         NewMin;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewMax;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyHPBar_C_SetNewMinMax) == 0x000004, "Wrong alignment on BP_EnemyHPBar_C_SetNewMinMax");
static_assert(sizeof(BP_EnemyHPBar_C_SetNewMinMax) == 0x000008, "Wrong size on BP_EnemyHPBar_C_SetNewMinMax");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewMinMax, NewMin) == 0x000000, "Member 'BP_EnemyHPBar_C_SetNewMinMax::NewMin' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_SetNewMinMax, NewMax) == 0x000004, "Member 'BP_EnemyHPBar_C_SetNewMinMax::NewMax' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.AnimateBar
// 0x0018 (0x0018 - 0x0000)
struct BP_EnemyHPBar_C_AnimateBar final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyHPBar_C_AnimateBar) == 0x000004, "Wrong alignment on BP_EnemyHPBar_C_AnimateBar");
static_assert(sizeof(BP_EnemyHPBar_C_AnimateBar) == 0x000018, "Wrong size on BP_EnemyHPBar_C_AnimateBar");
static_assert(offsetof(BP_EnemyHPBar_C_AnimateBar, InDeltaTime) == 0x000000, "Member 'BP_EnemyHPBar_C_AnimateBar::InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_AnimateBar, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_EnemyHPBar_C_AnimateBar::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_AnimateBar, CallFunc_MakeVector2D_ReturnValue) == 0x000008, "Member 'BP_EnemyHPBar_C_AnimateBar::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_AnimateBar, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_EnemyHPBar_C_AnimateBar::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_AnimateBar, CallFunc_FInterpTo_ReturnValue) == 0x000014, "Member 'BP_EnemyHPBar_C_AnimateBar::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.FadeIn
// 0x0008 (0x0008 - 0x0000)
struct BP_EnemyHPBar_C_FadeIn final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyHPBar_C_FadeIn) == 0x000008, "Wrong alignment on BP_EnemyHPBar_C_FadeIn");
static_assert(sizeof(BP_EnemyHPBar_C_FadeIn) == 0x000008, "Wrong size on BP_EnemyHPBar_C_FadeIn");
static_assert(offsetof(BP_EnemyHPBar_C_FadeIn, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_EnemyHPBar_C_FadeIn::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.FadeOut
// 0x0010 (0x0010 - 0x0000)
struct BP_EnemyHPBar_C_FadeOut final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyHPBar_C_FadeOut) == 0x000008, "Wrong alignment on BP_EnemyHPBar_C_FadeOut");
static_assert(sizeof(BP_EnemyHPBar_C_FadeOut) == 0x000010, "Wrong size on BP_EnemyHPBar_C_FadeOut");
static_assert(offsetof(BP_EnemyHPBar_C_FadeOut, PlayAnim) == 0x000000, "Member 'BP_EnemyHPBar_C_FadeOut::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_FadeOut, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_EnemyHPBar_C_FadeOut::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.Init
// 0x0008 (0x0008 - 0x0000)
struct BP_EnemyHPBar_C_Init final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyHPBar_C_Init) == 0x000008, "Wrong alignment on BP_EnemyHPBar_C_Init");
static_assert(sizeof(BP_EnemyHPBar_C_Init) == 0x000008, "Wrong size on BP_EnemyHPBar_C_Init");
static_assert(offsetof(BP_EnemyHPBar_C_Init, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'BP_EnemyHPBar_C_Init::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.ToggleHPBarOpacity
// 0x0001 (0x0001 - 0x0000)
struct BP_EnemyHPBar_C_ToggleHPBarOpacity final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyHPBar_C_ToggleHPBarOpacity) == 0x000001, "Wrong alignment on BP_EnemyHPBar_C_ToggleHPBarOpacity");
static_assert(sizeof(BP_EnemyHPBar_C_ToggleHPBarOpacity) == 0x000001, "Wrong size on BP_EnemyHPBar_C_ToggleHPBarOpacity");
static_assert(offsetof(BP_EnemyHPBar_C_ToggleHPBarOpacity, Visible) == 0x000000, "Member 'BP_EnemyHPBar_C_ToggleHPBarOpacity::Visible' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.Toggle Elite
// 0x00E8 (0x00E8 - 0x0000)
struct BP_EnemyHPBar_C_Toggle_Elite final
{
public:
	bool                                          InIsElite;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_4;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_6;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_8;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_10;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_11;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_12;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_13;                            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_10;                             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_14;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_15;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_11;                             // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_16;                            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_4;                           // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                             K2Node_Select_Default_5;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_6;                           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_7;                           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_8;                           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_9;                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_10;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_11;                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyHPBar_C_Toggle_Elite) == 0x000008, "Wrong alignment on BP_EnemyHPBar_C_Toggle_Elite");
static_assert(sizeof(BP_EnemyHPBar_C_Toggle_Elite) == 0x0000E8, "Wrong size on BP_EnemyHPBar_C_Toggle_Elite");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, InIsElite) == 0x000000, "Member 'BP_EnemyHPBar_C_Toggle_Elite::InIsElite' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable) == 0x000001, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_object_Variable) == 0x000008, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_object_Variable_1) == 0x000010, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable_1) == 0x000018, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable) == 0x00001C, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_1) == 0x000020, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable_2) == 0x000024, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_2) == 0x000028, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_3) == 0x00002C, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable_3) == 0x000030, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_4) == 0x000034, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_5) == 0x000038, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable_4) == 0x00003C, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_6) == 0x000040, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_7) == 0x000044, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable_5) == 0x000048, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_object_Variable_2) == 0x000050, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable_6) == 0x000058, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_8) == 0x00005C, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_9) == 0x000060, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable_7) == 0x000064, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_10) == 0x000068, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable_8) == 0x00006C, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_11) == 0x000070, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_12) == 0x000074, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable_9) == 0x000078, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_13) == 0x00007C, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable_10) == 0x000080, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_14) == 0x000084, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_15) == 0x000088, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_bool_Variable_11) == 0x00008C, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, Temp_float_Variable_16) == 0x000090, "Member 'BP_EnemyHPBar_C_Toggle_Elite::Temp_float_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default) == 0x000098, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default_1) == 0x0000A0, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default_2) == 0x0000A4, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default_3) == 0x0000A8, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default_4) == 0x0000AC, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x0000B0, "Member 'BP_EnemyHPBar_C_Toggle_Elite::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_MakeStruct_Margin) == 0x0000B8, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default_5) == 0x0000C8, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default_6) == 0x0000D0, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default_7) == 0x0000D4, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default_8) == 0x0000D8, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default_9) == 0x0000DC, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default_10) == 0x0000E0, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(BP_EnemyHPBar_C_Toggle_Elite, K2Node_Select_Default_11) == 0x0000E4, "Member 'BP_EnemyHPBar_C_Toggle_Elite::K2Node_Select_Default_11' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.ToggleSmall
// 0x0001 (0x0001 - 0x0000)
struct BP_EnemyHPBar_C_ToggleSmall final
{
public:
	bool                                          InIsSmall;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyHPBar_C_ToggleSmall) == 0x000001, "Wrong alignment on BP_EnemyHPBar_C_ToggleSmall");
static_assert(sizeof(BP_EnemyHPBar_C_ToggleSmall) == 0x000001, "Wrong size on BP_EnemyHPBar_C_ToggleSmall");
static_assert(offsetof(BP_EnemyHPBar_C_ToggleSmall, InIsSmall) == 0x000000, "Member 'BP_EnemyHPBar_C_ToggleSmall::InIsSmall' has a wrong offset!");

// Function BP_EnemyHPBar.BP_EnemyHPBar_C.OnPaint
// 0x0030 (0x0030 - 0x0000)
struct BP_EnemyHPBar_C_OnPaint final
{
public:
	struct FPaintContext                          Context;                                           // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(BP_EnemyHPBar_C_OnPaint) == 0x000008, "Wrong alignment on BP_EnemyHPBar_C_OnPaint");
static_assert(sizeof(BP_EnemyHPBar_C_OnPaint) == 0x000030, "Wrong size on BP_EnemyHPBar_C_OnPaint");
static_assert(offsetof(BP_EnemyHPBar_C_OnPaint, Context) == 0x000000, "Member 'BP_EnemyHPBar_C_OnPaint::Context' has a wrong offset!");

}

