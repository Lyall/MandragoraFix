#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EntropyRiftPortal_FrontDoor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_FrontDoorActorBase_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EntropyRiftPortal_FrontDoor.BP_EntropyRiftPortal_FrontDoor_C
// 0x01D0 (0x0C40 - 0x0A70)
class ABP_EntropyRiftPortal_FrontDoor_C final : public ABP_FrontDoorActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EntropyRiftPortal_FrontDoor_C;   // 0x0A70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0A78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight_04;                                     // 0x0A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight_03;                                     // 0x0A88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight_02;                                     // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight_01;                                     // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_RiftPortal_Smoke;                               // 0x0AA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_RiftPortal_Idle;                                // 0x0AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RiftPlaneDark;                                     // 0x0AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GroundPlane;                                       // 0x0AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_RiftPortal_Main;                                // 0x0AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RiftPlane;                                         // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_Fade_00626BBA4A2FBDC835BCB9B5C10D0A01;  // 0x0AD0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_Value_00626BBA4A2FBDC835BCB9B5C10D0A01; // 0x0AD4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_00626BBA4A2FBDC835BCB9B5C10D0A01; // 0x0AD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD9[0x7];                                      // 0x0AD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_Fade_860118D04B73A3AF7392E4B429E26F76;  // 0x0AE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_Value_860118D04B73A3AF7392E4B429E26F76; // 0x0AEC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_860118D04B73A3AF7392E4B429E26F76; // 0x0AF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF1[0x7];                                      // 0x0AF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightControl_Value_F6A0089148AFD3C042013AA10C7631B3; // 0x0B00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LightControl__Direction_F6A0089148AFD3C042013AA10C7631B3; // 0x0B04(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B05[0x3];                                      // 0x0B05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LightControl;                                      // 0x0B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Niagara_Control_Value_A304C46145D0678A62D76FB9E6CEEE0A; // 0x0B10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Niagara_Control__Direction_A304C46145D0678A62D76FB9E6CEEE0A; // 0x0B14(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B15[0x3];                                      // 0x0B15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Niagara_Control;                                   // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RiftPlane_Control_Longer_E6631E394C6B17E2008EBEA07D75E116; // 0x0B20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RiftPlane_Control_Value_E6631E394C6B17E2008EBEA07D75E116; // 0x0B24(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RiftPlane_Control__Direction_E6631E394C6B17E2008EBEA07D75E116; // 0x0B28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B29[0x7];                                      // 0x0B29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RiftPlane_Control;                                 // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RiftPlaneDark_Control_Value_39F7310F4874748F882520A70CD2B8C7; // 0x0B38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RiftPlaneDark_Control__Direction_39F7310F4874748F882520A70CD2B8C7; // 0x0B3C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3D[0x3];                                      // 0x0B3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RiftPlaneDark_Control;                             // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LightshaftRotation;                                // 0x0B48(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LightEnable;                                       // 0x0B54(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B55[0x3];                                      // 0x0B55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LightPosition;                                     // 0x0B58(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensity;                                    // 0x0B64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 LightColor;                                        // 0x0B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightRadius;                                       // 0x0B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PermanentPortal;                                   // 0x0B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StayIdleWhenClosed;                                // 0x0B71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B72[0x6];                                      // 0x0B72(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               RiftPlaneMaterial;                                 // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RiftPlaneDarkMaterial;                             // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               BackgroundTexture;                                 // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightbeamColor;                                    // 0x0B90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TintColor;                                         // 0x0BA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GroundLevel;                                       // 0x0BB0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0BBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Light01_Enabled;                                   // 0x0BC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BC1[0x3];                                      // 0x0BC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Light01_Intensity;                                 // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Light01_Color;                                     // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light01_Radius;                                    // 0x0BCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Light01_Position;                                  // 0x0BD0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Light02_Enabled;                                   // 0x0BDC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BDD[0x3];                                      // 0x0BDD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Light02_Intensity;                                 // 0x0BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Light02_Color;                                     // 0x0BE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light02_Radius;                                    // 0x0BE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Light02_Position;                                  // 0x0BEC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Light03_Enabled;                                   // 0x0BF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF9[0x3];                                      // 0x0BF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Light03_Intensity;                                 // 0x0BFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Light03_Color;                                     // 0x0C00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light03_Radius;                                    // 0x0C04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Light03_Position;                                  // 0x0C08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Light04_Enabled;                                   // 0x0C14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C15[0x3];                                      // 0x0C15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Light04_Intensity;                                 // 0x0C18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Light04_Color;                                     // 0x0C1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light04_Radius;                                    // 0x0C20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Light04_Position;                                  // 0x0C24(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PostProcessMaterial;                               // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasOpened;                                         // 0x0C38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)

public:
	void InstantOpen();
	void UserConstructionScript();
	void Niagara_Control__FinishedFunc();
	void Niagara_Control__UpdateFunc();
	void LightControl__FinishedFunc();
	void LightControl__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void RiftPlaneDark_Control__FinishedFunc();
	void RiftPlaneDark_Control__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void Timeline_2__UpdateFunc();
	void RiftPlane_Control__FinishedFunc();
	void RiftPlane_Control__UpdateFunc();
	void ClosePortal();
	void OpenPortal();
	void ReceiveBeginPlay();
	void BPOnClosed();
	void BPPlayPortalVfxBeforeTeleport();
	void BPOnOpened();
	void BPPostSaveLoaded();
	void ExecuteUbergraph_BP_EntropyRiftPortal_FrontDoor(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EntropyRiftPortal_FrontDoor_C">();
	}
	static class ABP_EntropyRiftPortal_FrontDoor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EntropyRiftPortal_FrontDoor_C>();
	}
};
static_assert(alignof(ABP_EntropyRiftPortal_FrontDoor_C) == 0x000008, "Wrong alignment on ABP_EntropyRiftPortal_FrontDoor_C");
static_assert(sizeof(ABP_EntropyRiftPortal_FrontDoor_C) == 0x000C40, "Wrong size on ABP_EntropyRiftPortal_FrontDoor_C");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, UberGraphFrame_BP_EntropyRiftPortal_FrontDoor_C) == 0x000A70, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::UberGraphFrame_BP_EntropyRiftPortal_FrontDoor_C' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, PostProcess) == 0x000A78, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, PointLight_04) == 0x000A80, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::PointLight_04' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, PointLight_03) == 0x000A88, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::PointLight_03' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, PointLight_02) == 0x000A90, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::PointLight_02' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, PointLight_01) == 0x000A98, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::PointLight_01' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, NS_RiftPortal_Smoke) == 0x000AA0, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::NS_RiftPortal_Smoke' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, NS_RiftPortal_Idle) == 0x000AA8, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::NS_RiftPortal_Idle' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, RiftPlaneDark) == 0x000AB0, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::RiftPlaneDark' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, GroundPlane) == 0x000AB8, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::GroundPlane' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, NS_RiftPortal_Main) == 0x000AC0, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::NS_RiftPortal_Main' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, RiftPlane) == 0x000AC8, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::RiftPlane' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Timeline_2_Fade_00626BBA4A2FBDC835BCB9B5C10D0A01) == 0x000AD0, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Timeline_2_Fade_00626BBA4A2FBDC835BCB9B5C10D0A01' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Timeline_2_Value_00626BBA4A2FBDC835BCB9B5C10D0A01) == 0x000AD4, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Timeline_2_Value_00626BBA4A2FBDC835BCB9B5C10D0A01' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Timeline_2__Direction_00626BBA4A2FBDC835BCB9B5C10D0A01) == 0x000AD8, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Timeline_2__Direction_00626BBA4A2FBDC835BCB9B5C10D0A01' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Timeline_2) == 0x000AE0, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Timeline_1_Fade_860118D04B73A3AF7392E4B429E26F76) == 0x000AE8, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Timeline_1_Fade_860118D04B73A3AF7392E4B429E26F76' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Timeline_1_Value_860118D04B73A3AF7392E4B429E26F76) == 0x000AEC, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Timeline_1_Value_860118D04B73A3AF7392E4B429E26F76' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Timeline_1__Direction_860118D04B73A3AF7392E4B429E26F76) == 0x000AF0, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Timeline_1__Direction_860118D04B73A3AF7392E4B429E26F76' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Timeline_1) == 0x000AF8, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, LightControl_Value_F6A0089148AFD3C042013AA10C7631B3) == 0x000B00, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::LightControl_Value_F6A0089148AFD3C042013AA10C7631B3' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, LightControl__Direction_F6A0089148AFD3C042013AA10C7631B3) == 0x000B04, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::LightControl__Direction_F6A0089148AFD3C042013AA10C7631B3' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, LightControl) == 0x000B08, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::LightControl' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Niagara_Control_Value_A304C46145D0678A62D76FB9E6CEEE0A) == 0x000B10, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Niagara_Control_Value_A304C46145D0678A62D76FB9E6CEEE0A' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Niagara_Control__Direction_A304C46145D0678A62D76FB9E6CEEE0A) == 0x000B14, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Niagara_Control__Direction_A304C46145D0678A62D76FB9E6CEEE0A' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Niagara_Control) == 0x000B18, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Niagara_Control' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, RiftPlane_Control_Longer_E6631E394C6B17E2008EBEA07D75E116) == 0x000B20, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::RiftPlane_Control_Longer_E6631E394C6B17E2008EBEA07D75E116' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, RiftPlane_Control_Value_E6631E394C6B17E2008EBEA07D75E116) == 0x000B24, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::RiftPlane_Control_Value_E6631E394C6B17E2008EBEA07D75E116' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, RiftPlane_Control__Direction_E6631E394C6B17E2008EBEA07D75E116) == 0x000B28, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::RiftPlane_Control__Direction_E6631E394C6B17E2008EBEA07D75E116' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, RiftPlane_Control) == 0x000B30, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::RiftPlane_Control' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, RiftPlaneDark_Control_Value_39F7310F4874748F882520A70CD2B8C7) == 0x000B38, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::RiftPlaneDark_Control_Value_39F7310F4874748F882520A70CD2B8C7' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, RiftPlaneDark_Control__Direction_39F7310F4874748F882520A70CD2B8C7) == 0x000B3C, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::RiftPlaneDark_Control__Direction_39F7310F4874748F882520A70CD2B8C7' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, RiftPlaneDark_Control) == 0x000B40, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::RiftPlaneDark_Control' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, LightshaftRotation) == 0x000B48, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::LightshaftRotation' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, LightEnable) == 0x000B54, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::LightEnable' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, LightPosition) == 0x000B58, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::LightPosition' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, LightIntensity) == 0x000B64, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::LightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, LightColor) == 0x000B68, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, LightRadius) == 0x000B6C, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::LightRadius' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, PermanentPortal) == 0x000B70, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::PermanentPortal' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, StayIdleWhenClosed) == 0x000B71, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::StayIdleWhenClosed' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, RiftPlaneMaterial) == 0x000B78, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::RiftPlaneMaterial' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, RiftPlaneDarkMaterial) == 0x000B80, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::RiftPlaneDarkMaterial' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, BackgroundTexture) == 0x000B88, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::BackgroundTexture' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, LightbeamColor) == 0x000B90, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::LightbeamColor' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, TintColor) == 0x000BA0, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::TintColor' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, GroundLevel) == 0x000BB0, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::GroundLevel' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Radius) == 0x000BBC, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light01_Enabled) == 0x000BC0, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light01_Enabled' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light01_Intensity) == 0x000BC4, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light01_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light01_Color) == 0x000BC8, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light01_Color' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light01_Radius) == 0x000BCC, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light01_Radius' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light01_Position) == 0x000BD0, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light01_Position' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light02_Enabled) == 0x000BDC, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light02_Enabled' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light02_Intensity) == 0x000BE0, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light02_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light02_Color) == 0x000BE4, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light02_Color' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light02_Radius) == 0x000BE8, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light02_Radius' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light02_Position) == 0x000BEC, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light02_Position' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light03_Enabled) == 0x000BF8, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light03_Enabled' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light03_Intensity) == 0x000BFC, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light03_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light03_Color) == 0x000C00, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light03_Color' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light03_Radius) == 0x000C04, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light03_Radius' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light03_Position) == 0x000C08, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light03_Position' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light04_Enabled) == 0x000C14, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light04_Enabled' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light04_Intensity) == 0x000C18, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light04_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light04_Color) == 0x000C1C, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light04_Color' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light04_Radius) == 0x000C20, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light04_Radius' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, Light04_Position) == 0x000C24, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::Light04_Position' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, PostProcessMaterial) == 0x000C30, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::PostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABP_EntropyRiftPortal_FrontDoor_C, WasOpened) == 0x000C38, "Member 'ABP_EntropyRiftPortal_FrontDoor_C::WasOpened' has a wrong offset!");

}

