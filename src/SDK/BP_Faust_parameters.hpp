#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Faust

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_Faust.BP_Faust_C.BPShowMiniMapIcon
// 0x0002 (0x0002 - 0x0000)
struct BP_Faust_C_BPShowMiniMapIcon final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGlobalBool_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Faust_C_BPShowMiniMapIcon) == 0x000001, "Wrong alignment on BP_Faust_C_BPShowMiniMapIcon");
static_assert(sizeof(BP_Faust_C_BPShowMiniMapIcon) == 0x000002, "Wrong size on BP_Faust_C_BPShowMiniMapIcon");
static_assert(offsetof(BP_Faust_C_BPShowMiniMapIcon, Result) == 0x000000, "Member 'BP_Faust_C_BPShowMiniMapIcon::Result' has a wrong offset!");
static_assert(offsetof(BP_Faust_C_BPShowMiniMapIcon, CallFunc_GetGlobalBool_ReturnValue) == 0x000001, "Member 'BP_Faust_C_BPShowMiniMapIcon::CallFunc_GetGlobalBool_ReturnValue' has a wrong offset!");

// Function BP_Faust.BP_Faust_C.VisualVolumeEnter
// 0x0008 (0x0008 - 0x0000)
struct BP_Faust_C_VisualVolumeEnter final
{
public:
	class ALevelVisualVolume*                     Volume;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Faust_C_VisualVolumeEnter) == 0x000008, "Wrong alignment on BP_Faust_C_VisualVolumeEnter");
static_assert(sizeof(BP_Faust_C_VisualVolumeEnter) == 0x000008, "Wrong size on BP_Faust_C_VisualVolumeEnter");
static_assert(offsetof(BP_Faust_C_VisualVolumeEnter, Volume) == 0x000000, "Member 'BP_Faust_C_VisualVolumeEnter::Volume' has a wrong offset!");

// Function BP_Faust.BP_Faust_C.ExecuteUbergraph_BP_Faust
// 0x0048 (0x0048 - 0x0000)
struct BP_Faust_C_ExecuteUbergraph_BP_Faust final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInCaravan_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ALevelVisualVolume* Volume)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class AMandragoraGameMode*                    CallFunc_GetGameMode_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALevelVisualVolume*                     K2Node_CustomEvent_Volume;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Cook_Anim_C*                        K2Node_DynamicCast_AsBP_Cook_Anim;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Faust_C_ExecuteUbergraph_BP_Faust) == 0x000008, "Wrong alignment on BP_Faust_C_ExecuteUbergraph_BP_Faust");
static_assert(sizeof(BP_Faust_C_ExecuteUbergraph_BP_Faust) == 0x000048, "Wrong size on BP_Faust_C_ExecuteUbergraph_BP_Faust");
static_assert(offsetof(BP_Faust_C_ExecuteUbergraph_BP_Faust, EntryPoint) == 0x000000, "Member 'BP_Faust_C_ExecuteUbergraph_BP_Faust::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Faust_C_ExecuteUbergraph_BP_Faust, CallFunc_IsInCaravan_ReturnValue) == 0x000004, "Member 'BP_Faust_C_ExecuteUbergraph_BP_Faust::CallFunc_IsInCaravan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Faust_C_ExecuteUbergraph_BP_Faust, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_Faust_C_ExecuteUbergraph_BP_Faust::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Faust_C_ExecuteUbergraph_BP_Faust, CallFunc_GetGameMode_ReturnValue) == 0x000018, "Member 'BP_Faust_C_ExecuteUbergraph_BP_Faust::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Faust_C_ExecuteUbergraph_BP_Faust, K2Node_CustomEvent_Volume) == 0x000020, "Member 'BP_Faust_C_ExecuteUbergraph_BP_Faust::K2Node_CustomEvent_Volume' has a wrong offset!");
static_assert(offsetof(BP_Faust_C_ExecuteUbergraph_BP_Faust, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000028, "Member 'BP_Faust_C_ExecuteUbergraph_BP_Faust::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Faust_C_ExecuteUbergraph_BP_Faust, CallFunc_GetAnimInstance_ReturnValue) == 0x000030, "Member 'BP_Faust_C_ExecuteUbergraph_BP_Faust::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Faust_C_ExecuteUbergraph_BP_Faust, K2Node_DynamicCast_AsBP_Cook_Anim) == 0x000038, "Member 'BP_Faust_C_ExecuteUbergraph_BP_Faust::K2Node_DynamicCast_AsBP_Cook_Anim' has a wrong offset!");
static_assert(offsetof(BP_Faust_C_ExecuteUbergraph_BP_Faust, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_Faust_C_ExecuteUbergraph_BP_Faust::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

