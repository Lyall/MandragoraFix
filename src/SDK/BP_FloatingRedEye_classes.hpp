#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FloatingRedEye

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_SplineMoveEyeBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FloatingRedEye.BP_FloatingRedEye_C
// 0x0020 (0x1B30 - 0x1B10)
class ABP_FloatingRedEye_C final : public ABP_SplineMoveEyeBase_C
{
public:
	uint8                                         Pad_1B01[0x7];                                     // 0x1B01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FloatingRedEye_C;                // 0x1B08(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        VFX;                                               // 0x1B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x1B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                BeamBox;                                           // 0x1B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SavedSpeed;                                        // 0x1B28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FloatingRedEye(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void BPPostBeginPlay();
	void EventOnCustomEvent_Event_0(class FName CustomName);
	void GetBeamLength(float* Length);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FloatingRedEye_C">();
	}
	static class ABP_FloatingRedEye_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FloatingRedEye_C>();
	}
};
static_assert(alignof(ABP_FloatingRedEye_C) == 0x000010, "Wrong alignment on ABP_FloatingRedEye_C");
static_assert(sizeof(ABP_FloatingRedEye_C) == 0x001B30, "Wrong size on ABP_FloatingRedEye_C");
static_assert(offsetof(ABP_FloatingRedEye_C, UberGraphFrame_BP_FloatingRedEye_C) == 0x001B08, "Member 'ABP_FloatingRedEye_C::UberGraphFrame_BP_FloatingRedEye_C' has a wrong offset!");
static_assert(offsetof(ABP_FloatingRedEye_C, VFX) == 0x001B10, "Member 'ABP_FloatingRedEye_C::VFX' has a wrong offset!");
static_assert(offsetof(ABP_FloatingRedEye_C, Arrow1) == 0x001B18, "Member 'ABP_FloatingRedEye_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_FloatingRedEye_C, BeamBox) == 0x001B20, "Member 'ABP_FloatingRedEye_C::BeamBox' has a wrong offset!");
static_assert(offsetof(ABP_FloatingRedEye_C, SavedSpeed) == 0x001B28, "Member 'ABP_FloatingRedEye_C::SavedSpeed' has a wrong offset!");

}

