#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FloatingRedEye

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_FloatingRedEye.BP_FloatingRedEye_C.ExecuteUbergraph_BP_FloatingRedEye
// 0x00E8 (0x00E8 - 0x0000)
struct BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName CustomName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityController*                     CallFunc_GetAbilityController_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityBase*                           CallFunc_BPGetAbilityByName_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_CustomName;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBeamLength_Length;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0060(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye) == 0x000008, "Wrong alignment on BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye");
static_assert(sizeof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye) == 0x0000E8, "Wrong size on BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, EntryPoint) == 0x000000, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, CallFunc_GetAbilityController_ReturnValue) == 0x000018, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::CallFunc_GetAbilityController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, CallFunc_BPGetAbilityByName_ReturnValue) == 0x000020, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::CallFunc_BPGetAbilityByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, K2Node_CustomEvent_CustomName) == 0x000028, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::K2Node_CustomEvent_CustomName' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000030, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x000031, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, K2Node_Event_DeltaSeconds) == 0x000034, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, CallFunc_GetBeamLength_Length) == 0x000038, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::CallFunc_GetBeamLength_Length' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, CallFunc_Add_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, CallFunc_MakeVector_ReturnValue_1) == 0x000054, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000060, "Member 'BP_FloatingRedEye_C_ExecuteUbergraph_BP_FloatingRedEye::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function BP_FloatingRedEye.BP_FloatingRedEye_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_FloatingRedEye_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FloatingRedEye_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_FloatingRedEye_C_ReceiveTick");
static_assert(sizeof(BP_FloatingRedEye_C_ReceiveTick) == 0x000004, "Wrong size on BP_FloatingRedEye_C_ReceiveTick");
static_assert(offsetof(BP_FloatingRedEye_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_FloatingRedEye_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_FloatingRedEye.BP_FloatingRedEye_C.EventOnCustomEvent_Event_0
// 0x0008 (0x0008 - 0x0000)
struct BP_FloatingRedEye_C_EventOnCustomEvent_Event_0 final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FloatingRedEye_C_EventOnCustomEvent_Event_0) == 0x000004, "Wrong alignment on BP_FloatingRedEye_C_EventOnCustomEvent_Event_0");
static_assert(sizeof(BP_FloatingRedEye_C_EventOnCustomEvent_Event_0) == 0x000008, "Wrong size on BP_FloatingRedEye_C_EventOnCustomEvent_Event_0");
static_assert(offsetof(BP_FloatingRedEye_C_EventOnCustomEvent_Event_0, CustomName) == 0x000000, "Member 'BP_FloatingRedEye_C_EventOnCustomEvent_Event_0::CustomName' has a wrong offset!");

// Function BP_FloatingRedEye.BP_FloatingRedEye_C.GetBeamLength
// 0x01C0 (0x01C0 - 0x0000)
struct BP_FloatingRedEye_C_GetBeamLength final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0058(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMultiForObjects_OutHits;       // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMultiForObjects_ReturnValue;   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemyCharacter*                        K2Node_DynamicCast_AsEnemy_Character;              // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FloatingRedEye_C_GetBeamLength) == 0x000008, "Wrong alignment on BP_FloatingRedEye_C_GetBeamLength");
static_assert(sizeof(BP_FloatingRedEye_C_GetBeamLength) == 0x0001C0, "Wrong size on BP_FloatingRedEye_C_GetBeamLength");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, Length) == 0x000000, "Member 'BP_FloatingRedEye_C_GetBeamLength::Length' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_FloatingRedEye_C_GetBeamLength::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_FloatingRedEye_C_GetBeamLength::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_GetForwardVector_ReturnValue) == 0x000010, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, K2Node_MakeArray_Array) == 0x000020, "Member 'BP_FloatingRedEye_C_GetBeamLength::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000030, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00003C, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, K2Node_MakeArray_Array_1) == 0x000058, "Member 'BP_FloatingRedEye_C_GetBeamLength::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_Add_VectorVector_ReturnValue) == 0x000068, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000074, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_SphereTraceMultiForObjects_OutHits) == 0x000080, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_SphereTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_SphereTraceMultiForObjects_ReturnValue) == 0x000090, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_SphereTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_Array_Length_ReturnValue) == 0x000094, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_Array_Get_Item) == 0x000098, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_Less_IntInt_ReturnValue) == 0x000120, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_bBlockingHit) == 0x000121, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_bInitialOverlap) == 0x000122, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_Time) == 0x000124, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_Distance) == 0x000128, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_Location) == 0x00012C, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_ImpactPoint) == 0x000138, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_Normal) == 0x000144, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_ImpactNormal) == 0x000150, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_PhysMat) == 0x000160, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_HitActor) == 0x000168, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_HitComponent) == 0x000170, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_HitBoneName) == 0x000178, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_HitItem) == 0x000180, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_ElementIndex) == 0x000184, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_FaceIndex) == 0x000188, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_TraceStart) == 0x00018C, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_BreakHitResult_TraceEnd) == 0x000198, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, K2Node_DynamicCast_AsEnemy_Character) == 0x0001A8, "Member 'BP_FloatingRedEye_C_GetBeamLength::K2Node_DynamicCast_AsEnemy_Character' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, K2Node_DynamicCast_bSuccess) == 0x0001B0, "Member 'BP_FloatingRedEye_C_GetBeamLength::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_Vector_Distance_ReturnValue) == 0x0001B4, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FloatingRedEye_C_GetBeamLength, CallFunc_FClamp_ReturnValue) == 0x0001B8, "Member 'BP_FloatingRedEye_C_GetBeamLength::CallFunc_FClamp_ReturnValue' has a wrong offset!");

}

