#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GeneralLightBrandStatusEffectVisual

#include "Basic.hpp"

#include "BP_GeneralLightBrandStatusEffectVisual_classes.hpp"
#include "BP_GeneralLightBrandStatusEffectVisual_parameters.hpp"


namespace SDK
{

// Function BP_GeneralLightBrandStatusEffectVisual.BP_GeneralLightBrandStatusEffectVisual_C.ExecuteUbergraph_BP_GeneralLightBrandStatusEffectVisual
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GeneralLightBrandStatusEffectVisual_C::ExecuteUbergraph_BP_GeneralLightBrandStatusEffectVisual(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GeneralLightBrandStatusEffectVisual_C", "ExecuteUbergraph_BP_GeneralLightBrandStatusEffectVisual");

	Params::BP_GeneralLightBrandStatusEffectVisual_C_ExecuteUbergraph_BP_GeneralLightBrandStatusEffectVisual Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GeneralLightBrandStatusEffectVisual.BP_GeneralLightBrandStatusEffectVisual_C.BPOnEnd
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_GeneralLightBrandStatusEffectVisual_C::BPOnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GeneralLightBrandStatusEffectVisual_C", "BPOnEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GeneralLightBrandStatusEffectVisual.BP_GeneralLightBrandStatusEffectVisual_C.BPOnStart
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_GeneralLightBrandStatusEffectVisual_C::BPOnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GeneralLightBrandStatusEffectVisual_C", "BPOnStart");

	UObject::ProcessEvent(Func, nullptr);
}

}

