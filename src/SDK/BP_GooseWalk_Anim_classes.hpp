#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GooseWalk_Anim

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "man_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass BP_GooseWalk_Anim.BP_GooseWalk_Anim_C
// 0x06D0 (0x0D70 - 0x06A0)
class UBP_GooseWalk_Anim_C final : public UAnimInstanceBase
{
public:
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x06A8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x06D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0700(0x0028)()
	struct FAnimNode_BlendListByInt               AnimGraphNode_BlendListByInt_1;                    // 0x0728(0x00A8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x07D0(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0850(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x08D0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0950(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0980(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0A00(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0A30(0x00B0)()
	struct FAnimNode_BlendListByInt               AnimGraphNode_BlendListByInt;                      // 0x0AE0(0x00A8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0B88(0x0080)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0C08(0x0108)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0D10(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0D30(0x0020)()
	float                                         IdleBridgeStartTime;                               // 0x0D50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IdleBridgeTimer;                                   // 0x0D54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IdleBridgeChance;                                  // 0x0D58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IdleBridgeAnimIndex;                               // 0x0D5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayIdleBridge;                                    // 0x0D60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D61[0x3];                                      // 0x0D61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Translation;                                       // 0x0D64(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_GooseWalk_Anim_AnimGraphNode_TransitionResult_DD9DCF1D457671D1943BA8A12D04A547();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimNotify_OnEnterIdleBridge();
	void AnimNotify_OnLeaveIdleBridge();
	void AnimNotify_WalkAwayEnd();
	void ExecuteUbergraph_BP_GooseWalk_Anim(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GooseWalk_Anim_C">();
	}
	static class UBP_GooseWalk_Anim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GooseWalk_Anim_C>();
	}
};
static_assert(alignof(UBP_GooseWalk_Anim_C) == 0x000010, "Wrong alignment on UBP_GooseWalk_Anim_C");
static_assert(sizeof(UBP_GooseWalk_Anim_C) == 0x000D70, "Wrong size on UBP_GooseWalk_Anim_C");
static_assert(offsetof(UBP_GooseWalk_Anim_C, UberGraphFrame) == 0x0006A0, "Member 'UBP_GooseWalk_Anim_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_Root) == 0x0006A8, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_TransitionResult_1) == 0x0006D8, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_TransitionResult) == 0x000700, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_BlendListByInt_1) == 0x000728, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_BlendListByInt_1' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_SequencePlayer_4) == 0x0007D0, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_SequencePlayer_3) == 0x000850, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_SequencePlayer_2) == 0x0008D0, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_StateResult_1) == 0x000950, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_SequencePlayer_1) == 0x000980, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_StateResult) == 0x000A00, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_StateMachine) == 0x000A30, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_BlendListByInt) == 0x000AE0, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_BlendListByInt' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_SequencePlayer) == 0x000B88, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_ModifyBone) == 0x000C08, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_LocalToComponentSpace) == 0x000D10, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, AnimGraphNode_ComponentToLocalSpace) == 0x000D30, "Member 'UBP_GooseWalk_Anim_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, IdleBridgeStartTime) == 0x000D50, "Member 'UBP_GooseWalk_Anim_C::IdleBridgeStartTime' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, IdleBridgeTimer) == 0x000D54, "Member 'UBP_GooseWalk_Anim_C::IdleBridgeTimer' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, IdleBridgeChance) == 0x000D58, "Member 'UBP_GooseWalk_Anim_C::IdleBridgeChance' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, IdleBridgeAnimIndex) == 0x000D5C, "Member 'UBP_GooseWalk_Anim_C::IdleBridgeAnimIndex' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, PlayIdleBridge) == 0x000D60, "Member 'UBP_GooseWalk_Anim_C::PlayIdleBridge' has a wrong offset!");
static_assert(offsetof(UBP_GooseWalk_Anim_C, Translation) == 0x000D64, "Member 'UBP_GooseWalk_Anim_C::Translation' has a wrong offset!");

}

