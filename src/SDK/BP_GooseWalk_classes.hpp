#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GooseWalk

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GooseWalk.BP_GooseWalk_C
// 0x0028 (0x0800 - 0x07D8)
class ABP_GooseWalk_C final : public AActorBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak;                                                // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GooseWalk_Anim_C*                   Goose_Anim;                                        // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Idle_Bridge_Chance;                                // 0x07F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Idle_Bridge_Start_Timer;                           // 0x07FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GooseWalk(int32 EntryPoint);
	void WalkAway_Trigger(float Delay);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GooseWalk_C">();
	}
	static class ABP_GooseWalk_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GooseWalk_C>();
	}
};
static_assert(alignof(ABP_GooseWalk_C) == 0x000008, "Wrong alignment on ABP_GooseWalk_C");
static_assert(sizeof(ABP_GooseWalk_C) == 0x000800, "Wrong size on ABP_GooseWalk_C");
static_assert(offsetof(ABP_GooseWalk_C, UberGraphFrame) == 0x0007D8, "Member 'ABP_GooseWalk_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GooseWalk_C, Ak) == 0x0007E0, "Member 'ABP_GooseWalk_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_GooseWalk_C, SkeletalMesh) == 0x0007E8, "Member 'ABP_GooseWalk_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_GooseWalk_C, Goose_Anim) == 0x0007F0, "Member 'ABP_GooseWalk_C::Goose_Anim' has a wrong offset!");
static_assert(offsetof(ABP_GooseWalk_C, Idle_Bridge_Chance) == 0x0007F8, "Member 'ABP_GooseWalk_C::Idle_Bridge_Chance' has a wrong offset!");
static_assert(offsetof(ABP_GooseWalk_C, Idle_Bridge_Start_Timer) == 0x0007FC, "Member 'ABP_GooseWalk_C::Idle_Bridge_Start_Timer' has a wrong offset!");

}

