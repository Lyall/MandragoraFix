#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Gutterrat

#include "Basic.hpp"

#include "man_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Gutterrat.BP_Gutterrat_C
// 0x00A0 (0x1B60 - 0x1AC0)
class ABP_Gutterrat_C final : public AEnemyCharacter
{
public:
	class USurfaceEffectComponent*                RightFootEffect;                                   // 0x1AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USurfaceEffectComponent*                LeftFootEffect;                                    // 0x1AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USurfaceEffectComponent*                RightFootEffectBack;                               // 0x1AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USurfaceEffectComponent*                LeftFootEffectBack;                                // 0x1AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           HurtCapsule4;                                      // 0x1AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           HurtCapsule3;                                      // 0x1AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           HurtCapsule1;                                      // 0x1AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           HurtCapsule2;                                      // 0x1AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroomComponent*                        Groom;                                             // 0x1B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ParticleTest2_C*                    PS_Living;                                         // 0x1B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SpeechBubbleComponent_C*            BP_SpeechBubbleComponent;                          // 0x1B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_HPBarWidgetComponent_C*             BP_HPBarWidgetComponent;                           // 0x1B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CollisionBox;                                      // 0x1B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                HitBox;                                            // 0x1B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HeadIdlePose;                                      // 0x1B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BigHeadPose;                                       // 0x1B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Head;                                              // 0x1B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           HurtCapsule;                                       // 0x1B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FadeSpeed;                                         // 0x1B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeValue;                                         // 0x1B54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VoidRatMode;                                       // 0x1B58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)

public:
	void SetVoidRatVariable();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Gutterrat_C">();
	}
	static class ABP_Gutterrat_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Gutterrat_C>();
	}
};
static_assert(alignof(ABP_Gutterrat_C) == 0x000010, "Wrong alignment on ABP_Gutterrat_C");
static_assert(sizeof(ABP_Gutterrat_C) == 0x001B60, "Wrong size on ABP_Gutterrat_C");
static_assert(offsetof(ABP_Gutterrat_C, RightFootEffect) == 0x001AC0, "Member 'ABP_Gutterrat_C::RightFootEffect' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, LeftFootEffect) == 0x001AC8, "Member 'ABP_Gutterrat_C::LeftFootEffect' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, RightFootEffectBack) == 0x001AD0, "Member 'ABP_Gutterrat_C::RightFootEffectBack' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, LeftFootEffectBack) == 0x001AD8, "Member 'ABP_Gutterrat_C::LeftFootEffectBack' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, HurtCapsule4) == 0x001AE0, "Member 'ABP_Gutterrat_C::HurtCapsule4' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, HurtCapsule3) == 0x001AE8, "Member 'ABP_Gutterrat_C::HurtCapsule3' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, HurtCapsule1) == 0x001AF0, "Member 'ABP_Gutterrat_C::HurtCapsule1' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, HurtCapsule2) == 0x001AF8, "Member 'ABP_Gutterrat_C::HurtCapsule2' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, Groom) == 0x001B00, "Member 'ABP_Gutterrat_C::Groom' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, PS_Living) == 0x001B08, "Member 'ABP_Gutterrat_C::PS_Living' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, BP_SpeechBubbleComponent) == 0x001B10, "Member 'ABP_Gutterrat_C::BP_SpeechBubbleComponent' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, BP_HPBarWidgetComponent) == 0x001B18, "Member 'ABP_Gutterrat_C::BP_HPBarWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, CollisionBox) == 0x001B20, "Member 'ABP_Gutterrat_C::CollisionBox' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, HitBox) == 0x001B28, "Member 'ABP_Gutterrat_C::HitBox' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, HeadIdlePose) == 0x001B30, "Member 'ABP_Gutterrat_C::HeadIdlePose' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, BigHeadPose) == 0x001B38, "Member 'ABP_Gutterrat_C::BigHeadPose' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, Head) == 0x001B40, "Member 'ABP_Gutterrat_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, HurtCapsule) == 0x001B48, "Member 'ABP_Gutterrat_C::HurtCapsule' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, FadeSpeed) == 0x001B50, "Member 'ABP_Gutterrat_C::FadeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, FadeValue) == 0x001B54, "Member 'ABP_Gutterrat_C::FadeValue' has a wrong offset!");
static_assert(offsetof(ABP_Gutterrat_C, VoidRatMode) == 0x001B58, "Member 'ABP_Gutterrat_C::VoidRatMode' has a wrong offset!");

}

