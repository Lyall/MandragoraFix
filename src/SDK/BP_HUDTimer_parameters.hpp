#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUDTimer

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_HUDTimer.BP_HUDTimer_C.ExecuteUbergraph_BP_HUDTimer
// 0x0078 (0x0078 - 0x0000)
struct BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_InTimerText;                          // 0x0050(0x0018)(ConstParm)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer) == 0x000008, "Wrong alignment on BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer");
static_assert(sizeof(BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer) == 0x000078, "Wrong size on BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer");
static_assert(offsetof(BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer, EntryPoint) == 0x000000, "Member 'BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer, K2Node_Event_AnimDuration_1) == 0x000044, "Member 'BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer, K2Node_Event_AnimDuration) == 0x000048, "Member 'BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer, K2Node_Event_InTimerText) == 0x000050, "Member 'BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer::K2Node_Event_InTimerText' has a wrong offset!");
static_assert(offsetof(BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x000068, "Member 'BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer, CallFunc_PlayAnimation_ReturnValue) == 0x000070, "Member 'BP_HUDTimer_C_ExecuteUbergraph_BP_HUDTimer::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUDTimer.BP_HUDTimer_C.OnSetTimer
// 0x0018 (0x0018 - 0x0000)
struct BP_HUDTimer_C_OnSetTimer final
{
public:
	class FText                                   InTimerText;                                       // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_HUDTimer_C_OnSetTimer) == 0x000008, "Wrong alignment on BP_HUDTimer_C_OnSetTimer");
static_assert(sizeof(BP_HUDTimer_C_OnSetTimer) == 0x000018, "Wrong size on BP_HUDTimer_C_OnSetTimer");
static_assert(offsetof(BP_HUDTimer_C_OnSetTimer, InTimerText) == 0x000000, "Member 'BP_HUDTimer_C_OnSetTimer::InTimerText' has a wrong offset!");

// Function BP_HUDTimer.BP_HUDTimer_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_HUDTimer_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUDTimer_C_OnHide) == 0x000004, "Wrong alignment on BP_HUDTimer_C_OnHide");
static_assert(sizeof(BP_HUDTimer_C_OnHide) == 0x000004, "Wrong size on BP_HUDTimer_C_OnHide");
static_assert(offsetof(BP_HUDTimer_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_HUDTimer_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_HUDTimer.BP_HUDTimer_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_HUDTimer_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUDTimer_C_OnShow) == 0x000004, "Wrong alignment on BP_HUDTimer_C_OnShow");
static_assert(sizeof(BP_HUDTimer_C_OnShow) == 0x000004, "Wrong size on BP_HUDTimer_C_OnShow");
static_assert(offsetof(BP_HUDTimer_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_HUDTimer_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_HUDTimer.BP_HUDTimer_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_HUDTimer_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUDTimer_C_Tick) == 0x000004, "Wrong alignment on BP_HUDTimer_C_Tick");
static_assert(sizeof(BP_HUDTimer_C_Tick) == 0x00003C, "Wrong size on BP_HUDTimer_C_Tick");
static_assert(offsetof(BP_HUDTimer_C_Tick, MyGeometry) == 0x000000, "Member 'BP_HUDTimer_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUDTimer_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_HUDTimer_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_HUDTimer.BP_HUDTimer_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_HUDTimer_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUDTimer_C_PreConstruct) == 0x000001, "Wrong alignment on BP_HUDTimer_C_PreConstruct");
static_assert(sizeof(BP_HUDTimer_C_PreConstruct) == 0x000001, "Wrong size on BP_HUDTimer_C_PreConstruct");
static_assert(offsetof(BP_HUDTimer_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_HUDTimer_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

