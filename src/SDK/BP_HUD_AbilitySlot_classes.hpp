#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUD_AbilitySlot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "man_structs.hpp"
#include "man_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C
// 0x0238 (0x04E0 - 0x02A8)
class UBP_HUD_AbilitySlot_C final : public UHUDAbilitySlotUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ChargeValueChangeAnim;                             // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       RelicUseChargeAnim;                                // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ExecutingAnimExtraSlot;                            // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       RelicFullChargeAnim;                               // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SetChargeCounterAnim;                              // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HideSecondActivationAnim;                          // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ShowSecondActivationAnim;                          // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ExecutingAnim;                                     // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ChanneledPressedAnim;                              // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       UsableTrueAnim;                                    // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SingleUsedPressedAnim;                             // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ExtraEffect;                                       // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 ActiveHighlight;                                   // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Bg;                                                // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ChargeText;                                        // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ComboPointCost;                                    // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ControllerIcon;                                    // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ControllerIconPlusSign;                            // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_InteractButton_Normal_C*            ControllerKey1;                                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_InteractButton_Normal_C*            ControllerKey2;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CooldownWidget;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               CostCaptions;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DurationWidget;                                    // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             EnergyCost;                                        // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ExtraEffectWidget;                                 // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FrameExecuting;                                    // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FrameHighlight;                                    // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FrameSecondActivation;                             // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FrameWidget;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IconWidget;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             RageCost;                                          // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RelicChargeHighlight;                              // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             StaminaCost;                                       // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsEnabled;                                         // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      IconMaterial;                                      // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             IconTexture;                                       // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCooldown;                                       // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cooldown;                                          // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ExtraEffectTimerHandle;                            // 0x03D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ControllerIconOffset;                              // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CostCaptionOffset;                                 // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotType;                                          // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             FrameTexture;                                      // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameActiveTexture;                                // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsChargeCounterVisible;                            // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChargeCounterValue;                                // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FrameHighlightTexture;                             // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameActiveHighlightTexture;                       // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameExtraEffectTexture;                           // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             BgTexture;                                         // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShowControllerIcons;                               // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x0438(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ChargeFull;                                        // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               NewVar_0;                                          // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RELICCHARGE;                                       // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Charge;                                            // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      SecondActivationVFX;                               // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstance*                      RelicChargeVFX;                                    // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameExecutingTexture;                             // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameExecuting_Fire;                               // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FrameExecuting_Order;                              // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FrameExecuting_Chaos;                              // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FrameExecuting_Wyld;                               // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FrameExecuting_Resonance;                          // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FrameExecuting_Default;                            // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      RelicChargeVFX_Fire;                               // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstance*                      RelicChargeVFX_Order;                              // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstance*                      RelicChargeVFX_Chaos;                              // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstance*                      RelicChargeVFX_Wyld;                               // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstance*                      ChargeVFX_Resonance;                               // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstance*                      RelicChargeVFX_Default;                            // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          RelicChargeEnabled;                                // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AbilityChargeEnabled;                              // 0x04D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D2[0x2];                                      // 0x04D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentRelicCharge;                                // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentAbilityCharge;                              // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HUD_AbilitySlot(int32 EntryPoint);
	void OnSetRelicChargePercentage(float RelicChargePercentage);
	void OnShowFullChargeAnim(bool bInShowFullChargeAnim);
	void OnSetAbilityDuration(float Duration);
	void OnSetHitStackNum(int32 ChargePercentage);
	void OnSetAbilityChargePercentage(float ChargePercentage);
	void Construct();
	void OnSetSetChargeCounter(int32 InRemainingChargesNum);
	void OnRefreshAbilityStates(bool bInUsable);
	void OnSetAbilityReactivation(bool bReactivation);
	void OnSetAbilityCost(const class FText& EnergyCost_0, const class FText& RageCost_0, const class FText& ComboPointCost_0, const class FText& StaminaCost_0);
	void OnAbilityReleased(bool bInSingleUsed);
	void OnAbilityPressed(bool bInSingleUsed);
	void OnSetAbilityExecuting(bool bInExecuting);
	void OnSetAbilityExtraEffect(bool bInExtraEffect);
	void OnSetAbilityCooldown(float CooldownRemain);
	void OnSetAbilityUsable(bool bUsable);
	void OnSetAbility(class UAbilityBase* AbilityType, float Cooldown_0, float MaxCooldown_0, EWeaponType RelicType);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void PreConstruct(bool IsDesignTime);
	void Set_Controller();
	void SetEnabled(bool InIsEnabled);
	void SetIcon(class UTexture2D* Icon);
	void Setup(class UAbilityBase* InAbility, float InCooldown, float InMaxCooldown, EWeaponType inRelicType);
	void SetUsable(bool inIsUsable);
	void SetExtraEffect(bool inIsExtraEffect);
	void SetMaxCooldown(float InMaxCooldown);
	void SetCooldown(float InCooldown);
	void SetCost(const class FText& EnergyCost_0, const class FText& RageCost_0, const class FText& ComboPointCost_0, const class FText& StaminaCost_0);
	void PlayExtraEffectAnimation();
	void PlayAbilityPressed(bool InSingleUsed);
	void PlayAbilityReleased(bool InSingleUsed);
	void SetExecuting(bool inIsExecuting);
	void SetOffsets();
	void SetSlotType();
	void SetSecondActivation(bool InIsSecondActivation);
	void ToggleChargeCounter(bool InVisible);
	void SetChargeCounter(int32 InNewValue);
	void SetBrightness(bool InUsable);
	void OnFullRelicCharge();
	void SetRelicCharge(float InRelicCharge);
	void SetMaterials();
	void OnUseRelicCharge();
	void DisableRelicCharge(float InRelicCharge);
	void SetDuration(float inDuration);
	void SetAbilityCharge(float InCharge);
	void DisableAbilityCharge(float InCharge);
	void SetRelicType(EWeaponType inRelicType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HUD_AbilitySlot_C">();
	}
	static class UBP_HUD_AbilitySlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_HUD_AbilitySlot_C>();
	}
};
static_assert(alignof(UBP_HUD_AbilitySlot_C) == 0x000008, "Wrong alignment on UBP_HUD_AbilitySlot_C");
static_assert(sizeof(UBP_HUD_AbilitySlot_C) == 0x0004E0, "Wrong size on UBP_HUD_AbilitySlot_C");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, UberGraphFrame) == 0x0002A8, "Member 'UBP_HUD_AbilitySlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ChargeValueChangeAnim) == 0x0002B0, "Member 'UBP_HUD_AbilitySlot_C::ChargeValueChangeAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RelicUseChargeAnim) == 0x0002B8, "Member 'UBP_HUD_AbilitySlot_C::RelicUseChargeAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ExecutingAnimExtraSlot) == 0x0002C0, "Member 'UBP_HUD_AbilitySlot_C::ExecutingAnimExtraSlot' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RelicFullChargeAnim) == 0x0002C8, "Member 'UBP_HUD_AbilitySlot_C::RelicFullChargeAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, SetChargeCounterAnim) == 0x0002D0, "Member 'UBP_HUD_AbilitySlot_C::SetChargeCounterAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, HideSecondActivationAnim) == 0x0002D8, "Member 'UBP_HUD_AbilitySlot_C::HideSecondActivationAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ShowSecondActivationAnim) == 0x0002E0, "Member 'UBP_HUD_AbilitySlot_C::ShowSecondActivationAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ExecutingAnim) == 0x0002E8, "Member 'UBP_HUD_AbilitySlot_C::ExecutingAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ChanneledPressedAnim) == 0x0002F0, "Member 'UBP_HUD_AbilitySlot_C::ChanneledPressedAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, UsableTrueAnim) == 0x0002F8, "Member 'UBP_HUD_AbilitySlot_C::UsableTrueAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, SingleUsedPressedAnim) == 0x000300, "Member 'UBP_HUD_AbilitySlot_C::SingleUsedPressedAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ExtraEffect) == 0x000308, "Member 'UBP_HUD_AbilitySlot_C::ExtraEffect' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ActiveHighlight) == 0x000310, "Member 'UBP_HUD_AbilitySlot_C::ActiveHighlight' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, Bg) == 0x000318, "Member 'UBP_HUD_AbilitySlot_C::Bg' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ChargeText) == 0x000320, "Member 'UBP_HUD_AbilitySlot_C::ChargeText' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ComboPointCost) == 0x000328, "Member 'UBP_HUD_AbilitySlot_C::ComboPointCost' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ControllerIcon) == 0x000330, "Member 'UBP_HUD_AbilitySlot_C::ControllerIcon' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ControllerIconPlusSign) == 0x000338, "Member 'UBP_HUD_AbilitySlot_C::ControllerIconPlusSign' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ControllerKey1) == 0x000340, "Member 'UBP_HUD_AbilitySlot_C::ControllerKey1' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ControllerKey2) == 0x000348, "Member 'UBP_HUD_AbilitySlot_C::ControllerKey2' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, CooldownWidget) == 0x000350, "Member 'UBP_HUD_AbilitySlot_C::CooldownWidget' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, CostCaptions) == 0x000358, "Member 'UBP_HUD_AbilitySlot_C::CostCaptions' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, DurationWidget) == 0x000360, "Member 'UBP_HUD_AbilitySlot_C::DurationWidget' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, EnergyCost) == 0x000368, "Member 'UBP_HUD_AbilitySlot_C::EnergyCost' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ExtraEffectWidget) == 0x000370, "Member 'UBP_HUD_AbilitySlot_C::ExtraEffectWidget' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameExecuting) == 0x000378, "Member 'UBP_HUD_AbilitySlot_C::FrameExecuting' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameHighlight) == 0x000380, "Member 'UBP_HUD_AbilitySlot_C::FrameHighlight' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameSecondActivation) == 0x000388, "Member 'UBP_HUD_AbilitySlot_C::FrameSecondActivation' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameWidget) == 0x000390, "Member 'UBP_HUD_AbilitySlot_C::FrameWidget' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, IconWidget) == 0x000398, "Member 'UBP_HUD_AbilitySlot_C::IconWidget' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RageCost) == 0x0003A0, "Member 'UBP_HUD_AbilitySlot_C::RageCost' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RelicChargeHighlight) == 0x0003A8, "Member 'UBP_HUD_AbilitySlot_C::RelicChargeHighlight' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, StaminaCost) == 0x0003B0, "Member 'UBP_HUD_AbilitySlot_C::StaminaCost' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, IsEnabled) == 0x0003B8, "Member 'UBP_HUD_AbilitySlot_C::IsEnabled' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, IconMaterial) == 0x0003C0, "Member 'UBP_HUD_AbilitySlot_C::IconMaterial' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, IconTexture) == 0x0003C8, "Member 'UBP_HUD_AbilitySlot_C::IconTexture' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, MaxCooldown) == 0x0003D0, "Member 'UBP_HUD_AbilitySlot_C::MaxCooldown' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, Cooldown) == 0x0003D4, "Member 'UBP_HUD_AbilitySlot_C::Cooldown' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ExtraEffectTimerHandle) == 0x0003D8, "Member 'UBP_HUD_AbilitySlot_C::ExtraEffectTimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ControllerIconOffset) == 0x0003E0, "Member 'UBP_HUD_AbilitySlot_C::ControllerIconOffset' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, CostCaptionOffset) == 0x0003E8, "Member 'UBP_HUD_AbilitySlot_C::CostCaptionOffset' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, SlotType) == 0x0003F0, "Member 'UBP_HUD_AbilitySlot_C::SlotType' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameTexture) == 0x0003F8, "Member 'UBP_HUD_AbilitySlot_C::FrameTexture' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameActiveTexture) == 0x000400, "Member 'UBP_HUD_AbilitySlot_C::FrameActiveTexture' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, IsChargeCounterVisible) == 0x000408, "Member 'UBP_HUD_AbilitySlot_C::IsChargeCounterVisible' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ChargeCounterValue) == 0x00040C, "Member 'UBP_HUD_AbilitySlot_C::ChargeCounterValue' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameHighlightTexture) == 0x000410, "Member 'UBP_HUD_AbilitySlot_C::FrameHighlightTexture' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameActiveHighlightTexture) == 0x000418, "Member 'UBP_HUD_AbilitySlot_C::FrameActiveHighlightTexture' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameExtraEffectTexture) == 0x000420, "Member 'UBP_HUD_AbilitySlot_C::FrameExtraEffectTexture' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, BgTexture) == 0x000428, "Member 'UBP_HUD_AbilitySlot_C::BgTexture' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ShowControllerIcons) == 0x000430, "Member 'UBP_HUD_AbilitySlot_C::ShowControllerIcons' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, TimerHandle) == 0x000438, "Member 'UBP_HUD_AbilitySlot_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ChargeFull) == 0x000440, "Member 'UBP_HUD_AbilitySlot_C::ChargeFull' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, NewVar_0) == 0x000448, "Member 'UBP_HUD_AbilitySlot_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RELICCHARGE) == 0x000450, "Member 'UBP_HUD_AbilitySlot_C::RELICCHARGE' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, Charge) == 0x000454, "Member 'UBP_HUD_AbilitySlot_C::Charge' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, SecondActivationVFX) == 0x000458, "Member 'UBP_HUD_AbilitySlot_C::SecondActivationVFX' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RelicChargeVFX) == 0x000460, "Member 'UBP_HUD_AbilitySlot_C::RelicChargeVFX' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameExecutingTexture) == 0x000468, "Member 'UBP_HUD_AbilitySlot_C::FrameExecutingTexture' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameExecuting_Fire) == 0x000470, "Member 'UBP_HUD_AbilitySlot_C::FrameExecuting_Fire' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameExecuting_Order) == 0x000478, "Member 'UBP_HUD_AbilitySlot_C::FrameExecuting_Order' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameExecuting_Chaos) == 0x000480, "Member 'UBP_HUD_AbilitySlot_C::FrameExecuting_Chaos' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameExecuting_Wyld) == 0x000488, "Member 'UBP_HUD_AbilitySlot_C::FrameExecuting_Wyld' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameExecuting_Resonance) == 0x000490, "Member 'UBP_HUD_AbilitySlot_C::FrameExecuting_Resonance' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, FrameExecuting_Default) == 0x000498, "Member 'UBP_HUD_AbilitySlot_C::FrameExecuting_Default' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RelicChargeVFX_Fire) == 0x0004A0, "Member 'UBP_HUD_AbilitySlot_C::RelicChargeVFX_Fire' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RelicChargeVFX_Order) == 0x0004A8, "Member 'UBP_HUD_AbilitySlot_C::RelicChargeVFX_Order' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RelicChargeVFX_Chaos) == 0x0004B0, "Member 'UBP_HUD_AbilitySlot_C::RelicChargeVFX_Chaos' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RelicChargeVFX_Wyld) == 0x0004B8, "Member 'UBP_HUD_AbilitySlot_C::RelicChargeVFX_Wyld' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, ChargeVFX_Resonance) == 0x0004C0, "Member 'UBP_HUD_AbilitySlot_C::ChargeVFX_Resonance' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RelicChargeVFX_Default) == 0x0004C8, "Member 'UBP_HUD_AbilitySlot_C::RelicChargeVFX_Default' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, RelicChargeEnabled) == 0x0004D0, "Member 'UBP_HUD_AbilitySlot_C::RelicChargeEnabled' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, AbilityChargeEnabled) == 0x0004D1, "Member 'UBP_HUD_AbilitySlot_C::AbilityChargeEnabled' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, CurrentRelicCharge) == 0x0004D4, "Member 'UBP_HUD_AbilitySlot_C::CurrentRelicCharge' has a wrong offset!");
static_assert(offsetof(UBP_HUD_AbilitySlot_C, CurrentAbilityCharge) == 0x0004D8, "Member 'UBP_HUD_AbilitySlot_C::CurrentAbilityCharge' has a wrong offset!");

}

