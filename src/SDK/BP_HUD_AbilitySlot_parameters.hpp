#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUD_AbilitySlot

#include "Basic.hpp"

#include "man_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.ExecuteUbergraph_BP_HUD_AbilitySlot
// 0x00E8 (0x00E8 - 0x0000)
struct BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RelicChargePercentage;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x000C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityBase*                           K2Node_Event_AbilityType;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Cooldown;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_MaxCooldown;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponType                                   K2Node_Event_RelicType;                            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bUsable;                              // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_CooldownRemain;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInExtraEffect;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInExecuting;                         // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInSingleUsed_1;                      // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInSingleUsed;                        // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_EnergyCost;                           // 0x0068(0x0018)(ConstParm)
	class FText                                   K2Node_Event_RageCost;                             // 0x0080(0x0018)(ConstParm)
	class FText                                   K2Node_Event_ComboPointCost;                       // 0x0098(0x0018)(ConstParm)
	class FText                                   K2Node_Event_StaminaCost;                          // 0x00B0(0x0018)(ConstParm)
	bool                                          K2Node_Event_bReactivation;                        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInUsable;                            // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InRemainingChargesNum;                // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_ChargePercentage_1;                   // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_ChargePercentage;                     // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Duration;                             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInShowFullChargeAnim;                // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot");
static_assert(sizeof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot) == 0x0000E8, "Wrong size on BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, EntryPoint) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_RelicChargePercentage) == 0x000004, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_RelicChargePercentage' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_IsDesignTime) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_MyGeometry) == 0x00000C, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_InDeltaTime) == 0x000044, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_AbilityType) == 0x000048, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_AbilityType' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_Cooldown) == 0x000050, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_Cooldown' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_MaxCooldown) == 0x000054, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_MaxCooldown' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_RelicType) == 0x000058, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_RelicType' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_bUsable) == 0x000059, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_bUsable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_CooldownRemain) == 0x00005C, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_CooldownRemain' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_bInExtraEffect) == 0x000060, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_bInExtraEffect' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_bInExecuting) == 0x000061, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_bInExecuting' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_bInSingleUsed_1) == 0x000062, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_bInSingleUsed_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_bInSingleUsed) == 0x000063, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_bInSingleUsed' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_EnergyCost) == 0x000068, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_EnergyCost' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_RageCost) == 0x000080, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_RageCost' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_ComboPointCost) == 0x000098, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_ComboPointCost' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_StaminaCost) == 0x0000B0, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_StaminaCost' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_bReactivation) == 0x0000C8, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_bReactivation' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_bInUsable) == 0x0000C9, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_bInUsable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_InRemainingChargesNum) == 0x0000CC, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_InRemainingChargesNum' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, CallFunc_Greater_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_ChargePercentage_1) == 0x0000D4, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_ChargePercentage_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_ChargePercentage) == 0x0000D8, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_ChargePercentage' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0000DC, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000DD, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_Duration) == 0x0000E0, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_Duration' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot, K2Node_Event_bInShowFullChargeAnim) == 0x0000E4, "Member 'BP_HUD_AbilitySlot_C_ExecuteUbergraph_BP_HUD_AbilitySlot::K2Node_Event_bInShowFullChargeAnim' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetRelicChargePercentage
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetRelicChargePercentage final
{
public:
	float                                         RelicChargePercentage;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetRelicChargePercentage) == 0x000004, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetRelicChargePercentage");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetRelicChargePercentage) == 0x000004, "Wrong size on BP_HUD_AbilitySlot_C_OnSetRelicChargePercentage");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetRelicChargePercentage, RelicChargePercentage) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetRelicChargePercentage::RelicChargePercentage' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnShowFullChargeAnim
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnShowFullChargeAnim final
{
public:
	bool                                          bInShowFullChargeAnim;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnShowFullChargeAnim) == 0x000001, "Wrong alignment on BP_HUD_AbilitySlot_C_OnShowFullChargeAnim");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnShowFullChargeAnim) == 0x000001, "Wrong size on BP_HUD_AbilitySlot_C_OnShowFullChargeAnim");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnShowFullChargeAnim, bInShowFullChargeAnim) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnShowFullChargeAnim::bInShowFullChargeAnim' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetAbilityDuration
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetAbilityDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetAbilityDuration) == 0x000004, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetAbilityDuration");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetAbilityDuration) == 0x000004, "Wrong size on BP_HUD_AbilitySlot_C_OnSetAbilityDuration");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbilityDuration, Duration) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetAbilityDuration::Duration' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetHitStackNum
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetHitStackNum final
{
public:
	int32                                         ChargePercentage;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetHitStackNum) == 0x000004, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetHitStackNum");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetHitStackNum) == 0x000004, "Wrong size on BP_HUD_AbilitySlot_C_OnSetHitStackNum");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetHitStackNum, ChargePercentage) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetHitStackNum::ChargePercentage' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetAbilityChargePercentage
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetAbilityChargePercentage final
{
public:
	float                                         ChargePercentage;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetAbilityChargePercentage) == 0x000004, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetAbilityChargePercentage");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetAbilityChargePercentage) == 0x000004, "Wrong size on BP_HUD_AbilitySlot_C_OnSetAbilityChargePercentage");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbilityChargePercentage, ChargePercentage) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetAbilityChargePercentage::ChargePercentage' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetSetChargeCounter
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetSetChargeCounter final
{
public:
	int32                                         InRemainingChargesNum;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetSetChargeCounter) == 0x000004, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetSetChargeCounter");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetSetChargeCounter) == 0x000004, "Wrong size on BP_HUD_AbilitySlot_C_OnSetSetChargeCounter");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetSetChargeCounter, InRemainingChargesNum) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetSetChargeCounter::InRemainingChargesNum' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnRefreshAbilityStates
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnRefreshAbilityStates final
{
public:
	bool                                          bInUsable;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnRefreshAbilityStates) == 0x000001, "Wrong alignment on BP_HUD_AbilitySlot_C_OnRefreshAbilityStates");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnRefreshAbilityStates) == 0x000001, "Wrong size on BP_HUD_AbilitySlot_C_OnRefreshAbilityStates");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnRefreshAbilityStates, bInUsable) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnRefreshAbilityStates::bInUsable' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetAbilityReactivation
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetAbilityReactivation final
{
public:
	bool                                          bReactivation;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetAbilityReactivation) == 0x000001, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetAbilityReactivation");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetAbilityReactivation) == 0x000001, "Wrong size on BP_HUD_AbilitySlot_C_OnSetAbilityReactivation");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbilityReactivation, bReactivation) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetAbilityReactivation::bReactivation' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetAbilityCost
// 0x0060 (0x0060 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetAbilityCost final
{
public:
	class FText                                   EnergyCost_0;                                      // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   RageCost_0;                                        // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   ComboPointCost_0;                                  // 0x0030(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   StaminaCost_0;                                     // 0x0048(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetAbilityCost) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetAbilityCost");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetAbilityCost) == 0x000060, "Wrong size on BP_HUD_AbilitySlot_C_OnSetAbilityCost");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbilityCost, EnergyCost_0) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetAbilityCost::EnergyCost_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbilityCost, RageCost_0) == 0x000018, "Member 'BP_HUD_AbilitySlot_C_OnSetAbilityCost::RageCost_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbilityCost, ComboPointCost_0) == 0x000030, "Member 'BP_HUD_AbilitySlot_C_OnSetAbilityCost::ComboPointCost_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbilityCost, StaminaCost_0) == 0x000048, "Member 'BP_HUD_AbilitySlot_C_OnSetAbilityCost::StaminaCost_0' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnAbilityReleased
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnAbilityReleased final
{
public:
	bool                                          bInSingleUsed;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnAbilityReleased) == 0x000001, "Wrong alignment on BP_HUD_AbilitySlot_C_OnAbilityReleased");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnAbilityReleased) == 0x000001, "Wrong size on BP_HUD_AbilitySlot_C_OnAbilityReleased");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnAbilityReleased, bInSingleUsed) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnAbilityReleased::bInSingleUsed' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnAbilityPressed
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnAbilityPressed final
{
public:
	bool                                          bInSingleUsed;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnAbilityPressed) == 0x000001, "Wrong alignment on BP_HUD_AbilitySlot_C_OnAbilityPressed");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnAbilityPressed) == 0x000001, "Wrong size on BP_HUD_AbilitySlot_C_OnAbilityPressed");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnAbilityPressed, bInSingleUsed) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnAbilityPressed::bInSingleUsed' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetAbilityExecuting
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetAbilityExecuting final
{
public:
	bool                                          bInExecuting;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetAbilityExecuting) == 0x000001, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetAbilityExecuting");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetAbilityExecuting) == 0x000001, "Wrong size on BP_HUD_AbilitySlot_C_OnSetAbilityExecuting");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbilityExecuting, bInExecuting) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetAbilityExecuting::bInExecuting' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetAbilityExtraEffect
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetAbilityExtraEffect final
{
public:
	bool                                          bInExtraEffect;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetAbilityExtraEffect) == 0x000001, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetAbilityExtraEffect");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetAbilityExtraEffect) == 0x000001, "Wrong size on BP_HUD_AbilitySlot_C_OnSetAbilityExtraEffect");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbilityExtraEffect, bInExtraEffect) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetAbilityExtraEffect::bInExtraEffect' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetAbilityCooldown
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetAbilityCooldown final
{
public:
	float                                         CooldownRemain;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetAbilityCooldown) == 0x000004, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetAbilityCooldown");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetAbilityCooldown) == 0x000004, "Wrong size on BP_HUD_AbilitySlot_C_OnSetAbilityCooldown");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbilityCooldown, CooldownRemain) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetAbilityCooldown::CooldownRemain' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetAbilityUsable
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetAbilityUsable final
{
public:
	bool                                          bUsable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetAbilityUsable) == 0x000001, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetAbilityUsable");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetAbilityUsable) == 0x000001, "Wrong size on BP_HUD_AbilitySlot_C_OnSetAbilityUsable");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbilityUsable, bUsable) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetAbilityUsable::bUsable' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnSetAbility
// 0x0018 (0x0018 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnSetAbility final
{
public:
	class UAbilityBase*                           AbilityType;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cooldown_0;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCooldown_0;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponType                                   RelicType;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnSetAbility) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_OnSetAbility");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnSetAbility) == 0x000018, "Wrong size on BP_HUD_AbilitySlot_C_OnSetAbility");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbility, AbilityType) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnSetAbility::AbilityType' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbility, Cooldown_0) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_OnSetAbility::Cooldown_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbility, MaxCooldown_0) == 0x00000C, "Member 'BP_HUD_AbilitySlot_C_OnSetAbility::MaxCooldown_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnSetAbility, RelicType) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_OnSetAbility::RelicType' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_HUD_AbilitySlot_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_Tick) == 0x000004, "Wrong alignment on BP_HUD_AbilitySlot_C_Tick");
static_assert(sizeof(BP_HUD_AbilitySlot_C_Tick) == 0x00003C, "Wrong size on BP_HUD_AbilitySlot_C_Tick");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Tick, MyGeometry) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_HUD_AbilitySlot_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_AbilitySlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_PreConstruct) == 0x000001, "Wrong alignment on BP_HUD_AbilitySlot_C_PreConstruct");
static_assert(sizeof(BP_HUD_AbilitySlot_C_PreConstruct) == 0x000001, "Wrong size on BP_HUD_AbilitySlot_C_PreConstruct");
static_assert(offsetof(BP_HUD_AbilitySlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.Set Controller
// 0x0018 (0x0018 - 0x0000)
struct BP_HUD_AbilitySlot_C_Set_Controller final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_Set_Controller) == 0x000004, "Wrong alignment on BP_HUD_AbilitySlot_C_Set_Controller");
static_assert(sizeof(BP_HUD_AbilitySlot_C_Set_Controller) == 0x000018, "Wrong size on BP_HUD_AbilitySlot_C_Set_Controller");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, Temp_bool_Variable) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, Temp_byte_Variable) == 0x000001, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, Temp_byte_Variable_1) == 0x000002, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, Temp_bool_Variable_1) == 0x000003, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, Temp_byte_Variable_2) == 0x000004, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, Temp_byte_Variable_3) == 0x000005, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, Temp_bool_Variable_2) == 0x000006, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, Temp_byte_Variable_4) == 0x000007, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, Temp_byte_Variable_5) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, K2Node_Select_Default) == 0x000009, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, CallFunc_Array_Length_ReturnValue_1) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000015, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, K2Node_Select_Default_1) == 0x000016, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Set_Controller, K2Node_Select_Default_2) == 0x000017, "Member 'BP_HUD_AbilitySlot_C_Set_Controller::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetEnabled
// 0x0020 (0x0020 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetEnabled final
{
public:
	bool                                          InIsEnabled;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetEnabled) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetEnabled");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetEnabled) == 0x000020, "Wrong size on BP_HUD_AbilitySlot_C_SetEnabled");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetEnabled, InIsEnabled) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetEnabled::InIsEnabled' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetEnabled, Temp_bool_Variable) == 0x000001, "Member 'BP_HUD_AbilitySlot_C_SetEnabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetEnabled, Temp_bool_Variable_1) == 0x000002, "Member 'BP_HUD_AbilitySlot_C_SetEnabled::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetEnabled, Temp_float_Variable) == 0x000004, "Member 'BP_HUD_AbilitySlot_C_SetEnabled::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetEnabled, Temp_float_Variable_1) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetEnabled::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetEnabled, K2Node_Select_Default) == 0x00000C, "Member 'BP_HUD_AbilitySlot_C_SetEnabled::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetEnabled, K2Node_Select_Default_1) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetEnabled::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetEnabled, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000018, "Member 'BP_HUD_AbilitySlot_C_SetEnabled::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetIcon
// 0x0018 (0x0018 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetIcon) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetIcon");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetIcon) == 0x000018, "Wrong size on BP_HUD_AbilitySlot_C_SetIcon");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetIcon, Icon) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetIcon::Icon' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetIcon, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetIcon, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetIcon::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.Setup
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_AbilitySlot_C_Setup final
{
public:
	class UAbilityBase*                           InAbility;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InCooldown;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InMaxCooldown;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponType                                   inRelicType;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_Setup) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_Setup");
static_assert(sizeof(BP_HUD_AbilitySlot_C_Setup) == 0x000028, "Wrong size on BP_HUD_AbilitySlot_C_Setup");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Setup, InAbility) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_Setup::InAbility' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Setup, InCooldown) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_Setup::InCooldown' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Setup, InMaxCooldown) == 0x00000C, "Member 'BP_HUD_AbilitySlot_C_Setup::InMaxCooldown' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Setup, inRelicType) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_Setup::inRelicType' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Setup, Temp_bool_Variable) == 0x000011, "Member 'BP_HUD_AbilitySlot_C_Setup::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Setup, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'BP_HUD_AbilitySlot_C_Setup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Setup, Temp_object_Variable) == 0x000018, "Member 'BP_HUD_AbilitySlot_C_Setup::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_Setup, K2Node_Select_Default) == 0x000020, "Member 'BP_HUD_AbilitySlot_C_Setup::K2Node_Select_Default' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetUsable
// 0x00B8 (0x00B8 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetUsable final
{
public:
	bool                                          inIsUsable;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0030(0x0028)()
	bool                                          Temp_bool_Variable_1;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_Select_Default_2;                           // 0x0078(0x0028)()
	class UTexture2D*                             K2Node_Select_Default_3;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetUsable) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetUsable");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetUsable) == 0x0000B8, "Wrong size on BP_HUD_AbilitySlot_C_SetUsable");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, inIsUsable) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetUsable::inIsUsable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, Temp_bool_Variable) == 0x000001, "Member 'BP_HUD_AbilitySlot_C_SetUsable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetUsable::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, K2Node_MakeStruct_SlateColor_1) == 0x000030, "Member 'BP_HUD_AbilitySlot_C_SetUsable::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, Temp_bool_Variable_1) == 0x000058, "Member 'BP_HUD_AbilitySlot_C_SetUsable::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, Temp_float_Variable) == 0x00005C, "Member 'BP_HUD_AbilitySlot_C_SetUsable::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, Temp_float_Variable_1) == 0x000060, "Member 'BP_HUD_AbilitySlot_C_SetUsable::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, Temp_bool_Variable_2) == 0x000064, "Member 'BP_HUD_AbilitySlot_C_SetUsable::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, Temp_bool_Variable_3) == 0x000065, "Member 'BP_HUD_AbilitySlot_C_SetUsable::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, Temp_float_Variable_2) == 0x000068, "Member 'BP_HUD_AbilitySlot_C_SetUsable::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, Temp_float_Variable_3) == 0x00006C, "Member 'BP_HUD_AbilitySlot_C_SetUsable::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, K2Node_Select_Default) == 0x000070, "Member 'BP_HUD_AbilitySlot_C_SetUsable::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, K2Node_Select_Default_1) == 0x000074, "Member 'BP_HUD_AbilitySlot_C_SetUsable::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, K2Node_Select_Default_2) == 0x000078, "Member 'BP_HUD_AbilitySlot_C_SetUsable::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, K2Node_Select_Default_3) == 0x0000A0, "Member 'BP_HUD_AbilitySlot_C_SetUsable::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, CallFunc_PlayAnimation_ReturnValue) == 0x0000A8, "Member 'BP_HUD_AbilitySlot_C_SetUsable::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetUsable, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000B0, "Member 'BP_HUD_AbilitySlot_C_SetUsable::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetExtraEffect
// 0x0010 (0x0010 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetExtraEffect final
{
public:
	bool                                          inIsExtraEffect;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetExtraEffect) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetExtraEffect");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetExtraEffect) == 0x000010, "Wrong size on BP_HUD_AbilitySlot_C_SetExtraEffect");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetExtraEffect, inIsExtraEffect) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetExtraEffect::inIsExtraEffect' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetExtraEffect, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetExtraEffect::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetMaxCooldown
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetMaxCooldown final
{
public:
	float                                         InMaxCooldown;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetMaxCooldown) == 0x000004, "Wrong alignment on BP_HUD_AbilitySlot_C_SetMaxCooldown");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetMaxCooldown) == 0x000004, "Wrong size on BP_HUD_AbilitySlot_C_SetMaxCooldown");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetMaxCooldown, InMaxCooldown) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetMaxCooldown::InMaxCooldown' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetCooldown
// 0x0018 (0x0018 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetCooldown final
{
public:
	float                                         InCooldown;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetCooldown) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetCooldown");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetCooldown) == 0x000018, "Wrong size on BP_HUD_AbilitySlot_C_SetCooldown");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetCooldown, InCooldown) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetCooldown::InCooldown' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetCooldown, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_HUD_AbilitySlot_C_SetCooldown::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetCooldown, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000005, "Member 'BP_HUD_AbilitySlot_C_SetCooldown::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetCooldown, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'BP_HUD_AbilitySlot_C_SetCooldown::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetCooldown, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetCooldown::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetCooldown, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_HUD_AbilitySlot_C_SetCooldown::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetCooldown, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetCooldown::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetCost
// 0x0060 (0x0060 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetCost final
{
public:
	class FText                                   EnergyCost_0;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   RageCost_0;                                        // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   ComboPointCost_0;                                  // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   StaminaCost_0;                                     // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetCost) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetCost");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetCost) == 0x000060, "Wrong size on BP_HUD_AbilitySlot_C_SetCost");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetCost, EnergyCost_0) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetCost::EnergyCost_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetCost, RageCost_0) == 0x000018, "Member 'BP_HUD_AbilitySlot_C_SetCost::RageCost_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetCost, ComboPointCost_0) == 0x000030, "Member 'BP_HUD_AbilitySlot_C_SetCost::ComboPointCost_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetCost, StaminaCost_0) == 0x000048, "Member 'BP_HUD_AbilitySlot_C_SetCost::StaminaCost_0' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.PlayExtraEffectAnimation
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_AbilitySlot_C_PlayExtraEffectAnimation final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_PlayExtraEffectAnimation) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_PlayExtraEffectAnimation");
static_assert(sizeof(BP_HUD_AbilitySlot_C_PlayExtraEffectAnimation) == 0x000008, "Wrong size on BP_HUD_AbilitySlot_C_PlayExtraEffectAnimation");
static_assert(offsetof(BP_HUD_AbilitySlot_C_PlayExtraEffectAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_PlayExtraEffectAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.PlayAbilityPressed
// 0x0018 (0x0018 - 0x0000)
struct BP_HUD_AbilitySlot_C_PlayAbilityPressed final
{
public:
	bool                                          InSingleUsed;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_PlayAbilityPressed) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_PlayAbilityPressed");
static_assert(sizeof(BP_HUD_AbilitySlot_C_PlayAbilityPressed) == 0x000018, "Wrong size on BP_HUD_AbilitySlot_C_PlayAbilityPressed");
static_assert(offsetof(BP_HUD_AbilitySlot_C_PlayAbilityPressed, InSingleUsed) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_PlayAbilityPressed::InSingleUsed' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_PlayAbilityPressed, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_PlayAbilityPressed::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_PlayAbilityPressed, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_PlayAbilityPressed::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.PlayAbilityReleased
// 0x0010 (0x0010 - 0x0000)
struct BP_HUD_AbilitySlot_C_PlayAbilityReleased final
{
public:
	bool                                          InSingleUsed;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_PlayAbilityReleased) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_PlayAbilityReleased");
static_assert(sizeof(BP_HUD_AbilitySlot_C_PlayAbilityReleased) == 0x000010, "Wrong size on BP_HUD_AbilitySlot_C_PlayAbilityReleased");
static_assert(offsetof(BP_HUD_AbilitySlot_C_PlayAbilityReleased, InSingleUsed) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_PlayAbilityReleased::InSingleUsed' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_PlayAbilityReleased, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_PlayAbilityReleased::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetExecuting
// 0x0030 (0x0030 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetExecuting final
{
public:
	bool                                          inIsExecuting;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       K2Node_Select_Default_1;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetExecuting) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetExecuting");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetExecuting) == 0x000030, "Wrong size on BP_HUD_AbilitySlot_C_SetExecuting");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetExecuting, inIsExecuting) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetExecuting::inIsExecuting' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetExecuting, Temp_int_Variable) == 0x000004, "Member 'BP_HUD_AbilitySlot_C_SetExecuting::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetExecuting, Temp_int_Variable_1) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetExecuting::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetExecuting, K2Node_Select_Default) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetExecuting::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetExecuting, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_HUD_AbilitySlot_C_SetExecuting::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetExecuting, K2Node_Select_Default_1) == 0x000020, "Member 'BP_HUD_AbilitySlot_C_SetExecuting::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetExecuting, CallFunc_PlayAnimation_ReturnValue_1) == 0x000028, "Member 'BP_HUD_AbilitySlot_C_SetExecuting::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetOffsets
// 0x0040 (0x0040 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetOffsets final
{
public:
	float                                         CallFunc_BreakVector2D_X;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetOffsets) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetOffsets");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetOffsets) == 0x000040, "Wrong size on BP_HUD_AbilitySlot_C_SetOffsets");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetOffsets, CallFunc_BreakVector2D_X) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetOffsets::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetOffsets, CallFunc_BreakVector2D_Y) == 0x000004, "Member 'BP_HUD_AbilitySlot_C_SetOffsets::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetOffsets, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetOffsets::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetOffsets, K2Node_MakeStruct_Margin) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetOffsets::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetOffsets, CallFunc_BreakVector2D_X_1) == 0x000020, "Member 'BP_HUD_AbilitySlot_C_SetOffsets::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetOffsets, CallFunc_BreakVector2D_Y_1) == 0x000024, "Member 'BP_HUD_AbilitySlot_C_SetOffsets::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetOffsets, K2Node_MakeStruct_Margin_1) == 0x000028, "Member 'BP_HUD_AbilitySlot_C_SetOffsets::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetOffsets, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x000038, "Member 'BP_HUD_AbilitySlot_C_SetOffsets::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetSlotType
// 0x002C (0x002C - 0x0000)
struct BP_HUD_AbilitySlot_C_SetSlotType final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetSlotType) == 0x000004, "Wrong alignment on BP_HUD_AbilitySlot_C_SetSlotType");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetSlotType) == 0x00002C, "Wrong size on BP_HUD_AbilitySlot_C_SetSlotType");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetSlotType, Temp_int_Variable) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetSlotType::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetSlotType, Temp_float_Variable) == 0x000004, "Member 'BP_HUD_AbilitySlot_C_SetSlotType::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetSlotType, Temp_float_Variable_1) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetSlotType::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetSlotType, Temp_int_Variable_1) == 0x00000C, "Member 'BP_HUD_AbilitySlot_C_SetSlotType::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetSlotType, Temp_struct_Variable) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetSlotType::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetSlotType, Temp_struct_Variable_1) == 0x000018, "Member 'BP_HUD_AbilitySlot_C_SetSlotType::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetSlotType, K2Node_Select_Default) == 0x000020, "Member 'BP_HUD_AbilitySlot_C_SetSlotType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetSlotType, K2Node_Select_Default_1) == 0x000024, "Member 'BP_HUD_AbilitySlot_C_SetSlotType::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetSecondActivation
// 0x0018 (0x0018 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetSecondActivation final
{
public:
	bool                                          InIsSecondActivation;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetSecondActivation) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetSecondActivation");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetSecondActivation) == 0x000018, "Wrong size on BP_HUD_AbilitySlot_C_SetSecondActivation");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetSecondActivation, InIsSecondActivation) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetSecondActivation::InIsSecondActivation' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetSecondActivation, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetSecondActivation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetSecondActivation, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetSecondActivation::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.ToggleChargeCounter
// 0x0005 (0x0005 - 0x0000)
struct BP_HUD_AbilitySlot_C_ToggleChargeCounter final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_ToggleChargeCounter) == 0x000001, "Wrong alignment on BP_HUD_AbilitySlot_C_ToggleChargeCounter");
static_assert(sizeof(BP_HUD_AbilitySlot_C_ToggleChargeCounter) == 0x000005, "Wrong size on BP_HUD_AbilitySlot_C_ToggleChargeCounter");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ToggleChargeCounter, InVisible) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_ToggleChargeCounter::InVisible' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ToggleChargeCounter, Temp_bool_Variable) == 0x000001, "Member 'BP_HUD_AbilitySlot_C_ToggleChargeCounter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ToggleChargeCounter, Temp_byte_Variable) == 0x000002, "Member 'BP_HUD_AbilitySlot_C_ToggleChargeCounter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ToggleChargeCounter, Temp_byte_Variable_1) == 0x000003, "Member 'BP_HUD_AbilitySlot_C_ToggleChargeCounter::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_ToggleChargeCounter, K2Node_Select_Default) == 0x000004, "Member 'BP_HUD_AbilitySlot_C_ToggleChargeCounter::K2Node_Select_Default' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetChargeCounter
// 0x0030 (0x0030 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetChargeCounter final
{
public:
	int32                                         InNewValue;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0008(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetChargeCounter) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetChargeCounter");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetChargeCounter) == 0x000030, "Wrong size on BP_HUD_AbilitySlot_C_SetChargeCounter");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetChargeCounter, InNewValue) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetChargeCounter::InNewValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetChargeCounter, CallFunc_IntToText_ReturnValue) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetChargeCounter::CallFunc_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetChargeCounter, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'BP_HUD_AbilitySlot_C_SetChargeCounter::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetChargeCounter, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000028, "Member 'BP_HUD_AbilitySlot_C_SetChargeCounter::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetBrightness
// 0x0020 (0x0020 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetBrightness final
{
public:
	bool                                          InUsable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetBrightness) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetBrightness");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetBrightness) == 0x000020, "Wrong size on BP_HUD_AbilitySlot_C_SetBrightness");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetBrightness, InUsable) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetBrightness::InUsable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetBrightness, Temp_bool_Variable) == 0x000001, "Member 'BP_HUD_AbilitySlot_C_SetBrightness::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetBrightness, Temp_float_Variable) == 0x000004, "Member 'BP_HUD_AbilitySlot_C_SetBrightness::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetBrightness, Temp_float_Variable_1) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetBrightness::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetBrightness, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetBrightness::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetBrightness, K2Node_Select_Default) == 0x000018, "Member 'BP_HUD_AbilitySlot_C_SetBrightness::K2Node_Select_Default' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnFullRelicCharge
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnFullRelicCharge final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnFullRelicCharge) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_OnFullRelicCharge");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnFullRelicCharge) == 0x000008, "Wrong size on BP_HUD_AbilitySlot_C_OnFullRelicCharge");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnFullRelicCharge, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnFullRelicCharge::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetRelicCharge
// 0x0098 (0x0098 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetRelicCharge final
{
public:
	float                                         InRelicCharge;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynMat;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_3;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetRelicCharge) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetRelicCharge");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetRelicCharge) == 0x000098, "Wrong size on BP_HUD_AbilitySlot_C_SetRelicCharge");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, InRelicCharge) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::InRelicCharge' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, DynMat) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::DynMat' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, Temp_bool_Variable) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, Temp_struct_Variable) == 0x000014, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, Temp_struct_Variable_1) == 0x000024, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, Temp_bool_Variable_1) == 0x000034, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, Temp_float_Variable) == 0x000038, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, Temp_bool_Variable_2) == 0x00003C, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, Temp_float_Variable_1) == 0x000040, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, Temp_float_Variable_2) == 0x000044, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, Temp_bool_Variable_3) == 0x000048, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, Temp_float_Variable_3) == 0x00004C, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, Temp_float_Variable_4) == 0x000050, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000054, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, CallFunc_PlayAnimation_ReturnValue) == 0x000058, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, CallFunc_Less_FloatFloat_ReturnValue) == 0x000061, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000062, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, K2Node_Select_Default) == 0x000064, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, K2Node_Select_Default_1) == 0x000074, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, K2Node_Select_Default_2) == 0x000078, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x00007C, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000080, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, CallFunc_Add_FloatFloat_ReturnValue) == 0x000084, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, K2Node_Select_Default_3) == 0x000088, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicCharge, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000090, "Member 'BP_HUD_AbilitySlot_C_SetRelicCharge::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.OnUseRelicCharge
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_AbilitySlot_C_OnUseRelicCharge final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_OnUseRelicCharge) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_OnUseRelicCharge");
static_assert(sizeof(BP_HUD_AbilitySlot_C_OnUseRelicCharge) == 0x000008, "Wrong size on BP_HUD_AbilitySlot_C_OnUseRelicCharge");
static_assert(offsetof(BP_HUD_AbilitySlot_C_OnUseRelicCharge, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_OnUseRelicCharge::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.DisableRelicCharge
// 0x0010 (0x0010 - 0x0000)
struct BP_HUD_AbilitySlot_C_DisableRelicCharge final
{
public:
	float                                         InRelicCharge;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_DisableRelicCharge) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_DisableRelicCharge");
static_assert(sizeof(BP_HUD_AbilitySlot_C_DisableRelicCharge) == 0x000010, "Wrong size on BP_HUD_AbilitySlot_C_DisableRelicCharge");
static_assert(offsetof(BP_HUD_AbilitySlot_C_DisableRelicCharge, InRelicCharge) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_DisableRelicCharge::InRelicCharge' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_DisableRelicCharge, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_DisableRelicCharge::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetDuration
// 0x0018 (0x0018 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetDuration final
{
public:
	float                                         inDuration;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetDuration) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetDuration");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetDuration) == 0x000018, "Wrong size on BP_HUD_AbilitySlot_C_SetDuration");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetDuration, inDuration) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetDuration::inDuration' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetDuration, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_HUD_AbilitySlot_C_SetDuration::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetDuration, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetDuration::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetDuration, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetDuration::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetAbilityCharge
// 0x0098 (0x0098 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetAbilityCharge final
{
public:
	float                                         InCharge;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynMat;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_3;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetAbilityCharge) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetAbilityCharge");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetAbilityCharge) == 0x000098, "Wrong size on BP_HUD_AbilitySlot_C_SetAbilityCharge");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, InCharge) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::InCharge' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, DynMat) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::DynMat' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, Temp_bool_Variable) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, Temp_struct_Variable) == 0x000014, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, Temp_struct_Variable_1) == 0x000024, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, Temp_bool_Variable_1) == 0x000034, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, Temp_float_Variable) == 0x000038, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, Temp_bool_Variable_2) == 0x00003C, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, Temp_float_Variable_1) == 0x000040, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, Temp_float_Variable_2) == 0x000044, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, Temp_bool_Variable_3) == 0x000048, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, Temp_float_Variable_3) == 0x00004C, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, Temp_float_Variable_4) == 0x000050, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000055, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, CallFunc_PlayAnimation_ReturnValue) == 0x000058, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, CallFunc_Less_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000061, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, K2Node_Select_Default) == 0x000064, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, K2Node_Select_Default_1) == 0x000074, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, K2Node_Select_Default_2) == 0x000078, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x00007C, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000080, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, CallFunc_Add_FloatFloat_ReturnValue) == 0x000084, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, K2Node_Select_Default_3) == 0x000088, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetAbilityCharge, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000090, "Member 'BP_HUD_AbilitySlot_C_SetAbilityCharge::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.DisableAbilityCharge
// 0x0010 (0x0010 - 0x0000)
struct BP_HUD_AbilitySlot_C_DisableAbilityCharge final
{
public:
	float                                         InCharge;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_DisableAbilityCharge) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_DisableAbilityCharge");
static_assert(sizeof(BP_HUD_AbilitySlot_C_DisableAbilityCharge) == 0x000010, "Wrong size on BP_HUD_AbilitySlot_C_DisableAbilityCharge");
static_assert(offsetof(BP_HUD_AbilitySlot_C_DisableAbilityCharge, InCharge) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_DisableAbilityCharge::InCharge' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_DisableAbilityCharge, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_DisableAbilityCharge::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_HUD_AbilitySlot.BP_HUD_AbilitySlot_C.SetRelicType
// 0x0020 (0x0020 - 0x0000)
struct BP_HUD_AbilitySlot_C_SetRelicType final
{
public:
	EWeaponType                                   inRelicType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponType                                   Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWeaponType                                   Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponType                                   Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsResonanceAbility_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default_1;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_AbilitySlot_C_SetRelicType) == 0x000008, "Wrong alignment on BP_HUD_AbilitySlot_C_SetRelicType");
static_assert(sizeof(BP_HUD_AbilitySlot_C_SetRelicType) == 0x000020, "Wrong size on BP_HUD_AbilitySlot_C_SetRelicType");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicType, inRelicType) == 0x000000, "Member 'BP_HUD_AbilitySlot_C_SetRelicType::inRelicType' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicType, Temp_byte_Variable) == 0x000001, "Member 'BP_HUD_AbilitySlot_C_SetRelicType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicType, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_HUD_AbilitySlot_C_SetRelicType::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicType, Temp_byte_Variable_1) == 0x000003, "Member 'BP_HUD_AbilitySlot_C_SetRelicType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicType, Temp_byte_Variable_2) == 0x000004, "Member 'BP_HUD_AbilitySlot_C_SetRelicType::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicType, CallFunc_IsResonanceAbility_ReturnValue) == 0x000005, "Member 'BP_HUD_AbilitySlot_C_SetRelicType::CallFunc_IsResonanceAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicType, K2Node_Select_Default) == 0x000008, "Member 'BP_HUD_AbilitySlot_C_SetRelicType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicType, K2Node_Select_Default_1) == 0x000010, "Member 'BP_HUD_AbilitySlot_C_SetRelicType::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_AbilitySlot_C_SetRelicType, K2Node_Select_Default_2) == 0x000018, "Member 'BP_HUD_AbilitySlot_C_SetRelicType::K2Node_Select_Default_2' has a wrong offset!");

}

