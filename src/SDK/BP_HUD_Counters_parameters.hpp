#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUD_Counters

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "man_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_HUD_Counters.BP_HUD_Counters_C.ExecuteUbergraph_BP_HUD_Counters
// 0x0148 (0x0148 - 0x0000)
struct BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0038(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_InAddedCoin;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_InAnimate_3;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_InAnimate_2;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0080(0x0018)()
	int32                                         K2Node_CustomEvent_InAddedEssence;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_InAnimate_1;                    // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue_1;                  // 0x00A0(0x0018)()
	bool                                          K2Node_CustomEvent_InAnimate;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InAddedEntropicEssence;               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InAnimate_1;                          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue_2;                  // 0x00C8(0x0018)()
	bool                                          K2Node_Event_InAnimate;                            // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHUDUserWidget*                         CallFunc_GetHUDWidget_ReturnValue;                 // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x00F0(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetEndTime_ReturnValue_1;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHUDUserWidget*                         CallFunc_GetHUDWidget_ReturnValue_1;               // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue_2;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHUDUserWidget*                         CallFunc_GetHUDWidget_ReturnValue_2;               // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_2;                           // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters) == 0x000008, "Wrong alignment on BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters");
static_assert(sizeof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters) == 0x000148, "Wrong size on BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, EntryPoint) == 0x000000, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, Temp_bool_Variable) == 0x000004, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, Temp_float_Variable) == 0x000008, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, Temp_bool_Variable_1) == 0x00001C, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, Temp_float_Variable_1) == 0x000020, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_Event_IsDesignTime) == 0x000034, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_Event_MyGeometry) == 0x000038, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_Event_InDeltaTime) == 0x000070, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_CustomEvent_InAddedCoin) == 0x000074, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_CustomEvent_InAddedCoin' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_CustomEvent_InAnimate_3) == 0x000078, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_CustomEvent_InAnimate_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_CustomEvent_InAnimate_2) == 0x000079, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_CustomEvent_InAnimate_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_IntToText_ReturnValue) == 0x000080, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_CustomEvent_InAddedEssence) == 0x000098, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_CustomEvent_InAddedEssence' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_CustomEvent_InAnimate_1) == 0x00009C, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_CustomEvent_InAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_IntToText_ReturnValue_1) == 0x0000A0, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_CustomEvent_InAnimate) == 0x0000B8, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_CustomEvent_InAnimate' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_Event_InAddedEntropicEssence) == 0x0000BC, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_Event_InAddedEntropicEssence' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_Event_InAnimate_1) == 0x0000C0, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_Event_InAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_IntToText_ReturnValue_2) == 0x0000C8, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_IntToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_Event_InAnimate) == 0x0000E0, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_Event_InAnimate' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_GetEndTime_ReturnValue) == 0x0000E4, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_GetHUDWidget_ReturnValue) == 0x0000E8, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_GetHUDWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000F0, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_GetEndTime_ReturnValue_1) == 0x000100, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_GetEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_Select_Default) == 0x000104, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_GetHUDWidget_ReturnValue_1) == 0x000108, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_GetHUDWidget_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_PlayAnimation_ReturnValue) == 0x000110, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_GetEndTime_ReturnValue_2) == 0x000118, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_GetEndTime_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, Temp_float_Variable_2) == 0x00011C, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_Select_Default_1) == 0x000120, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_PlayAnimation_ReturnValue_1) == 0x000128, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_GetHUDWidget_ReturnValue_2) == 0x000130, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_GetHUDWidget_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, Temp_bool_Variable_2) == 0x000138, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, K2Node_Select_Default_2) == 0x00013C, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters, CallFunc_PlayAnimation_ReturnValue_2) == 0x000140, "Member 'BP_HUD_Counters_C_ExecuteUbergraph_BP_HUD_Counters::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");

// Function BP_HUD_Counters.BP_HUD_Counters_C.EventOnHideAddedEntropicEssence
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_Counters_C_EventOnHideAddedEntropicEssence final
{
public:
	bool                                          InAnimate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_Counters_C_EventOnHideAddedEntropicEssence) == 0x000001, "Wrong alignment on BP_HUD_Counters_C_EventOnHideAddedEntropicEssence");
static_assert(sizeof(BP_HUD_Counters_C_EventOnHideAddedEntropicEssence) == 0x000001, "Wrong size on BP_HUD_Counters_C_EventOnHideAddedEntropicEssence");
static_assert(offsetof(BP_HUD_Counters_C_EventOnHideAddedEntropicEssence, InAnimate) == 0x000000, "Member 'BP_HUD_Counters_C_EventOnHideAddedEntropicEssence::InAnimate' has a wrong offset!");

// Function BP_HUD_Counters.BP_HUD_Counters_C.EventOnShowAddedEntropicEssence
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_Counters_C_EventOnShowAddedEntropicEssence final
{
public:
	int32                                         InAddedEntropicEssence;                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InAnimate;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_Counters_C_EventOnShowAddedEntropicEssence) == 0x000004, "Wrong alignment on BP_HUD_Counters_C_EventOnShowAddedEntropicEssence");
static_assert(sizeof(BP_HUD_Counters_C_EventOnShowAddedEntropicEssence) == 0x000008, "Wrong size on BP_HUD_Counters_C_EventOnShowAddedEntropicEssence");
static_assert(offsetof(BP_HUD_Counters_C_EventOnShowAddedEntropicEssence, InAddedEntropicEssence) == 0x000000, "Member 'BP_HUD_Counters_C_EventOnShowAddedEntropicEssence::InAddedEntropicEssence' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_EventOnShowAddedEntropicEssence, InAnimate) == 0x000004, "Member 'BP_HUD_Counters_C_EventOnShowAddedEntropicEssence::InAnimate' has a wrong offset!");

// Function BP_HUD_Counters.BP_HUD_Counters_C.EventOnHideAddedEssence
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_Counters_C_EventOnHideAddedEssence final
{
public:
	bool                                          InAnimate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_Counters_C_EventOnHideAddedEssence) == 0x000001, "Wrong alignment on BP_HUD_Counters_C_EventOnHideAddedEssence");
static_assert(sizeof(BP_HUD_Counters_C_EventOnHideAddedEssence) == 0x000001, "Wrong size on BP_HUD_Counters_C_EventOnHideAddedEssence");
static_assert(offsetof(BP_HUD_Counters_C_EventOnHideAddedEssence, InAnimate) == 0x000000, "Member 'BP_HUD_Counters_C_EventOnHideAddedEssence::InAnimate' has a wrong offset!");

// Function BP_HUD_Counters.BP_HUD_Counters_C.EventOnShowAddedEssence
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_Counters_C_EventOnShowAddedEssence final
{
public:
	int32                                         InAddedEssence;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InAnimate;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_Counters_C_EventOnShowAddedEssence) == 0x000004, "Wrong alignment on BP_HUD_Counters_C_EventOnShowAddedEssence");
static_assert(sizeof(BP_HUD_Counters_C_EventOnShowAddedEssence) == 0x000008, "Wrong size on BP_HUD_Counters_C_EventOnShowAddedEssence");
static_assert(offsetof(BP_HUD_Counters_C_EventOnShowAddedEssence, InAddedEssence) == 0x000000, "Member 'BP_HUD_Counters_C_EventOnShowAddedEssence::InAddedEssence' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_EventOnShowAddedEssence, InAnimate) == 0x000004, "Member 'BP_HUD_Counters_C_EventOnShowAddedEssence::InAnimate' has a wrong offset!");

// Function BP_HUD_Counters.BP_HUD_Counters_C.EventOnHideAddedCoin
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_Counters_C_EventOnHideAddedCoin final
{
public:
	bool                                          InAnimate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_Counters_C_EventOnHideAddedCoin) == 0x000001, "Wrong alignment on BP_HUD_Counters_C_EventOnHideAddedCoin");
static_assert(sizeof(BP_HUD_Counters_C_EventOnHideAddedCoin) == 0x000001, "Wrong size on BP_HUD_Counters_C_EventOnHideAddedCoin");
static_assert(offsetof(BP_HUD_Counters_C_EventOnHideAddedCoin, InAnimate) == 0x000000, "Member 'BP_HUD_Counters_C_EventOnHideAddedCoin::InAnimate' has a wrong offset!");

// Function BP_HUD_Counters.BP_HUD_Counters_C.EventOnShowAddedCoin
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_Counters_C_EventOnShowAddedCoin final
{
public:
	int32                                         InAddedCoin;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InAnimate;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_Counters_C_EventOnShowAddedCoin) == 0x000004, "Wrong alignment on BP_HUD_Counters_C_EventOnShowAddedCoin");
static_assert(sizeof(BP_HUD_Counters_C_EventOnShowAddedCoin) == 0x000008, "Wrong size on BP_HUD_Counters_C_EventOnShowAddedCoin");
static_assert(offsetof(BP_HUD_Counters_C_EventOnShowAddedCoin, InAddedCoin) == 0x000000, "Member 'BP_HUD_Counters_C_EventOnShowAddedCoin::InAddedCoin' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_EventOnShowAddedCoin, InAnimate) == 0x000004, "Member 'BP_HUD_Counters_C_EventOnShowAddedCoin::InAnimate' has a wrong offset!");

// Function BP_HUD_Counters.BP_HUD_Counters_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_HUD_Counters_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_Counters_C_Tick) == 0x000004, "Wrong alignment on BP_HUD_Counters_C_Tick");
static_assert(sizeof(BP_HUD_Counters_C_Tick) == 0x00003C, "Wrong size on BP_HUD_Counters_C_Tick");
static_assert(offsetof(BP_HUD_Counters_C_Tick, MyGeometry) == 0x000000, "Member 'BP_HUD_Counters_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_HUD_Counters_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_HUD_Counters.BP_HUD_Counters_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_Counters_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_Counters_C_PreConstruct) == 0x000001, "Wrong alignment on BP_HUD_Counters_C_PreConstruct");
static_assert(sizeof(BP_HUD_Counters_C_PreConstruct) == 0x000001, "Wrong size on BP_HUD_Counters_C_PreConstruct");
static_assert(offsetof(BP_HUD_Counters_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_HUD_Counters_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_HUD_Counters.BP_HUD_Counters_C.OnToggleAddedResource
// 0x000C (0x000C - 0x0000)
struct BP_HUD_Counters_C_OnToggleAddedResource final
{
public:
	EHeroProperty                                 InPropertyType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InShowing;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InAnimate;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_Counters_C_OnToggleAddedResource) == 0x000004, "Wrong alignment on BP_HUD_Counters_C_OnToggleAddedResource");
static_assert(sizeof(BP_HUD_Counters_C_OnToggleAddedResource) == 0x00000C, "Wrong size on BP_HUD_Counters_C_OnToggleAddedResource");
static_assert(offsetof(BP_HUD_Counters_C_OnToggleAddedResource, InPropertyType) == 0x000000, "Member 'BP_HUD_Counters_C_OnToggleAddedResource::InPropertyType' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_OnToggleAddedResource, InValue) == 0x000004, "Member 'BP_HUD_Counters_C_OnToggleAddedResource::InValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_OnToggleAddedResource, InShowing) == 0x000008, "Member 'BP_HUD_Counters_C_OnToggleAddedResource::InShowing' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_OnToggleAddedResource, InAnimate) == 0x000009, "Member 'BP_HUD_Counters_C_OnToggleAddedResource::InAnimate' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_OnToggleAddedResource, K2Node_SwitchEnum_CmpSuccess) == 0x00000A, "Member 'BP_HUD_Counters_C_OnToggleAddedResource::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_HUD_Counters.BP_HUD_Counters_C.ToggleSmallScreen
// 0x0005 (0x0005 - 0x0000)
struct BP_HUD_Counters_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_Counters_C_ToggleSmallScreen) == 0x000001, "Wrong alignment on BP_HUD_Counters_C_ToggleSmallScreen");
static_assert(sizeof(BP_HUD_Counters_C_ToggleSmallScreen) == 0x000005, "Wrong size on BP_HUD_Counters_C_ToggleSmallScreen");
static_assert(offsetof(BP_HUD_Counters_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_HUD_Counters_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_HUD_Counters_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ToggleSmallScreen, Temp_byte_Variable) == 0x000002, "Member 'BP_HUD_Counters_C_ToggleSmallScreen::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ToggleSmallScreen, Temp_byte_Variable_1) == 0x000003, "Member 'BP_HUD_Counters_C_ToggleSmallScreen::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_Counters_C_ToggleSmallScreen, K2Node_Select_Default) == 0x000004, "Member 'BP_HUD_Counters_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");

}

