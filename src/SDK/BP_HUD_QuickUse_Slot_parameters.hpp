#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUD_QuickUse_Slot

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_HUD_QuickUse_Slot.BP_HUD_QuickUse_Slot_C.ExecuteUbergraph_BP_HUD_QuickUse_Slot
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bUsable;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_ElapsedCooldownPercent;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_TimeLeft;                             // 0x0010(0x0018)(ConstParm)
};
static_assert(alignof(BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot");
static_assert(sizeof(BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot) == 0x000028, "Wrong size on BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot, EntryPoint) == 0x000000, "Member 'BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot, K2Node_Event_bUsable) == 0x000004, "Member 'BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot::K2Node_Event_bUsable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot, K2Node_Event_IsDesignTime) == 0x000005, "Member 'BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot, K2Node_Event_ElapsedCooldownPercent) == 0x000008, "Member 'BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot::K2Node_Event_ElapsedCooldownPercent' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot, K2Node_Event_TimeLeft) == 0x000010, "Member 'BP_HUD_QuickUse_Slot_C_ExecuteUbergraph_BP_HUD_QuickUse_Slot::K2Node_Event_TimeLeft' has a wrong offset!");

// Function BP_HUD_QuickUse_Slot.BP_HUD_QuickUse_Slot_C.OnSetQuickUseUsable
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_QuickUse_Slot_C_OnSetQuickUseUsable final
{
public:
	bool                                          bUsable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_QuickUse_Slot_C_OnSetQuickUseUsable) == 0x000001, "Wrong alignment on BP_HUD_QuickUse_Slot_C_OnSetQuickUseUsable");
static_assert(sizeof(BP_HUD_QuickUse_Slot_C_OnSetQuickUseUsable) == 0x000001, "Wrong size on BP_HUD_QuickUse_Slot_C_OnSetQuickUseUsable");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_OnSetQuickUseUsable, bUsable) == 0x000000, "Member 'BP_HUD_QuickUse_Slot_C_OnSetQuickUseUsable::bUsable' has a wrong offset!");

// Function BP_HUD_QuickUse_Slot.BP_HUD_QuickUse_Slot_C.OnSetCountdown
// 0x0020 (0x0020 - 0x0000)
struct BP_HUD_QuickUse_Slot_C_OnSetCountdown final
{
public:
	float                                         ElapsedCooldownPercent;                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimeLeft;                                          // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_HUD_QuickUse_Slot_C_OnSetCountdown) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_Slot_C_OnSetCountdown");
static_assert(sizeof(BP_HUD_QuickUse_Slot_C_OnSetCountdown) == 0x000020, "Wrong size on BP_HUD_QuickUse_Slot_C_OnSetCountdown");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_OnSetCountdown, ElapsedCooldownPercent) == 0x000000, "Member 'BP_HUD_QuickUse_Slot_C_OnSetCountdown::ElapsedCooldownPercent' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_OnSetCountdown, TimeLeft) == 0x000008, "Member 'BP_HUD_QuickUse_Slot_C_OnSetCountdown::TimeLeft' has a wrong offset!");

// Function BP_HUD_QuickUse_Slot.BP_HUD_QuickUse_Slot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_QuickUse_Slot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_QuickUse_Slot_C_PreConstruct) == 0x000001, "Wrong alignment on BP_HUD_QuickUse_Slot_C_PreConstruct");
static_assert(sizeof(BP_HUD_QuickUse_Slot_C_PreConstruct) == 0x000001, "Wrong size on BP_HUD_QuickUse_Slot_C_PreConstruct");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_HUD_QuickUse_Slot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_HUD_QuickUse_Slot.BP_HUD_QuickUse_Slot_C.SetActive
// 0x0040 (0x0040 - 0x0000)
struct BP_HUD_QuickUse_Slot_C_SetActive final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InAnimate;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default_1;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_Slot_C_SetActive) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_Slot_C_SetActive");
static_assert(sizeof(BP_HUD_QuickUse_Slot_C_SetActive) == 0x000040, "Wrong size on BP_HUD_QuickUse_Slot_C_SetActive");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, InIsActive) == 0x000000, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::InIsActive' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, InAnimate) == 0x000001, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::InAnimate' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, Temp_bool_Variable) == 0x000002, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, Temp_float_Variable) == 0x000004, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, Temp_float_Variable_1) == 0x000008, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, Temp_bool_Variable_2) == 0x00000D, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, Temp_float_Variable_2) == 0x000010, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, Temp_float_Variable_3) == 0x000014, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000018, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, K2Node_Select_Default) == 0x000020, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, K2Node_Select_Default_1) == 0x000028, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetActive, K2Node_Select_Default_2) == 0x000038, "Member 'BP_HUD_QuickUse_Slot_C_SetActive::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_HUD_QuickUse_Slot.BP_HUD_QuickUse_Slot_C.Setup
// 0x0078 (0x0078 - 0x0000)
struct BP_HUD_QuickUse_Slot_C_Setup final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InQuantity;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InCapacity;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_3;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0038(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue_1;                  // 0x0058(0x0018)()
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_Slot_C_Setup) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_Slot_C_Setup");
static_assert(sizeof(BP_HUD_QuickUse_Slot_C_Setup) == 0x000078, "Wrong size on BP_HUD_QuickUse_Slot_C_Setup");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, InIcon) == 0x000000, "Member 'BP_HUD_QuickUse_Slot_C_Setup::InIcon' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, InQuantity) == 0x000008, "Member 'BP_HUD_QuickUse_Slot_C_Setup::InQuantity' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, InCapacity) == 0x00000C, "Member 'BP_HUD_QuickUse_Slot_C_Setup::InCapacity' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_bool_Variable) == 0x000010, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_byte_Variable) == 0x000011, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_byte_Variable_1) == 0x000012, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_bool_Variable_1) == 0x000013, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_byte_Variable_2) == 0x000014, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_byte_Variable_3) == 0x000015, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_bool_Variable_2) == 0x000016, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_object_Variable) == 0x000018, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_bool_Variable_3) == 0x000020, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_byte_Variable_4) == 0x000021, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_byte_Variable_5) == 0x000022, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_bool_Variable_4) == 0x000023, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_HUD_QuickUse_Slot_C_Setup::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_byte_Variable_6) == 0x000025, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, Temp_byte_Variable_7) == 0x000026, "Member 'BP_HUD_QuickUse_Slot_C_Setup::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, K2Node_Select_Default) == 0x000027, "Member 'BP_HUD_QuickUse_Slot_C_Setup::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, K2Node_Select_Default_1) == 0x000028, "Member 'BP_HUD_QuickUse_Slot_C_Setup::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, K2Node_Select_Default_2) == 0x000029, "Member 'BP_HUD_QuickUse_Slot_C_Setup::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, CallFunc_IsValid_ReturnValue) == 0x00002A, "Member 'BP_HUD_QuickUse_Slot_C_Setup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, CallFunc_Not_PreBool_ReturnValue) == 0x00002B, "Member 'BP_HUD_QuickUse_Slot_C_Setup::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, K2Node_Select_Default_3) == 0x000030, "Member 'BP_HUD_QuickUse_Slot_C_Setup::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, CallFunc_IntToText_ReturnValue) == 0x000038, "Member 'BP_HUD_QuickUse_Slot_C_Setup::CallFunc_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, K2Node_Select_Default_4) == 0x000050, "Member 'BP_HUD_QuickUse_Slot_C_Setup::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, CallFunc_IntToText_ReturnValue_1) == 0x000058, "Member 'BP_HUD_QuickUse_Slot_C_Setup::CallFunc_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_Setup, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000070, "Member 'BP_HUD_QuickUse_Slot_C_Setup::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_HUD_QuickUse_Slot.BP_HUD_QuickUse_Slot_C.SetUsing
// 0x0010 (0x0010 - 0x0000)
struct BP_HUD_QuickUse_Slot_C_SetUsing final
{
public:
	bool                                          InIsUsing;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_Slot_C_SetUsing) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_Slot_C_SetUsing");
static_assert(sizeof(BP_HUD_QuickUse_Slot_C_SetUsing) == 0x000010, "Wrong size on BP_HUD_QuickUse_Slot_C_SetUsing");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetUsing, InIsUsing) == 0x000000, "Member 'BP_HUD_QuickUse_Slot_C_SetUsing::InIsUsing' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetUsing, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_QuickUse_Slot_C_SetUsing::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_QuickUse_Slot.BP_HUD_QuickUse_Slot_C.SetCountdown
// 0x0060 (0x0060 - 0x0000)
struct BP_HUD_QuickUse_Slot_C_SetCountdown final
{
public:
	float                                         PercentLeft;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimeLeft;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x0028(0x0018)()
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_Slot_C_SetCountdown) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_Slot_C_SetCountdown");
static_assert(sizeof(BP_HUD_QuickUse_Slot_C_SetCountdown) == 0x000060, "Wrong size on BP_HUD_QuickUse_Slot_C_SetCountdown");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetCountdown, PercentLeft) == 0x000000, "Member 'BP_HUD_QuickUse_Slot_C_SetCountdown::PercentLeft' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetCountdown, TimeLeft) == 0x000008, "Member 'BP_HUD_QuickUse_Slot_C_SetCountdown::TimeLeft' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetCountdown, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_HUD_QuickUse_Slot_C_SetCountdown::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetCountdown, CallFunc_GetEmptyText_ReturnValue) == 0x000028, "Member 'BP_HUD_QuickUse_Slot_C_SetCountdown::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetCountdown, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000040, "Member 'BP_HUD_QuickUse_Slot_C_SetCountdown::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetCountdown, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_HUD_QuickUse_Slot_C_SetCountdown::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetCountdown, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000050, "Member 'BP_HUD_QuickUse_Slot_C_SetCountdown::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_Slot_C_SetCountdown, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_HUD_QuickUse_Slot_C_SetCountdown::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

}

