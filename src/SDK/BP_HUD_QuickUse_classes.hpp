#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUD_QuickUse

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_structs.hpp"
#include "man_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_HUD_QuickUse.BP_HUD_QuickUse_C
// 0x00F8 (0x0388 - 0x0290)
class UBP_HUD_QuickUse_C final : public UHUDQuickUseUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ShiftLeftAnim;                                     // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ShiftRightAnim;                                    // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       UseItemAnim;                                       // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                Bg;                                                // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               BgSizeBox;                                         // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               ControllerButtons;                                 // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_InteractButton_Normal_C*            ControllerKeyLeft;                                 // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_InteractButton_Normal_C*            ControllerKeyRight;                                // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_InteractButton_Normal_C*            ControllerKeyTrigger;                              // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_1;                                         // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Slots;                                     // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Use;                                       // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBoxKeyLeft;                                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBoxKeyRight;                                  // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBoxKeyTrigger;                                // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_HUD_QuickUse_Slot_C*                Slot0;                                             // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_HUD_QuickUse_Slot_C*                Slot1;                                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_HUD_QuickUse_Slot_C*                Slot2;                                             // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_HUD_QuickUse_Slot_C*                Slot3;                                             // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_HUD_QuickUse_Slot_C*                Slot4;                                             // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_HUD_QuickUse_Slot_C*                Slot5;                                             // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_HUD_QuickUse_Slot_C*                Slot6;                                             // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_HUD_QuickUse_Slot_C*                SlotUse;                                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UBP_HUD_QuickUse_Slot_C*>        NextSlots;                                         // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UBP_HUD_QuickUse_Slot_C*>        PrevSlots;                                         // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMulticastInlineDelegate<void(int32 VisibleSlots)> QuickUseUpdate;                                    // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsSmallScreen;                                     // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_BP_HUD_QuickUse(int32 EntryPoint);
	void OnQuickUseChange(EQuickUseCommand InQuickUseCommand, class UInventorySlot* InActiveQuickUse, const TArray<class UInventorySlot*>& InNextQuickUseArray, const TArray<class UInventorySlot*>& InPrevQuickUseArray, class UInventorySlot* InUsedItem);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void OnItemUsed(class UInventorySlot* Item);
	void ShiftLeft(class UInventorySlot* Active, TArray<class UInventorySlot*>& NextArray, TArray<class UInventorySlot*>& PrevArray);
	void UseItem(class UInventorySlot* Active, TArray<class UInventorySlot*>& NextArray, TArray<class UInventorySlot*>& PrevArray, class UInventorySlot* Used);
	void UpdateSlots(class UInventorySlot* Active, TArray<class UInventorySlot*>& NextArray, TArray<class UInventorySlot*>& PrevArray);
	void Set_Slots(class UInventorySlot* Active, TArray<class UInventorySlot*>& NextArray, TArray<class UInventorySlot*>& PrevArray);
	void ShiftRight(class UInventorySlot* Active, TArray<class UInventorySlot*>& NextArray, TArray<class UInventorySlot*>& PrevArray);
	void SetSlot(class UInventorySlot* InventorySlot, class UBP_HUD_QuickUse_Slot_C* QuickUseSlot);
	class UTexture2D* GetUsedItemIcon(class UInventorySlot* UsedItem);
	void SetBgWidth();
	void SetupQuickUse(EQuickUseCommand QuickUseCommand, class UInventorySlot* ActiveQuickUse_0, TArray<class UInventorySlot*>& NextQuickUseArray_0, TArray<class UInventorySlot*>& PrevQuickUseArray_0, class UInventorySlot* UsedItem);
	void SetControllerButtonPositions();
	void ToggleEnabled(bool inEnabled);
	void ToggleSmallScreen(bool InIsSmallScreen);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HUD_QuickUse_C">();
	}
	static class UBP_HUD_QuickUse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_HUD_QuickUse_C>();
	}
};
static_assert(alignof(UBP_HUD_QuickUse_C) == 0x000008, "Wrong alignment on UBP_HUD_QuickUse_C");
static_assert(sizeof(UBP_HUD_QuickUse_C) == 0x000388, "Wrong size on UBP_HUD_QuickUse_C");
static_assert(offsetof(UBP_HUD_QuickUse_C, UberGraphFrame) == 0x000290, "Member 'UBP_HUD_QuickUse_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, ShiftLeftAnim) == 0x000298, "Member 'UBP_HUD_QuickUse_C::ShiftLeftAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, ShiftRightAnim) == 0x0002A0, "Member 'UBP_HUD_QuickUse_C::ShiftRightAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, UseItemAnim) == 0x0002A8, "Member 'UBP_HUD_QuickUse_C::UseItemAnim' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, Bg) == 0x0002B0, "Member 'UBP_HUD_QuickUse_C::Bg' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, BgSizeBox) == 0x0002B8, "Member 'UBP_HUD_QuickUse_C::BgSizeBox' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, ControllerButtons) == 0x0002C0, "Member 'UBP_HUD_QuickUse_C::ControllerButtons' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, ControllerKeyLeft) == 0x0002C8, "Member 'UBP_HUD_QuickUse_C::ControllerKeyLeft' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, ControllerKeyRight) == 0x0002D0, "Member 'UBP_HUD_QuickUse_C::ControllerKeyRight' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, ControllerKeyTrigger) == 0x0002D8, "Member 'UBP_HUD_QuickUse_C::ControllerKeyTrigger' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, Overlay_1) == 0x0002E0, "Member 'UBP_HUD_QuickUse_C::Overlay_1' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, Overlay_Slots) == 0x0002E8, "Member 'UBP_HUD_QuickUse_C::Overlay_Slots' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, Overlay_Use) == 0x0002F0, "Member 'UBP_HUD_QuickUse_C::Overlay_Use' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, ScaleBoxKeyLeft) == 0x0002F8, "Member 'UBP_HUD_QuickUse_C::ScaleBoxKeyLeft' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, ScaleBoxKeyRight) == 0x000300, "Member 'UBP_HUD_QuickUse_C::ScaleBoxKeyRight' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, ScaleBoxKeyTrigger) == 0x000308, "Member 'UBP_HUD_QuickUse_C::ScaleBoxKeyTrigger' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, Slot0) == 0x000310, "Member 'UBP_HUD_QuickUse_C::Slot0' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, Slot1) == 0x000318, "Member 'UBP_HUD_QuickUse_C::Slot1' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, Slot2) == 0x000320, "Member 'UBP_HUD_QuickUse_C::Slot2' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, Slot3) == 0x000328, "Member 'UBP_HUD_QuickUse_C::Slot3' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, Slot4) == 0x000330, "Member 'UBP_HUD_QuickUse_C::Slot4' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, Slot5) == 0x000338, "Member 'UBP_HUD_QuickUse_C::Slot5' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, Slot6) == 0x000340, "Member 'UBP_HUD_QuickUse_C::Slot6' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, SlotUse) == 0x000348, "Member 'UBP_HUD_QuickUse_C::SlotUse' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, NextSlots) == 0x000350, "Member 'UBP_HUD_QuickUse_C::NextSlots' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, PrevSlots) == 0x000360, "Member 'UBP_HUD_QuickUse_C::PrevSlots' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, QuickUseUpdate) == 0x000370, "Member 'UBP_HUD_QuickUse_C::QuickUseUpdate' has a wrong offset!");
static_assert(offsetof(UBP_HUD_QuickUse_C, IsSmallScreen) == 0x000380, "Member 'UBP_HUD_QuickUse_C::IsSmallScreen' has a wrong offset!");

}

