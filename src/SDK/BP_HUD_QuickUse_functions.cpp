#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUD_QuickUse

#include "Basic.hpp"

#include "BP_HUD_QuickUse_classes.hpp"
#include "BP_HUD_QuickUse_parameters.hpp"


namespace SDK
{

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.ExecuteUbergraph_BP_HUD_QuickUse
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HUD_QuickUse_C::ExecuteUbergraph_BP_HUD_QuickUse(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "ExecuteUbergraph_BP_HUD_QuickUse");

	Params::BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.OnQuickUseChange
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// EQuickUseCommand                        InQuickUseCommand                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventorySlot*                   InActiveQuickUse                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UInventorySlot*>           InNextQuickUseArray                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UInventorySlot*>           InPrevQuickUseArray                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UInventorySlot*                   InUsedItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HUD_QuickUse_C::OnQuickUseChange(EQuickUseCommand InQuickUseCommand, class UInventorySlot* InActiveQuickUse, const TArray<class UInventorySlot*>& InNextQuickUseArray, const TArray<class UInventorySlot*>& InPrevQuickUseArray, class UInventorySlot* InUsedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "OnQuickUseChange");

	Params::BP_HUD_QuickUse_C_OnQuickUseChange Parms{};

	Parms.InQuickUseCommand = InQuickUseCommand;
	Parms.InActiveQuickUse = InActiveQuickUse;
	Parms.InNextQuickUseArray = std::move(InNextQuickUseArray);
	Parms.InPrevQuickUseArray = std::move(InPrevQuickUseArray);
	Parms.InUsedItem = InUsedItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HUD_QuickUse_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "Tick");

	Params::BP_HUD_QuickUse_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_HUD_QuickUse_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_HUD_QuickUse_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "PreConstruct");

	Params::BP_HUD_QuickUse_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.OnItemUsed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventorySlot*                   Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HUD_QuickUse_C::OnItemUsed(class UInventorySlot* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "OnItemUsed");

	Params::BP_HUD_QuickUse_C_OnItemUsed Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.ShiftLeft
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventorySlot*                   Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UInventorySlot*>           NextArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UInventorySlot*>           PrevArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_HUD_QuickUse_C::ShiftLeft(class UInventorySlot* Active, TArray<class UInventorySlot*>& NextArray, TArray<class UInventorySlot*>& PrevArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "ShiftLeft");

	Params::BP_HUD_QuickUse_C_ShiftLeft Parms{};

	Parms.Active = Active;
	Parms.NextArray = std::move(NextArray);
	Parms.PrevArray = std::move(PrevArray);

	UObject::ProcessEvent(Func, &Parms);

	NextArray = std::move(Parms.NextArray);
	PrevArray = std::move(Parms.PrevArray);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.UseItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventorySlot*                   Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UInventorySlot*>           NextArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UInventorySlot*>           PrevArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UInventorySlot*                   Used                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HUD_QuickUse_C::UseItem(class UInventorySlot* Active, TArray<class UInventorySlot*>& NextArray, TArray<class UInventorySlot*>& PrevArray, class UInventorySlot* Used)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "UseItem");

	Params::BP_HUD_QuickUse_C_UseItem Parms{};

	Parms.Active = Active;
	Parms.NextArray = std::move(NextArray);
	Parms.PrevArray = std::move(PrevArray);
	Parms.Used = Used;

	UObject::ProcessEvent(Func, &Parms);

	NextArray = std::move(Parms.NextArray);
	PrevArray = std::move(Parms.PrevArray);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.UpdateSlots
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventorySlot*                   Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UInventorySlot*>           NextArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UInventorySlot*>           PrevArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_HUD_QuickUse_C::UpdateSlots(class UInventorySlot* Active, TArray<class UInventorySlot*>& NextArray, TArray<class UInventorySlot*>& PrevArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "UpdateSlots");

	Params::BP_HUD_QuickUse_C_UpdateSlots Parms{};

	Parms.Active = Active;
	Parms.NextArray = std::move(NextArray);
	Parms.PrevArray = std::move(PrevArray);

	UObject::ProcessEvent(Func, &Parms);

	NextArray = std::move(Parms.NextArray);
	PrevArray = std::move(Parms.PrevArray);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.Set Slots
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventorySlot*                   Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UInventorySlot*>           NextArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UInventorySlot*>           PrevArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_HUD_QuickUse_C::Set_Slots(class UInventorySlot* Active, TArray<class UInventorySlot*>& NextArray, TArray<class UInventorySlot*>& PrevArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "Set Slots");

	Params::BP_HUD_QuickUse_C_Set_Slots Parms{};

	Parms.Active = Active;
	Parms.NextArray = std::move(NextArray);
	Parms.PrevArray = std::move(PrevArray);

	UObject::ProcessEvent(Func, &Parms);

	NextArray = std::move(Parms.NextArray);
	PrevArray = std::move(Parms.PrevArray);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.ShiftRight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventorySlot*                   Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UInventorySlot*>           NextArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UInventorySlot*>           PrevArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_HUD_QuickUse_C::ShiftRight(class UInventorySlot* Active, TArray<class UInventorySlot*>& NextArray, TArray<class UInventorySlot*>& PrevArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "ShiftRight");

	Params::BP_HUD_QuickUse_C_ShiftRight Parms{};

	Parms.Active = Active;
	Parms.NextArray = std::move(NextArray);
	Parms.PrevArray = std::move(PrevArray);

	UObject::ProcessEvent(Func, &Parms);

	NextArray = std::move(Parms.NextArray);
	PrevArray = std::move(Parms.PrevArray);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.SetSlot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventorySlot*                   InventorySlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_HUD_QuickUse_Slot_C*          QuickUseSlot                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HUD_QuickUse_C::SetSlot(class UInventorySlot* InventorySlot, class UBP_HUD_QuickUse_Slot_C* QuickUseSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "SetSlot");

	Params::BP_HUD_QuickUse_C_SetSlot Parms{};

	Parms.InventorySlot = InventorySlot;
	Parms.QuickUseSlot = QuickUseSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.GetUsedItemIcon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UInventorySlot*                   UsedItem                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UTexture2D* UBP_HUD_QuickUse_C::GetUsedItemIcon(class UInventorySlot* UsedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "GetUsedItemIcon");

	Params::BP_HUD_QuickUse_C_GetUsedItemIcon Parms{};

	Parms.UsedItem = UsedItem;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.SetBgWidth
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_HUD_QuickUse_C::SetBgWidth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "SetBgWidth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.SetupQuickUse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EQuickUseCommand                        QuickUseCommand                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventorySlot*                   ActiveQuickUse_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UInventorySlot*>           NextQuickUseArray_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UInventorySlot*>           PrevQuickUseArray_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UInventorySlot*                   UsedItem                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HUD_QuickUse_C::SetupQuickUse(EQuickUseCommand QuickUseCommand, class UInventorySlot* ActiveQuickUse_0, TArray<class UInventorySlot*>& NextQuickUseArray_0, TArray<class UInventorySlot*>& PrevQuickUseArray_0, class UInventorySlot* UsedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "SetupQuickUse");

	Params::BP_HUD_QuickUse_C_SetupQuickUse Parms{};

	Parms.QuickUseCommand = QuickUseCommand;
	Parms.ActiveQuickUse_0 = ActiveQuickUse_0;
	Parms.NextQuickUseArray_0 = std::move(NextQuickUseArray_0);
	Parms.PrevQuickUseArray_0 = std::move(PrevQuickUseArray_0);
	Parms.UsedItem = UsedItem;

	UObject::ProcessEvent(Func, &Parms);

	NextQuickUseArray_0 = std::move(Parms.NextQuickUseArray_0);
	PrevQuickUseArray_0 = std::move(Parms.PrevQuickUseArray_0);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.SetControllerButtonPositions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_HUD_QuickUse_C::SetControllerButtonPositions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "SetControllerButtonPositions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.ToggleEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    inEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_HUD_QuickUse_C::ToggleEnabled(bool inEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "ToggleEnabled");

	Params::BP_HUD_QuickUse_C_ToggleEnabled Parms{};

	Parms.inEnabled = inEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.ToggleSmallScreen
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsSmallScreen                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_HUD_QuickUse_C::ToggleSmallScreen(bool InIsSmallScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HUD_QuickUse_C", "ToggleSmallScreen");

	Params::BP_HUD_QuickUse_C_ToggleSmallScreen Parms{};

	Parms.InIsSmallScreen = InIsSmallScreen;

	UObject::ProcessEvent(Func, &Parms);
}

}

