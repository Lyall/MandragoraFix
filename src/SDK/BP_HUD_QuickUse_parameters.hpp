#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUD_QuickUse

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "man_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.ExecuteUbergraph_BP_HUD_QuickUse
// 0x00B8 (0x00B8 - 0x0000)
struct BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuickUseCommand                              K2Node_Event_InQuickUseCommand;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventorySlot*                         K2Node_Event_InActiveQuickUse;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInventorySlot*>                 K2Node_Event_InNextQuickUseArray;                  // 0x0050(0x0010)(ConstParm, ReferenceParm)
	TArray<class UInventorySlot*>                 K2Node_Event_InPrevQuickUseArray;                  // 0x0060(0x0010)(ConstParm, ReferenceParm)
	class UInventorySlot*                         K2Node_Event_InUsedItem;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInventorySlot*>                 K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UInventorySlot*>                 K2Node_MakeArray_Array_1;                          // 0x00A0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse");
static_assert(sizeof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse) == 0x0000B8, "Wrong size on BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, EntryPoint) == 0x000000, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, K2Node_Event_InQuickUseCommand) == 0x000044, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::K2Node_Event_InQuickUseCommand' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, K2Node_Event_InActiveQuickUse) == 0x000048, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::K2Node_Event_InActiveQuickUse' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, K2Node_Event_InNextQuickUseArray) == 0x000050, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::K2Node_Event_InNextQuickUseArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, K2Node_Event_InPrevQuickUseArray) == 0x000060, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::K2Node_Event_InPrevQuickUseArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, K2Node_Event_InUsedItem) == 0x000070, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::K2Node_Event_InUsedItem' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, CallFunc_Array_Add_ReturnValue) == 0x000078, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, CallFunc_Array_Add_ReturnValue_1) == 0x00007C, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, CallFunc_Array_Add_ReturnValue_2) == 0x000080, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, CallFunc_Array_Add_ReturnValue_3) == 0x000084, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, K2Node_MakeArray_Array) == 0x000088, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, CallFunc_Array_Add_ReturnValue_4) == 0x000098, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, K2Node_MakeArray_Array_1) == 0x0000A0, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse, CallFunc_Array_Add_ReturnValue_5) == 0x0000B0, "Member 'BP_HUD_QuickUse_C_ExecuteUbergraph_BP_HUD_QuickUse::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.OnQuickUseChange
// 0x0038 (0x0038 - 0x0000)
struct BP_HUD_QuickUse_C_OnQuickUseChange final
{
public:
	EQuickUseCommand                              InQuickUseCommand;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventorySlot*                         InActiveQuickUse;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInventorySlot*>                 InNextQuickUseArray;                               // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UInventorySlot*>                 InPrevQuickUseArray;                               // 0x0020(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UInventorySlot*                         InUsedItem;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_C_OnQuickUseChange) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_OnQuickUseChange");
static_assert(sizeof(BP_HUD_QuickUse_C_OnQuickUseChange) == 0x000038, "Wrong size on BP_HUD_QuickUse_C_OnQuickUseChange");
static_assert(offsetof(BP_HUD_QuickUse_C_OnQuickUseChange, InQuickUseCommand) == 0x000000, "Member 'BP_HUD_QuickUse_C_OnQuickUseChange::InQuickUseCommand' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_OnQuickUseChange, InActiveQuickUse) == 0x000008, "Member 'BP_HUD_QuickUse_C_OnQuickUseChange::InActiveQuickUse' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_OnQuickUseChange, InNextQuickUseArray) == 0x000010, "Member 'BP_HUD_QuickUse_C_OnQuickUseChange::InNextQuickUseArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_OnQuickUseChange, InPrevQuickUseArray) == 0x000020, "Member 'BP_HUD_QuickUse_C_OnQuickUseChange::InPrevQuickUseArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_OnQuickUseChange, InUsedItem) == 0x000030, "Member 'BP_HUD_QuickUse_C_OnQuickUseChange::InUsedItem' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_HUD_QuickUse_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_C_Tick) == 0x000004, "Wrong alignment on BP_HUD_QuickUse_C_Tick");
static_assert(sizeof(BP_HUD_QuickUse_C_Tick) == 0x00003C, "Wrong size on BP_HUD_QuickUse_C_Tick");
static_assert(offsetof(BP_HUD_QuickUse_C_Tick, MyGeometry) == 0x000000, "Member 'BP_HUD_QuickUse_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_HUD_QuickUse_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_QuickUse_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_QuickUse_C_PreConstruct) == 0x000001, "Wrong alignment on BP_HUD_QuickUse_C_PreConstruct");
static_assert(sizeof(BP_HUD_QuickUse_C_PreConstruct) == 0x000001, "Wrong size on BP_HUD_QuickUse_C_PreConstruct");
static_assert(offsetof(BP_HUD_QuickUse_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_HUD_QuickUse_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.OnItemUsed
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_QuickUse_C_OnItemUsed final
{
public:
	class UInventorySlot*                         Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_C_OnItemUsed) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_OnItemUsed");
static_assert(sizeof(BP_HUD_QuickUse_C_OnItemUsed) == 0x000008, "Wrong size on BP_HUD_QuickUse_C_OnItemUsed");
static_assert(offsetof(BP_HUD_QuickUse_C_OnItemUsed, Item) == 0x000000, "Member 'BP_HUD_QuickUse_C_OnItemUsed::Item' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.ShiftLeft
// 0x0030 (0x0030 - 0x0000)
struct BP_HUD_QuickUse_C_ShiftLeft final
{
public:
	class UInventorySlot*                         Active;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInventorySlot*>                 NextArray;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UInventorySlot*>                 PrevArray;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_C_ShiftLeft) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_ShiftLeft");
static_assert(sizeof(BP_HUD_QuickUse_C_ShiftLeft) == 0x000030, "Wrong size on BP_HUD_QuickUse_C_ShiftLeft");
static_assert(offsetof(BP_HUD_QuickUse_C_ShiftLeft, Active) == 0x000000, "Member 'BP_HUD_QuickUse_C_ShiftLeft::Active' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ShiftLeft, NextArray) == 0x000008, "Member 'BP_HUD_QuickUse_C_ShiftLeft::NextArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ShiftLeft, PrevArray) == 0x000018, "Member 'BP_HUD_QuickUse_C_ShiftLeft::PrevArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ShiftLeft, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'BP_HUD_QuickUse_C_ShiftLeft::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.UseItem
// 0x0050 (0x0050 - 0x0000)
struct BP_HUD_QuickUse_C_UseItem final
{
public:
	class UInventorySlot*                         Active;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInventorySlot*>                 NextArray;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UInventorySlot*>                 PrevArray;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UInventorySlot*                         Used;                                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_GetUsedItemIcon_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_C_UseItem) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_UseItem");
static_assert(sizeof(BP_HUD_QuickUse_C_UseItem) == 0x000050, "Wrong size on BP_HUD_QuickUse_C_UseItem");
static_assert(offsetof(BP_HUD_QuickUse_C_UseItem, Active) == 0x000000, "Member 'BP_HUD_QuickUse_C_UseItem::Active' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_UseItem, NextArray) == 0x000008, "Member 'BP_HUD_QuickUse_C_UseItem::NextArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_UseItem, PrevArray) == 0x000018, "Member 'BP_HUD_QuickUse_C_UseItem::PrevArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_UseItem, Used) == 0x000028, "Member 'BP_HUD_QuickUse_C_UseItem::Used' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_UseItem, CallFunc_GetUsedItemIcon_ReturnValue) == 0x000030, "Member 'BP_HUD_QuickUse_C_UseItem::CallFunc_GetUsedItemIcon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_UseItem, CallFunc_BreakVector2D_X) == 0x000038, "Member 'BP_HUD_QuickUse_C_UseItem::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_UseItem, CallFunc_BreakVector2D_Y) == 0x00003C, "Member 'BP_HUD_QuickUse_C_UseItem::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_UseItem, CallFunc_PlayAnimation_ReturnValue) == 0x000040, "Member 'BP_HUD_QuickUse_C_UseItem::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_UseItem, CallFunc_MakeVector2D_ReturnValue) == 0x000048, "Member 'BP_HUD_QuickUse_C_UseItem::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.UpdateSlots
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_QuickUse_C_UpdateSlots final
{
public:
	class UInventorySlot*                         Active;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInventorySlot*>                 NextArray;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UInventorySlot*>                 PrevArray;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_HUD_QuickUse_C_UpdateSlots) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_UpdateSlots");
static_assert(sizeof(BP_HUD_QuickUse_C_UpdateSlots) == 0x000028, "Wrong size on BP_HUD_QuickUse_C_UpdateSlots");
static_assert(offsetof(BP_HUD_QuickUse_C_UpdateSlots, Active) == 0x000000, "Member 'BP_HUD_QuickUse_C_UpdateSlots::Active' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_UpdateSlots, NextArray) == 0x000008, "Member 'BP_HUD_QuickUse_C_UpdateSlots::NextArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_UpdateSlots, PrevArray) == 0x000018, "Member 'BP_HUD_QuickUse_C_UpdateSlots::PrevArray' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.Set Slots
// 0x0080 (0x0080 - 0x0000)
struct BP_HUD_QuickUse_C_Set_Slots final
{
public:
	class UInventorySlot*                         Active;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInventorySlot*>                 NextArray;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UInventorySlot*>                 PrevArray;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventorySlot*                         CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_HUD_QuickUse_Slot_C*                CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventorySlot*                         CallFunc_Array_Get_Item_2;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_HUD_QuickUse_Slot_C*                CallFunc_Array_Get_Item_3;                         // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_QuickUse_C_Set_Slots) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_Set_Slots");
static_assert(sizeof(BP_HUD_QuickUse_C_Set_Slots) == 0x000080, "Wrong size on BP_HUD_QuickUse_C_Set_Slots");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, Active) == 0x000000, "Member 'BP_HUD_QuickUse_C_Set_Slots::Active' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, NextArray) == 0x000008, "Member 'BP_HUD_QuickUse_C_Set_Slots::NextArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, PrevArray) == 0x000018, "Member 'BP_HUD_QuickUse_C_Set_Slots::PrevArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_HUD_QuickUse_C_Set_Slots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_HUD_QuickUse_C_Set_Slots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, Temp_int_Array_Index_Variable_1) == 0x000034, "Member 'BP_HUD_QuickUse_C_Set_Slots::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, Temp_int_Loop_Counter_Variable_1) == 0x000054, "Member 'BP_HUD_QuickUse_C_Set_Slots::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Array_Get_Item_2) == 0x000058, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Less_IntInt_ReturnValue_1) == 0x000060, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Add_IntInt_ReturnValue_1) == 0x000064, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Array_Get_Item_3) == 0x000068, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Array_Length_ReturnValue_2) == 0x000070, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Less_IntInt_ReturnValue_2) == 0x000074, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Array_Length_ReturnValue_3) == 0x000078, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_Set_Slots, CallFunc_Less_IntInt_ReturnValue_3) == 0x00007C, "Member 'BP_HUD_QuickUse_C_Set_Slots::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.ShiftRight
// 0x0030 (0x0030 - 0x0000)
struct BP_HUD_QuickUse_C_ShiftRight final
{
public:
	class UInventorySlot*                         Active;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInventorySlot*>                 NextArray;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UInventorySlot*>                 PrevArray;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_C_ShiftRight) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_ShiftRight");
static_assert(sizeof(BP_HUD_QuickUse_C_ShiftRight) == 0x000030, "Wrong size on BP_HUD_QuickUse_C_ShiftRight");
static_assert(offsetof(BP_HUD_QuickUse_C_ShiftRight, Active) == 0x000000, "Member 'BP_HUD_QuickUse_C_ShiftRight::Active' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ShiftRight, NextArray) == 0x000008, "Member 'BP_HUD_QuickUse_C_ShiftRight::NextArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ShiftRight, PrevArray) == 0x000018, "Member 'BP_HUD_QuickUse_C_ShiftRight::PrevArray' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ShiftRight, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'BP_HUD_QuickUse_C_ShiftRight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.SetSlot
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_QuickUse_C_SetSlot final
{
public:
	class UInventorySlot*                         InventorySlot;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_HUD_QuickUse_Slot_C*                QuickUseSlot;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_BPGetIcon_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BPGetMaxStackNum_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_C_SetSlot) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_SetSlot");
static_assert(sizeof(BP_HUD_QuickUse_C_SetSlot) == 0x000028, "Wrong size on BP_HUD_QuickUse_C_SetSlot");
static_assert(offsetof(BP_HUD_QuickUse_C_SetSlot, InventorySlot) == 0x000000, "Member 'BP_HUD_QuickUse_C_SetSlot::InventorySlot' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetSlot, QuickUseSlot) == 0x000008, "Member 'BP_HUD_QuickUse_C_SetSlot::QuickUseSlot' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetSlot, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_HUD_QuickUse_C_SetSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetSlot, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_HUD_QuickUse_C_SetSlot::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetSlot, CallFunc_BPGetIcon_ReturnValue) == 0x000018, "Member 'BP_HUD_QuickUse_C_SetSlot::CallFunc_BPGetIcon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetSlot, CallFunc_BPGetMaxStackNum_ReturnValue) == 0x000020, "Member 'BP_HUD_QuickUse_C_SetSlot::CallFunc_BPGetMaxStackNum_ReturnValue' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.GetUsedItemIcon
// 0x0020 (0x0020 - 0x0000)
struct BP_HUD_QuickUse_C_GetUsedItemIcon final
{
public:
	class UInventorySlot*                         UsedItem;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_BPGetIcon_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_QuickUse_C_GetUsedItemIcon) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_GetUsedItemIcon");
static_assert(sizeof(BP_HUD_QuickUse_C_GetUsedItemIcon) == 0x000020, "Wrong size on BP_HUD_QuickUse_C_GetUsedItemIcon");
static_assert(offsetof(BP_HUD_QuickUse_C_GetUsedItemIcon, UsedItem) == 0x000000, "Member 'BP_HUD_QuickUse_C_GetUsedItemIcon::UsedItem' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_GetUsedItemIcon, ReturnValue) == 0x000008, "Member 'BP_HUD_QuickUse_C_GetUsedItemIcon::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_GetUsedItemIcon, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_HUD_QuickUse_C_GetUsedItemIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_GetUsedItemIcon, CallFunc_BPGetIcon_ReturnValue) == 0x000018, "Member 'BP_HUD_QuickUse_C_GetUsedItemIcon::CallFunc_BPGetIcon_ReturnValue' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.SetBgWidth
// 0x00A8 (0x00A8 - 0x0000)
struct BP_HUD_QuickUse_C_SetBgWidth final
{
public:
	int32                                         VisibleCount;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_8;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0070(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_HUD_QuickUse_Slot_C*                K2Node_DynamicCast_AsBP_HUD_Quick_Use_Slot;        // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_QuickUse_C_SetBgWidth) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_SetBgWidth");
static_assert(sizeof(BP_HUD_QuickUse_C_SetBgWidth) == 0x0000A8, "Wrong size on BP_HUD_QuickUse_C_SetBgWidth");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, VisibleCount) == 0x000000, "Member 'BP_HUD_QuickUse_C_SetBgWidth::VisibleCount' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_int_Variable) == 0x000004, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_float_Variable) == 0x000008, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_float_Variable_1) == 0x00000C, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_float_Variable_2) == 0x000010, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_float_Variable_3) == 0x000014, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_float_Variable_4) == 0x000018, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_float_Variable_5) == 0x00001C, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_float_Variable_6) == 0x000020, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_float_Variable_7) == 0x000024, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_int_Variable_1) == 0x000028, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_int_Variable_2) == 0x00002C, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_float_Variable_8) == 0x000030, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, Temp_float_Variable_9) == 0x000040, "Member 'BP_HUD_QuickUse_C_SetBgWidth::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_Percent_IntInt_ReturnValue) == 0x000044, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, K2Node_Select_Default) == 0x000048, "Member 'BP_HUD_QuickUse_C_SetBgWidth::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_MakeVector2D_ReturnValue) == 0x00004C, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, K2Node_Select_Default_1) == 0x000054, "Member 'BP_HUD_QuickUse_C_SetBgWidth::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_MakeVector2D_ReturnValue_1) == 0x000058, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_Multiply_IntInt_ReturnValue) == 0x000060, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_Add_IntInt_ReturnValue_1) == 0x000064, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000068, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_Add_IntInt_ReturnValue_2) == 0x00006C, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_GetAllChildren_ReturnValue) == 0x000070, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_Array_Get_Item) == 0x000088, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, K2Node_DynamicCast_AsBP_HUD_Quick_Use_Slot) == 0x000098, "Member 'BP_HUD_QuickUse_C_SetBgWidth::K2Node_DynamicCast_AsBP_HUD_Quick_Use_Slot' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BP_HUD_QuickUse_C_SetBgWidth::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetBgWidth, CallFunc_Not_PreBool_ReturnValue) == 0x0000A1, "Member 'BP_HUD_QuickUse_C_SetBgWidth::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.SetupQuickUse
// 0x0040 (0x0040 - 0x0000)
struct BP_HUD_QuickUse_C_SetupQuickUse final
{
public:
	EQuickUseCommand                              QuickUseCommand;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventorySlot*                         ActiveQuickUse_0;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInventorySlot*>                 NextQuickUseArray_0;                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UInventorySlot*>                 PrevQuickUseArray_0;                               // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UInventorySlot*                         UsedItem;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_QuickUse_C_SetupQuickUse) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_SetupQuickUse");
static_assert(sizeof(BP_HUD_QuickUse_C_SetupQuickUse) == 0x000040, "Wrong size on BP_HUD_QuickUse_C_SetupQuickUse");
static_assert(offsetof(BP_HUD_QuickUse_C_SetupQuickUse, QuickUseCommand) == 0x000000, "Member 'BP_HUD_QuickUse_C_SetupQuickUse::QuickUseCommand' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetupQuickUse, ActiveQuickUse_0) == 0x000008, "Member 'BP_HUD_QuickUse_C_SetupQuickUse::ActiveQuickUse_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetupQuickUse, NextQuickUseArray_0) == 0x000010, "Member 'BP_HUD_QuickUse_C_SetupQuickUse::NextQuickUseArray_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetupQuickUse, PrevQuickUseArray_0) == 0x000020, "Member 'BP_HUD_QuickUse_C_SetupQuickUse::PrevQuickUseArray_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetupQuickUse, UsedItem) == 0x000030, "Member 'BP_HUD_QuickUse_C_SetupQuickUse::UsedItem' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetupQuickUse, K2Node_SwitchEnum_CmpSuccess) == 0x000038, "Member 'BP_HUD_QuickUse_C_SetupQuickUse::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.SetControllerButtonPositions
// 0x00B0 (0x00B0 - 0x0000)
struct BP_HUD_QuickUse_C_SetControllerButtonPositions final
{
public:
	int32                                         VisibleCount;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_8;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_10;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_11;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_12;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_13;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_14;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_15;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0078(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_HUD_QuickUse_Slot_C*                K2Node_DynamicCast_AsBP_HUD_Quick_Use_Slot;        // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_QuickUse_C_SetControllerButtonPositions) == 0x000008, "Wrong alignment on BP_HUD_QuickUse_C_SetControllerButtonPositions");
static_assert(sizeof(BP_HUD_QuickUse_C_SetControllerButtonPositions) == 0x0000B0, "Wrong size on BP_HUD_QuickUse_C_SetControllerButtonPositions");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, VisibleCount) == 0x000000, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::VisibleCount' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable) == 0x000004, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_1) == 0x000008, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_2) == 0x00000C, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_3) == 0x000010, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_4) == 0x000014, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_int_Variable) == 0x000018, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_5) == 0x00001C, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_6) == 0x000020, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_7) == 0x000024, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_8) == 0x000028, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_9) == 0x00002C, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_10) == 0x000030, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_11) == 0x000034, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_12) == 0x000038, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_int_Variable_1) == 0x00003C, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_int_Variable_2) == 0x000040, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_13) == 0x000044, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_14) == 0x000048, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_int_Array_Index_Variable) == 0x000054, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, Temp_float_Variable_15) == 0x000058, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::Temp_float_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, K2Node_Select_Default) == 0x00005C, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, CallFunc_MakeVector2D_ReturnValue) == 0x000060, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, K2Node_Select_Default_1) == 0x000068, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, CallFunc_MakeVector2D_ReturnValue_1) == 0x00006C, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, CallFunc_Add_IntInt_ReturnValue_1) == 0x000074, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, CallFunc_GetAllChildren_ReturnValue) == 0x000078, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, K2Node_DynamicCast_AsBP_HUD_Quick_Use_Slot) == 0x0000A0, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::K2Node_DynamicCast_AsBP_HUD_Quick_Use_Slot' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_SetControllerButtonPositions, CallFunc_Not_PreBool_ReturnValue) == 0x0000A9, "Member 'BP_HUD_QuickUse_C_SetControllerButtonPositions::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.ToggleEnabled
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_QuickUse_C_ToggleEnabled final
{
public:
	bool                                          inEnabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_QuickUse_C_ToggleEnabled) == 0x000001, "Wrong alignment on BP_HUD_QuickUse_C_ToggleEnabled");
static_assert(sizeof(BP_HUD_QuickUse_C_ToggleEnabled) == 0x000001, "Wrong size on BP_HUD_QuickUse_C_ToggleEnabled");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleEnabled, inEnabled) == 0x000000, "Member 'BP_HUD_QuickUse_C_ToggleEnabled::inEnabled' has a wrong offset!");

// Function BP_HUD_QuickUse.BP_HUD_QuickUse_C.ToggleSmallScreen
// 0x00B8 (0x00B8 - 0x0000)
struct BP_HUD_QuickUse_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_4;                            // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_5;                            // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_2;                           // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform;                 // 0x005C(0x001C)(NoDestructor)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform_1;               // 0x0078(0x001C)(NoDestructor)
	struct FVector2D                              K2Node_Select_Default_3;                           // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform_2;               // 0x009C(0x001C)(NoDestructor)
};
static_assert(alignof(BP_HUD_QuickUse_C_ToggleSmallScreen) == 0x000004, "Wrong alignment on BP_HUD_QuickUse_C_ToggleSmallScreen");
static_assert(sizeof(BP_HUD_QuickUse_C_ToggleSmallScreen) == 0x0000B8, "Wrong size on BP_HUD_QuickUse_C_ToggleSmallScreen");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_struct_Variable) == 0x000004, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_struct_Variable_1) == 0x00000C, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x000014, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_struct_Variable_2) == 0x000018, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_struct_Variable_3) == 0x000020, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_bool_Variable_2) == 0x000028, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_struct_Variable_4) == 0x00002C, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_struct_Variable_5) == 0x000034, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_bool_Variable_3) == 0x00003C, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_float_Variable) == 0x000040, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, Temp_float_Variable_1) == 0x000044, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, K2Node_Select_Default) == 0x000048, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x00004C, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, K2Node_Select_Default_2) == 0x000054, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, K2Node_MakeStruct_WidgetTransform) == 0x00005C, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::K2Node_MakeStruct_WidgetTransform' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, K2Node_MakeStruct_WidgetTransform_1) == 0x000078, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::K2Node_MakeStruct_WidgetTransform_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, K2Node_Select_Default_3) == 0x000094, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_QuickUse_C_ToggleSmallScreen, K2Node_MakeStruct_WidgetTransform_2) == 0x00009C, "Member 'BP_HUD_QuickUse_C_ToggleSmallScreen::K2Node_MakeStruct_WidgetTransform_2' has a wrong offset!");

}

