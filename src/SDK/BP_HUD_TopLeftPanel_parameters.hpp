#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUD_TopLeftPanel

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.ExecuteUbergraph_BP_HUD_TopLeftPanel
// 0x00D4 (0x00D4 - 0x0000)
struct BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float NewWidth, bool Animate)> K2Node_CreateDelegate_OutputDelegate;              // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float NewWidth, bool Animate)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float NewWidth, bool Animate)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0064(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float NewWidth, bool Animate)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0074(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0084(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0094(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_6;            // 0x00A4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_7;            // 0x00B4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_8;            // 0x00C4(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel) == 0x000004, "Wrong alignment on BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel) == 0x0000D4, "Wrong size on BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, EntryPoint) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_CreateDelegate_OutputDelegate) == 0x000044, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_CreateDelegate_OutputDelegate_1) == 0x000054, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_CreateDelegate_OutputDelegate_2) == 0x000064, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_CreateDelegate_OutputDelegate_3) == 0x000074, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_CreateDelegate_OutputDelegate_4) == 0x000084, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_CreateDelegate_OutputDelegate_5) == 0x000094, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_CreateDelegate_OutputDelegate_6) == 0x0000A4, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_CreateDelegate_OutputDelegate_7) == 0x0000B4, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel, K2Node_CreateDelegate_OutputDelegate_8) == 0x0000C4, "Member 'BP_HUD_TopLeftPanel_C_ExecuteUbergraph_BP_HUD_TopLeftPanel::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_HUD_TopLeftPanel_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_Tick) == 0x000004, "Wrong alignment on BP_HUD_TopLeftPanel_C_Tick");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_Tick) == 0x00003C, "Wrong size on BP_HUD_TopLeftPanel_C_Tick");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Tick, MyGeometry) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_HUD_TopLeftPanel_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_TopLeftPanel_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_PreConstruct) == 0x000001, "Wrong alignment on BP_HUD_TopLeftPanel_C_PreConstruct");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_PreConstruct) == 0x000001, "Wrong size on BP_HUD_TopLeftPanel_C_PreConstruct");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.SetRageVisibility
// 0x0005 (0x0005 - 0x0000)
struct BP_HUD_TopLeftPanel_C_SetRageVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_SetRageVisibility) == 0x000001, "Wrong alignment on BP_HUD_TopLeftPanel_C_SetRageVisibility");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_SetRageVisibility) == 0x000005, "Wrong size on BP_HUD_TopLeftPanel_C_SetRageVisibility");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetRageVisibility, IsVisible_0) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_SetRageVisibility::IsVisible_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetRageVisibility, Temp_bool_Variable) == 0x000001, "Member 'BP_HUD_TopLeftPanel_C_SetRageVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetRageVisibility, Temp_byte_Variable) == 0x000002, "Member 'BP_HUD_TopLeftPanel_C_SetRageVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetRageVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'BP_HUD_TopLeftPanel_C_SetRageVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetRageVisibility, K2Node_Select_Default) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_SetRageVisibility::K2Node_Select_Default' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.SetEnergyVisibility
// 0x0005 (0x0005 - 0x0000)
struct BP_HUD_TopLeftPanel_C_SetEnergyVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_SetEnergyVisibility) == 0x000001, "Wrong alignment on BP_HUD_TopLeftPanel_C_SetEnergyVisibility");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_SetEnergyVisibility) == 0x000005, "Wrong size on BP_HUD_TopLeftPanel_C_SetEnergyVisibility");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetEnergyVisibility, IsVisible_0) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_SetEnergyVisibility::IsVisible_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetEnergyVisibility, Temp_bool_Variable) == 0x000001, "Member 'BP_HUD_TopLeftPanel_C_SetEnergyVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetEnergyVisibility, Temp_byte_Variable) == 0x000002, "Member 'BP_HUD_TopLeftPanel_C_SetEnergyVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetEnergyVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'BP_HUD_TopLeftPanel_C_SetEnergyVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetEnergyVisibility, K2Node_Select_Default) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_SetEnergyVisibility::K2Node_Select_Default' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.PlayNoStaminaFeedback
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_TopLeftPanel_C_PlayNoStaminaFeedback final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_PlayNoStaminaFeedback) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_PlayNoStaminaFeedback");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_PlayNoStaminaFeedback) == 0x000008, "Wrong size on BP_HUD_TopLeftPanel_C_PlayNoStaminaFeedback");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_PlayNoStaminaFeedback, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_PlayNoStaminaFeedback::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.Resize Health Bar
// 0x0058 (0x0058 - 0x0000)
struct BP_HUD_TopLeftPanel_C_Resize_Health_Bar final
{
public:
	float                                         NewWidth;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CombinedWidth;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_Resize_Health_Bar");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar) == 0x000058, "Wrong size on BP_HUD_TopLeftPanel_C_Resize_Health_Bar");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, NewWidth) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::NewWidth' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, Animate) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::Animate' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CombinedWidth) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CombinedWidth' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, Temp_bool_Variable) == 0x00000C, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000014, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000018, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_MakeVector2D_ReturnValue) == 0x00001C, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000024, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_MakeVector2D_ReturnValue_1) == 0x000028, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_Less_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_PlayAnimation_ReturnValue) == 0x000038, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, Temp_bool_Variable_1) == 0x000040, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, K2Node_Select_Default) == 0x000044, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000048, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x00004C, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000050, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_Resize_Health_Bar, K2Node_Select_Default_1) == 0x000054, "Member 'BP_HUD_TopLeftPanel_C_Resize_Health_Bar::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.ResizeStaminaBar
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_TopLeftPanel_C_ResizeStaminaBar final
{
public:
	float                                         NewWidth;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_ResizeStaminaBar) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_ResizeStaminaBar");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_ResizeStaminaBar) == 0x000028, "Wrong size on BP_HUD_TopLeftPanel_C_ResizeStaminaBar");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeStaminaBar, NewWidth) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_ResizeStaminaBar::NewWidth' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeStaminaBar, Animate) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_ResizeStaminaBar::Animate' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeStaminaBar, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_ResizeStaminaBar::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeStaminaBar, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_ResizeStaminaBar::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeStaminaBar, CallFunc_MakeVector2D_ReturnValue) == 0x000014, "Member 'BP_HUD_TopLeftPanel_C_ResizeStaminaBar::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeStaminaBar, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_HUD_TopLeftPanel_C_ResizeStaminaBar::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeStaminaBar, CallFunc_MakeVector2D_ReturnValue_1) == 0x000020, "Member 'BP_HUD_TopLeftPanel_C_ResizeStaminaBar::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.ResizeRageBar
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_TopLeftPanel_C_ResizeRageBar final
{
public:
	float                                         NewWidth;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_ResizeRageBar) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_ResizeRageBar");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_ResizeRageBar) == 0x000028, "Wrong size on BP_HUD_TopLeftPanel_C_ResizeRageBar");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeRageBar, NewWidth) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_ResizeRageBar::NewWidth' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeRageBar, Animate) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_ResizeRageBar::Animate' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeRageBar, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_ResizeRageBar::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeRageBar, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_ResizeRageBar::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeRageBar, CallFunc_MakeVector2D_ReturnValue) == 0x000014, "Member 'BP_HUD_TopLeftPanel_C_ResizeRageBar::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeRageBar, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_HUD_TopLeftPanel_C_ResizeRageBar::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeRageBar, CallFunc_MakeVector2D_ReturnValue_1) == 0x000020, "Member 'BP_HUD_TopLeftPanel_C_ResizeRageBar::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.ResizeEnergyBar
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_TopLeftPanel_C_ResizeEnergyBar final
{
public:
	float                                         NewWidth;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_ResizeEnergyBar) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_ResizeEnergyBar");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_ResizeEnergyBar) == 0x000028, "Wrong size on BP_HUD_TopLeftPanel_C_ResizeEnergyBar");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeEnergyBar, NewWidth) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_ResizeEnergyBar::NewWidth' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeEnergyBar, Animate) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_ResizeEnergyBar::Animate' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeEnergyBar, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_ResizeEnergyBar::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeEnergyBar, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_ResizeEnergyBar::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeEnergyBar, CallFunc_MakeVector2D_ReturnValue) == 0x000014, "Member 'BP_HUD_TopLeftPanel_C_ResizeEnergyBar::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeEnergyBar, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_HUD_TopLeftPanel_C_ResizeEnergyBar::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ResizeEnergyBar, CallFunc_MakeVector2D_ReturnValue_1) == 0x000020, "Member 'BP_HUD_TopLeftPanel_C_ResizeEnergyBar::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.ToggleLowHPAnim
// 0x0030 (0x0030 - 0x0000)
struct BP_HUD_TopLeftPanel_C_ToggleLowHPAnim final
{
public:
	bool                                          IsHPLow;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_ToggleLowHPAnim) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_ToggleLowHPAnim");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_ToggleLowHPAnim) == 0x000030, "Wrong size on BP_HUD_TopLeftPanel_C_ToggleLowHPAnim");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowHPAnim, IsHPLow) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowHPAnim::IsHPLow' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowHPAnim, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowHPAnim::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowHPAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowHPAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowHPAnim, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowHPAnim::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowHPAnim, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowHPAnim::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowHPAnim, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000020, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowHPAnim::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowHPAnim, CallFunc_PlayAnimation_ReturnValue_2) == 0x000028, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowHPAnim::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.RepositionHealthBars
// 0x0040 (0x0040 - 0x0000)
struct BP_HUD_TopLeftPanel_C_RepositionHealthBars final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_RepositionHealthBars) == 0x000004, "Wrong alignment on BP_HUD_TopLeftPanel_C_RepositionHealthBars");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_RepositionHealthBars) == 0x000040, "Wrong size on BP_HUD_TopLeftPanel_C_RepositionHealthBars");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, Temp_bool_Variable) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, CallFunc_MakeVector2D_ReturnValue) == 0x00000C, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000014, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, CallFunc_MakeVector2D_ReturnValue_1) == 0x000018, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000020, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, CallFunc_MakeVector2D_ReturnValue_2) == 0x000028, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000030, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000034, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_RepositionHealthBars, K2Node_Select_Default) == 0x00003C, "Member 'BP_HUD_TopLeftPanel_C_RepositionHealthBars::K2Node_Select_Default' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.SetComboPoint
// 0x0078 (0x0078 - 0x0000)
struct BP_HUD_TopLeftPanel_C_SetComboPoint final
{
public:
	int32                                         CurrentComboPointFraction;                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentComboPoint;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxComboPoint;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ComboPoint_C*                       K2Node_DynamicCast_AsBP_Combo_Point;               // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_SetComboPoint) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_SetComboPoint");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_SetComboPoint) == 0x000078, "Wrong size on BP_HUD_TopLeftPanel_C_SetComboPoint");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, CurrentComboPointFraction) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::CurrentComboPointFraction' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, CurrentComboPoint) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::CurrentComboPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, MaxComboPoint) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::MaxComboPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, Temp_int_Variable) == 0x00000C, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, Temp_int_Variable_1) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, Temp_int_Variable_2) == 0x000014, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, Temp_int_Variable_3) == 0x000018, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, Temp_bool_Variable) == 0x00001C, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, Temp_byte_Variable) == 0x00001D, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, Temp_byte_Variable_1) == 0x00001E, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, CallFunc_Percent_IntInt_ReturnValue) == 0x00002C, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, K2Node_Select_Default) == 0x000034, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, CallFunc_Less_IntInt_ReturnValue_1) == 0x000039, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, K2Node_Select_Default_1) == 0x00003A, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, CallFunc_GetAllChildren_ReturnValue) == 0x000040, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, CallFunc_Less_IntInt_ReturnValue_2) == 0x000060, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, K2Node_DynamicCast_AsBP_Combo_Point) == 0x000068, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::K2Node_DynamicCast_AsBP_Combo_Point' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetComboPoint, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_HUD_TopLeftPanel_C_SetComboPoint::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.ToggleLowStaminaAnim
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim final
{
public:
	bool                                          IsStaminaLow;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim) == 0x000028, "Wrong size on BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim, IsStaminaLow) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim::IsStaminaLow' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000014, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim, CallFunc_PlayAnimation_ReturnValue_2) == 0x000020, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowStaminaAnim::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.ToggleLowRageAnim
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_TopLeftPanel_C_ToggleLowRageAnim final
{
public:
	bool                                          IsRageLow;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_ToggleLowRageAnim) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_ToggleLowRageAnim");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_ToggleLowRageAnim) == 0x000028, "Wrong size on BP_HUD_TopLeftPanel_C_ToggleLowRageAnim");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowRageAnim, IsRageLow) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowRageAnim::IsRageLow' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowRageAnim, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowRageAnim::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowRageAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowRageAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowRageAnim, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowRageAnim::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowRageAnim, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000014, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowRageAnim::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowRageAnim, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowRageAnim::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowRageAnim, CallFunc_PlayAnimation_ReturnValue_2) == 0x000020, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowRageAnim::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.ToggleLowManaAnim
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_TopLeftPanel_C_ToggleLowManaAnim final
{
public:
	bool                                          IsManaLow;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_ToggleLowManaAnim) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_ToggleLowManaAnim");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_ToggleLowManaAnim) == 0x000028, "Wrong size on BP_HUD_TopLeftPanel_C_ToggleLowManaAnim");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowManaAnim, IsManaLow) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowManaAnim::IsManaLow' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowManaAnim, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowManaAnim::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowManaAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowManaAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowManaAnim, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowManaAnim::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowManaAnim, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000014, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowManaAnim::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowManaAnim, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowManaAnim::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowManaAnim, CallFunc_PlayAnimation_ReturnValue_2) == 0x000020, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowManaAnim::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.HighlightHealthBar
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_TopLeftPanel_C_HighlightHealthBar final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_HighlightHealthBar) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_HighlightHealthBar");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_HighlightHealthBar) == 0x000008, "Wrong size on BP_HUD_TopLeftPanel_C_HighlightHealthBar");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_HighlightHealthBar, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_HighlightHealthBar::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.HighlightStaminaBar
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_TopLeftPanel_C_HighlightStaminaBar final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_HighlightStaminaBar) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_HighlightStaminaBar");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_HighlightStaminaBar) == 0x000008, "Wrong size on BP_HUD_TopLeftPanel_C_HighlightStaminaBar");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_HighlightStaminaBar, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_HighlightStaminaBar::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.HighlightRageBar
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_TopLeftPanel_C_HighlightRageBar final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_HighlightRageBar) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_HighlightRageBar");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_HighlightRageBar) == 0x000008, "Wrong size on BP_HUD_TopLeftPanel_C_HighlightRageBar");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_HighlightRageBar, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_HighlightRageBar::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.HighlightManaBar
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_TopLeftPanel_C_HighlightManaBar final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_HighlightManaBar) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_HighlightManaBar");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_HighlightManaBar) == 0x000008, "Wrong size on BP_HUD_TopLeftPanel_C_HighlightManaBar");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_HighlightManaBar, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_HighlightManaBar::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.SetBarTextures
// 0x0018 (0x0018 - 0x0000)
struct BP_HUD_TopLeftPanel_C_SetBarTextures final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_2;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_SetBarTextures) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_SetBarTextures");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_SetBarTextures) == 0x000018, "Wrong size on BP_HUD_TopLeftPanel_C_SetBarTextures");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetBarTextures, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_SetBarTextures::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetBarTextures, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_SetBarTextures::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_SetBarTextures, CallFunc_GetDynamicMaterial_ReturnValue_2) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_SetBarTextures::CallFunc_GetDynamicMaterial_ReturnValue_2' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.ToggleLowComboPointsAnim
// 0x0030 (0x0030 - 0x0000)
struct BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim) == 0x000030, "Wrong size on BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim, IsActive) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim::IsActive' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000018, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim, CallFunc_PlayAnimation_ReturnValue_2) == 0x000020, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000028, "Member 'BP_HUD_TopLeftPanel_C_ToggleLowComboPointsAnim::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function BP_HUD_TopLeftPanel.BP_HUD_TopLeftPanel_C.ToggleSmallScreen
// 0x0298 (0x0298 - 0x0000)
struct BP_HUD_TopLeftPanel_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_4;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_5;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_6;                            // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_7;                            // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_4;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_6;                               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_7;                               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_2;                           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform;                 // 0x009C(0x001C)(NoDestructor)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x00B8(0x0058)(HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_3;                           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_4;                           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform_1;               // 0x011C(0x001C)(NoDestructor)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_1;                 // 0x0138(0x0058)(HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_5;                           // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_6;                           // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform_2;               // 0x01A0(0x001C)(NoDestructor)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform_3;               // 0x01BC(0x001C)(NoDestructor)
	int32                                         K2Node_Select_Default_7;                           // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_2;                 // 0x01E0(0x0058)(HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_8;                           // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_3;                 // 0x0240(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_HUD_TopLeftPanel_C_ToggleSmallScreen");
static_assert(sizeof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen) == 0x000298, "Wrong size on BP_HUD_TopLeftPanel_C_ToggleSmallScreen");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_float_Variable) == 0x000004, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_float_Variable_1) == 0x000008, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_struct_Variable) == 0x000010, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_struct_Variable_1) == 0x000018, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_bool_Variable_2) == 0x000020, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_int_Variable) == 0x000024, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_int_Variable_1) == 0x000028, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_bool_Variable_3) == 0x00002C, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_struct_Variable_2) == 0x000030, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_struct_Variable_3) == 0x000038, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_bool_Variable_4) == 0x000040, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_int_Variable_2) == 0x000044, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_int_Variable_3) == 0x000048, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_bool_Variable_5) == 0x00004C, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_struct_Variable_4) == 0x000050, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_struct_Variable_5) == 0x000058, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_bool_Variable_6) == 0x000060, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_struct_Variable_6) == 0x000064, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_struct_Variable_7) == 0x00006C, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_bool_Variable_7) == 0x000074, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_int_Variable_4) == 0x000078, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_int_Variable_5) == 0x00007C, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_bool_Variable_8) == 0x000080, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_int_Variable_6) == 0x000084, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, Temp_int_Variable_7) == 0x000088, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_Select_Default) == 0x00008C, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x000090, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_Select_Default_2) == 0x000098, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_MakeStruct_WidgetTransform) == 0x00009C, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_MakeStruct_WidgetTransform' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo) == 0x0000B8, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_Select_Default_3) == 0x000110, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_Select_Default_4) == 0x000118, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_MakeStruct_WidgetTransform_1) == 0x00011C, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_MakeStruct_WidgetTransform_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_1) == 0x000138, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_Select_Default_5) == 0x000190, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_Select_Default_6) == 0x000198, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_MakeStruct_WidgetTransform_2) == 0x0001A0, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_MakeStruct_WidgetTransform_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_MakeStruct_WidgetTransform_3) == 0x0001BC, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_MakeStruct_WidgetTransform_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_Select_Default_7) == 0x0001D8, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_2) == 0x0001E0, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_Select_Default_8) == 0x000238, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(BP_HUD_TopLeftPanel_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_3) == 0x000240, "Member 'BP_HUD_TopLeftPanel_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_3' has a wrong offset!");

}

