#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUD

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "man_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_HUD.BP_HUD_C.ExecuteUbergraph_BP_HUD
// 0x02B8 (0x02B8 - 0x0000)
struct BP_HUD_C_ExecuteUbergraph_BP_HUD final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UManUserWidgetBase* ManUserWidgetBase)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UTutorialScreenUserWidget*              CallFunc_ShowTutorialScreen_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManQuest*                              K2Node_Event_ManQuest_2;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UManQuestObjective*>             K2Node_Event_Objectives_1;                         // 0x0048(0x0010)(ConstParm, ReferenceParm)
	class UManQuest*                              K2Node_Event_ManQuest_1;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UManQuestObjective*>             K2Node_Event_Objectives;                           // 0x0060(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManQuest*                              K2Node_Event_ManQuest;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHUDNotificationUserWidget*             K2Node_Event_HUDNotificationUserWidget_1;          // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_ItemName_1;                           // 0x0088(0x0018)(ConstParm)
	class FText                                   K2Node_Event_ItemDescription;                      // 0x00A0(0x0018)(ConstParm)
	class UTexture2D*                             K2Node_Event_Icon_1;                               // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Timeout_2;                            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Number_1;                             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           K2Node_Event_ItemAbility;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHideNewItemTitle;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_QuestNotification_C*                CallFunc_GetQuestNotification_ReturnValue;         // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUDNotificationUserWidget*             K2Node_Event_HUDNotificationUserWidget;            // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_ItemName;                             // 0x00F0(0x0018)(ConstParm)
	class UTexture2D*                             K2Node_Event_Icon;                                 // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Timeout_1;                            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Number;                               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bMatchHasStarted;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInVisible_4;                         // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate_4;                           // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInVisible_3;                         // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInVisible_2;                         // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPlay;                                // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHeroProperty                                 K2Node_Event_PropertyType_1;                       // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F[0x1];                                      // 0x011F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Value_1;                              // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RoundedFloatValue;                    // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_RoundedIntValue;                      // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate_3;                           // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHUDBarType                                   K2Node_Event_HUDBarType_4;                         // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_HudBarTitle;                          // 0x0130(0x0018)(ConstParm)
	float                                         K2Node_Event_MinValue;                             // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_MaxValue;                             // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CurrentValue_1;                       // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ReferencePointValue;                  // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_LengthRatio;                          // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHUDBarType                                   K2Node_Event_HUDBarType_3;                         // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_CurrentValue;                         // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHUDBarType                                   K2Node_Event_HUDBarType_2;                         // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInVisible_1;                         // 0x0166(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsHPLow;                             // 0x0167(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_Event_CurrentComboPointFraction;            // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CurrentComboPoint;                    // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MaxComboPoint;                        // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsBelowZero;                         // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bComboPointBarVisible;                // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_177[0x1];                                      // 0x0177(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0178(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInVisible;                           // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_LevelProgress;                        // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInCanInteract;                       // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EScreenSideEffect                             K2Node_Event_Effect;                               // 0x01BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bActive_1;                            // 0x01BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESideEffectWarningType                        K2Node_Event_SideEffectWarningType;                // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bDownPosition;                        // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C3[0x5];                                      // 0x01C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHUDPopupQueue                         K2Node_Event_HUDPopupQueue;                        // 0x01C8(0x0058)()
	bool                                          K2Node_Event_bInShow;                              // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_InWarningText;                        // 0x0228(0x0018)(ConstParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHUDBarType                                   K2Node_Event_HUDBarType_1;                         // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bMiniBoss;                            // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bTwoStageBossBar;                     // 0x0243(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bMandragora;                          // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHUDBarType                                   K2Node_Event_HUDBarType;                           // 0x0245(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_246[0x2];                                      // 0x0246(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_LightBarrierCurrentValue;             // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_LightBarrierMaxValue;                 // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Timeout;                              // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_RiftID;                               // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_ItemSetIndex;                         // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate_2;                           // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_SkillSetIndex;                        // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0265(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0266(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bActive;                              // 0x0267(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHeroProperty                                 K2Node_Event_PropertyType;                         // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Value;                                // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bShowing;                             // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_272[0x2];                                      // 0x0272(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 VisibleSlots)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x0274(0x0010)(ZeroConstructor, NoDestructor)
	ESpecialMovementType                          K2Node_Event_SpecialMovementType;                  // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0285(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286[0x2];                                      // 0x0286(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UManUserWidgetBase*                     K2Node_CustomEvent_ManUserWidgetBase;              // 0x0288(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInInputRestrict;                     // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_InInteractText;                       // 0x0298(0x0018)(ConstParm)
	class UAbilityBase*                           K2Node_Event_InAbilityBase;                        // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_ExecuteUbergraph_BP_HUD) == 0x000008, "Wrong alignment on BP_HUD_C_ExecuteUbergraph_BP_HUD");
static_assert(sizeof(BP_HUD_C_ExecuteUbergraph_BP_HUD) == 0x0002B8, "Wrong size on BP_HUD_C_ExecuteUbergraph_BP_HUD");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, EntryPoint) == 0x000000, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, Temp_byte_Variable) == 0x000004, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, Temp_bool_Variable) == 0x000005, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_ShowTutorialScreen_ReturnValue) == 0x000018, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_ShowTutorialScreen_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000020, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000024, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_PlayAnimation_ReturnValue_1) == 0x000030, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_IsDesignTime) == 0x000038, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_ManQuest_2) == 0x000040, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_ManQuest_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Objectives_1) == 0x000048, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Objectives_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_ManQuest_1) == 0x000058, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_ManQuest_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Objectives) == 0x000060, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Objectives' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_ManQuest) == 0x000078, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_ManQuest' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_HUDNotificationUserWidget_1) == 0x000080, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_HUDNotificationUserWidget_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_ItemName_1) == 0x000088, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_ItemName_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_ItemDescription) == 0x0000A0, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_ItemDescription' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Icon_1) == 0x0000B8, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Icon_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Timeout_2) == 0x0000C0, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Timeout_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Number_1) == 0x0000C4, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Number_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_ItemAbility) == 0x0000C8, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_ItemAbility' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bHideNewItemTitle) == 0x0000D0, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bHideNewItemTitle' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_GetQuestNotification_ReturnValue) == 0x0000D8, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_GetQuestNotification_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_IsValid_ReturnValue_1) == 0x0000E0, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_HUDNotificationUserWidget) == 0x0000E8, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_HUDNotificationUserWidget' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_ItemName) == 0x0000F0, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_ItemName' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Icon) == 0x000108, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Icon' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Timeout_1) == 0x000110, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Timeout_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Number) == 0x000114, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Number' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bMatchHasStarted) == 0x000118, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bMatchHasStarted' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bInVisible_4) == 0x000119, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bInVisible_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bAnimate_4) == 0x00011A, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bAnimate_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bInVisible_3) == 0x00011B, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bInVisible_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bInVisible_2) == 0x00011C, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bInVisible_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bPlay) == 0x00011D, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bPlay' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_PropertyType_1) == 0x00011E, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_PropertyType_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Value_1) == 0x000120, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Value_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_RoundedFloatValue) == 0x000124, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_RoundedIntValue) == 0x000128, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bAnimate_3) == 0x00012C, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bAnimate_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_HUDBarType_4) == 0x00012D, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_HUDBarType_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_HudBarTitle) == 0x000130, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_HudBarTitle' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_MinValue) == 0x000148, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_MinValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_MaxValue) == 0x00014C, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_MaxValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_CurrentValue_1) == 0x000150, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_CurrentValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_ReferencePointValue) == 0x000154, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_ReferencePointValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_LengthRatio) == 0x000158, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_LengthRatio' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_HUDBarType_3) == 0x00015C, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_HUDBarType_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_CurrentValue) == 0x000160, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_CurrentValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_HUDBarType_2) == 0x000164, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_HUDBarType_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, Temp_byte_Variable_1) == 0x000165, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bInVisible_1) == 0x000166, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bInVisible_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bIsHPLow) == 0x000167, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bIsHPLow' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_CurrentComboPointFraction) == 0x000168, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_CurrentComboPointFraction' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_CurrentComboPoint) == 0x00016C, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_CurrentComboPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_MaxComboPoint) == 0x000170, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_MaxComboPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bIsBelowZero) == 0x000174, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bIsBelowZero' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bComboPointBarVisible) == 0x000175, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bComboPointBarVisible' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Select_Default) == 0x000176, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_MyGeometry) == 0x000178, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_InDeltaTime) == 0x0001B0, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bInVisible) == 0x0001B4, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bInVisible' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_LevelProgress) == 0x0001B8, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_LevelProgress' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bInCanInteract) == 0x0001BC, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bInCanInteract' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_Not_PreBool_ReturnValue) == 0x0001BD, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Effect) == 0x0001BE, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Effect' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bActive_1) == 0x0001BF, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bActive_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_SideEffectWarningType) == 0x0001C0, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_SideEffectWarningType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_SwitchEnum_CmpSuccess) == 0x0001C1, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bDownPosition) == 0x0001C2, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bDownPosition' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_HUDPopupQueue) == 0x0001C8, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_HUDPopupQueue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bInShow) == 0x000220, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bInShow' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_InWarningText) == 0x000228, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_InWarningText' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_SwitchEnum_CmpSuccess_1) == 0x000240, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_HUDBarType_1) == 0x000241, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_HUDBarType_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bMiniBoss) == 0x000242, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bMiniBoss' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bTwoStageBossBar) == 0x000243, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bTwoStageBossBar' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bMandragora) == 0x000244, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bMandragora' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_HUDBarType) == 0x000245, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_HUDBarType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_LightBarrierCurrentValue) == 0x000248, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_LightBarrierCurrentValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_LightBarrierMaxValue) == 0x00024C, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_LightBarrierMaxValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Timeout) == 0x000250, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Timeout' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_RiftID) == 0x000254, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_RiftID' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_ItemSetIndex) == 0x000258, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_ItemSetIndex' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bAnimate_2) == 0x00025C, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bAnimate_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_SkillSetIndex) == 0x000260, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_SkillSetIndex' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bAnimate_1) == 0x000264, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000265, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000266, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bActive) == 0x000267, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bActive' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_PropertyType) == 0x000268, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_PropertyType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_Value) == 0x00026C, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bShowing) == 0x000270, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bShowing' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bAnimate) == 0x000271, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_CreateDelegate_OutputDelegate_1) == 0x000274, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_SpecialMovementType) == 0x000284, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_SpecialMovementType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_SwitchEnum_CmpSuccess_2) == 0x000285, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_CustomEvent_ManUserWidgetBase) == 0x000288, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_CustomEvent_ManUserWidgetBase' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_bInInputRestrict) == 0x000290, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_bInInputRestrict' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, CallFunc_Not_PreBool_ReturnValue_1) == 0x000291, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_InInteractText) == 0x000298, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_InInteractText' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ExecuteUbergraph_BP_HUD, K2Node_Event_InAbilityBase) == 0x0002B0, "Member 'BP_HUD_C_ExecuteUbergraph_BP_HUD::K2Node_Event_InAbilityBase' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnShowInteract
// 0x0020 (0x0020 - 0x0000)
struct BP_HUD_C_OnShowInteract final
{
public:
	class FText                                   InInteractText;                                    // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UAbilityBase*                           InAbilityBase;                                     // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnShowInteract) == 0x000008, "Wrong alignment on BP_HUD_C_OnShowInteract");
static_assert(sizeof(BP_HUD_C_OnShowInteract) == 0x000020, "Wrong size on BP_HUD_C_OnShowInteract");
static_assert(offsetof(BP_HUD_C_OnShowInteract, InInteractText) == 0x000000, "Member 'BP_HUD_C_OnShowInteract::InInteractText' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowInteract, InAbilityBase) == 0x000018, "Member 'BP_HUD_C_OnShowInteract::InAbilityBase' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnInputRestrict
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnInputRestrict final
{
public:
	bool                                          bInInputRestrict;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnInputRestrict) == 0x000001, "Wrong alignment on BP_HUD_C_OnInputRestrict");
static_assert(sizeof(BP_HUD_C_OnInputRestrict) == 0x000001, "Wrong size on BP_HUD_C_OnInputRestrict");
static_assert(offsetof(BP_HUD_C_OnInputRestrict, bInInputRestrict) == 0x000000, "Member 'BP_HUD_C_OnInputRestrict::bInInputRestrict' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.CustomEvent_1
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_C_CustomEvent_1 final
{
public:
	class UManUserWidgetBase*                     ManUserWidgetBase;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_CustomEvent_1) == 0x000008, "Wrong alignment on BP_HUD_C_CustomEvent_1");
static_assert(sizeof(BP_HUD_C_CustomEvent_1) == 0x000008, "Wrong size on BP_HUD_C_CustomEvent_1");
static_assert(offsetof(BP_HUD_C_CustomEvent_1, ManUserWidgetBase) == 0x000000, "Member 'BP_HUD_C_CustomEvent_1::ManUserWidgetBase' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnSpecialMovementUlnocked
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnSpecialMovementUlnocked final
{
public:
	ESpecialMovementType                          SpecialMovementType;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnSpecialMovementUlnocked) == 0x000001, "Wrong alignment on BP_HUD_C_OnSpecialMovementUlnocked");
static_assert(sizeof(BP_HUD_C_OnSpecialMovementUlnocked) == 0x000001, "Wrong size on BP_HUD_C_OnSpecialMovementUlnocked");
static_assert(offsetof(BP_HUD_C_OnSpecialMovementUlnocked, SpecialMovementType) == 0x000000, "Member 'BP_HUD_C_OnSpecialMovementUlnocked::SpecialMovementType' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnToggleAddedResource
// 0x000C (0x000C - 0x0000)
struct BP_HUD_C_OnToggleAddedResource final
{
public:
	EHeroProperty                                 PropertyType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowing;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnToggleAddedResource) == 0x000004, "Wrong alignment on BP_HUD_C_OnToggleAddedResource");
static_assert(sizeof(BP_HUD_C_OnToggleAddedResource) == 0x00000C, "Wrong size on BP_HUD_C_OnToggleAddedResource");
static_assert(offsetof(BP_HUD_C_OnToggleAddedResource, PropertyType) == 0x000000, "Member 'BP_HUD_C_OnToggleAddedResource::PropertyType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnToggleAddedResource, Value) == 0x000004, "Member 'BP_HUD_C_OnToggleAddedResource::Value' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnToggleAddedResource, bShowing) == 0x000008, "Member 'BP_HUD_C_OnToggleAddedResource::bShowing' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnToggleAddedResource, bAnimate) == 0x000009, "Member 'BP_HUD_C_OnToggleAddedResource::bAnimate' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnToggleExtraLanternDrainEffect
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnToggleExtraLanternDrainEffect final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnToggleExtraLanternDrainEffect) == 0x000001, "Wrong alignment on BP_HUD_C_OnToggleExtraLanternDrainEffect");
static_assert(sizeof(BP_HUD_C_OnToggleExtraLanternDrainEffect) == 0x000001, "Wrong size on BP_HUD_C_OnToggleExtraLanternDrainEffect");
static_assert(offsetof(BP_HUD_C_OnToggleExtraLanternDrainEffect, bActive) == 0x000000, "Member 'BP_HUD_C_OnToggleExtraLanternDrainEffect::bActive' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnChangeSkillSetIndex
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_C_OnChangeSkillSetIndex final
{
public:
	int32                                         SkillSetIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAnimate;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnChangeSkillSetIndex) == 0x000004, "Wrong alignment on BP_HUD_C_OnChangeSkillSetIndex");
static_assert(sizeof(BP_HUD_C_OnChangeSkillSetIndex) == 0x000008, "Wrong size on BP_HUD_C_OnChangeSkillSetIndex");
static_assert(offsetof(BP_HUD_C_OnChangeSkillSetIndex, SkillSetIndex) == 0x000000, "Member 'BP_HUD_C_OnChangeSkillSetIndex::SkillSetIndex' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnChangeSkillSetIndex, bAnimate) == 0x000004, "Member 'BP_HUD_C_OnChangeSkillSetIndex::bAnimate' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnChangeItemSetIndex
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_C_OnChangeItemSetIndex final
{
public:
	int32                                         ItemSetIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAnimate;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnChangeItemSetIndex) == 0x000004, "Wrong alignment on BP_HUD_C_OnChangeItemSetIndex");
static_assert(sizeof(BP_HUD_C_OnChangeItemSetIndex) == 0x000008, "Wrong size on BP_HUD_C_OnChangeItemSetIndex");
static_assert(offsetof(BP_HUD_C_OnChangeItemSetIndex, ItemSetIndex) == 0x000000, "Member 'BP_HUD_C_OnChangeItemSetIndex::ItemSetIndex' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnChangeItemSetIndex, bAnimate) == 0x000004, "Member 'BP_HUD_C_OnChangeItemSetIndex::bAnimate' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnPlayRiftCombatStartAnim
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_C_OnPlayRiftCombatStartAnim final
{
public:
	int32                                         RiftID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnPlayRiftCombatStartAnim) == 0x000004, "Wrong alignment on BP_HUD_C_OnPlayRiftCombatStartAnim");
static_assert(sizeof(BP_HUD_C_OnPlayRiftCombatStartAnim) == 0x000004, "Wrong size on BP_HUD_C_OnPlayRiftCombatStartAnim");
static_assert(offsetof(BP_HUD_C_OnPlayRiftCombatStartAnim, RiftID) == 0x000000, "Member 'BP_HUD_C_OnPlayRiftCombatStartAnim::RiftID' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnShowBestiaryUpdatedNotification
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_C_OnShowBestiaryUpdatedNotification final
{
public:
	float                                         Timeout;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnShowBestiaryUpdatedNotification) == 0x000004, "Wrong alignment on BP_HUD_C_OnShowBestiaryUpdatedNotification");
static_assert(sizeof(BP_HUD_C_OnShowBestiaryUpdatedNotification) == 0x000004, "Wrong size on BP_HUD_C_OnShowBestiaryUpdatedNotification");
static_assert(offsetof(BP_HUD_C_OnShowBestiaryUpdatedNotification, Timeout) == 0x000000, "Member 'BP_HUD_C_OnShowBestiaryUpdatedNotification::Timeout' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnSetLightBarrier
// 0x000C (0x000C - 0x0000)
struct BP_HUD_C_OnSetLightBarrier final
{
public:
	EHUDBarType                                   HUDBarType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightBarrierCurrentValue;                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightBarrierMaxValue;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnSetLightBarrier) == 0x000004, "Wrong alignment on BP_HUD_C_OnSetLightBarrier");
static_assert(sizeof(BP_HUD_C_OnSetLightBarrier) == 0x00000C, "Wrong size on BP_HUD_C_OnSetLightBarrier");
static_assert(offsetof(BP_HUD_C_OnSetLightBarrier, HUDBarType) == 0x000000, "Member 'BP_HUD_C_OnSetLightBarrier::HUDBarType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnSetLightBarrier, LightBarrierCurrentValue) == 0x000004, "Member 'BP_HUD_C_OnSetLightBarrier::LightBarrierCurrentValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnSetLightBarrier, LightBarrierMaxValue) == 0x000008, "Member 'BP_HUD_C_OnSetLightBarrier::LightBarrierMaxValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnSetBossBar
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_C_OnSetBossBar final
{
public:
	EHUDBarType                                   HUDBarType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMiniBoss;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTwoStageBossBar;                                  // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bMandragora;                                       // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnSetBossBar) == 0x000001, "Wrong alignment on BP_HUD_C_OnSetBossBar");
static_assert(sizeof(BP_HUD_C_OnSetBossBar) == 0x000004, "Wrong size on BP_HUD_C_OnSetBossBar");
static_assert(offsetof(BP_HUD_C_OnSetBossBar, HUDBarType) == 0x000000, "Member 'BP_HUD_C_OnSetBossBar::HUDBarType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnSetBossBar, bMiniBoss) == 0x000001, "Member 'BP_HUD_C_OnSetBossBar::bMiniBoss' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnSetBossBar, bTwoStageBossBar) == 0x000002, "Member 'BP_HUD_C_OnSetBossBar::bTwoStageBossBar' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnSetBossBar, bMandragora) == 0x000003, "Member 'BP_HUD_C_OnSetBossBar::bMandragora' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnSetWarningText
// 0x0020 (0x0020 - 0x0000)
struct BP_HUD_C_OnSetWarningText final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InWarningText;                                     // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_HUD_C_OnSetWarningText) == 0x000008, "Wrong alignment on BP_HUD_C_OnSetWarningText");
static_assert(sizeof(BP_HUD_C_OnSetWarningText) == 0x000020, "Wrong size on BP_HUD_C_OnSetWarningText");
static_assert(offsetof(BP_HUD_C_OnSetWarningText, bInShow) == 0x000000, "Member 'BP_HUD_C_OnSetWarningText::bInShow' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnSetWarningText, InWarningText) == 0x000008, "Member 'BP_HUD_C_OnSetWarningText::InWarningText' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnShowHUDPopup
// 0x0058 (0x0058 - 0x0000)
struct BP_HUD_C_OnShowHUDPopup final
{
public:
	struct FHUDPopupQueue                         HUDPopupQueue;                                     // 0x0000(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_HUD_C_OnShowHUDPopup) == 0x000008, "Wrong alignment on BP_HUD_C_OnShowHUDPopup");
static_assert(sizeof(BP_HUD_C_OnShowHUDPopup) == 0x000058, "Wrong size on BP_HUD_C_OnShowHUDPopup");
static_assert(offsetof(BP_HUD_C_OnShowHUDPopup, HUDPopupQueue) == 0x000000, "Member 'BP_HUD_C_OnShowHUDPopup::HUDPopupQueue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnToggleResourceBarPosition
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnToggleResourceBarPosition final
{
public:
	bool                                          bDownPosition;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnToggleResourceBarPosition) == 0x000001, "Wrong alignment on BP_HUD_C_OnToggleResourceBarPosition");
static_assert(sizeof(BP_HUD_C_OnToggleResourceBarPosition) == 0x000001, "Wrong size on BP_HUD_C_OnToggleResourceBarPosition");
static_assert(offsetof(BP_HUD_C_OnToggleResourceBarPosition, bDownPosition) == 0x000000, "Member 'BP_HUD_C_OnToggleResourceBarPosition::bDownPosition' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnToggleSideEffectWarning
// 0x0003 (0x0003 - 0x0000)
struct BP_HUD_C_OnToggleSideEffectWarning final
{
public:
	EScreenSideEffect                             Effect;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESideEffectWarningType                        SideEffectWarningType;                             // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnToggleSideEffectWarning) == 0x000001, "Wrong alignment on BP_HUD_C_OnToggleSideEffectWarning");
static_assert(sizeof(BP_HUD_C_OnToggleSideEffectWarning) == 0x000003, "Wrong size on BP_HUD_C_OnToggleSideEffectWarning");
static_assert(offsetof(BP_HUD_C_OnToggleSideEffectWarning, Effect) == 0x000000, "Member 'BP_HUD_C_OnToggleSideEffectWarning::Effect' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnToggleSideEffectWarning, bActive) == 0x000001, "Member 'BP_HUD_C_OnToggleSideEffectWarning::bActive' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnToggleSideEffectWarning, SideEffectWarningType) == 0x000002, "Member 'BP_HUD_C_OnToggleSideEffectWarning::SideEffectWarningType' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnSetInteractMode
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnSetInteractMode final
{
public:
	bool                                          bInCanInteract;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnSetInteractMode) == 0x000001, "Wrong alignment on BP_HUD_C_OnSetInteractMode");
static_assert(sizeof(BP_HUD_C_OnSetInteractMode) == 0x000001, "Wrong size on BP_HUD_C_OnSetInteractMode");
static_assert(offsetof(BP_HUD_C_OnSetInteractMode, bInCanInteract) == 0x000000, "Member 'BP_HUD_C_OnSetInteractMode::bInCanInteract' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnSetLevelProgress
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_C_OnSetLevelProgress final
{
public:
	float                                         LevelProgress;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnSetLevelProgress) == 0x000004, "Wrong alignment on BP_HUD_C_OnSetLevelProgress");
static_assert(sizeof(BP_HUD_C_OnSetLevelProgress) == 0x000004, "Wrong size on BP_HUD_C_OnSetLevelProgress");
static_assert(offsetof(BP_HUD_C_OnSetLevelProgress, LevelProgress) == 0x000000, "Member 'BP_HUD_C_OnSetLevelProgress::LevelProgress' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnSetFadeQuestTrackerBackgroundVisible
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnSetFadeQuestTrackerBackgroundVisible final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnSetFadeQuestTrackerBackgroundVisible) == 0x000001, "Wrong alignment on BP_HUD_C_OnSetFadeQuestTrackerBackgroundVisible");
static_assert(sizeof(BP_HUD_C_OnSetFadeQuestTrackerBackgroundVisible) == 0x000001, "Wrong size on BP_HUD_C_OnSetFadeQuestTrackerBackgroundVisible");
static_assert(offsetof(BP_HUD_C_OnSetFadeQuestTrackerBackgroundVisible, bInVisible) == 0x000000, "Member 'BP_HUD_C_OnSetFadeQuestTrackerBackgroundVisible::bInVisible' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_HUD_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_Tick) == 0x000004, "Wrong alignment on BP_HUD_C_Tick");
static_assert(sizeof(BP_HUD_C_Tick) == 0x00003C, "Wrong size on BP_HUD_C_Tick");
static_assert(offsetof(BP_HUD_C_Tick, MyGeometry) == 0x000000, "Member 'BP_HUD_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_HUD_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnComboPointBarVisible
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnComboPointBarVisible final
{
public:
	bool                                          bComboPointBarVisible;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnComboPointBarVisible) == 0x000001, "Wrong alignment on BP_HUD_C_OnComboPointBarVisible");
static_assert(sizeof(BP_HUD_C_OnComboPointBarVisible) == 0x000001, "Wrong size on BP_HUD_C_OnComboPointBarVisible");
static_assert(offsetof(BP_HUD_C_OnComboPointBarVisible, bComboPointBarVisible) == 0x000000, "Member 'BP_HUD_C_OnComboPointBarVisible::bComboPointBarVisible' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnToggleLowLifeAuraWarning
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnToggleLowLifeAuraWarning final
{
public:
	bool                                          bIsBelowZero;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnToggleLowLifeAuraWarning) == 0x000001, "Wrong alignment on BP_HUD_C_OnToggleLowLifeAuraWarning");
static_assert(sizeof(BP_HUD_C_OnToggleLowLifeAuraWarning) == 0x000001, "Wrong size on BP_HUD_C_OnToggleLowLifeAuraWarning");
static_assert(offsetof(BP_HUD_C_OnToggleLowLifeAuraWarning, bIsBelowZero) == 0x000000, "Member 'BP_HUD_C_OnToggleLowLifeAuraWarning::bIsBelowZero' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnSetComboPoint
// 0x000C (0x000C - 0x0000)
struct BP_HUD_C_OnSetComboPoint final
{
public:
	int32                                         CurrentComboPointFraction;                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentComboPoint;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxComboPoint;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnSetComboPoint) == 0x000004, "Wrong alignment on BP_HUD_C_OnSetComboPoint");
static_assert(sizeof(BP_HUD_C_OnSetComboPoint) == 0x00000C, "Wrong size on BP_HUD_C_OnSetComboPoint");
static_assert(offsetof(BP_HUD_C_OnSetComboPoint, CurrentComboPointFraction) == 0x000000, "Member 'BP_HUD_C_OnSetComboPoint::CurrentComboPointFraction' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnSetComboPoint, CurrentComboPoint) == 0x000004, "Member 'BP_HUD_C_OnSetComboPoint::CurrentComboPoint' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnSetComboPoint, MaxComboPoint) == 0x000008, "Member 'BP_HUD_C_OnSetComboPoint::MaxComboPoint' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnToggleLowHPBarWarning
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnToggleLowHPBarWarning final
{
public:
	bool                                          bIsHPLow;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnToggleLowHPBarWarning) == 0x000001, "Wrong alignment on BP_HUD_C_OnToggleLowHPBarWarning");
static_assert(sizeof(BP_HUD_C_OnToggleLowHPBarWarning) == 0x000001, "Wrong size on BP_HUD_C_OnToggleLowHPBarWarning");
static_assert(offsetof(BP_HUD_C_OnToggleLowHPBarWarning, bIsHPLow) == 0x000000, "Member 'BP_HUD_C_OnToggleLowHPBarWarning::bIsHPLow' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnExtraAbilitySlotVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnExtraAbilitySlotVisibility final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnExtraAbilitySlotVisibility) == 0x000001, "Wrong alignment on BP_HUD_C_OnExtraAbilitySlotVisibility");
static_assert(sizeof(BP_HUD_C_OnExtraAbilitySlotVisibility) == 0x000001, "Wrong size on BP_HUD_C_OnExtraAbilitySlotVisibility");
static_assert(offsetof(BP_HUD_C_OnExtraAbilitySlotVisibility, bInVisible) == 0x000000, "Member 'BP_HUD_C_OnExtraAbilitySlotVisibility::bInVisible' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnHideHUDBar
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnHideHUDBar final
{
public:
	EHUDBarType                                   HUDBarType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnHideHUDBar) == 0x000001, "Wrong alignment on BP_HUD_C_OnHideHUDBar");
static_assert(sizeof(BP_HUD_C_OnHideHUDBar) == 0x000001, "Wrong size on BP_HUD_C_OnHideHUDBar");
static_assert(offsetof(BP_HUD_C_OnHideHUDBar, HUDBarType) == 0x000000, "Member 'BP_HUD_C_OnHideHUDBar::HUDBarType' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnSetHUDBar
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_C_OnSetHUDBar final
{
public:
	EHUDBarType                                   HUDBarType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentValue;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnSetHUDBar) == 0x000004, "Wrong alignment on BP_HUD_C_OnSetHUDBar");
static_assert(sizeof(BP_HUD_C_OnSetHUDBar) == 0x000008, "Wrong size on BP_HUD_C_OnSetHUDBar");
static_assert(offsetof(BP_HUD_C_OnSetHUDBar, HUDBarType) == 0x000000, "Member 'BP_HUD_C_OnSetHUDBar::HUDBarType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnSetHUDBar, CurrentValue) == 0x000004, "Member 'BP_HUD_C_OnSetHUDBar::CurrentValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnShowHUDBar
// 0x0038 (0x0038 - 0x0000)
struct BP_HUD_C_OnShowHUDBar final
{
public:
	EHUDBarType                                   HUDBarType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HudBarTitle;                                       // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         MinValue;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxValue;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentValue;                                      // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReferencePointValue;                               // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LengthRatio;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnShowHUDBar) == 0x000008, "Wrong alignment on BP_HUD_C_OnShowHUDBar");
static_assert(sizeof(BP_HUD_C_OnShowHUDBar) == 0x000038, "Wrong size on BP_HUD_C_OnShowHUDBar");
static_assert(offsetof(BP_HUD_C_OnShowHUDBar, HUDBarType) == 0x000000, "Member 'BP_HUD_C_OnShowHUDBar::HUDBarType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowHUDBar, HudBarTitle) == 0x000008, "Member 'BP_HUD_C_OnShowHUDBar::HudBarTitle' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowHUDBar, MinValue) == 0x000020, "Member 'BP_HUD_C_OnShowHUDBar::MinValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowHUDBar, MaxValue) == 0x000024, "Member 'BP_HUD_C_OnShowHUDBar::MaxValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowHUDBar, CurrentValue) == 0x000028, "Member 'BP_HUD_C_OnShowHUDBar::CurrentValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowHUDBar, ReferencePointValue) == 0x00002C, "Member 'BP_HUD_C_OnShowHUDBar::ReferencePointValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowHUDBar, LengthRatio) == 0x000030, "Member 'BP_HUD_C_OnShowHUDBar::LengthRatio' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnPropertyChanged
// 0x0014 (0x0014 - 0x0000)
struct BP_HUD_C_OnPropertyChanged final
{
public:
	EHeroProperty                                 PropertyType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundedFloatValue;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundedIntValue;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAnimate;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnPropertyChanged) == 0x000004, "Wrong alignment on BP_HUD_C_OnPropertyChanged");
static_assert(sizeof(BP_HUD_C_OnPropertyChanged) == 0x000014, "Wrong size on BP_HUD_C_OnPropertyChanged");
static_assert(offsetof(BP_HUD_C_OnPropertyChanged, PropertyType) == 0x000000, "Member 'BP_HUD_C_OnPropertyChanged::PropertyType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnPropertyChanged, Value) == 0x000004, "Member 'BP_HUD_C_OnPropertyChanged::Value' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnPropertyChanged, RoundedFloatValue) == 0x000008, "Member 'BP_HUD_C_OnPropertyChanged::RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnPropertyChanged, RoundedIntValue) == 0x00000C, "Member 'BP_HUD_C_OnPropertyChanged::RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnPropertyChanged, bAnimate) == 0x000010, "Member 'BP_HUD_C_OnPropertyChanged::bAnimate' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnSetLevelPulseAnim
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnSetLevelPulseAnim final
{
public:
	bool                                          bPlay;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnSetLevelPulseAnim) == 0x000001, "Wrong alignment on BP_HUD_C_OnSetLevelPulseAnim");
static_assert(sizeof(BP_HUD_C_OnSetLevelPulseAnim) == 0x000001, "Wrong size on BP_HUD_C_OnSetLevelPulseAnim");
static_assert(offsetof(BP_HUD_C_OnSetLevelPulseAnim, bPlay) == 0x000000, "Member 'BP_HUD_C_OnSetLevelPulseAnim::bPlay' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnEnergyBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnEnergyBarVisibility final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnEnergyBarVisibility) == 0x000001, "Wrong alignment on BP_HUD_C_OnEnergyBarVisibility");
static_assert(sizeof(BP_HUD_C_OnEnergyBarVisibility) == 0x000001, "Wrong size on BP_HUD_C_OnEnergyBarVisibility");
static_assert(offsetof(BP_HUD_C_OnEnergyBarVisibility, bInVisible) == 0x000000, "Member 'BP_HUD_C_OnEnergyBarVisibility::bInVisible' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnRageBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnRageBarVisibility final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnRageBarVisibility) == 0x000001, "Wrong alignment on BP_HUD_C_OnRageBarVisibility");
static_assert(sizeof(BP_HUD_C_OnRageBarVisibility) == 0x000001, "Wrong size on BP_HUD_C_OnRageBarVisibility");
static_assert(offsetof(BP_HUD_C_OnRageBarVisibility, bInVisible) == 0x000000, "Member 'BP_HUD_C_OnRageBarVisibility::bInVisible' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnHUDVisibility
// 0x0002 (0x0002 - 0x0000)
struct BP_HUD_C_OnHUDVisibility final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnHUDVisibility) == 0x000001, "Wrong alignment on BP_HUD_C_OnHUDVisibility");
static_assert(sizeof(BP_HUD_C_OnHUDVisibility) == 0x000002, "Wrong size on BP_HUD_C_OnHUDVisibility");
static_assert(offsetof(BP_HUD_C_OnHUDVisibility, bInVisible) == 0x000000, "Member 'BP_HUD_C_OnHUDVisibility::bInVisible' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnHUDVisibility, bAnimate) == 0x000001, "Member 'BP_HUD_C_OnHUDVisibility::bAnimate' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnLevelUpIndicator
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_OnLevelUpIndicator final
{
public:
	bool                                          bMatchHasStarted;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnLevelUpIndicator) == 0x000001, "Wrong alignment on BP_HUD_C_OnLevelUpIndicator");
static_assert(sizeof(BP_HUD_C_OnLevelUpIndicator) == 0x000001, "Wrong size on BP_HUD_C_OnLevelUpIndicator");
static_assert(offsetof(BP_HUD_C_OnLevelUpIndicator, bMatchHasStarted) == 0x000000, "Member 'BP_HUD_C_OnLevelUpIndicator::bMatchHasStarted' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnShowUseItemNotification
// 0x0030 (0x0030 - 0x0000)
struct BP_HUD_C_OnShowUseItemNotification final
{
public:
	class UHUDNotificationUserWidget*             HUDNotificationUserWidget;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   ItemName;                                          // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UTexture2D*                             Icon;                                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeout;                                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Number;                                            // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnShowUseItemNotification) == 0x000008, "Wrong alignment on BP_HUD_C_OnShowUseItemNotification");
static_assert(sizeof(BP_HUD_C_OnShowUseItemNotification) == 0x000030, "Wrong size on BP_HUD_C_OnShowUseItemNotification");
static_assert(offsetof(BP_HUD_C_OnShowUseItemNotification, HUDNotificationUserWidget) == 0x000000, "Member 'BP_HUD_C_OnShowUseItemNotification::HUDNotificationUserWidget' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowUseItemNotification, ItemName) == 0x000008, "Member 'BP_HUD_C_OnShowUseItemNotification::ItemName' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowUseItemNotification, Icon) == 0x000020, "Member 'BP_HUD_C_OnShowUseItemNotification::Icon' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowUseItemNotification, Timeout) == 0x000028, "Member 'BP_HUD_C_OnShowUseItemNotification::Timeout' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowUseItemNotification, Number) == 0x00002C, "Member 'BP_HUD_C_OnShowUseItemNotification::Number' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnShowPickupNotification
// 0x0058 (0x0058 - 0x0000)
struct BP_HUD_C_OnShowPickupNotification final
{
public:
	class UHUDNotificationUserWidget*             HUDNotificationUserWidget;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   ItemName;                                          // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   ItemDescription;                                   // 0x0020(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UTexture2D*                             Icon;                                              // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeout;                                           // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Number;                                            // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           ItemAbility;                                       // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideNewItemTitle;                                 // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_OnShowPickupNotification) == 0x000008, "Wrong alignment on BP_HUD_C_OnShowPickupNotification");
static_assert(sizeof(BP_HUD_C_OnShowPickupNotification) == 0x000058, "Wrong size on BP_HUD_C_OnShowPickupNotification");
static_assert(offsetof(BP_HUD_C_OnShowPickupNotification, HUDNotificationUserWidget) == 0x000000, "Member 'BP_HUD_C_OnShowPickupNotification::HUDNotificationUserWidget' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowPickupNotification, ItemName) == 0x000008, "Member 'BP_HUD_C_OnShowPickupNotification::ItemName' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowPickupNotification, ItemDescription) == 0x000020, "Member 'BP_HUD_C_OnShowPickupNotification::ItemDescription' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowPickupNotification, Icon) == 0x000038, "Member 'BP_HUD_C_OnShowPickupNotification::Icon' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowPickupNotification, Timeout) == 0x000040, "Member 'BP_HUD_C_OnShowPickupNotification::Timeout' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowPickupNotification, Number) == 0x000044, "Member 'BP_HUD_C_OnShowPickupNotification::Number' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowPickupNotification, ItemAbility) == 0x000048, "Member 'BP_HUD_C_OnShowPickupNotification::ItemAbility' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowPickupNotification, bHideNewItemTitle) == 0x000050, "Member 'BP_HUD_C_OnShowPickupNotification::bHideNewItemTitle' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnRemoveQuestNotification
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_C_OnRemoveQuestNotification final
{
public:
	class UManQuest*                              ManQuest;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_OnRemoveQuestNotification) == 0x000008, "Wrong alignment on BP_HUD_C_OnRemoveQuestNotification");
static_assert(sizeof(BP_HUD_C_OnRemoveQuestNotification) == 0x000008, "Wrong size on BP_HUD_C_OnRemoveQuestNotification");
static_assert(offsetof(BP_HUD_C_OnRemoveQuestNotification, ManQuest) == 0x000000, "Member 'BP_HUD_C_OnRemoveQuestNotification::ManQuest' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnUpdateQuestNotificationObjective
// 0x0018 (0x0018 - 0x0000)
struct BP_HUD_C_OnUpdateQuestNotificationObjective final
{
public:
	class UManQuest*                              ManQuest;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UManQuestObjective*>             Objectives;                                        // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_HUD_C_OnUpdateQuestNotificationObjective) == 0x000008, "Wrong alignment on BP_HUD_C_OnUpdateQuestNotificationObjective");
static_assert(sizeof(BP_HUD_C_OnUpdateQuestNotificationObjective) == 0x000018, "Wrong size on BP_HUD_C_OnUpdateQuestNotificationObjective");
static_assert(offsetof(BP_HUD_C_OnUpdateQuestNotificationObjective, ManQuest) == 0x000000, "Member 'BP_HUD_C_OnUpdateQuestNotificationObjective::ManQuest' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnUpdateQuestNotificationObjective, Objectives) == 0x000008, "Member 'BP_HUD_C_OnUpdateQuestNotificationObjective::Objectives' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.OnShowQuestNotification
// 0x0018 (0x0018 - 0x0000)
struct BP_HUD_C_OnShowQuestNotification final
{
public:
	class UManQuest*                              ManQuest;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UManQuestObjective*>             Objectives;                                        // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_HUD_C_OnShowQuestNotification) == 0x000008, "Wrong alignment on BP_HUD_C_OnShowQuestNotification");
static_assert(sizeof(BP_HUD_C_OnShowQuestNotification) == 0x000018, "Wrong size on BP_HUD_C_OnShowQuestNotification");
static_assert(offsetof(BP_HUD_C_OnShowQuestNotification, ManQuest) == 0x000000, "Member 'BP_HUD_C_OnShowQuestNotification::ManQuest' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_OnShowQuestNotification, Objectives) == 0x000008, "Member 'BP_HUD_C_OnShowQuestNotification::Objectives' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_PreConstruct) == 0x000001, "Wrong alignment on BP_HUD_C_PreConstruct");
static_assert(sizeof(BP_HUD_C_PreConstruct) == 0x000001, "Wrong size on BP_HUD_C_PreConstruct");
static_assert(offsetof(BP_HUD_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_HUD_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.SetHUDVisibility
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_C_SetHUDVisibility final
{
public:
	bool                                          Visible__0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Animate_;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default_1;                           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_SetHUDVisibility) == 0x000008, "Wrong alignment on BP_HUD_C_SetHUDVisibility");
static_assert(sizeof(BP_HUD_C_SetHUDVisibility) == 0x000028, "Wrong size on BP_HUD_C_SetHUDVisibility");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, Visible__0) == 0x000000, "Member 'BP_HUD_C_SetHUDVisibility::Visible__0' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, Animate_) == 0x000001, "Member 'BP_HUD_C_SetHUDVisibility::Animate_' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, Temp_bool_Variable) == 0x000002, "Member 'BP_HUD_C_SetHUDVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, Temp_float_Variable) == 0x000004, "Member 'BP_HUD_C_SetHUDVisibility::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, Temp_float_Variable_1) == 0x000008, "Member 'BP_HUD_C_SetHUDVisibility::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_HUD_C_SetHUDVisibility::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, Temp_byte_Variable) == 0x00000D, "Member 'BP_HUD_C_SetHUDVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, Temp_byte_Variable_1) == 0x00000E, "Member 'BP_HUD_C_SetHUDVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, K2Node_Select_Default) == 0x000010, "Member 'BP_HUD_C_SetHUDVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, K2Node_Select_Default_1) == 0x000014, "Member 'BP_HUD_C_SetHUDVisibility::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_HUD_C_SetHUDVisibility::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDVisibility, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000020, "Member 'BP_HUD_C_SetHUDVisibility::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.CoinChange
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_C_CoinChange final
{
public:
	int32                                         NewCoin;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate_;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0008(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_CoinChange) == 0x000008, "Wrong alignment on BP_HUD_C_CoinChange");
static_assert(sizeof(BP_HUD_C_CoinChange) == 0x000028, "Wrong size on BP_HUD_C_CoinChange");
static_assert(offsetof(BP_HUD_C_CoinChange, NewCoin) == 0x000000, "Member 'BP_HUD_C_CoinChange::NewCoin' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_CoinChange, Animate_) == 0x000004, "Member 'BP_HUD_C_CoinChange::Animate_' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_CoinChange, CallFunc_IntToText_ReturnValue) == 0x000008, "Member 'BP_HUD_C_CoinChange::CallFunc_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_CoinChange, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'BP_HUD_C_CoinChange::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.Show Pickup Notification
// 0x0088 (0x0088 - 0x0000)
struct BP_HUD_C_Show_Pickup_Notification final
{
public:
	class UHUDNotificationUserWidget*             HUDNotificationUserWidget;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Name_0;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Description;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UTexture2D*                             Icon;                                              // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeout;                                           // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Number;                                            // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           ItemAbility;                                       // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PickupNotification_C*               K2Node_DynamicCast_AsBP_Pickup_Notification;       // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue; // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0078(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_Show_Pickup_Notification) == 0x000008, "Wrong alignment on BP_HUD_C_Show_Pickup_Notification");
static_assert(sizeof(BP_HUD_C_Show_Pickup_Notification) == 0x000088, "Wrong size on BP_HUD_C_Show_Pickup_Notification");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, HUDNotificationUserWidget) == 0x000000, "Member 'BP_HUD_C_Show_Pickup_Notification::HUDNotificationUserWidget' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, Name_0) == 0x000008, "Member 'BP_HUD_C_Show_Pickup_Notification::Name_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, Description) == 0x000020, "Member 'BP_HUD_C_Show_Pickup_Notification::Description' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, Icon) == 0x000038, "Member 'BP_HUD_C_Show_Pickup_Notification::Icon' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, Timeout) == 0x000040, "Member 'BP_HUD_C_Show_Pickup_Notification::Timeout' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, Number) == 0x000044, "Member 'BP_HUD_C_Show_Pickup_Notification::Number' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, ItemAbility) == 0x000048, "Member 'BP_HUD_C_Show_Pickup_Notification::ItemAbility' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, K2Node_DynamicCast_AsBP_Pickup_Notification) == 0x000050, "Member 'BP_HUD_C_Show_Pickup_Notification::K2Node_DynamicCast_AsBP_Pickup_Notification' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_HUD_C_Show_Pickup_Notification::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, CallFunc_PlayAnimation_ReturnValue) == 0x000060, "Member 'BP_HUD_C_Show_Pickup_Notification::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, CallFunc_Add_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_HUD_C_Show_Pickup_Notification::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue) == 0x00006C, "Member 'BP_HUD_C_Show_Pickup_Notification::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000070, "Member 'BP_HUD_C_Show_Pickup_Notification::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, CallFunc_Less_FloatFloat_ReturnValue) == 0x000074, "Member 'BP_HUD_C_Show_Pickup_Notification::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, CallFunc_K2_SetTimer_ReturnValue) == 0x000078, "Member 'BP_HUD_C_Show_Pickup_Notification::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Show_Pickup_Notification, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000080, "Member 'BP_HUD_C_Show_Pickup_Notification::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ShowInteract
// 0x0050 (0x0050 - 0x0000)
struct BP_HUD_C_ShowInteract final
{
public:
	class FText                                   Caption;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UAbilityBase*                           AbilityBase;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInteractParams                        CallFunc_SetInteractAbility_ReturnValue;           // 0x0020(0x0030)()
};
static_assert(alignof(BP_HUD_C_ShowInteract) == 0x000008, "Wrong alignment on BP_HUD_C_ShowInteract");
static_assert(sizeof(BP_HUD_C_ShowInteract) == 0x000050, "Wrong size on BP_HUD_C_ShowInteract");
static_assert(offsetof(BP_HUD_C_ShowInteract, Caption) == 0x000000, "Member 'BP_HUD_C_ShowInteract::Caption' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowInteract, AbilityBase) == 0x000018, "Member 'BP_HUD_C_ShowInteract::AbilityBase' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowInteract, CallFunc_SetInteractAbility_ReturnValue) == 0x000020, "Member 'BP_HUD_C_ShowInteract::CallFunc_SetInteractAbility_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.HideInteract
// 0x0030 (0x0030 - 0x0000)
struct BP_HUD_C_HideInteract final
{
public:
	struct FInteractParams                        CallFunc_SetInteractAbility_ReturnValue;           // 0x0000(0x0030)()
};
static_assert(alignof(BP_HUD_C_HideInteract) == 0x000008, "Wrong alignment on BP_HUD_C_HideInteract");
static_assert(sizeof(BP_HUD_C_HideInteract) == 0x000030, "Wrong size on BP_HUD_C_HideInteract");
static_assert(offsetof(BP_HUD_C_HideInteract, CallFunc_SetInteractAbility_ReturnValue) == 0x000000, "Member 'BP_HUD_C_HideInteract::CallFunc_SetInteractAbility_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.SetHeroLevel
// 0x0004 (0x0004 - 0x0000)
struct BP_HUD_C_SetHeroLevel final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_SetHeroLevel) == 0x000004, "Wrong alignment on BP_HUD_C_SetHeroLevel");
static_assert(sizeof(BP_HUD_C_SetHeroLevel) == 0x000004, "Wrong size on BP_HUD_C_SetHeroLevel");
static_assert(offsetof(BP_HUD_C_SetHeroLevel, NewLevel) == 0x000000, "Member 'BP_HUD_C_SetHeroLevel::NewLevel' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.UpdateQuestNotificationObjective
// 0x0050 (0x0050 - 0x0000)
struct BP_HUD_C_UpdateQuestNotificationObjective final
{
public:
	class UManQuest*                              ManQuest;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UManQuestObjective*>             Objectives;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_QuestNotification_C*                CallFunc_GetQuestNotification_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManQuestObjective*                     CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_UpdateQuestNotificationObjective) == 0x000008, "Wrong alignment on BP_HUD_C_UpdateQuestNotificationObjective");
static_assert(sizeof(BP_HUD_C_UpdateQuestNotificationObjective) == 0x000050, "Wrong size on BP_HUD_C_UpdateQuestNotificationObjective");
static_assert(offsetof(BP_HUD_C_UpdateQuestNotificationObjective, ManQuest) == 0x000000, "Member 'BP_HUD_C_UpdateQuestNotificationObjective::ManQuest' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_UpdateQuestNotificationObjective, Objectives) == 0x000008, "Member 'BP_HUD_C_UpdateQuestNotificationObjective::Objectives' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_UpdateQuestNotificationObjective, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_HUD_C_UpdateQuestNotificationObjective::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_UpdateQuestNotificationObjective, CallFunc_GetQuestNotification_ReturnValue) == 0x000020, "Member 'BP_HUD_C_UpdateQuestNotificationObjective::CallFunc_GetQuestNotification_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_UpdateQuestNotificationObjective, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_HUD_C_UpdateQuestNotificationObjective::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_UpdateQuestNotificationObjective, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_HUD_C_UpdateQuestNotificationObjective::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_UpdateQuestNotificationObjective, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_HUD_C_UpdateQuestNotificationObjective::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_UpdateQuestNotificationObjective, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00003C, "Member 'BP_HUD_C_UpdateQuestNotificationObjective::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_UpdateQuestNotificationObjective, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_HUD_C_UpdateQuestNotificationObjective::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_UpdateQuestNotificationObjective, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_HUD_C_UpdateQuestNotificationObjective::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_UpdateQuestNotificationObjective, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_HUD_C_UpdateQuestNotificationObjective::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.EssenceChange
// 0x0028 (0x0028 - 0x0000)
struct BP_HUD_C_EssenceChange final
{
public:
	int32                                         NewEssence;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate_;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0008(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_EssenceChange) == 0x000008, "Wrong alignment on BP_HUD_C_EssenceChange");
static_assert(sizeof(BP_HUD_C_EssenceChange) == 0x000028, "Wrong size on BP_HUD_C_EssenceChange");
static_assert(offsetof(BP_HUD_C_EssenceChange, NewEssence) == 0x000000, "Member 'BP_HUD_C_EssenceChange::NewEssence' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_EssenceChange, Animate_) == 0x000004, "Member 'BP_HUD_C_EssenceChange::Animate_' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_EssenceChange, CallFunc_IntToText_ReturnValue) == 0x000008, "Member 'BP_HUD_C_EssenceChange::CallFunc_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_EssenceChange, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'BP_HUD_C_EssenceChange::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.GetQuestNotification
// 0x0030 (0x0030 - 0x0000)
struct BP_HUD_C_GetQuestNotification final
{
public:
	class UManQuest*                              ManQuest;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_QuestNotification_C*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_QuestNotification_C*                Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_QuestNotification_C*                K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_GetQuestNotification) == 0x000008, "Wrong alignment on BP_HUD_C_GetQuestNotification");
static_assert(sizeof(BP_HUD_C_GetQuestNotification) == 0x000030, "Wrong size on BP_HUD_C_GetQuestNotification");
static_assert(offsetof(BP_HUD_C_GetQuestNotification, ManQuest) == 0x000000, "Member 'BP_HUD_C_GetQuestNotification::ManQuest' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_GetQuestNotification, ReturnValue) == 0x000008, "Member 'BP_HUD_C_GetQuestNotification::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_GetQuestNotification, Temp_bool_Variable) == 0x000010, "Member 'BP_HUD_C_GetQuestNotification::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_GetQuestNotification, Temp_object_Variable) == 0x000018, "Member 'BP_HUD_C_GetQuestNotification::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_GetQuestNotification, CallFunc_GetVisibility_ReturnValue) == 0x000020, "Member 'BP_HUD_C_GetQuestNotification::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_GetQuestNotification, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'BP_HUD_C_GetQuestNotification::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_GetQuestNotification, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000022, "Member 'BP_HUD_C_GetQuestNotification::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_GetQuestNotification, K2Node_Select_Default) == 0x000028, "Member 'BP_HUD_C_GetQuestNotification::K2Node_Select_Default' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ToggleLowStaminaWarning
// 0x0048 (0x0048 - 0x0000)
struct BP_HUD_C_ToggleLowStaminaWarning final
{
public:
	bool                                          IsBelowZero;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESideEffectWarningType                        SideEffectWarningType;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESideEffectWarningType                        Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESideEffectWarningType                        Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidgetAnimation*                 K2Node_Select_Default;                             // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidgetAnimation*                 K2Node_Select_Default_1;                           // 0x0028(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_2;    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_ToggleLowStaminaWarning) == 0x000008, "Wrong alignment on BP_HUD_C_ToggleLowStaminaWarning");
static_assert(sizeof(BP_HUD_C_ToggleLowStaminaWarning) == 0x000048, "Wrong size on BP_HUD_C_ToggleLowStaminaWarning");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, IsBelowZero) == 0x000000, "Member 'BP_HUD_C_ToggleLowStaminaWarning::IsBelowZero' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, SideEffectWarningType) == 0x000001, "Member 'BP_HUD_C_ToggleLowStaminaWarning::SideEffectWarningType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, Temp_byte_Variable) == 0x000002, "Member 'BP_HUD_C_ToggleLowStaminaWarning::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, Temp_byte_Variable_1) == 0x000003, "Member 'BP_HUD_C_ToggleLowStaminaWarning::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, K2Node_Select_Default) == 0x000008, "Member 'BP_HUD_C_ToggleLowStaminaWarning::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000010, "Member 'BP_HUD_C_ToggleLowStaminaWarning::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_HUD_C_ToggleLowStaminaWarning::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000020, "Member 'BP_HUD_C_ToggleLowStaminaWarning::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, K2Node_Select_Default_1) == 0x000028, "Member 'BP_HUD_C_ToggleLowStaminaWarning::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, CallFunc_PlayAnimation_ReturnValue_1) == 0x000030, "Member 'BP_HUD_C_ToggleLowStaminaWarning::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, CallFunc_GetAnimationCurrentTime_ReturnValue_2) == 0x000038, "Member 'BP_HUD_C_ToggleLowStaminaWarning::CallFunc_GetAnimationCurrentTime_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowStaminaWarning, CallFunc_PlayAnimation_ReturnValue_2) == 0x000040, "Member 'BP_HUD_C_ToggleLowStaminaWarning::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ShowUseItemNotification
// 0x0068 (0x0068 - 0x0000)
struct BP_HUD_C_ShowUseItemNotification final
{
public:
	class UHUDNotificationUserWidget*             HUDNotificationUserWidget;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Name_0;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UTexture2D*                             Icon;                                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeout;                                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Number;                                            // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_UseItemNotification_C*              K2Node_DynamicCast_AsBP_Use_Item_Notification;     // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_ShowUseItemNotification) == 0x000008, "Wrong alignment on BP_HUD_C_ShowUseItemNotification");
static_assert(sizeof(BP_HUD_C_ShowUseItemNotification) == 0x000068, "Wrong size on BP_HUD_C_ShowUseItemNotification");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, HUDNotificationUserWidget) == 0x000000, "Member 'BP_HUD_C_ShowUseItemNotification::HUDNotificationUserWidget' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, Name_0) == 0x000008, "Member 'BP_HUD_C_ShowUseItemNotification::Name_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, Icon) == 0x000020, "Member 'BP_HUD_C_ShowUseItemNotification::Icon' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, Timeout) == 0x000028, "Member 'BP_HUD_C_ShowUseItemNotification::Timeout' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, Number) == 0x00002C, "Member 'BP_HUD_C_ShowUseItemNotification::Number' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, K2Node_DynamicCast_AsBP_Use_Item_Notification) == 0x000030, "Member 'BP_HUD_C_ShowUseItemNotification::K2Node_DynamicCast_AsBP_Use_Item_Notification' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_HUD_C_ShowUseItemNotification::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, CallFunc_PlayAnimation_ReturnValue) == 0x000040, "Member 'BP_HUD_C_ShowUseItemNotification::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue) == 0x000048, "Member 'BP_HUD_C_ShowUseItemNotification::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, CallFunc_Add_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_HUD_C_ShowUseItemNotification::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, CallFunc_K2_SetTimer_ReturnValue) == 0x000050, "Member 'BP_HUD_C_ShowUseItemNotification::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000058, "Member 'BP_HUD_C_ShowUseItemNotification::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, CallFunc_Less_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_HUD_C_ShowUseItemNotification::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowUseItemNotification, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000060, "Member 'BP_HUD_C_ShowUseItemNotification::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.BP_PropertyChanged
// 0x0014 (0x0014 - 0x0000)
struct BP_HUD_C_BP_PropertyChanged final
{
public:
	EHeroProperty                                 PropertyType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundedFloatValue;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundedIntValue;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_BP_PropertyChanged) == 0x000004, "Wrong alignment on BP_HUD_C_BP_PropertyChanged");
static_assert(sizeof(BP_HUD_C_BP_PropertyChanged) == 0x000014, "Wrong size on BP_HUD_C_BP_PropertyChanged");
static_assert(offsetof(BP_HUD_C_BP_PropertyChanged, PropertyType) == 0x000000, "Member 'BP_HUD_C_BP_PropertyChanged::PropertyType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_BP_PropertyChanged, Value) == 0x000004, "Member 'BP_HUD_C_BP_PropertyChanged::Value' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_BP_PropertyChanged, RoundedFloatValue) == 0x000008, "Member 'BP_HUD_C_BP_PropertyChanged::RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_BP_PropertyChanged, RoundedIntValue) == 0x00000C, "Member 'BP_HUD_C_BP_PropertyChanged::RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_BP_PropertyChanged, Animate) == 0x000010, "Member 'BP_HUD_C_BP_PropertyChanged::Animate' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_BP_PropertyChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'BP_HUD_C_BP_PropertyChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ShowHUDBar
// 0x0038 (0x0038 - 0x0000)
struct BP_HUD_C_ShowHUDBar final
{
public:
	EHUDBarType                                   HUDBarType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HudBarTitle;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	float                                         MinValue;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxValue;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentValue;                                      // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReferencePointValue;                               // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LengthRatio;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_ShowHUDBar) == 0x000008, "Wrong alignment on BP_HUD_C_ShowHUDBar");
static_assert(sizeof(BP_HUD_C_ShowHUDBar) == 0x000038, "Wrong size on BP_HUD_C_ShowHUDBar");
static_assert(offsetof(BP_HUD_C_ShowHUDBar, HUDBarType) == 0x000000, "Member 'BP_HUD_C_ShowHUDBar::HUDBarType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowHUDBar, HudBarTitle) == 0x000008, "Member 'BP_HUD_C_ShowHUDBar::HudBarTitle' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowHUDBar, MinValue) == 0x000020, "Member 'BP_HUD_C_ShowHUDBar::MinValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowHUDBar, MaxValue) == 0x000024, "Member 'BP_HUD_C_ShowHUDBar::MaxValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowHUDBar, CurrentValue) == 0x000028, "Member 'BP_HUD_C_ShowHUDBar::CurrentValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowHUDBar, ReferencePointValue) == 0x00002C, "Member 'BP_HUD_C_ShowHUDBar::ReferencePointValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowHUDBar, LengthRatio) == 0x000030, "Member 'BP_HUD_C_ShowHUDBar::LengthRatio' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowHUDBar, K2Node_SwitchEnum_CmpSuccess) == 0x000034, "Member 'BP_HUD_C_ShowHUDBar::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.HideHUDBar
// 0x0002 (0x0002 - 0x0000)
struct BP_HUD_C_HideHUDBar final
{
public:
	EHUDBarType                                   HUDBarType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_HideHUDBar) == 0x000001, "Wrong alignment on BP_HUD_C_HideHUDBar");
static_assert(sizeof(BP_HUD_C_HideHUDBar) == 0x000002, "Wrong size on BP_HUD_C_HideHUDBar");
static_assert(offsetof(BP_HUD_C_HideHUDBar, HUDBarType) == 0x000000, "Member 'BP_HUD_C_HideHUDBar::HUDBarType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_HideHUDBar, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_HUD_C_HideHUDBar::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.SetHUDBar
// 0x000C (0x000C - 0x0000)
struct BP_HUD_C_SetHUDBar final
{
public:
	EHUDBarType                                   HUDBarType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentValue;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_SetHUDBar) == 0x000004, "Wrong alignment on BP_HUD_C_SetHUDBar");
static_assert(sizeof(BP_HUD_C_SetHUDBar) == 0x00000C, "Wrong size on BP_HUD_C_SetHUDBar");
static_assert(offsetof(BP_HUD_C_SetHUDBar, HUDBarType) == 0x000000, "Member 'BP_HUD_C_SetHUDBar::HUDBarType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDBar, CurrentValue) == 0x000004, "Member 'BP_HUD_C_SetHUDBar::CurrentValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetHUDBar, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'BP_HUD_C_SetHUDBar::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ToggleStunnedWarning
// 0x0038 (0x0038 - 0x0000)
struct BP_HUD_C_ToggleStunnedWarning final
{
public:
	bool                                          IsStunned;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESideEffectWarningType                        SideEffectWarningType;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESideEffectWarningType                        Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESideEffectWarningType                        Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidgetAnimation*                 K2Node_Select_Default;                             // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UWidgetAnimation*                 K2Node_Select_Default_1;                           // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_ToggleStunnedWarning) == 0x000008, "Wrong alignment on BP_HUD_C_ToggleStunnedWarning");
static_assert(sizeof(BP_HUD_C_ToggleStunnedWarning) == 0x000038, "Wrong size on BP_HUD_C_ToggleStunnedWarning");
static_assert(offsetof(BP_HUD_C_ToggleStunnedWarning, IsStunned) == 0x000000, "Member 'BP_HUD_C_ToggleStunnedWarning::IsStunned' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleStunnedWarning, SideEffectWarningType) == 0x000001, "Member 'BP_HUD_C_ToggleStunnedWarning::SideEffectWarningType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleStunnedWarning, Temp_byte_Variable) == 0x000002, "Member 'BP_HUD_C_ToggleStunnedWarning::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleStunnedWarning, Temp_byte_Variable_1) == 0x000003, "Member 'BP_HUD_C_ToggleStunnedWarning::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleStunnedWarning, K2Node_Select_Default) == 0x000008, "Member 'BP_HUD_C_ToggleStunnedWarning::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleStunnedWarning, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000010, "Member 'BP_HUD_C_ToggleStunnedWarning::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleStunnedWarning, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_HUD_C_ToggleStunnedWarning::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleStunnedWarning, K2Node_Select_Default_1) == 0x000020, "Member 'BP_HUD_C_ToggleStunnedWarning::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleStunnedWarning, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000028, "Member 'BP_HUD_C_ToggleStunnedWarning::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleStunnedWarning, CallFunc_PlayAnimation_ReturnValue_1) == 0x000030, "Member 'BP_HUD_C_ToggleStunnedWarning::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ToggleLowHPWarning
// 0x0070 (0x0070 - 0x0000)
struct BP_HUD_C_ToggleLowHPWarning final
{
public:
	bool                                          IsHPLow;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESideEffectWarningType                        SideEffectWarningType;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESideEffectWarningType                        Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESideEffectWarningType                        Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESideEffectWarningType                        Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidgetAnimation*                 K2Node_Select_Default;                             // 0x0018(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidgetAnimation*                 K2Node_Select_Default_1;                           // 0x0028(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UWidgetAnimation*                 K2Node_Select_Default_2;                           // 0x0040(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_3;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_4;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_3;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_ToggleLowHPWarning) == 0x000008, "Wrong alignment on BP_HUD_C_ToggleLowHPWarning");
static_assert(sizeof(BP_HUD_C_ToggleLowHPWarning) == 0x000070, "Wrong size on BP_HUD_C_ToggleLowHPWarning");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, IsHPLow) == 0x000000, "Member 'BP_HUD_C_ToggleLowHPWarning::IsHPLow' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, SideEffectWarningType) == 0x000001, "Member 'BP_HUD_C_ToggleLowHPWarning::SideEffectWarningType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, Temp_byte_Variable) == 0x000002, "Member 'BP_HUD_C_ToggleLowHPWarning::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, Temp_byte_Variable_1) == 0x000003, "Member 'BP_HUD_C_ToggleLowHPWarning::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, Temp_byte_Variable_2) == 0x000004, "Member 'BP_HUD_C_ToggleLowHPWarning::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, Temp_bool_Variable) == 0x000005, "Member 'BP_HUD_C_ToggleLowHPWarning::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, Temp_int_Variable) == 0x000008, "Member 'BP_HUD_C_ToggleLowHPWarning::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, Temp_int_Variable_1) == 0x00000C, "Member 'BP_HUD_C_ToggleLowHPWarning::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, Temp_bool_Variable_1) == 0x000010, "Member 'BP_HUD_C_ToggleLowHPWarning::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, K2Node_Select_Default) == 0x000018, "Member 'BP_HUD_C_ToggleLowHPWarning::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000020, "Member 'BP_HUD_C_ToggleLowHPWarning::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, K2Node_Select_Default_1) == 0x000028, "Member 'BP_HUD_C_ToggleLowHPWarning::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, CallFunc_GetEndTime_ReturnValue) == 0x000030, "Member 'BP_HUD_C_ToggleLowHPWarning::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000034, "Member 'BP_HUD_C_ToggleLowHPWarning::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, CallFunc_PlayAnimation_ReturnValue) == 0x000038, "Member 'BP_HUD_C_ToggleLowHPWarning::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, K2Node_Select_Default_2) == 0x000040, "Member 'BP_HUD_C_ToggleLowHPWarning::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_HUD_C_ToggleLowHPWarning::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, CallFunc_PlayAnimation_ReturnValue_1) == 0x000050, "Member 'BP_HUD_C_ToggleLowHPWarning::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, K2Node_Select_Default_3) == 0x000058, "Member 'BP_HUD_C_ToggleLowHPWarning::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, K2Node_Select_Default_4) == 0x00005C, "Member 'BP_HUD_C_ToggleLowHPWarning::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, CallFunc_PlayAnimation_ReturnValue_2) == 0x000060, "Member 'BP_HUD_C_ToggleLowHPWarning::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowHPWarning, CallFunc_PlayAnimation_ReturnValue_3) == 0x000068, "Member 'BP_HUD_C_ToggleLowHPWarning::CallFunc_PlayAnimation_ReturnValue_3' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ToggleLowManaWarning
// 0x0038 (0x0038 - 0x0000)
struct BP_HUD_C_ToggleLowManaWarning final
{
public:
	bool                                          IsManaLow;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESideEffectWarningType                        SideEffectWarningType;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESideEffectWarningType                        Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESideEffectWarningType                        Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidgetAnimation*                 K2Node_Select_Default;                             // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UWidgetAnimation*                 K2Node_Select_Default_1;                           // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_ToggleLowManaWarning) == 0x000008, "Wrong alignment on BP_HUD_C_ToggleLowManaWarning");
static_assert(sizeof(BP_HUD_C_ToggleLowManaWarning) == 0x000038, "Wrong size on BP_HUD_C_ToggleLowManaWarning");
static_assert(offsetof(BP_HUD_C_ToggleLowManaWarning, IsManaLow) == 0x000000, "Member 'BP_HUD_C_ToggleLowManaWarning::IsManaLow' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowManaWarning, SideEffectWarningType) == 0x000001, "Member 'BP_HUD_C_ToggleLowManaWarning::SideEffectWarningType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowManaWarning, Temp_byte_Variable) == 0x000002, "Member 'BP_HUD_C_ToggleLowManaWarning::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowManaWarning, Temp_byte_Variable_1) == 0x000003, "Member 'BP_HUD_C_ToggleLowManaWarning::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowManaWarning, K2Node_Select_Default) == 0x000008, "Member 'BP_HUD_C_ToggleLowManaWarning::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowManaWarning, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000010, "Member 'BP_HUD_C_ToggleLowManaWarning::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowManaWarning, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_HUD_C_ToggleLowManaWarning::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowManaWarning, K2Node_Select_Default_1) == 0x000020, "Member 'BP_HUD_C_ToggleLowManaWarning::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowManaWarning, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000028, "Member 'BP_HUD_C_ToggleLowManaWarning::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowManaWarning, CallFunc_PlayAnimation_ReturnValue_1) == 0x000030, "Member 'BP_HUD_C_ToggleLowManaWarning::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ToggleLowHPBarWarning
// 0x0001 (0x0001 - 0x0000)
struct BP_HUD_C_ToggleLowHPBarWarning final
{
public:
	bool                                          IsHPLow;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_ToggleLowHPBarWarning) == 0x000001, "Wrong alignment on BP_HUD_C_ToggleLowHPBarWarning");
static_assert(sizeof(BP_HUD_C_ToggleLowHPBarWarning) == 0x000001, "Wrong size on BP_HUD_C_ToggleLowHPBarWarning");
static_assert(offsetof(BP_HUD_C_ToggleLowHPBarWarning, IsHPLow) == 0x000000, "Member 'BP_HUD_C_ToggleLowHPBarWarning::IsHPLow' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ToggleLowLifeAuraWarning
// 0x0020 (0x0020 - 0x0000)
struct BP_HUD_C_ToggleLowLifeAuraWarning final
{
public:
	bool                                          IsBelowZero;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_ToggleLowLifeAuraWarning) == 0x000008, "Wrong alignment on BP_HUD_C_ToggleLowLifeAuraWarning");
static_assert(sizeof(BP_HUD_C_ToggleLowLifeAuraWarning) == 0x000020, "Wrong size on BP_HUD_C_ToggleLowLifeAuraWarning");
static_assert(offsetof(BP_HUD_C_ToggleLowLifeAuraWarning, IsBelowZero) == 0x000000, "Member 'BP_HUD_C_ToggleLowLifeAuraWarning::IsBelowZero' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowLifeAuraWarning, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000004, "Member 'BP_HUD_C_ToggleLowLifeAuraWarning::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowLifeAuraWarning, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_HUD_C_ToggleLowLifeAuraWarning::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowLifeAuraWarning, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000010, "Member 'BP_HUD_C_ToggleLowLifeAuraWarning::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowLifeAuraWarning, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'BP_HUD_C_ToggleLowLifeAuraWarning::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.EntropicEssenceChange
// 0x0030 (0x0030 - 0x0000)
struct BP_HUD_C_EntropicEssenceChange final
{
public:
	int32                                         NewEntropicEssence;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate_;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0018(0x0018)()
};
static_assert(alignof(BP_HUD_C_EntropicEssenceChange) == 0x000008, "Wrong alignment on BP_HUD_C_EntropicEssenceChange");
static_assert(sizeof(BP_HUD_C_EntropicEssenceChange) == 0x000030, "Wrong size on BP_HUD_C_EntropicEssenceChange");
static_assert(offsetof(BP_HUD_C_EntropicEssenceChange, NewEntropicEssence) == 0x000000, "Member 'BP_HUD_C_EntropicEssenceChange::NewEntropicEssence' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_EntropicEssenceChange, Animate_) == 0x000004, "Member 'BP_HUD_C_EntropicEssenceChange::Animate_' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_EntropicEssenceChange, Temp_bool_Variable) == 0x000005, "Member 'BP_HUD_C_EntropicEssenceChange::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_EntropicEssenceChange, CallFunc_Greater_IntInt_ReturnValue) == 0x000006, "Member 'BP_HUD_C_EntropicEssenceChange::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_EntropicEssenceChange, Temp_byte_Variable) == 0x000007, "Member 'BP_HUD_C_EntropicEssenceChange::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_EntropicEssenceChange, Temp_byte_Variable_1) == 0x000008, "Member 'BP_HUD_C_EntropicEssenceChange::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_EntropicEssenceChange, K2Node_Select_Default) == 0x000009, "Member 'BP_HUD_C_EntropicEssenceChange::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_EntropicEssenceChange, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_HUD_C_EntropicEssenceChange::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_EntropicEssenceChange, CallFunc_IntToText_ReturnValue) == 0x000018, "Member 'BP_HUD_C_EntropicEssenceChange::CallFunc_IntToText_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ShowNewItemLabel
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_C_ShowNewItemLabel final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_ShowNewItemLabel) == 0x000008, "Wrong alignment on BP_HUD_C_ShowNewItemLabel");
static_assert(sizeof(BP_HUD_C_ShowNewItemLabel) == 0x000008, "Wrong size on BP_HUD_C_ShowNewItemLabel");
static_assert(offsetof(BP_HUD_C_ShowNewItemLabel, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_C_ShowNewItemLabel::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.HideNewItemLabel
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_C_HideNewItemLabel final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_HideNewItemLabel) == 0x000008, "Wrong alignment on BP_HUD_C_HideNewItemLabel");
static_assert(sizeof(BP_HUD_C_HideNewItemLabel) == 0x000008, "Wrong size on BP_HUD_C_HideNewItemLabel");
static_assert(offsetof(BP_HUD_C_HideNewItemLabel, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_C_HideNewItemLabel::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ShowItemUsedLabel
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_C_ShowItemUsedLabel final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_ShowItemUsedLabel) == 0x000008, "Wrong alignment on BP_HUD_C_ShowItemUsedLabel");
static_assert(sizeof(BP_HUD_C_ShowItemUsedLabel) == 0x000008, "Wrong size on BP_HUD_C_ShowItemUsedLabel");
static_assert(offsetof(BP_HUD_C_ShowItemUsedLabel, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_C_ShowItemUsedLabel::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.HideItemUsedLabel
// 0x0008 (0x0008 - 0x0000)
struct BP_HUD_C_HideItemUsedLabel final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_HideItemUsedLabel) == 0x000008, "Wrong alignment on BP_HUD_C_HideItemUsedLabel");
static_assert(sizeof(BP_HUD_C_HideItemUsedLabel) == 0x000008, "Wrong size on BP_HUD_C_HideItemUsedLabel");
static_assert(offsetof(BP_HUD_C_HideItemUsedLabel, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_HUD_C_HideItemUsedLabel::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ToggleLowRageWarning
// 0x0038 (0x0038 - 0x0000)
struct BP_HUD_C_ToggleLowRageWarning final
{
public:
	bool                                          IsRageLow;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESideEffectWarningType                        SideEffectWarningType;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESideEffectWarningType                        Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESideEffectWarningType                        Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidgetAnimation*                 K2Node_Select_Default;                             // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UWidgetAnimation*                 K2Node_Select_Default_1;                           // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_ToggleLowRageWarning) == 0x000008, "Wrong alignment on BP_HUD_C_ToggleLowRageWarning");
static_assert(sizeof(BP_HUD_C_ToggleLowRageWarning) == 0x000038, "Wrong size on BP_HUD_C_ToggleLowRageWarning");
static_assert(offsetof(BP_HUD_C_ToggleLowRageWarning, IsRageLow) == 0x000000, "Member 'BP_HUD_C_ToggleLowRageWarning::IsRageLow' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowRageWarning, SideEffectWarningType) == 0x000001, "Member 'BP_HUD_C_ToggleLowRageWarning::SideEffectWarningType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowRageWarning, Temp_byte_Variable) == 0x000002, "Member 'BP_HUD_C_ToggleLowRageWarning::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowRageWarning, Temp_byte_Variable_1) == 0x000003, "Member 'BP_HUD_C_ToggleLowRageWarning::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowRageWarning, K2Node_Select_Default) == 0x000008, "Member 'BP_HUD_C_ToggleLowRageWarning::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowRageWarning, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000010, "Member 'BP_HUD_C_ToggleLowRageWarning::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowRageWarning, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_HUD_C_ToggleLowRageWarning::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowRageWarning, K2Node_Select_Default_1) == 0x000020, "Member 'BP_HUD_C_ToggleLowRageWarning::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowRageWarning, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000028, "Member 'BP_HUD_C_ToggleLowRageWarning::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ToggleLowRageWarning, CallFunc_PlayAnimation_ReturnValue_1) == 0x000030, "Member 'BP_HUD_C_ToggleLowRageWarning::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.Toggle Resource Bar Position
// 0x0280 (0x0280 - 0x0000)
struct BP_HUD_C_Toggle_Resource_Bar_Position final
{
public:
	bool                                          IsDefault;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x002C(0x0010)(NoDestructor)
	struct FAnchors                               K2Node_MakeStruct_Anchors_1;                       // 0x003C(0x0010)(NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_4;                            // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_5;                            // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_6;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_7;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_8;                            // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_9;                            // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_10;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_11;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_12;                           // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_13;                           // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_14;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_15;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x00DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_2;                        // 0x00EC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_16;                           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_17;                           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_11;                             // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnchors                               K2Node_MakeStruct_Anchors_2;                       // 0x0114(0x0010)(NoDestructor)
	struct FAnchors                               K2Node_MakeStruct_Anchors_3;                       // 0x0124(0x0010)(NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnchors                               K2Node_MakeStruct_Anchors_4;                       // 0x0138(0x0010)(NoDestructor)
	struct FAnchors                               K2Node_MakeStruct_Anchors_5;                       // 0x0148(0x0010)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0158(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_4;           // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_3;                        // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_Select_Default_1;                           // 0x01A0(0x0010)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_5;           // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_2;                           // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_3;                           // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_4;                           // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_5;                           // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_6;           // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_7;           // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_6;                           // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_7;                           // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_13;                             // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_8;           // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_Select_Default_8;                           // 0x0208(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Select_Default_9;                           // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_Select_Default_10;                          // 0x0220(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x0230(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_11;                          // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_9;           // 0x0240(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_Select_Default_12;                          // 0x0248(0x0010)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_10;          // 0x0258(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_Select_Default_13;                          // 0x0260(0x0010)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_11;          // 0x0270(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_12;          // 0x0278(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_Toggle_Resource_Bar_Position) == 0x000008, "Wrong alignment on BP_HUD_C_Toggle_Resource_Bar_Position");
static_assert(sizeof(BP_HUD_C_Toggle_Resource_Bar_Position) == 0x000280, "Wrong size on BP_HUD_C_Toggle_Resource_Bar_Position");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, IsDefault) == 0x000000, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::IsDefault' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_MakeStruct_Margin) == 0x000004, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable) == 0x000014, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable) == 0x000018, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_1) == 0x000020, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_1) == 0x000028, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_MakeStruct_Anchors) == 0x00002C, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_MakeStruct_Anchors_1) == 0x00003C, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_MakeStruct_Anchors_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_2) == 0x00004C, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_2) == 0x000050, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_3) == 0x000058, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_3) == 0x000060, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_4) == 0x000064, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_5) == 0x00006C, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_4) == 0x000074, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_6) == 0x000078, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_7) == 0x000080, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_5) == 0x000088, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_8) == 0x00008C, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_9) == 0x000094, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_6) == 0x00009C, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_10) == 0x0000A0, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_11) == 0x0000A8, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_7) == 0x0000B0, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_12) == 0x0000B4, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_13) == 0x0000BC, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_8) == 0x0000C4, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_14) == 0x0000C8, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_15) == 0x0000D0, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_9) == 0x0000D8, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_MakeStruct_Margin_1) == 0x0000DC, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_MakeStruct_Margin_2) == 0x0000EC, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_MakeStruct_Margin_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_10) == 0x0000FC, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_16) == 0x000100, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_struct_Variable_17) == 0x000108, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_11) == 0x000110, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_MakeStruct_Anchors_2) == 0x000114, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_MakeStruct_Anchors_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_MakeStruct_Anchors_3) == 0x000124, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_MakeStruct_Anchors_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_12) == 0x000134, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_MakeStruct_Anchors_4) == 0x000138, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_MakeStruct_Anchors_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_MakeStruct_Anchors_5) == 0x000148, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_MakeStruct_Anchors_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000158, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000160, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000168, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000170, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_4) == 0x000178, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000180, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_MakeStruct_Margin_3) == 0x000188, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_MakeStruct_Margin_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default) == 0x000198, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_1) == 0x0001A0, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_5) == 0x0001B0, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_2) == 0x0001B8, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_3) == 0x0001C0, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_4) == 0x0001C8, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_5) == 0x0001D0, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_6) == 0x0001D8, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_7) == 0x0001E0, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_6) == 0x0001E8, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_7) == 0x0001F0, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, Temp_bool_Variable_13) == 0x0001F8, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_8) == 0x000200, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_8) == 0x000208, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_9) == 0x000218, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_10) == 0x000220, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x000230, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_11) == 0x000238, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_11' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_9) == 0x000240, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_12) == 0x000248, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_12' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_10) == 0x000258, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, K2Node_Select_Default_13) == 0x000260, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::K2Node_Select_Default_13' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_11) == 0x000270, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_Toggle_Resource_Bar_Position, CallFunc_SlotAsCanvasSlot_ReturnValue_12) == 0x000278, "Member 'BP_HUD_C_Toggle_Resource_Bar_Position::CallFunc_SlotAsCanvasSlot_ReturnValue_12' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.TogglePurgingRainVFX
// 0x0038 (0x0038 - 0x0000)
struct BP_HUD_C_TogglePurgingRainVFX final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsFacingLeft;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_TogglePurgingRainVFX) == 0x000008, "Wrong alignment on BP_HUD_C_TogglePurgingRainVFX");
static_assert(sizeof(BP_HUD_C_TogglePurgingRainVFX) == 0x000038, "Wrong size on BP_HUD_C_TogglePurgingRainVFX");
static_assert(offsetof(BP_HUD_C_TogglePurgingRainVFX, IsVisible_0) == 0x000000, "Member 'BP_HUD_C_TogglePurgingRainVFX::IsVisible_0' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_TogglePurgingRainVFX, IsFacingLeft) == 0x000001, "Member 'BP_HUD_C_TogglePurgingRainVFX::IsFacingLeft' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_TogglePurgingRainVFX, Temp_bool_Variable) == 0x000002, "Member 'BP_HUD_C_TogglePurgingRainVFX::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_TogglePurgingRainVFX, Temp_float_Variable) == 0x000004, "Member 'BP_HUD_C_TogglePurgingRainVFX::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_TogglePurgingRainVFX, Temp_float_Variable_1) == 0x000008, "Member 'BP_HUD_C_TogglePurgingRainVFX::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_TogglePurgingRainVFX, K2Node_Select_Default) == 0x00000C, "Member 'BP_HUD_C_TogglePurgingRainVFX::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_TogglePurgingRainVFX, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'BP_HUD_C_TogglePurgingRainVFX::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_TogglePurgingRainVFX, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000018, "Member 'BP_HUD_C_TogglePurgingRainVFX::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_TogglePurgingRainVFX, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'BP_HUD_C_TogglePurgingRainVFX::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_TogglePurgingRainVFX, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000028, "Member 'BP_HUD_C_TogglePurgingRainVFX::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_TogglePurgingRainVFX, CallFunc_PlayAnimation_ReturnValue_1) == 0x000030, "Member 'BP_HUD_C_TogglePurgingRainVFX::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.SetLightBarrier
// 0x0010 (0x0010 - 0x0000)
struct BP_HUD_C_SetLightBarrier final
{
public:
	EHUDBarType                                   HUDBarType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightBarrierCurrentValue;                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightBarrierMaxValue;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_SetLightBarrier) == 0x000004, "Wrong alignment on BP_HUD_C_SetLightBarrier");
static_assert(sizeof(BP_HUD_C_SetLightBarrier) == 0x000010, "Wrong size on BP_HUD_C_SetLightBarrier");
static_assert(offsetof(BP_HUD_C_SetLightBarrier, HUDBarType) == 0x000000, "Member 'BP_HUD_C_SetLightBarrier::HUDBarType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetLightBarrier, LightBarrierCurrentValue) == 0x000004, "Member 'BP_HUD_C_SetLightBarrier::LightBarrierCurrentValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetLightBarrier, LightBarrierMaxValue) == 0x000008, "Member 'BP_HUD_C_SetLightBarrier::LightBarrierMaxValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetLightBarrier, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'BP_HUD_C_SetLightBarrier::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.SetBossBar
// 0x0005 (0x0005 - 0x0000)
struct BP_HUD_C_SetBossBar final
{
public:
	EHUDBarType                                   HUDBarType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Miniboss;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TwoStageBossBar;                                   // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Mandragora;                                        // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_SetBossBar) == 0x000001, "Wrong alignment on BP_HUD_C_SetBossBar");
static_assert(sizeof(BP_HUD_C_SetBossBar) == 0x000005, "Wrong size on BP_HUD_C_SetBossBar");
static_assert(offsetof(BP_HUD_C_SetBossBar, HUDBarType) == 0x000000, "Member 'BP_HUD_C_SetBossBar::HUDBarType' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetBossBar, Miniboss) == 0x000001, "Member 'BP_HUD_C_SetBossBar::Miniboss' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetBossBar, TwoStageBossBar) == 0x000002, "Member 'BP_HUD_C_SetBossBar::TwoStageBossBar' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetBossBar, Mandragora) == 0x000003, "Member 'BP_HUD_C_SetBossBar::Mandragora' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_SetBossBar, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'BP_HUD_C_SetBossBar::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.ShowBestiaryUpdatedNotification
// 0x0010 (0x0010 - 0x0000)
struct BP_HUD_C_ShowBestiaryUpdatedNotification final
{
public:
	float                                         Timeout;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_ShowBestiaryUpdatedNotification) == 0x000008, "Wrong alignment on BP_HUD_C_ShowBestiaryUpdatedNotification");
static_assert(sizeof(BP_HUD_C_ShowBestiaryUpdatedNotification) == 0x000010, "Wrong size on BP_HUD_C_ShowBestiaryUpdatedNotification");
static_assert(offsetof(BP_HUD_C_ShowBestiaryUpdatedNotification, Timeout) == 0x000000, "Member 'BP_HUD_C_ShowBestiaryUpdatedNotification::Timeout' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowBestiaryUpdatedNotification, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_HUD_C_ShowBestiaryUpdatedNotification::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_ShowBestiaryUpdatedNotification, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'BP_HUD_C_ShowBestiaryUpdatedNotification::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.PlayRiftCombatStartAnim
// 0x0068 (0x0068 - 0x0000)
struct BP_HUD_C_PlayRiftCombatStartAnim final
{
public:
	int32                                         RiftID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RiftVFXColor_CorruptedWoods;                       // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RiftVFXColor_VampireCastle2;                       // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RiftVFXColor_Hinterlands;                          // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUD_C_PlayRiftCombatStartAnim) == 0x000008, "Wrong alignment on BP_HUD_C_PlayRiftCombatStartAnim");
static_assert(sizeof(BP_HUD_C_PlayRiftCombatStartAnim) == 0x000068, "Wrong size on BP_HUD_C_PlayRiftCombatStartAnim");
static_assert(offsetof(BP_HUD_C_PlayRiftCombatStartAnim, RiftID) == 0x000000, "Member 'BP_HUD_C_PlayRiftCombatStartAnim::RiftID' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_PlayRiftCombatStartAnim, RiftVFXColor_CorruptedWoods) == 0x000004, "Member 'BP_HUD_C_PlayRiftCombatStartAnim::RiftVFXColor_CorruptedWoods' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_PlayRiftCombatStartAnim, RiftVFXColor_VampireCastle2) == 0x000014, "Member 'BP_HUD_C_PlayRiftCombatStartAnim::RiftVFXColor_VampireCastle2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_PlayRiftCombatStartAnim, RiftVFXColor_Hinterlands) == 0x000024, "Member 'BP_HUD_C_PlayRiftCombatStartAnim::RiftVFXColor_Hinterlands' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_PlayRiftCombatStartAnim, Temp_int_Variable) == 0x000034, "Member 'BP_HUD_C_PlayRiftCombatStartAnim::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_PlayRiftCombatStartAnim, Temp_struct_Variable) == 0x000038, "Member 'BP_HUD_C_PlayRiftCombatStartAnim::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_PlayRiftCombatStartAnim, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000048, "Member 'BP_HUD_C_PlayRiftCombatStartAnim::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_PlayRiftCombatStartAnim, K2Node_Select_Default) == 0x000050, "Member 'BP_HUD_C_PlayRiftCombatStartAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_PlayRiftCombatStartAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000060, "Member 'BP_HUD_C_PlayRiftCombatStartAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_HUD.BP_HUD_C.RepositionKeyItemSlots
// 0x0048 (0x0048 - 0x0000)
struct BP_HUD_C_RepositionKeyItemSlots final
{
public:
	int32                                         QuickUseSlotClount;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUD_C_RepositionKeyItemSlots) == 0x000008, "Wrong alignment on BP_HUD_C_RepositionKeyItemSlots");
static_assert(sizeof(BP_HUD_C_RepositionKeyItemSlots) == 0x000048, "Wrong size on BP_HUD_C_RepositionKeyItemSlots");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, QuickUseSlotClount) == 0x000000, "Member 'BP_HUD_C_RepositionKeyItemSlots::QuickUseSlotClount' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, Temp_int_Variable) == 0x000004, "Member 'BP_HUD_C_RepositionKeyItemSlots::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, Temp_float_Variable) == 0x000008, "Member 'BP_HUD_C_RepositionKeyItemSlots::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, Temp_float_Variable_1) == 0x00000C, "Member 'BP_HUD_C_RepositionKeyItemSlots::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, Temp_float_Variable_2) == 0x000010, "Member 'BP_HUD_C_RepositionKeyItemSlots::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, Temp_float_Variable_3) == 0x000014, "Member 'BP_HUD_C_RepositionKeyItemSlots::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, Temp_float_Variable_4) == 0x000018, "Member 'BP_HUD_C_RepositionKeyItemSlots::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, Temp_float_Variable_5) == 0x00001C, "Member 'BP_HUD_C_RepositionKeyItemSlots::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, Temp_float_Variable_6) == 0x000020, "Member 'BP_HUD_C_RepositionKeyItemSlots::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, Temp_float_Variable_7) == 0x000024, "Member 'BP_HUD_C_RepositionKeyItemSlots::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000028, "Member 'BP_HUD_C_RepositionKeyItemSlots::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, K2Node_Select_Default) == 0x000030, "Member 'BP_HUD_C_RepositionKeyItemSlots::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HUD_C_RepositionKeyItemSlots, K2Node_MakeStruct_Margin) == 0x000034, "Member 'BP_HUD_C_RepositionKeyItemSlots::K2Node_MakeStruct_Margin' has a wrong offset!");

}

