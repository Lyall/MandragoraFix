#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HangingLanternBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HangingLanternBase.BP_HangingLanternBase_C
// 0x00C8 (0x02F0 - 0x0228)
class ABP_HangingLanternBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak;                                                // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UManVisualController*                   ManVisualController;                               // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GlowPlane;                                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Pivot;                                             // 0x0258(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalizedRotationAxis;                            // 0x0264(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindSpeed;                                         // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindAmplitude;                                     // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSine;                                           // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCos;                                            // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomSeed;                                        // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GlowplaneToggle;                                   // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285[0xB];                                      // 0x0285(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             GlowplaneTransform;                                // 0x0290(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                GlowplanePivot;                                    // 0x02C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           GlowPlaneColor;                                    // 0x02CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlowplaneDensity;                                  // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlowplaneDepthfade;                                // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DiffulseMultiplier;                                // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateMaterialValues();
	void RandomizeValues();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_HangingLanternBase(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HangingLanternBase_C">();
	}
	static class ABP_HangingLanternBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HangingLanternBase_C>();
	}
};
static_assert(alignof(ABP_HangingLanternBase_C) == 0x000010, "Wrong alignment on ABP_HangingLanternBase_C");
static_assert(sizeof(ABP_HangingLanternBase_C) == 0x0002F0, "Wrong size on ABP_HangingLanternBase_C");
static_assert(offsetof(ABP_HangingLanternBase_C, UberGraphFrame) == 0x000228, "Member 'ABP_HangingLanternBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, Ak) == 0x000230, "Member 'ABP_HangingLanternBase_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, ManVisualController) == 0x000238, "Member 'ABP_HangingLanternBase_C::ManVisualController' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, GlowPlane) == 0x000240, "Member 'ABP_HangingLanternBase_C::GlowPlane' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, StaticMesh) == 0x000248, "Member 'ABP_HangingLanternBase_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, Scene) == 0x000250, "Member 'ABP_HangingLanternBase_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, Pivot) == 0x000258, "Member 'ABP_HangingLanternBase_C::Pivot' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, NormalizedRotationAxis) == 0x000264, "Member 'ABP_HangingLanternBase_C::NormalizedRotationAxis' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, WindSpeed) == 0x000270, "Member 'ABP_HangingLanternBase_C::WindSpeed' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, WindAmplitude) == 0x000274, "Member 'ABP_HangingLanternBase_C::WindAmplitude' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, MaxSine) == 0x000278, "Member 'ABP_HangingLanternBase_C::MaxSine' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, MaxCos) == 0x00027C, "Member 'ABP_HangingLanternBase_C::MaxCos' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, RandomSeed) == 0x000280, "Member 'ABP_HangingLanternBase_C::RandomSeed' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, GlowplaneToggle) == 0x000284, "Member 'ABP_HangingLanternBase_C::GlowplaneToggle' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, GlowplaneTransform) == 0x000290, "Member 'ABP_HangingLanternBase_C::GlowplaneTransform' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, GlowplanePivot) == 0x0002C0, "Member 'ABP_HangingLanternBase_C::GlowplanePivot' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, GlowPlaneColor) == 0x0002CC, "Member 'ABP_HangingLanternBase_C::GlowPlaneColor' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, GlowplaneDensity) == 0x0002DC, "Member 'ABP_HangingLanternBase_C::GlowplaneDensity' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, GlowplaneDepthfade) == 0x0002E0, "Member 'ABP_HangingLanternBase_C::GlowplaneDepthfade' has a wrong offset!");
static_assert(offsetof(ABP_HangingLanternBase_C, DiffulseMultiplier) == 0x0002E4, "Member 'ABP_HangingLanternBase_C::DiffulseMultiplier' has a wrong offset!");

}

