#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Inquisitor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Inquisitor.BP_Inquisitor_C
// 0x00B0 (0x1B70 - 0x1AC0)
class ABP_Inquisitor_C final : public AEnemyCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1AC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        SEHaloVFXPos;                                      // 0x1AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USurfaceEffectComponent*                FootR;                                             // 0x1AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USurfaceEffectComponent*                FootL;                                             // 0x1AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SpeechBubbleComponent_C*            BP_SpeechBubbleComponent;                          // 0x1AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_HPBarWidgetComponent_C*             BP_HPBarWidgetComponent;                           // 0x1AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                WeaponHitBox;                                      // 0x1AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                HitBox_Hand_Right;                                 // 0x1AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                HitBoxHand;                                        // 0x1B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                HitBoxRightLeg;                                    // 0x1B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                HitBoxStomp;                                       // 0x1B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Arm_Right_Lower;                                   // 0x1B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Arm_Left_Lower;                                    // 0x1B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Arm_Right_Upper;                                   // 0x1B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Arm_Left_Upper;                                    // 0x1B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Head;                                              // 0x1B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Leg_Left_Lower;                                    // 0x1B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Leg_Right_Lower;                                   // 0x1B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Leg_Left;                                          // 0x1B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Leg_Right;                                         // 0x1B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           Torso;                                             // 0x1B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkSwitchValue*                         audio_inquisitor_switch;                           // 0x1B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Inquisitor(int32 EntryPoint);
	void ReceiveBeginPlay();
	void charBaseEvent(bool asd, float wg);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Inquisitor_C">();
	}
	static class ABP_Inquisitor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Inquisitor_C>();
	}
};
static_assert(alignof(ABP_Inquisitor_C) == 0x000010, "Wrong alignment on ABP_Inquisitor_C");
static_assert(sizeof(ABP_Inquisitor_C) == 0x001B70, "Wrong size on ABP_Inquisitor_C");
static_assert(offsetof(ABP_Inquisitor_C, UberGraphFrame) == 0x001AC0, "Member 'ABP_Inquisitor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, SEHaloVFXPos) == 0x001AC8, "Member 'ABP_Inquisitor_C::SEHaloVFXPos' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, FootR) == 0x001AD0, "Member 'ABP_Inquisitor_C::FootR' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, FootL) == 0x001AD8, "Member 'ABP_Inquisitor_C::FootL' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, BP_SpeechBubbleComponent) == 0x001AE0, "Member 'ABP_Inquisitor_C::BP_SpeechBubbleComponent' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, BP_HPBarWidgetComponent) == 0x001AE8, "Member 'ABP_Inquisitor_C::BP_HPBarWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, WeaponHitBox) == 0x001AF0, "Member 'ABP_Inquisitor_C::WeaponHitBox' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, HitBox_Hand_Right) == 0x001AF8, "Member 'ABP_Inquisitor_C::HitBox_Hand_Right' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, HitBoxHand) == 0x001B00, "Member 'ABP_Inquisitor_C::HitBoxHand' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, HitBoxRightLeg) == 0x001B08, "Member 'ABP_Inquisitor_C::HitBoxRightLeg' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, HitBoxStomp) == 0x001B10, "Member 'ABP_Inquisitor_C::HitBoxStomp' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, Arm_Right_Lower) == 0x001B18, "Member 'ABP_Inquisitor_C::Arm_Right_Lower' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, Arm_Left_Lower) == 0x001B20, "Member 'ABP_Inquisitor_C::Arm_Left_Lower' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, Arm_Right_Upper) == 0x001B28, "Member 'ABP_Inquisitor_C::Arm_Right_Upper' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, Arm_Left_Upper) == 0x001B30, "Member 'ABP_Inquisitor_C::Arm_Left_Upper' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, Head) == 0x001B38, "Member 'ABP_Inquisitor_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, Leg_Left_Lower) == 0x001B40, "Member 'ABP_Inquisitor_C::Leg_Left_Lower' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, Leg_Right_Lower) == 0x001B48, "Member 'ABP_Inquisitor_C::Leg_Right_Lower' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, Leg_Left) == 0x001B50, "Member 'ABP_Inquisitor_C::Leg_Left' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, Leg_Right) == 0x001B58, "Member 'ABP_Inquisitor_C::Leg_Right' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, Torso) == 0x001B60, "Member 'ABP_Inquisitor_C::Torso' has a wrong offset!");
static_assert(offsetof(ABP_Inquisitor_C, audio_inquisitor_switch) == 0x001B68, "Member 'ABP_Inquisitor_C::audio_inquisitor_switch' has a wrong offset!");

}

