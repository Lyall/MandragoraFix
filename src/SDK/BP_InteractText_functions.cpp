#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractText

#include "Basic.hpp"

#include "BP_InteractText_classes.hpp"
#include "BP_InteractText_parameters.hpp"


namespace SDK
{

// Function BP_InteractText.BP_InteractText_C.ExecuteUbergraph_BP_InteractText
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractText_C::ExecuteUbergraph_BP_InteractText(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractText_C", "ExecuteUbergraph_BP_InteractText");

	Params::BP_InteractText_C_ExecuteUbergraph_BP_InteractText Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractText.BP_InteractText_C.OnShow
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bDoubleInteractBtn                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_InteractText_C::OnShow(bool bDoubleInteractBtn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractText_C", "OnShow");

	Params::BP_InteractText_C_OnShow Parms{};

	Parms.bDoubleInteractBtn = bDoubleInteractBtn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractText.BP_InteractText_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_InteractText_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractText_C", "PreConstruct");

	Params::BP_InteractText_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractText.BP_InteractText_C.FadeIn
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InteractText_C::FadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractText_C", "FadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractText.BP_InteractText_C.FadeOut
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InteractText_C::FadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractText_C", "FadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractText.BP_InteractText_C.SetInteractText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Caption_0                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FInteractParams                  InteractParams                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_InteractText_C::SetInteractText(const class FText& Caption_0, const struct FInteractParams& InteractParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractText_C", "SetInteractText");

	Params::BP_InteractText_C_SetInteractText Parms{};

	Parms.Caption_0 = std::move(Caption_0);
	Parms.InteractParams = std::move(InteractParams);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractText.BP_InteractText_C.ToggleInCombatMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InCombat                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_InteractText_C::ToggleInCombatMode(bool InCombat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractText_C", "ToggleInCombatMode");

	Params::BP_InteractText_C_ToggleInCombatMode Parms{};

	Parms.InCombat = InCombat;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractText.BP_InteractText_C.ToggleDouble
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDouble                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_InteractText_C::ToggleDouble(bool IsDouble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractText_C", "ToggleDouble");

	Params::BP_InteractText_C_ToggleDouble Parms{};

	Parms.IsDouble = IsDouble;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractText.BP_InteractText_C.ToggleSmallScreen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsSmallScreen                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_InteractText_C::ToggleSmallScreen(bool InIsSmallScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractText_C", "ToggleSmallScreen");

	Params::BP_InteractText_C_ToggleSmallScreen Parms{};

	Parms.InIsSmallScreen = InIsSmallScreen;

	UObject::ProcessEvent(Func, &Parms);
}

}

