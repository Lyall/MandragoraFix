#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractText

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "man_structs.hpp"


namespace SDK::Params
{

// Function BP_InteractText.BP_InteractText_C.ExecuteUbergraph_BP_InteractText
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractText_C_ExecuteUbergraph_BP_InteractText final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bDoubleInteractBtn;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InteractText_C_ExecuteUbergraph_BP_InteractText) == 0x000004, "Wrong alignment on BP_InteractText_C_ExecuteUbergraph_BP_InteractText");
static_assert(sizeof(BP_InteractText_C_ExecuteUbergraph_BP_InteractText) == 0x000008, "Wrong size on BP_InteractText_C_ExecuteUbergraph_BP_InteractText");
static_assert(offsetof(BP_InteractText_C_ExecuteUbergraph_BP_InteractText, EntryPoint) == 0x000000, "Member 'BP_InteractText_C_ExecuteUbergraph_BP_InteractText::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ExecuteUbergraph_BP_InteractText, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_InteractText_C_ExecuteUbergraph_BP_InteractText::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ExecuteUbergraph_BP_InteractText, K2Node_Event_bDoubleInteractBtn) == 0x000005, "Member 'BP_InteractText_C_ExecuteUbergraph_BP_InteractText::K2Node_Event_bDoubleInteractBtn' has a wrong offset!");

// Function BP_InteractText.BP_InteractText_C.OnShow
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractText_C_OnShow final
{
public:
	bool                                          bDoubleInteractBtn;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InteractText_C_OnShow) == 0x000001, "Wrong alignment on BP_InteractText_C_OnShow");
static_assert(sizeof(BP_InteractText_C_OnShow) == 0x000001, "Wrong size on BP_InteractText_C_OnShow");
static_assert(offsetof(BP_InteractText_C_OnShow, bDoubleInteractBtn) == 0x000000, "Member 'BP_InteractText_C_OnShow::bDoubleInteractBtn' has a wrong offset!");

// Function BP_InteractText.BP_InteractText_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractText_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InteractText_C_PreConstruct) == 0x000001, "Wrong alignment on BP_InteractText_C_PreConstruct");
static_assert(sizeof(BP_InteractText_C_PreConstruct) == 0x000001, "Wrong size on BP_InteractText_C_PreConstruct");
static_assert(offsetof(BP_InteractText_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_InteractText_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_InteractText.BP_InteractText_C.FadeIn
// 0x0020 (0x0020 - 0x0000)
struct BP_InteractText_C_FadeIn final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractText_C_FadeIn) == 0x000008, "Wrong alignment on BP_InteractText_C_FadeIn");
static_assert(sizeof(BP_InteractText_C_FadeIn) == 0x000020, "Wrong size on BP_InteractText_C_FadeIn");
static_assert(offsetof(BP_InteractText_C_FadeIn, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_InteractText_C_FadeIn::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeIn, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000008, "Member 'BP_InteractText_C_FadeIn::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeIn, Temp_int_Variable) == 0x00000C, "Member 'BP_InteractText_C_FadeIn::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeIn, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'BP_InteractText_C_FadeIn::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeIn, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_InteractText_C_FadeIn::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_InteractText.BP_InteractText_C.FadeOut
// 0x0050 (0x0050 - 0x0000)
struct BP_InteractText_C_FadeOut final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEndTime_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractText_C_FadeOut) == 0x000008, "Wrong alignment on BP_InteractText_C_FadeOut");
static_assert(sizeof(BP_InteractText_C_FadeOut) == 0x000050, "Wrong size on BP_InteractText_C_FadeOut");
static_assert(offsetof(BP_InteractText_C_FadeOut, Temp_int_Variable) == 0x000000, "Member 'BP_InteractText_C_FadeOut::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, Temp_float_Variable) == 0x000004, "Member 'BP_InteractText_C_FadeOut::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'BP_InteractText_C_FadeOut::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, Temp_bool_Variable) == 0x000009, "Member 'BP_InteractText_C_FadeOut::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, Temp_bool_Variable_1) == 0x00000A, "Member 'BP_InteractText_C_FadeOut::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, CallFunc_GetEndTime_ReturnValue) == 0x00000C, "Member 'BP_InteractText_C_FadeOut::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000010, "Member 'BP_InteractText_C_FadeOut::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, CallFunc_GetEndTime_ReturnValue_1) == 0x000014, "Member 'BP_InteractText_C_FadeOut::CallFunc_GetEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_InteractText_C_FadeOut::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x00001C, "Member 'BP_InteractText_C_FadeOut::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000020, "Member 'BP_InteractText_C_FadeOut::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'BP_InteractText_C_FadeOut::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, K2Node_Select_Default) == 0x000030, "Member 'BP_InteractText_C_FadeOut::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_InteractText_C_FadeOut::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, K2Node_Select_Default_1) == 0x000038, "Member 'BP_InteractText_C_FadeOut::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, CallFunc_PlayAnimation_ReturnValue_1) == 0x000040, "Member 'BP_InteractText_C_FadeOut::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_FadeOut, CallFunc_Subtract_IntInt_ReturnValue) == 0x000048, "Member 'BP_InteractText_C_FadeOut::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_InteractText.BP_InteractText_C.SetInteractText
// 0x00F0 (0x00F0 - 0x0000)
struct BP_InteractText_C_SetInteractText final
{
public:
	class FText                                   Caption_0;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FInteractParams                        InteractParams;                                    // 0x0018(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0050(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0078(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x00A0(0x0028)()
	struct FSlateColor                            K2Node_Select_Default_2;                           // 0x00C8(0x0028)()
};
static_assert(alignof(BP_InteractText_C_SetInteractText) == 0x000008, "Wrong alignment on BP_InteractText_C_SetInteractText");
static_assert(sizeof(BP_InteractText_C_SetInteractText) == 0x0000F0, "Wrong size on BP_InteractText_C_SetInteractText");
static_assert(offsetof(BP_InteractText_C_SetInteractText, Caption_0) == 0x000000, "Member 'BP_InteractText_C_SetInteractText::Caption_0' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, InteractParams) == 0x000018, "Member 'BP_InteractText_C_SetInteractText::InteractParams' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, Temp_byte_Variable) == 0x000048, "Member 'BP_InteractText_C_SetInteractText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, CallFunc_TextIsEmpty_ReturnValue) == 0x000049, "Member 'BP_InteractText_C_SetInteractText::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00004A, "Member 'BP_InteractText_C_SetInteractText::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, CallFunc_IntToText_ReturnValue) == 0x000050, "Member 'BP_InteractText_C_SetInteractText::CallFunc_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'BP_InteractText_C_SetInteractText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, Temp_byte_Variable_1) == 0x000069, "Member 'BP_InteractText_C_SetInteractText::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, Temp_bool_Variable) == 0x00006A, "Member 'BP_InteractText_C_SetInteractText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, Temp_bool_Variable_1) == 0x00006B, "Member 'BP_InteractText_C_SetInteractText::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, Temp_byte_Variable_2) == 0x00006C, "Member 'BP_InteractText_C_SetInteractText::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, Temp_byte_Variable_3) == 0x00006D, "Member 'BP_InteractText_C_SetInteractText::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, K2Node_Select_Default) == 0x00006E, "Member 'BP_InteractText_C_SetInteractText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, Temp_bool_Variable_2) == 0x00006F, "Member 'BP_InteractText_C_SetInteractText::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, K2Node_Select_Default_1) == 0x000070, "Member 'BP_InteractText_C_SetInteractText::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, K2Node_MakeStruct_SlateColor) == 0x000078, "Member 'BP_InteractText_C_SetInteractText::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, K2Node_MakeStruct_SlateColor_1) == 0x0000A0, "Member 'BP_InteractText_C_SetInteractText::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_SetInteractText, K2Node_Select_Default_2) == 0x0000C8, "Member 'BP_InteractText_C_SetInteractText::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_InteractText.BP_InteractText_C.ToggleInCombatMode
// 0x0030 (0x0030 - 0x0000)
struct BP_InteractText_C_ToggleInCombatMode final
{
public:
	bool                                          InCombat;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      K2Node_Select_Default_1;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractText_C_ToggleInCombatMode) == 0x000008, "Wrong alignment on BP_InteractText_C_ToggleInCombatMode");
static_assert(sizeof(BP_InteractText_C_ToggleInCombatMode) == 0x000030, "Wrong size on BP_InteractText_C_ToggleInCombatMode");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, InCombat) == 0x000000, "Member 'BP_InteractText_C_ToggleInCombatMode::InCombat' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, Temp_bool_Variable) == 0x000001, "Member 'BP_InteractText_C_ToggleInCombatMode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, Temp_object_Variable) == 0x000008, "Member 'BP_InteractText_C_ToggleInCombatMode::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, Temp_object_Variable_1) == 0x000010, "Member 'BP_InteractText_C_ToggleInCombatMode::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, Temp_bool_Variable_1) == 0x000018, "Member 'BP_InteractText_C_ToggleInCombatMode::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, Temp_byte_Variable) == 0x000019, "Member 'BP_InteractText_C_ToggleInCombatMode::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, Temp_byte_Variable_1) == 0x00001A, "Member 'BP_InteractText_C_ToggleInCombatMode::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, Temp_bool_Variable_2) == 0x00001B, "Member 'BP_InteractText_C_ToggleInCombatMode::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, Temp_byte_Variable_2) == 0x00001C, "Member 'BP_InteractText_C_ToggleInCombatMode::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, Temp_byte_Variable_3) == 0x00001D, "Member 'BP_InteractText_C_ToggleInCombatMode::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, K2Node_Select_Default) == 0x00001E, "Member 'BP_InteractText_C_ToggleInCombatMode::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, K2Node_Select_Default_1) == 0x000020, "Member 'BP_InteractText_C_ToggleInCombatMode::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleInCombatMode, K2Node_Select_Default_2) == 0x000028, "Member 'BP_InteractText_C_ToggleInCombatMode::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_InteractText.BP_InteractText_C.ToggleDouble
// 0x0040 (0x0040 - 0x0000)
struct BP_InteractText_C_ToggleDouble final
{
public:
	bool                                          IsDouble;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateSizeRule                                Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateSizeRule                                Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          K2Node_Select_Default;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateSizeRule                                K2Node_Select_Default_1;                           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_2;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize;                  // 0x0030(0x0008)(NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractText_C_ToggleDouble) == 0x000008, "Wrong alignment on BP_InteractText_C_ToggleDouble");
static_assert(sizeof(BP_InteractText_C_ToggleDouble) == 0x000040, "Wrong size on BP_InteractText_C_ToggleDouble");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, IsDouble) == 0x000000, "Member 'BP_InteractText_C_ToggleDouble::IsDouble' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_bool_Variable) == 0x000001, "Member 'BP_InteractText_C_ToggleDouble::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_byte_Variable) == 0x000002, "Member 'BP_InteractText_C_ToggleDouble::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_byte_Variable_1) == 0x000003, "Member 'BP_InteractText_C_ToggleDouble::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_bool_Variable_1) == 0x000004, "Member 'BP_InteractText_C_ToggleDouble::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_byte_Variable_2) == 0x000005, "Member 'BP_InteractText_C_ToggleDouble::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_byte_Variable_3) == 0x000006, "Member 'BP_InteractText_C_ToggleDouble::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_bool_Variable_2) == 0x000007, "Member 'BP_InteractText_C_ToggleDouble::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_float_Variable) == 0x000008, "Member 'BP_InteractText_C_ToggleDouble::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_float_Variable_1) == 0x00000C, "Member 'BP_InteractText_C_ToggleDouble::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_bool_Variable_3) == 0x000010, "Member 'BP_InteractText_C_ToggleDouble::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_byte_Variable_4) == 0x000011, "Member 'BP_InteractText_C_ToggleDouble::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, Temp_byte_Variable_5) == 0x000012, "Member 'BP_InteractText_C_ToggleDouble::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000018, "Member 'BP_InteractText_C_ToggleDouble::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000020, "Member 'BP_InteractText_C_ToggleDouble::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, K2Node_Select_Default) == 0x000028, "Member 'BP_InteractText_C_ToggleDouble::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, K2Node_Select_Default_1) == 0x000029, "Member 'BP_InteractText_C_ToggleDouble::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, K2Node_Select_Default_2) == 0x00002C, "Member 'BP_InteractText_C_ToggleDouble::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, K2Node_MakeStruct_SlateChildSize) == 0x000030, "Member 'BP_InteractText_C_ToggleDouble::K2Node_MakeStruct_SlateChildSize' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleDouble, K2Node_Select_Default_3) == 0x000038, "Member 'BP_InteractText_C_ToggleDouble::K2Node_Select_Default_3' has a wrong offset!");

// Function BP_InteractText.BP_InteractText_C.ToggleSmallScreen
// 0x002C (0x002C - 0x0000)
struct BP_InteractText_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractText_C_ToggleSmallScreen) == 0x000004, "Wrong alignment on BP_InteractText_C_ToggleSmallScreen");
static_assert(sizeof(BP_InteractText_C_ToggleSmallScreen) == 0x00002C, "Wrong size on BP_InteractText_C_ToggleSmallScreen");
static_assert(offsetof(BP_InteractText_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_InteractText_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_InteractText_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleSmallScreen, Temp_float_Variable) == 0x000004, "Member 'BP_InteractText_C_ToggleSmallScreen::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleSmallScreen, Temp_float_Variable_1) == 0x000008, "Member 'BP_InteractText_C_ToggleSmallScreen::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_InteractText_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleSmallScreen, Temp_struct_Variable) == 0x000010, "Member 'BP_InteractText_C_ToggleSmallScreen::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleSmallScreen, Temp_struct_Variable_1) == 0x000018, "Member 'BP_InteractText_C_ToggleSmallScreen::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleSmallScreen, K2Node_Select_Default) == 0x000020, "Member 'BP_InteractText_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InteractText_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x000028, "Member 'BP_InteractText_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");

}

