#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InventorySlotSmall_V3

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "man_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.ExecuteUbergraph_BP_InventorySlotSmall_V3
// 0x0268 (0x0268 - 0x0000)
struct BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGeometry                              K2Node_Event_MyGeometry_1;                         // 0x001C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x005C(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0098(0x0070)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x0108(0x0070)(ConstParm)
	bool                                          K2Node_Event_bSelected;                            // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManItemSlotBase*                       K2Node_Event_InManItemSlotBase;                    // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           K2Node_Event_InItemAbility;                        // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bUnavailable;                         // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bUnavailableByResource;               // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue_1;                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlayingForward_ReturnValue;    // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bEquipState;                          // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInVisible;                           // 0x01B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInAnimate;                           // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ElapsedCooldownPercent;               // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_TimeLeft;                             // 0x01C8(0x0018)(ConstParm)
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x01E0(0x0018)()
	bool                                          K2Node_Event_bInIsEquipped;                        // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InStackNum;                           // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMaxStackNum;                        // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInIsStackable;                       // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInSoldItem;                          // 0x0205(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate_2;                           // 0x0206(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x0207(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UTexture2D*>                     K2Node_Event_InPermanentEnchantIcons;              // 0x0208(0x0010)(ConstParm, ReferenceParm)
	TArray<class UTexture2D*>                     K2Node_Event_InTemporaryEnchantIcons;              // 0x0218(0x0010)(ConstParm, ReferenceParm)
	float                                         K2Node_Select_Default;                             // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_Event_InSetIndexes;                         // 0x0230(0x0010)(ConstParm, ReferenceParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_3;              // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x024A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x024B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInEmptySlot;                         // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemSlot                                     K2Node_Event_InSlotType;                           // 0x024D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x024E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bHighlighted;                         // 0x024F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_252[0x2];                                      // 0x0252(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_4;              // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3) == 0x000268, "Wrong size on BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, EntryPoint) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_byte_Variable) == 0x000004, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_byte_Variable_1) == 0x000005, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_bool_Variable) == 0x000006, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_float_Variable) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_int_Variable) == 0x00000C, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_bool_Variable_1) == 0x000010, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_byte_Variable_2) == 0x000011, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_byte_Variable_3) == 0x000012, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_int_Variable_1) == 0x000014, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_bool_Variable_2) == 0x000018, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_byte_Variable_4) == 0x000019, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_byte_Variable_5) == 0x00001A, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_IsDesignTime) == 0x00001B, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_MyGeometry_1) == 0x00001C, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_MyGeometry_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_InDeltaTime) == 0x000054, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_GetEndTime_ReturnValue) == 0x000058, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_MyGeometry) == 0x00005C, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_MouseEvent_1) == 0x000098, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_MouseEvent) == 0x000108, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bSelected) == 0x000178, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bSelected' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_InManItemSlotBase) == 0x000180, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_InManItemSlotBase' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_InItemAbility) == 0x000188, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_InItemAbility' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bUnavailable) == 0x000190, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bUnavailable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bUnavailableByResource) == 0x000191, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bUnavailableByResource' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_PlayAnimation_ReturnValue) == 0x000198, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_GetEndTime_ReturnValue_1) == 0x0001A0, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_GetEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_IsAnimationPlayingForward_ReturnValue) == 0x0001A4, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_IsAnimationPlayingForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_PlayAnimation_ReturnValue_1) == 0x0001A8, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_IsAnimationPlaying_ReturnValue) == 0x0001B0, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bEquipState) == 0x0001B1, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bEquipState' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_BooleanAND_ReturnValue) == 0x0001B2, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bInVisible) == 0x0001B3, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bInVisible' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bInAnimate) == 0x0001B4, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bInAnimate' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_PlayAnimation_ReturnValue_2) == 0x0001B8, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_ElapsedCooldownPercent) == 0x0001C0, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_ElapsedCooldownPercent' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_TimeLeft) == 0x0001C8, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_TimeLeft' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_GetEmptyText_ReturnValue) == 0x0001E0, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bInIsEquipped) == 0x0001F8, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bInIsEquipped' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_InStackNum) == 0x0001FC, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_InStackNum' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_InMaxStackNum) == 0x000200, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_InMaxStackNum' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bInIsStackable) == 0x000204, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bInIsStackable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bInSoldItem) == 0x000205, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bInSoldItem' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bAnimate_2) == 0x000206, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bAnimate_2' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bAnimate_1) == 0x000207, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_InPermanentEnchantIcons) == 0x000208, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_InPermanentEnchantIcons' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_InTemporaryEnchantIcons) == 0x000218, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_InTemporaryEnchantIcons' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Select_Default) == 0x000228, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_InSetIndexes) == 0x000230, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_InSetIndexes' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_PlayAnimation_ReturnValue_3) == 0x000240, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_PlayAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_Array_Contains_ReturnValue) == 0x000248, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_Array_Contains_ReturnValue_1) == 0x000249, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Select_Default_1) == 0x00024A, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Select_Default_2) == 0x00024B, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bInEmptySlot) == 0x00024C, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bInEmptySlot' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_InSlotType) == 0x00024D, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_InSlotType' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, Temp_bool_Variable_3) == 0x00024E, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bHighlighted) == 0x00024F, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bHighlighted' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Event_bAnimate) == 0x000250, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, K2Node_Select_Default_3) == 0x000251, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_GetRenderOpacity_ReturnValue) == 0x000254, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000258, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3, CallFunc_PlayAnimation_ReturnValue_4) == 0x000260, "Member 'BP_InventorySlotSmall_V3_C_ExecuteUbergraph_BP_InventorySlotSmall_V3::CallFunc_PlayAnimation_ReturnValue_4' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnHighlighted
// 0x0002 (0x0002 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnHighlighted final
{
public:
	bool                                          bHighlighted;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnHighlighted) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnHighlighted");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnHighlighted) == 0x000002, "Wrong size on BP_InventorySlotSmall_V3_C_OnHighlighted");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnHighlighted, bHighlighted) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnHighlighted::bHighlighted' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnHighlighted, bAnimate) == 0x000001, "Member 'BP_InventorySlotSmall_V3_C_OnHighlighted::bAnimate' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnToggleEmptySlot
// 0x0002 (0x0002 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnToggleEmptySlot final
{
public:
	bool                                          bInEmptySlot;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemSlot                                     InSlotType;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnToggleEmptySlot) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnToggleEmptySlot");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnToggleEmptySlot) == 0x000002, "Wrong size on BP_InventorySlotSmall_V3_C_OnToggleEmptySlot");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnToggleEmptySlot, bInEmptySlot) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnToggleEmptySlot::bInEmptySlot' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnToggleEmptySlot, InSlotType) == 0x000001, "Member 'BP_InventorySlotSmall_V3_C_OnToggleEmptySlot::InSlotType' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnSetSetIndexes
// 0x0010 (0x0010 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnSetSetIndexes final
{
public:
	TArray<int32>                                 InSetIndexes;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnSetSetIndexes) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnSetSetIndexes");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnSetSetIndexes) == 0x000010, "Wrong size on BP_InventorySlotSmall_V3_C_OnSetSetIndexes");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnSetSetIndexes, InSetIndexes) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnSetSetIndexes::InSetIndexes' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnTemporaryEnchantIconsChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnTemporaryEnchantIconsChanged final
{
public:
	TArray<class UTexture2D*>                     InTemporaryEnchantIcons;                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnTemporaryEnchantIconsChanged) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnTemporaryEnchantIconsChanged");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnTemporaryEnchantIconsChanged) == 0x000010, "Wrong size on BP_InventorySlotSmall_V3_C_OnTemporaryEnchantIconsChanged");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnTemporaryEnchantIconsChanged, InTemporaryEnchantIcons) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnTemporaryEnchantIconsChanged::InTemporaryEnchantIcons' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnPermanentEnchantIconsChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnPermanentEnchantIconsChanged final
{
public:
	TArray<class UTexture2D*>                     InPermanentEnchantIcons;                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnPermanentEnchantIconsChanged) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnPermanentEnchantIconsChanged");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnPermanentEnchantIconsChanged) == 0x000010, "Wrong size on BP_InventorySlotSmall_V3_C_OnPermanentEnchantIconsChanged");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnPermanentEnchantIconsChanged, InPermanentEnchantIcons) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnPermanentEnchantIconsChanged::InPermanentEnchantIcons' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnUnfocused
// 0x0001 (0x0001 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnUnfocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnUnfocused) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnUnfocused");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnUnfocused) == 0x000001, "Wrong size on BP_InventorySlotSmall_V3_C_OnUnfocused");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnUnfocused, bAnimate) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnUnfocused::bAnimate' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnFocused
// 0x0001 (0x0001 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnFocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnFocused) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnFocused");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnFocused) == 0x000001, "Wrong size on BP_InventorySlotSmall_V3_C_OnFocused");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnFocused, bAnimate) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnFocused::bAnimate' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnToggleSoldItem
// 0x0001 (0x0001 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnToggleSoldItem final
{
public:
	bool                                          bInSoldItem;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnToggleSoldItem) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnToggleSoldItem");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnToggleSoldItem) == 0x000001, "Wrong size on BP_InventorySlotSmall_V3_C_OnToggleSoldItem");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnToggleSoldItem, bInSoldItem) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnToggleSoldItem::bInSoldItem' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnStackNumChanged
// 0x000C (0x000C - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnStackNumChanged final
{
public:
	int32                                         InStackNum;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxStackNum;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInIsStackable;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnStackNumChanged) == 0x000004, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnStackNumChanged");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnStackNumChanged) == 0x00000C, "Wrong size on BP_InventorySlotSmall_V3_C_OnStackNumChanged");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnStackNumChanged, InStackNum) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnStackNumChanged::InStackNum' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnStackNumChanged, InMaxStackNum) == 0x000004, "Member 'BP_InventorySlotSmall_V3_C_OnStackNumChanged::InMaxStackNum' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnStackNumChanged, bInIsStackable) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_OnStackNumChanged::bInIsStackable' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnToggleEquipped
// 0x0001 (0x0001 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnToggleEquipped final
{
public:
	bool                                          bInIsEquipped;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnToggleEquipped) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnToggleEquipped");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnToggleEquipped) == 0x000001, "Wrong size on BP_InventorySlotSmall_V3_C_OnToggleEquipped");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnToggleEquipped, bInIsEquipped) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnToggleEquipped::bInIsEquipped' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnSetCountdown
// 0x0020 (0x0020 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnSetCountdown final
{
public:
	float                                         ElapsedCooldownPercent;                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimeLeft;                                          // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnSetCountdown) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnSetCountdown");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnSetCountdown) == 0x000020, "Wrong size on BP_InventorySlotSmall_V3_C_OnSetCountdown");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnSetCountdown, ElapsedCooldownPercent) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnSetCountdown::ElapsedCooldownPercent' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnSetCountdown, TimeLeft) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_OnSetCountdown::TimeLeft' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnToggleNewItemWarning
// 0x0002 (0x0002 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnToggleNewItemWarning final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bInAnimate;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnToggleNewItemWarning) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnToggleNewItemWarning");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnToggleNewItemWarning) == 0x000002, "Wrong size on BP_InventorySlotSmall_V3_C_OnToggleNewItemWarning");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnToggleNewItemWarning, bInVisible) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnToggleNewItemWarning::bInVisible' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnToggleNewItemWarning, bInAnimate) == 0x000001, "Member 'BP_InventorySlotSmall_V3_C_OnToggleNewItemWarning::bInAnimate' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnSetEquipState
// 0x0001 (0x0001 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnSetEquipState final
{
public:
	bool                                          bEquipState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnSetEquipState) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnSetEquipState");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnSetEquipState) == 0x000001, "Wrong size on BP_InventorySlotSmall_V3_C_OnSetEquipState");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnSetEquipState, bEquipState) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnSetEquipState::bEquipState' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnToggleUnavailable
// 0x0002 (0x0002 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnToggleUnavailable final
{
public:
	bool                                          bUnavailable;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUnavailableByResource;                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnToggleUnavailable) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnToggleUnavailable");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnToggleUnavailable) == 0x000002, "Wrong size on BP_InventorySlotSmall_V3_C_OnToggleUnavailable");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnToggleUnavailable, bUnavailable) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnToggleUnavailable::bUnavailable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnToggleUnavailable, bUnavailableByResource) == 0x000001, "Member 'BP_InventorySlotSmall_V3_C_OnToggleUnavailable::bUnavailableByResource' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnSetSlot
// 0x0010 (0x0010 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnSetSlot final
{
public:
	class UManItemSlotBase*                       InManItemSlotBase;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           InItemAbility;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnSetSlot) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnSetSlot");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnSetSlot) == 0x000010, "Wrong size on BP_InventorySlotSmall_V3_C_OnSetSlot");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnSetSlot, InManItemSlotBase) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnSetSlot::InManItemSlotBase' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnSetSlot, InItemAbility) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_OnSetSlot::InItemAbility' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnToggleSelected
// 0x0001 (0x0001 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnToggleSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnToggleSelected) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnToggleSelected");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnToggleSelected) == 0x000001, "Wrong size on BP_InventorySlotSmall_V3_C_OnToggleSelected");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnToggleSelected, bSelected) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnToggleSelected::bSelected' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnMouseLeave) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnMouseLeave");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnMouseLeave) == 0x000070, "Wrong size on BP_InventorySlotSmall_V3_C_OnMouseLeave");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct BP_InventorySlotSmall_V3_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_OnMouseEnter) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_OnMouseEnter");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_OnMouseEnter) == 0x0000A8, "Wrong size on BP_InventorySlotSmall_V3_C_OnMouseEnter");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'BP_InventorySlotSmall_V3_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_InventorySlotSmall_V3_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_Tick) == 0x000004, "Wrong alignment on BP_InventorySlotSmall_V3_C_Tick");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_Tick) == 0x00003C, "Wrong size on BP_InventorySlotSmall_V3_C_Tick");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Tick, MyGeometry) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_InventorySlotSmall_V3_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_InventorySlotSmall_V3_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_PreConstruct) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_PreConstruct");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_PreConstruct) == 0x000001, "Wrong size on BP_InventorySlotSmall_V3_C_PreConstruct");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.Set Slot
// 0x0020 (0x0020 - 0x0000)
struct BP_InventorySlotSmall_V3_C_Set_Slot final
{
public:
	class UItemAbility*                           InItemAbility;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_BPGetIcon_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_Set_Slot) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_Set_Slot");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_Set_Slot) == 0x000020, "Wrong size on BP_InventorySlotSmall_V3_C_Set_Slot");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Set_Slot, InItemAbility) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_Set_Slot::InItemAbility' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Set_Slot, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_Set_Slot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Set_Slot, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'BP_InventorySlotSmall_V3_C_Set_Slot::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Set_Slot, CallFunc_BPGetIcon_ReturnValue) == 0x000018, "Member 'BP_InventorySlotSmall_V3_C_Set_Slot::CallFunc_BPGetIcon_ReturnValue' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.SetCount
// 0x0088 (0x0088 - 0x0000)
struct BP_InventorySlotSmall_V3_C_SetCount final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CAPACITY;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stackable;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInfiniteAmount_ReturnValue;             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0030(0x0018)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue_1;                  // 0x0050(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0068(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_SetCount) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_SetCount");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_SetCount) == 0x000088, "Wrong size on BP_InventorySlotSmall_V3_C_SetCount");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, Quantity) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_SetCount::Quantity' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, CAPACITY) == 0x000004, "Member 'BP_InventorySlotSmall_V3_C_SetCount::CAPACITY' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, Stackable) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_SetCount::Stackable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, Temp_bool_Variable) == 0x000009, "Member 'BP_InventorySlotSmall_V3_C_SetCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, Temp_text_Variable) == 0x000010, "Member 'BP_InventorySlotSmall_V3_C_SetCount::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, Temp_bool_Variable_1) == 0x000028, "Member 'BP_InventorySlotSmall_V3_C_SetCount::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, Temp_byte_Variable) == 0x000029, "Member 'BP_InventorySlotSmall_V3_C_SetCount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, Temp_byte_Variable_1) == 0x00002A, "Member 'BP_InventorySlotSmall_V3_C_SetCount::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, Temp_bool_Variable_2) == 0x00002B, "Member 'BP_InventorySlotSmall_V3_C_SetCount::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, Temp_byte_Variable_2) == 0x00002C, "Member 'BP_InventorySlotSmall_V3_C_SetCount::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, Temp_byte_Variable_3) == 0x00002D, "Member 'BP_InventorySlotSmall_V3_C_SetCount::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, CallFunc_IsInfiniteAmount_ReturnValue) == 0x00002E, "Member 'BP_InventorySlotSmall_V3_C_SetCount::CallFunc_IsInfiniteAmount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, CallFunc_IntToText_ReturnValue) == 0x000030, "Member 'BP_InventorySlotSmall_V3_C_SetCount::CallFunc_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'BP_InventorySlotSmall_V3_C_SetCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, CallFunc_IntToText_ReturnValue_1) == 0x000050, "Member 'BP_InventorySlotSmall_V3_C_SetCount::CallFunc_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, K2Node_Select_Default) == 0x000068, "Member 'BP_InventorySlotSmall_V3_C_SetCount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, K2Node_Select_Default_1) == 0x000080, "Member 'BP_InventorySlotSmall_V3_C_SetCount::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCount, K2Node_Select_Default_2) == 0x000081, "Member 'BP_InventorySlotSmall_V3_C_SetCount::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.ToggleEquipped
// 0x0005 (0x0005 - 0x0000)
struct BP_InventorySlotSmall_V3_C_ToggleEquipped final
{
public:
	bool                                          Equipped;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_ToggleEquipped) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_ToggleEquipped");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_ToggleEquipped) == 0x000005, "Wrong size on BP_InventorySlotSmall_V3_C_ToggleEquipped");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleEquipped, Equipped) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_ToggleEquipped::Equipped' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleEquipped, Temp_bool_Variable) == 0x000001, "Member 'BP_InventorySlotSmall_V3_C_ToggleEquipped::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleEquipped, Temp_byte_Variable) == 0x000002, "Member 'BP_InventorySlotSmall_V3_C_ToggleEquipped::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleEquipped, Temp_byte_Variable_1) == 0x000003, "Member 'BP_InventorySlotSmall_V3_C_ToggleEquipped::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleEquipped, K2Node_Select_Default) == 0x000004, "Member 'BP_InventorySlotSmall_V3_C_ToggleEquipped::K2Node_Select_Default' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.ToggleSelected
// 0x0001 (0x0001 - 0x0000)
struct BP_InventorySlotSmall_V3_C_ToggleSelected final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_ToggleSelected) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_ToggleSelected");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_ToggleSelected) == 0x000001, "Wrong size on BP_InventorySlotSmall_V3_C_ToggleSelected");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleSelected, Selected) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_ToggleSelected::Selected' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.ToggleCanEquipped
// 0x0001 (0x0001 - 0x0000)
struct BP_InventorySlotSmall_V3_C_ToggleCanEquipped final
{
public:
	bool                                          CanEquipped;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_ToggleCanEquipped) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_ToggleCanEquipped");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_ToggleCanEquipped) == 0x000001, "Wrong size on BP_InventorySlotSmall_V3_C_ToggleCanEquipped");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleCanEquipped, CanEquipped) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_ToggleCanEquipped::CanEquipped' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.ToggleUnavailable
// 0x0070 (0x0070 - 0x0000)
struct BP_InventorySlotSmall_V3_C_ToggleUnavailable final
{
public:
	bool                                          Unavailable;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UnavailableByResource;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_ToggleUnavailable) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_ToggleUnavailable");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_ToggleUnavailable) == 0x000070, "Wrong size on BP_InventorySlotSmall_V3_C_ToggleUnavailable");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Unavailable) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Unavailable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, UnavailableByResource) == 0x000001, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::UnavailableByResource' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_bool_Variable) == 0x000002, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_struct_Variable) == 0x000004, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_struct_Variable_1) == 0x000014, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_bool_Variable_1) == 0x000024, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_object_Variable) == 0x000028, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_object_Variable_1) == 0x000030, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_bool_Variable_2) == 0x000038, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_float_Variable) == 0x00003C, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_float_Variable_1) == 0x000040, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_bool_Variable_3) == 0x000044, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_byte_Variable) == 0x000045, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, Temp_byte_Variable_1) == 0x000046, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, K2Node_Select_Default) == 0x000048, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, CallFunc_BooleanAND_ReturnValue) == 0x000058, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, K2Node_Select_Default_1) == 0x00005C, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, K2Node_Select_Default_2) == 0x000060, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleUnavailable, K2Node_Select_Default_3) == 0x000068, "Member 'BP_InventorySlotSmall_V3_C_ToggleUnavailable::K2Node_Select_Default_3' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.ToggleNewItemWarning
// 0x0018 (0x0018 - 0x0000)
struct BP_InventorySlotSmall_V3_C_ToggleNewItemWarning final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InAnimate;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_ToggleNewItemWarning) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_ToggleNewItemWarning");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_ToggleNewItemWarning) == 0x000018, "Wrong size on BP_InventorySlotSmall_V3_C_ToggleNewItemWarning");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleNewItemWarning, InVisible) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_ToggleNewItemWarning::InVisible' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleNewItemWarning, InAnimate) == 0x000001, "Member 'BP_InventorySlotSmall_V3_C_ToggleNewItemWarning::InAnimate' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleNewItemWarning, Temp_bool_Variable) == 0x000002, "Member 'BP_InventorySlotSmall_V3_C_ToggleNewItemWarning::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleNewItemWarning, Temp_float_Variable) == 0x000004, "Member 'BP_InventorySlotSmall_V3_C_ToggleNewItemWarning::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleNewItemWarning, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_ToggleNewItemWarning::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleNewItemWarning, K2Node_Select_Default) == 0x00000C, "Member 'BP_InventorySlotSmall_V3_C_ToggleNewItemWarning::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleNewItemWarning, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_InventorySlotSmall_V3_C_ToggleNewItemWarning::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.SetCountdown
// 0x0058 (0x0058 - 0x0000)
struct BP_InventorySlotSmall_V3_C_SetCountdown final
{
public:
	float                                         PercentLeft;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimeLeft;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x0030(0x0018)()
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_SetCountdown) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_SetCountdown");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_SetCountdown) == 0x000058, "Wrong size on BP_InventorySlotSmall_V3_C_SetCountdown");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCountdown, PercentLeft) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_SetCountdown::PercentLeft' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCountdown, TimeLeft) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_SetCountdown::TimeLeft' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCountdown, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_InventorySlotSmall_V3_C_SetCountdown::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCountdown, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000028, "Member 'BP_InventorySlotSmall_V3_C_SetCountdown::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCountdown, CallFunc_GetEmptyText_ReturnValue) == 0x000030, "Member 'BP_InventorySlotSmall_V3_C_SetCountdown::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCountdown, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_InventorySlotSmall_V3_C_SetCountdown::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCountdown, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_InventorySlotSmall_V3_C_SetCountdown::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_SetCountdown, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000050, "Member 'BP_InventorySlotSmall_V3_C_SetCountdown::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.ToggleSoldItem
// 0x0001 (0x0001 - 0x0000)
struct BP_InventorySlotSmall_V3_C_ToggleSoldItem final
{
public:
	bool                                          InSoldItem;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_ToggleSoldItem) == 0x000001, "Wrong alignment on BP_InventorySlotSmall_V3_C_ToggleSoldItem");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_ToggleSoldItem) == 0x000001, "Wrong size on BP_InventorySlotSmall_V3_C_ToggleSoldItem");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_ToggleSoldItem, InSoldItem) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_ToggleSoldItem::InSoldItem' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.Toggle Empty
// 0x00E8 (0x00E8 - 0x0000)
struct BP_InventorySlotSmall_V3_C_Toggle_Empty final
{
public:
	bool                                          InIsEmpty;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemSlot                                     InItemSlotType;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemSlot                                     Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_7;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_8;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_9;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_10;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_11;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_12;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_13;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_14;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_15;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_16;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_17;                           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_18;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_19;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_20;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_21;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_22;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_23;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_24;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_Toggle_Empty) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_Toggle_Empty");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_Toggle_Empty) == 0x0000E8, "Wrong size on BP_InventorySlotSmall_V3_C_Toggle_Empty");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, InIsEmpty) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::InIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, InItemSlotType) == 0x000001, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::InItemSlotType' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_byte_Variable) == 0x000002, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_1) == 0x000010, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_2) == 0x000018, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_3) == 0x000020, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_4) == 0x000028, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_5) == 0x000030, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_6) == 0x000038, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_7) == 0x000040, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_8) == 0x000048, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_9) == 0x000050, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_10) == 0x000058, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_11) == 0x000060, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_12) == 0x000068, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_13) == 0x000070, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_14) == 0x000078, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_15) == 0x000080, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_16) == 0x000088, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_17) == 0x000090, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_18) == 0x000098, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_19) == 0x0000A0, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_20) == 0x0000A8, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_21) == 0x0000B0, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_22) == 0x0000B8, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_23) == 0x0000C0, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_object_Variable_24) == 0x0000C8, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_object_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_bool_Variable) == 0x0000D0, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_byte_Variable_1) == 0x0000D1, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_byte_Variable_2) == 0x0000D2, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_bool_Variable_1) == 0x0000D3, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_byte_Variable_3) == 0x0000D4, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, Temp_byte_Variable_4) == 0x0000D5, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, K2Node_Select_Default) == 0x0000D8, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, K2Node_Select_Default_1) == 0x0000E0, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_Toggle_Empty, K2Node_Select_Default_2) == 0x0000E1, "Member 'BP_InventorySlotSmall_V3_C_Toggle_Empty::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.PlayLongpressAnim
// 0x0010 (0x0010 - 0x0000)
struct BP_InventorySlotSmall_V3_C_PlayLongpressAnim final
{
public:
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_PlayLongpressAnim) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_PlayLongpressAnim");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_PlayLongpressAnim) == 0x000010, "Wrong size on BP_InventorySlotSmall_V3_C_PlayLongpressAnim");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_PlayLongpressAnim, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_PlayLongpressAnim::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_PlayLongpressAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_PlayLongpressAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.PlayLongpressCancelAnim
// 0x0010 (0x0010 - 0x0000)
struct BP_InventorySlotSmall_V3_C_PlayLongpressCancelAnim final
{
public:
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_PlayLongpressCancelAnim) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_PlayLongpressCancelAnim");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_PlayLongpressCancelAnim) == 0x000010, "Wrong size on BP_InventorySlotSmall_V3_C_PlayLongpressCancelAnim");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_PlayLongpressCancelAnim, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_PlayLongpressCancelAnim::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_PlayLongpressCancelAnim, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_InventorySlotSmall_V3_C_PlayLongpressCancelAnim::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_PlayLongpressCancelAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_PlayLongpressCancelAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_InventorySlotSmall_V3.BP_InventorySlotSmall_V3_C.PlayLongpressFinishedAnim
// 0x0010 (0x0010 - 0x0000)
struct BP_InventorySlotSmall_V3_C_PlayLongpressFinishedAnim final
{
public:
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventorySlotSmall_V3_C_PlayLongpressFinishedAnim) == 0x000008, "Wrong alignment on BP_InventorySlotSmall_V3_C_PlayLongpressFinishedAnim");
static_assert(sizeof(BP_InventorySlotSmall_V3_C_PlayLongpressFinishedAnim) == 0x000010, "Wrong size on BP_InventorySlotSmall_V3_C_PlayLongpressFinishedAnim");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_PlayLongpressFinishedAnim, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000000, "Member 'BP_InventorySlotSmall_V3_C_PlayLongpressFinishedAnim::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventorySlotSmall_V3_C_PlayLongpressFinishedAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_InventorySlotSmall_V3_C_PlayLongpressFinishedAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

