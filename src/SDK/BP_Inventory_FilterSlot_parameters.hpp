#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Inventory_FilterSlot

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_Inventory_FilterSlot.BP_Inventory_FilterSlot_C.ExecuteUbergraph_BP_Inventory_FilterSlot
// 0x0020 (0x0020 - 0x0000)
struct BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInVisible;                           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInEnabled;                           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInVisible_1;                         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInSelected;                          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFilterEnabled_ReturnValue;              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot) == 0x000008, "Wrong alignment on BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot");
static_assert(sizeof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot) == 0x000020, "Wrong size on BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot");
static_assert(offsetof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot, EntryPoint) == 0x000000, "Member 'BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot, K2Node_Event_bInVisible) == 0x000004, "Member 'BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot::K2Node_Event_bInVisible' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot, K2Node_Event_IsDesignTime) == 0x000006, "Member 'BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot, K2Node_Event_bInEnabled) == 0x000018, "Member 'BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot::K2Node_Event_bInEnabled' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot, K2Node_Event_bInVisible_1) == 0x000019, "Member 'BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot::K2Node_Event_bInVisible_1' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot, K2Node_Event_bInSelected) == 0x00001A, "Member 'BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot::K2Node_Event_bInSelected' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot, CallFunc_IsFilterEnabled_ReturnValue) == 0x00001B, "Member 'BP_Inventory_FilterSlot_C_ExecuteUbergraph_BP_Inventory_FilterSlot::CallFunc_IsFilterEnabled_ReturnValue' has a wrong offset!");

// Function BP_Inventory_FilterSlot.BP_Inventory_FilterSlot_C.OnToggleNewItemWarning
// 0x0001 (0x0001 - 0x0000)
struct BP_Inventory_FilterSlot_C_OnToggleNewItemWarning final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Inventory_FilterSlot_C_OnToggleNewItemWarning) == 0x000001, "Wrong alignment on BP_Inventory_FilterSlot_C_OnToggleNewItemWarning");
static_assert(sizeof(BP_Inventory_FilterSlot_C_OnToggleNewItemWarning) == 0x000001, "Wrong size on BP_Inventory_FilterSlot_C_OnToggleNewItemWarning");
static_assert(offsetof(BP_Inventory_FilterSlot_C_OnToggleNewItemWarning, bInVisible) == 0x000000, "Member 'BP_Inventory_FilterSlot_C_OnToggleNewItemWarning::bInVisible' has a wrong offset!");

// Function BP_Inventory_FilterSlot.BP_Inventory_FilterSlot_C.OnSetSelected
// 0x0001 (0x0001 - 0x0000)
struct BP_Inventory_FilterSlot_C_OnSetSelected final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Inventory_FilterSlot_C_OnSetSelected) == 0x000001, "Wrong alignment on BP_Inventory_FilterSlot_C_OnSetSelected");
static_assert(sizeof(BP_Inventory_FilterSlot_C_OnSetSelected) == 0x000001, "Wrong size on BP_Inventory_FilterSlot_C_OnSetSelected");
static_assert(offsetof(BP_Inventory_FilterSlot_C_OnSetSelected, bInSelected) == 0x000000, "Member 'BP_Inventory_FilterSlot_C_OnSetSelected::bInSelected' has a wrong offset!");

// Function BP_Inventory_FilterSlot.BP_Inventory_FilterSlot_C.OnSetVisible
// 0x0001 (0x0001 - 0x0000)
struct BP_Inventory_FilterSlot_C_OnSetVisible final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Inventory_FilterSlot_C_OnSetVisible) == 0x000001, "Wrong alignment on BP_Inventory_FilterSlot_C_OnSetVisible");
static_assert(sizeof(BP_Inventory_FilterSlot_C_OnSetVisible) == 0x000001, "Wrong size on BP_Inventory_FilterSlot_C_OnSetVisible");
static_assert(offsetof(BP_Inventory_FilterSlot_C_OnSetVisible, bInVisible) == 0x000000, "Member 'BP_Inventory_FilterSlot_C_OnSetVisible::bInVisible' has a wrong offset!");

// Function BP_Inventory_FilterSlot.BP_Inventory_FilterSlot_C.OnSetEnabled
// 0x0001 (0x0001 - 0x0000)
struct BP_Inventory_FilterSlot_C_OnSetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Inventory_FilterSlot_C_OnSetEnabled) == 0x000001, "Wrong alignment on BP_Inventory_FilterSlot_C_OnSetEnabled");
static_assert(sizeof(BP_Inventory_FilterSlot_C_OnSetEnabled) == 0x000001, "Wrong size on BP_Inventory_FilterSlot_C_OnSetEnabled");
static_assert(offsetof(BP_Inventory_FilterSlot_C_OnSetEnabled, bInEnabled) == 0x000000, "Member 'BP_Inventory_FilterSlot_C_OnSetEnabled::bInEnabled' has a wrong offset!");

// Function BP_Inventory_FilterSlot.BP_Inventory_FilterSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Inventory_FilterSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Inventory_FilterSlot_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Inventory_FilterSlot_C_PreConstruct");
static_assert(sizeof(BP_Inventory_FilterSlot_C_PreConstruct) == 0x000001, "Wrong size on BP_Inventory_FilterSlot_C_PreConstruct");
static_assert(offsetof(BP_Inventory_FilterSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Inventory_FilterSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Inventory_FilterSlot.BP_Inventory_FilterSlot_C.SetVisible
// 0x0005 (0x0005 - 0x0000)
struct BP_Inventory_FilterSlot_C_SetVisible final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Inventory_FilterSlot_C_SetVisible) == 0x000001, "Wrong alignment on BP_Inventory_FilterSlot_C_SetVisible");
static_assert(sizeof(BP_Inventory_FilterSlot_C_SetVisible) == 0x000005, "Wrong size on BP_Inventory_FilterSlot_C_SetVisible");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetVisible, InVisible) == 0x000000, "Member 'BP_Inventory_FilterSlot_C_SetVisible::InVisible' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetVisible, Temp_bool_Variable) == 0x000001, "Member 'BP_Inventory_FilterSlot_C_SetVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetVisible, Temp_byte_Variable) == 0x000002, "Member 'BP_Inventory_FilterSlot_C_SetVisible::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetVisible, Temp_byte_Variable_1) == 0x000003, "Member 'BP_Inventory_FilterSlot_C_SetVisible::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetVisible, K2Node_Select_Default) == 0x000004, "Member 'BP_Inventory_FilterSlot_C_SetVisible::K2Node_Select_Default' has a wrong offset!");

// Function BP_Inventory_FilterSlot.BP_Inventory_FilterSlot_C.SetSelected
// 0x0018 (0x0018 - 0x0000)
struct BP_Inventory_FilterSlot_C_SetSelected final
{
public:
	bool                                          InSelected;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFilterEnabled_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Inventory_FilterSlot_C_SetSelected) == 0x000008, "Wrong alignment on BP_Inventory_FilterSlot_C_SetSelected");
static_assert(sizeof(BP_Inventory_FilterSlot_C_SetSelected) == 0x000018, "Wrong size on BP_Inventory_FilterSlot_C_SetSelected");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetSelected, InSelected) == 0x000000, "Member 'BP_Inventory_FilterSlot_C_SetSelected::InSelected' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetSelected, Temp_bool_Variable) == 0x000001, "Member 'BP_Inventory_FilterSlot_C_SetSelected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetSelected, Temp_byte_Variable) == 0x000002, "Member 'BP_Inventory_FilterSlot_C_SetSelected::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetSelected, Temp_byte_Variable_1) == 0x000003, "Member 'BP_Inventory_FilterSlot_C_SetSelected::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetSelected, CallFunc_IsFilterEnabled_ReturnValue) == 0x000004, "Member 'BP_Inventory_FilterSlot_C_SetSelected::CallFunc_IsFilterEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetSelected, K2Node_Select_Default) == 0x000005, "Member 'BP_Inventory_FilterSlot_C_SetSelected::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetSelected, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_Inventory_FilterSlot_C_SetSelected::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetSelected, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000010, "Member 'BP_Inventory_FilterSlot_C_SetSelected::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_Inventory_FilterSlot.BP_Inventory_FilterSlot_C.SetEnabled
// 0x0009 (0x0009 - 0x0000)
struct BP_Inventory_FilterSlot_C_SetEnabled final
{
public:
	bool                                          InIsEnabled;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Inventory_FilterSlot_C_SetEnabled) == 0x000001, "Wrong alignment on BP_Inventory_FilterSlot_C_SetEnabled");
static_assert(sizeof(BP_Inventory_FilterSlot_C_SetEnabled) == 0x000009, "Wrong size on BP_Inventory_FilterSlot_C_SetEnabled");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetEnabled, InIsEnabled) == 0x000000, "Member 'BP_Inventory_FilterSlot_C_SetEnabled::InIsEnabled' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetEnabled, Temp_bool_Variable) == 0x000001, "Member 'BP_Inventory_FilterSlot_C_SetEnabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetEnabled, Temp_byte_Variable) == 0x000002, "Member 'BP_Inventory_FilterSlot_C_SetEnabled::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetEnabled, Temp_byte_Variable_1) == 0x000003, "Member 'BP_Inventory_FilterSlot_C_SetEnabled::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetEnabled, Temp_bool_Variable_1) == 0x000004, "Member 'BP_Inventory_FilterSlot_C_SetEnabled::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetEnabled, Temp_byte_Variable_2) == 0x000005, "Member 'BP_Inventory_FilterSlot_C_SetEnabled::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetEnabled, Temp_byte_Variable_3) == 0x000006, "Member 'BP_Inventory_FilterSlot_C_SetEnabled::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetEnabled, K2Node_Select_Default) == 0x000007, "Member 'BP_Inventory_FilterSlot_C_SetEnabled::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_SetEnabled, K2Node_Select_Default_1) == 0x000008, "Member 'BP_Inventory_FilterSlot_C_SetEnabled::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_Inventory_FilterSlot.BP_Inventory_FilterSlot_C.Toggle New Item Warning
// 0x0018 (0x0018 - 0x0000)
struct BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InAnimate;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning) == 0x000008, "Wrong alignment on BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning");
static_assert(sizeof(BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning) == 0x000018, "Wrong size on BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning");
static_assert(offsetof(BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning, InVisible) == 0x000000, "Member 'BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning::InVisible' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning, InAnimate) == 0x000001, "Member 'BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning::InAnimate' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning, Temp_bool_Variable) == 0x000002, "Member 'BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning, Temp_float_Variable) == 0x000004, "Member 'BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning, K2Node_Select_Default) == 0x00000C, "Member 'BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_Inventory_FilterSlot_C_Toggle_New_Item_Warning::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

