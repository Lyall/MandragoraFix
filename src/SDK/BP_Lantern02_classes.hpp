#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lantern02

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Lantern02.BP_Lantern02_C
// 0x00B0 (0x02D8 - 0x0228)
class ABP_Lantern02_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UManVisualController*                   ManVisualController;                               // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Lantern01;                                      // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_plane_4x4_bottompivot_Halo;                     // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_plane_4x4_bottompivot_Cd3;                      // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_plane_4x4_bottompivot_Cd2;                      // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_plane_4x4_bottompivot_Cd1;                      // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VFX;                                               // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          CandleFlameType1;                                  // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CandleFlameType2;                                  // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CandleFlameType3;                                  // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27B[0x1];                                      // 0x027B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightRadius;                                       // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensity;                                    // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LightCastShadow;                                   // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Halo;                                              // 0x0295(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_296[0x2];                                      // 0x0296(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           HaloColor;                                         // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlassOpacity;                                      // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           GlassColor;                                        // 0x02AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TemporalSamplingPerFrame;                          // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightSourceMaterial;                               // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     LanternMaterial;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_BP_Lantern02(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Lantern02_C">();
	}
	static class ABP_Lantern02_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Lantern02_C>();
	}
};
static_assert(alignof(ABP_Lantern02_C) == 0x000008, "Wrong alignment on ABP_Lantern02_C");
static_assert(sizeof(ABP_Lantern02_C) == 0x0002D8, "Wrong size on ABP_Lantern02_C");
static_assert(offsetof(ABP_Lantern02_C, UberGraphFrame) == 0x000228, "Member 'ABP_Lantern02_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, ManVisualController) == 0x000230, "Member 'ABP_Lantern02_C::ManVisualController' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, PointLight) == 0x000238, "Member 'ABP_Lantern02_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, SM_Lantern01) == 0x000240, "Member 'ABP_Lantern02_C::SM_Lantern01' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, SM_plane_4x4_bottompivot_Halo) == 0x000248, "Member 'ABP_Lantern02_C::SM_plane_4x4_bottompivot_Halo' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, SM_plane_4x4_bottompivot_Cd3) == 0x000250, "Member 'ABP_Lantern02_C::SM_plane_4x4_bottompivot_Cd3' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, SM_plane_4x4_bottompivot_Cd2) == 0x000258, "Member 'ABP_Lantern02_C::SM_plane_4x4_bottompivot_Cd2' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, SM_plane_4x4_bottompivot_Cd1) == 0x000260, "Member 'ABP_Lantern02_C::SM_plane_4x4_bottompivot_Cd1' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, VFX) == 0x000268, "Member 'ABP_Lantern02_C::VFX' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, DefaultSceneRoot) == 0x000270, "Member 'ABP_Lantern02_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, CandleFlameType1) == 0x000278, "Member 'ABP_Lantern02_C::CandleFlameType1' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, CandleFlameType2) == 0x000279, "Member 'ABP_Lantern02_C::CandleFlameType2' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, CandleFlameType3) == 0x00027A, "Member 'ABP_Lantern02_C::CandleFlameType3' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, LightRadius) == 0x00027C, "Member 'ABP_Lantern02_C::LightRadius' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, LightColor) == 0x000280, "Member 'ABP_Lantern02_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, LightIntensity) == 0x000290, "Member 'ABP_Lantern02_C::LightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, LightCastShadow) == 0x000294, "Member 'ABP_Lantern02_C::LightCastShadow' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, Halo) == 0x000295, "Member 'ABP_Lantern02_C::Halo' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, HaloColor) == 0x000298, "Member 'ABP_Lantern02_C::HaloColor' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, GlassOpacity) == 0x0002A8, "Member 'ABP_Lantern02_C::GlassOpacity' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, GlassColor) == 0x0002AC, "Member 'ABP_Lantern02_C::GlassColor' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, TemporalSamplingPerFrame) == 0x0002BC, "Member 'ABP_Lantern02_C::TemporalSamplingPerFrame' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, Time) == 0x0002C0, "Member 'ABP_Lantern02_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, LightSourceMaterial) == 0x0002C8, "Member 'ABP_Lantern02_C::LightSourceMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Lantern02_C, LanternMaterial) == 0x0002D0, "Member 'ABP_Lantern02_C::LanternMaterial' has a wrong offset!");

}

