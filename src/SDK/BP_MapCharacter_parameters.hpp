#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapCharacter

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_MapCharacter.BP_MapCharacter_C.ExecuteUbergraph_BP_MapCharacter
// 0x0010 (0x0010 - 0x0000)
struct BP_MapCharacter_C_ExecuteUbergraph_BP_MapCharacter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bLeft;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapCharacter_C_ExecuteUbergraph_BP_MapCharacter) == 0x000008, "Wrong alignment on BP_MapCharacter_C_ExecuteUbergraph_BP_MapCharacter");
static_assert(sizeof(BP_MapCharacter_C_ExecuteUbergraph_BP_MapCharacter) == 0x000010, "Wrong size on BP_MapCharacter_C_ExecuteUbergraph_BP_MapCharacter");
static_assert(offsetof(BP_MapCharacter_C_ExecuteUbergraph_BP_MapCharacter, EntryPoint) == 0x000000, "Member 'BP_MapCharacter_C_ExecuteUbergraph_BP_MapCharacter::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MapCharacter_C_ExecuteUbergraph_BP_MapCharacter, K2Node_Event_bLeft) == 0x000004, "Member 'BP_MapCharacter_C_ExecuteUbergraph_BP_MapCharacter::K2Node_Event_bLeft' has a wrong offset!");
static_assert(offsetof(BP_MapCharacter_C_ExecuteUbergraph_BP_MapCharacter, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_MapCharacter_C_ExecuteUbergraph_BP_MapCharacter::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_MapCharacter.BP_MapCharacter_C.OnSetFacing
// 0x0001 (0x0001 - 0x0000)
struct BP_MapCharacter_C_OnSetFacing final
{
public:
	bool                                          bLeft;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapCharacter_C_OnSetFacing) == 0x000001, "Wrong alignment on BP_MapCharacter_C_OnSetFacing");
static_assert(sizeof(BP_MapCharacter_C_OnSetFacing) == 0x000001, "Wrong size on BP_MapCharacter_C_OnSetFacing");
static_assert(offsetof(BP_MapCharacter_C_OnSetFacing, bLeft) == 0x000000, "Member 'BP_MapCharacter_C_OnSetFacing::bLeft' has a wrong offset!");

// Function BP_MapCharacter.BP_MapCharacter_C.SetFacing
// 0x0020 (0x0020 - 0x0000)
struct BP_MapCharacter_C_SetFacing final
{
public:
	bool                                          IsLeftFacing;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapCharacter_C_SetFacing) == 0x000008, "Wrong alignment on BP_MapCharacter_C_SetFacing");
static_assert(sizeof(BP_MapCharacter_C_SetFacing) == 0x000020, "Wrong size on BP_MapCharacter_C_SetFacing");
static_assert(offsetof(BP_MapCharacter_C_SetFacing, IsLeftFacing) == 0x000000, "Member 'BP_MapCharacter_C_SetFacing::IsLeftFacing' has a wrong offset!");
static_assert(offsetof(BP_MapCharacter_C_SetFacing, Temp_bool_Variable) == 0x000001, "Member 'BP_MapCharacter_C_SetFacing::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapCharacter_C_SetFacing, Temp_object_Variable) == 0x000008, "Member 'BP_MapCharacter_C_SetFacing::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapCharacter_C_SetFacing, Temp_object_Variable_1) == 0x000010, "Member 'BP_MapCharacter_C_SetFacing::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapCharacter_C_SetFacing, K2Node_Select_Default) == 0x000018, "Member 'BP_MapCharacter_C_SetFacing::K2Node_Select_Default' has a wrong offset!");

}

