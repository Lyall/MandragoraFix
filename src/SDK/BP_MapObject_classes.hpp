#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapObject

#include "Basic.hpp"

#include "man_structs.hpp"
#include "man_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_MapObject.BP_MapObject_C
// 0x00C8 (0x03D0 - 0x0308)
class UBP_MapObject_C final : public UMapObjectUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       EssenceAnim;                                       // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TravelProgressAnim;                                // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TravelEndAnim;                                     // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TravelStartAnim;                                   // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SelectionAnim;                                     // 0x0330(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UScaleBox*                              ActiveScale;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                ButtonFrame;                                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DisplayText;                                       // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Glow;                                              // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HoldVFX_1;                                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HoldVFX_2;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageVFX;                                          // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Lock;                                              // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MarkerGlow;                                        // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_1;                                       // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_2;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_3;                                       // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_4;                                       // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_5;                                       // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_6;                                       // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ZoomScale;                                         // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         CurrentZoomScale;                                  // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNameVisible;                                     // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInactiveCheckpoint;                              // 0x03C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EMiniMapGatewayState                          GatewayState;                                      // 0x03C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMiniMapGatewaySide                           GatewaySide;                                       // 0x03C7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEssence;                                         // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_MapObject(int32 EntryPoint);
	void OnSetCheckpointNameVisible(bool bInVisible);
	void OnUnfocused(bool bAnimate);
	void OnFocused(bool bAnimate);
	void OnSetCheckpoint(bool bCheckpoint, bool bCheckpointEnabled, const class FText& InDisplayName);
	void OnSetIcon(class UTexture2D* InIcon, EMiniMapGatewaySide InGatewaySide, EMiniMapGatewayState InGatewayState);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void SetCheckpoint(bool InCheckpoint, bool InCheckpointEnabled, const class FText& InDisplayName);
	void UpdateZoomScale();
	void SetCheckpointNameVisible(bool InVisible);
	void Set_Icons(class UTexture2D* InIcon, EMiniMapGatewaySide InGatewaySide, EMiniMapGatewayState InGatewayState);
	void TravelStart(float MaxKeyTimerHoldTime);
	void TravelEnd();
	void TravelAbort();
	void ToggleEssenceVFX(bool InEssence);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapObject_C">();
	}
	static class UBP_MapObject_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MapObject_C>();
	}
};
static_assert(alignof(UBP_MapObject_C) == 0x000008, "Wrong alignment on UBP_MapObject_C");
static_assert(sizeof(UBP_MapObject_C) == 0x0003D0, "Wrong size on UBP_MapObject_C");
static_assert(offsetof(UBP_MapObject_C, UberGraphFrame) == 0x000308, "Member 'UBP_MapObject_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, EssenceAnim) == 0x000310, "Member 'UBP_MapObject_C::EssenceAnim' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, TravelProgressAnim) == 0x000318, "Member 'UBP_MapObject_C::TravelProgressAnim' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, TravelEndAnim) == 0x000320, "Member 'UBP_MapObject_C::TravelEndAnim' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, TravelStartAnim) == 0x000328, "Member 'UBP_MapObject_C::TravelStartAnim' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, SelectionAnim) == 0x000330, "Member 'UBP_MapObject_C::SelectionAnim' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, ActiveScale) == 0x000338, "Member 'UBP_MapObject_C::ActiveScale' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, ButtonFrame) == 0x000340, "Member 'UBP_MapObject_C::ButtonFrame' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, DisplayText) == 0x000348, "Member 'UBP_MapObject_C::DisplayText' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, Glow) == 0x000350, "Member 'UBP_MapObject_C::Glow' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, HoldVFX_1) == 0x000358, "Member 'UBP_MapObject_C::HoldVFX_1' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, HoldVFX_2) == 0x000360, "Member 'UBP_MapObject_C::HoldVFX_2' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, Image) == 0x000368, "Member 'UBP_MapObject_C::Image' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, ImageVFX) == 0x000370, "Member 'UBP_MapObject_C::ImageVFX' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, Lock) == 0x000378, "Member 'UBP_MapObject_C::Lock' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, MarkerGlow) == 0x000380, "Member 'UBP_MapObject_C::MarkerGlow' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, UnlockVFX_1) == 0x000388, "Member 'UBP_MapObject_C::UnlockVFX_1' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, UnlockVFX_2) == 0x000390, "Member 'UBP_MapObject_C::UnlockVFX_2' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, UnlockVFX_3) == 0x000398, "Member 'UBP_MapObject_C::UnlockVFX_3' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, UnlockVFX_4) == 0x0003A0, "Member 'UBP_MapObject_C::UnlockVFX_4' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, UnlockVFX_5) == 0x0003A8, "Member 'UBP_MapObject_C::UnlockVFX_5' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, UnlockVFX_6) == 0x0003B0, "Member 'UBP_MapObject_C::UnlockVFX_6' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, ZoomScale) == 0x0003B8, "Member 'UBP_MapObject_C::ZoomScale' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, CurrentZoomScale) == 0x0003C0, "Member 'UBP_MapObject_C::CurrentZoomScale' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, IsNameVisible) == 0x0003C4, "Member 'UBP_MapObject_C::IsNameVisible' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, IsInactiveCheckpoint) == 0x0003C5, "Member 'UBP_MapObject_C::IsInactiveCheckpoint' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, GatewayState) == 0x0003C6, "Member 'UBP_MapObject_C::GatewayState' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, GatewaySide) == 0x0003C7, "Member 'UBP_MapObject_C::GatewaySide' has a wrong offset!");
static_assert(offsetof(UBP_MapObject_C, IsEssence) == 0x0003C8, "Member 'UBP_MapObject_C::IsEssence' has a wrong offset!");

}

