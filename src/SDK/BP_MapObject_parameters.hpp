#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapObject

#include "Basic.hpp"

#include "man_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_MapObject.BP_MapObject_C.ExecuteUbergraph_BP_MapObject
// 0x00A8 (0x00A8 - 0x0000)
struct BP_MapObject_C_ExecuteUbergraph_BP_MapObject final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Event_InIcon;                               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMiniMapGatewaySide                           K2Node_Event_InGatewaySide;                        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMiniMapGatewayState                          K2Node_Event_InGatewayState;                       // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bCheckpoint;                          // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bCheckpointEnabled;                   // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_InDisplayName;                        // 0x0058(0x0018)(ConstParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73[0x1];                                       // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue_1;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInVisible;                           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject) == 0x000008, "Wrong alignment on BP_MapObject_C_ExecuteUbergraph_BP_MapObject");
static_assert(sizeof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject) == 0x0000A8, "Wrong size on BP_MapObject_C_ExecuteUbergraph_BP_MapObject");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, EntryPoint) == 0x000000, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, Temp_bool_Variable) == 0x000004, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, Temp_bool_Variable_1) == 0x000005, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Event_InIcon) == 0x000048, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Event_InIcon' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Event_InGatewaySide) == 0x000050, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Event_InGatewaySide' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Event_InGatewayState) == 0x000051, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Event_InGatewayState' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Event_bCheckpoint) == 0x000052, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Event_bCheckpoint' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Event_bCheckpointEnabled) == 0x000053, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Event_bCheckpointEnabled' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Event_InDisplayName) == 0x000058, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Event_InDisplayName' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000070, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Event_bAnimate_1) == 0x000071, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Event_bAnimate) == 0x000072, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, CallFunc_GetEndTime_ReturnValue) == 0x000074, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000078, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00007C, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Select_Default) == 0x000080, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, CallFunc_GetEndTime_ReturnValue_1) == 0x000084, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::CallFunc_GetEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, CallFunc_PlayAnimation_ReturnValue) == 0x000088, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000090, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000094, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Event_bInVisible) == 0x000098, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Event_bInVisible' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, K2Node_Select_Default_1) == 0x00009C, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ExecuteUbergraph_BP_MapObject, CallFunc_PlayAnimation_ReturnValue_1) == 0x0000A0, "Member 'BP_MapObject_C_ExecuteUbergraph_BP_MapObject::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.OnSetCheckpointNameVisible
// 0x0001 (0x0001 - 0x0000)
struct BP_MapObject_C_OnSetCheckpointNameVisible final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapObject_C_OnSetCheckpointNameVisible) == 0x000001, "Wrong alignment on BP_MapObject_C_OnSetCheckpointNameVisible");
static_assert(sizeof(BP_MapObject_C_OnSetCheckpointNameVisible) == 0x000001, "Wrong size on BP_MapObject_C_OnSetCheckpointNameVisible");
static_assert(offsetof(BP_MapObject_C_OnSetCheckpointNameVisible, bInVisible) == 0x000000, "Member 'BP_MapObject_C_OnSetCheckpointNameVisible::bInVisible' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.OnUnfocused
// 0x0001 (0x0001 - 0x0000)
struct BP_MapObject_C_OnUnfocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapObject_C_OnUnfocused) == 0x000001, "Wrong alignment on BP_MapObject_C_OnUnfocused");
static_assert(sizeof(BP_MapObject_C_OnUnfocused) == 0x000001, "Wrong size on BP_MapObject_C_OnUnfocused");
static_assert(offsetof(BP_MapObject_C_OnUnfocused, bAnimate) == 0x000000, "Member 'BP_MapObject_C_OnUnfocused::bAnimate' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.OnFocused
// 0x0001 (0x0001 - 0x0000)
struct BP_MapObject_C_OnFocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapObject_C_OnFocused) == 0x000001, "Wrong alignment on BP_MapObject_C_OnFocused");
static_assert(sizeof(BP_MapObject_C_OnFocused) == 0x000001, "Wrong size on BP_MapObject_C_OnFocused");
static_assert(offsetof(BP_MapObject_C_OnFocused, bAnimate) == 0x000000, "Member 'BP_MapObject_C_OnFocused::bAnimate' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.OnSetCheckpoint
// 0x0020 (0x0020 - 0x0000)
struct BP_MapObject_C_OnSetCheckpoint final
{
public:
	bool                                          bCheckpoint;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCheckpointEnabled;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InDisplayName;                                     // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_MapObject_C_OnSetCheckpoint) == 0x000008, "Wrong alignment on BP_MapObject_C_OnSetCheckpoint");
static_assert(sizeof(BP_MapObject_C_OnSetCheckpoint) == 0x000020, "Wrong size on BP_MapObject_C_OnSetCheckpoint");
static_assert(offsetof(BP_MapObject_C_OnSetCheckpoint, bCheckpoint) == 0x000000, "Member 'BP_MapObject_C_OnSetCheckpoint::bCheckpoint' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_OnSetCheckpoint, bCheckpointEnabled) == 0x000001, "Member 'BP_MapObject_C_OnSetCheckpoint::bCheckpointEnabled' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_OnSetCheckpoint, InDisplayName) == 0x000008, "Member 'BP_MapObject_C_OnSetCheckpoint::InDisplayName' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.OnSetIcon
// 0x0010 (0x0010 - 0x0000)
struct BP_MapObject_C_OnSetIcon final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMiniMapGatewaySide                           InGatewaySide;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMiniMapGatewayState                          InGatewayState;                                    // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapObject_C_OnSetIcon) == 0x000008, "Wrong alignment on BP_MapObject_C_OnSetIcon");
static_assert(sizeof(BP_MapObject_C_OnSetIcon) == 0x000010, "Wrong size on BP_MapObject_C_OnSetIcon");
static_assert(offsetof(BP_MapObject_C_OnSetIcon, InIcon) == 0x000000, "Member 'BP_MapObject_C_OnSetIcon::InIcon' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_OnSetIcon, InGatewaySide) == 0x000008, "Member 'BP_MapObject_C_OnSetIcon::InGatewaySide' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_OnSetIcon, InGatewayState) == 0x000009, "Member 'BP_MapObject_C_OnSetIcon::InGatewayState' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_MapObject_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapObject_C_Tick) == 0x000004, "Wrong alignment on BP_MapObject_C_Tick");
static_assert(sizeof(BP_MapObject_C_Tick) == 0x00003C, "Wrong size on BP_MapObject_C_Tick");
static_assert(offsetof(BP_MapObject_C_Tick, MyGeometry) == 0x000000, "Member 'BP_MapObject_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_MapObject_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.SetCheckpoint
// 0x0080 (0x0080 - 0x0000)
struct BP_MapObject_C_SetCheckpoint final
{
public:
	bool                                          InCheckpoint;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InCheckpointEnabled;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InDisplayName;                                     // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMarker_ReturnValue;                     // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_GetBrushResourceAsTexture2D_ReturnValue;  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_4;                           // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_5;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapObject_C_SetCheckpoint) == 0x000008, "Wrong alignment on BP_MapObject_C_SetCheckpoint");
static_assert(sizeof(BP_MapObject_C_SetCheckpoint) == 0x000080, "Wrong size on BP_MapObject_C_SetCheckpoint");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, InCheckpoint) == 0x000000, "Member 'BP_MapObject_C_SetCheckpoint::InCheckpoint' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, InCheckpointEnabled) == 0x000001, "Member 'BP_MapObject_C_SetCheckpoint::InCheckpointEnabled' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, InDisplayName) == 0x000008, "Member 'BP_MapObject_C_SetCheckpoint::InDisplayName' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_bool_Variable) == 0x000020, "Member 'BP_MapObject_C_SetCheckpoint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_byte_Variable) == 0x000021, "Member 'BP_MapObject_C_SetCheckpoint::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_byte_Variable_1) == 0x000022, "Member 'BP_MapObject_C_SetCheckpoint::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_bool_Variable_1) == 0x000023, "Member 'BP_MapObject_C_SetCheckpoint::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_byte_Variable_2) == 0x000024, "Member 'BP_MapObject_C_SetCheckpoint::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_byte_Variable_3) == 0x000025, "Member 'BP_MapObject_C_SetCheckpoint::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_bool_Variable_2) == 0x000026, "Member 'BP_MapObject_C_SetCheckpoint::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_float_Variable) == 0x000028, "Member 'BP_MapObject_C_SetCheckpoint::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_float_Variable_1) == 0x00002C, "Member 'BP_MapObject_C_SetCheckpoint::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_bool_Variable_3) == 0x000030, "Member 'BP_MapObject_C_SetCheckpoint::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_int_Variable) == 0x000034, "Member 'BP_MapObject_C_SetCheckpoint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_int_Variable_1) == 0x000038, "Member 'BP_MapObject_C_SetCheckpoint::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_bool_Variable_4) == 0x00003C, "Member 'BP_MapObject_C_SetCheckpoint::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_object_Variable) == 0x000040, "Member 'BP_MapObject_C_SetCheckpoint::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_bool_Variable_5) == 0x000048, "Member 'BP_MapObject_C_SetCheckpoint::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_byte_Variable_4) == 0x000049, "Member 'BP_MapObject_C_SetCheckpoint::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, Temp_byte_Variable_5) == 0x00004A, "Member 'BP_MapObject_C_SetCheckpoint::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, CallFunc_IsMarker_ReturnValue) == 0x00004B, "Member 'BP_MapObject_C_SetCheckpoint::CallFunc_IsMarker_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, K2Node_Select_Default) == 0x00004C, "Member 'BP_MapObject_C_SetCheckpoint::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, K2Node_Select_Default_1) == 0x00004D, "Member 'BP_MapObject_C_SetCheckpoint::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, CallFunc_TextIsEmpty_ReturnValue) == 0x00004E, "Member 'BP_MapObject_C_SetCheckpoint::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000050, "Member 'BP_MapObject_C_SetCheckpoint::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, CallFunc_Not_PreBool_ReturnValue) == 0x000058, "Member 'BP_MapObject_C_SetCheckpoint::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, CallFunc_Not_PreBool_ReturnValue_1) == 0x000059, "Member 'BP_MapObject_C_SetCheckpoint::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, CallFunc_BooleanAND_ReturnValue) == 0x00005A, "Member 'BP_MapObject_C_SetCheckpoint::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, CallFunc_Not_PreBool_ReturnValue_2) == 0x00005B, "Member 'BP_MapObject_C_SetCheckpoint::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, CallFunc_BooleanOR_ReturnValue) == 0x00005C, "Member 'BP_MapObject_C_SetCheckpoint::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, CallFunc_GetBrushResourceAsTexture2D_ReturnValue) == 0x000060, "Member 'BP_MapObject_C_SetCheckpoint::CallFunc_GetBrushResourceAsTexture2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, K2Node_Select_Default_2) == 0x000068, "Member 'BP_MapObject_C_SetCheckpoint::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, K2Node_Select_Default_3) == 0x000070, "Member 'BP_MapObject_C_SetCheckpoint::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, CallFunc_BooleanAND_ReturnValue_1) == 0x000071, "Member 'BP_MapObject_C_SetCheckpoint::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, K2Node_Select_Default_4) == 0x000074, "Member 'BP_MapObject_C_SetCheckpoint::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, K2Node_Select_Default_5) == 0x000078, "Member 'BP_MapObject_C_SetCheckpoint::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpoint, CallFunc_Not_PreBool_ReturnValue_3) == 0x00007C, "Member 'BP_MapObject_C_SetCheckpoint::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.UpdateZoomScale
// 0x003C (0x003C - 0x0000)
struct BP_MapObject_C_UpdateZoomScale final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapObject_C_UpdateZoomScale) == 0x000004, "Wrong alignment on BP_MapObject_C_UpdateZoomScale");
static_assert(sizeof(BP_MapObject_C_UpdateZoomScale) == 0x00003C, "Wrong size on BP_MapObject_C_UpdateZoomScale");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, Temp_bool_Variable) == 0x000000, "Member 'BP_MapObject_C_UpdateZoomScale::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, Temp_float_Variable) == 0x000004, "Member 'BP_MapObject_C_UpdateZoomScale::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, Temp_bool_Variable_1) == 0x000008, "Member 'BP_MapObject_C_UpdateZoomScale::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, Temp_float_Variable_1) == 0x00000C, "Member 'BP_MapObject_C_UpdateZoomScale::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, Temp_bool_Variable_2) == 0x000010, "Member 'BP_MapObject_C_UpdateZoomScale::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, Temp_float_Variable_2) == 0x000014, "Member 'BP_MapObject_C_UpdateZoomScale::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_MapObject_C_UpdateZoomScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, K2Node_Select_Default) == 0x00001C, "Member 'BP_MapObject_C_UpdateZoomScale::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'BP_MapObject_C_UpdateZoomScale::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, CallFunc_MakeVector2D_ReturnValue) == 0x000024, "Member 'BP_MapObject_C_UpdateZoomScale::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, K2Node_Select_Default_1) == 0x00002C, "Member 'BP_MapObject_C_UpdateZoomScale::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, CallFunc_MakeVector2D_ReturnValue_1) == 0x000030, "Member 'BP_MapObject_C_UpdateZoomScale::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_UpdateZoomScale, K2Node_Select_Default_2) == 0x000038, "Member 'BP_MapObject_C_UpdateZoomScale::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.SetCheckpointNameVisible
// 0x0010 (0x0010 - 0x0000)
struct BP_MapObject_C_SetCheckpointNameVisible final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapObject_C_SetCheckpointNameVisible) == 0x000004, "Wrong alignment on BP_MapObject_C_SetCheckpointNameVisible");
static_assert(sizeof(BP_MapObject_C_SetCheckpointNameVisible) == 0x000010, "Wrong size on BP_MapObject_C_SetCheckpointNameVisible");
static_assert(offsetof(BP_MapObject_C_SetCheckpointNameVisible, InVisible) == 0x000000, "Member 'BP_MapObject_C_SetCheckpointNameVisible::InVisible' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpointNameVisible, Temp_bool_Variable) == 0x000001, "Member 'BP_MapObject_C_SetCheckpointNameVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpointNameVisible, Temp_float_Variable) == 0x000004, "Member 'BP_MapObject_C_SetCheckpointNameVisible::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpointNameVisible, Temp_float_Variable_1) == 0x000008, "Member 'BP_MapObject_C_SetCheckpointNameVisible::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_SetCheckpointNameVisible, K2Node_Select_Default) == 0x00000C, "Member 'BP_MapObject_C_SetCheckpointNameVisible::K2Node_Select_Default' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.Set Icons
// 0x00A0 (0x00A0 - 0x0000)
struct BP_MapObject_C_Set_Icons final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMiniMapGatewaySide                           InGatewaySide;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMiniMapGatewayState                          InGatewayState;                                    // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMiniMapGatewaySide                           Temp_byte_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMiniMapGatewayState                          Temp_byte_Variable_1;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMiniMapGatewayState                          Temp_byte_Variable_5;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_2;                        // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_3;                        // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_4;                        // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_Select_Default;                             // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapObject_C_Set_Icons) == 0x000008, "Wrong alignment on BP_MapObject_C_Set_Icons");
static_assert(sizeof(BP_MapObject_C_Set_Icons) == 0x0000A0, "Wrong size on BP_MapObject_C_Set_Icons");
static_assert(offsetof(BP_MapObject_C_Set_Icons, InIcon) == 0x000000, "Member 'BP_MapObject_C_Set_Icons::InIcon' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, InGatewaySide) == 0x000008, "Member 'BP_MapObject_C_Set_Icons::InGatewaySide' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, InGatewayState) == 0x000009, "Member 'BP_MapObject_C_Set_Icons::InGatewayState' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, Temp_byte_Variable) == 0x00000A, "Member 'BP_MapObject_C_Set_Icons::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, Temp_byte_Variable_1) == 0x00000B, "Member 'BP_MapObject_C_Set_Icons::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, Temp_byte_Variable_2) == 0x00000C, "Member 'BP_MapObject_C_Set_Icons::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, Temp_byte_Variable_3) == 0x00000D, "Member 'BP_MapObject_C_Set_Icons::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, Temp_byte_Variable_4) == 0x00000E, "Member 'BP_MapObject_C_Set_Icons::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, Temp_byte_Variable_5) == 0x00000F, "Member 'BP_MapObject_C_Set_Icons::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, Temp_object_Variable) == 0x000010, "Member 'BP_MapObject_C_Set_Icons::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, Temp_object_Variable_1) == 0x000018, "Member 'BP_MapObject_C_Set_Icons::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, Temp_object_Variable_2) == 0x000020, "Member 'BP_MapObject_C_Set_Icons::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, K2Node_MakeStruct_Margin) == 0x000028, "Member 'BP_MapObject_C_Set_Icons::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, K2Node_MakeStruct_Margin_1) == 0x000038, "Member 'BP_MapObject_C_Set_Icons::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, K2Node_MakeStruct_Margin_2) == 0x000048, "Member 'BP_MapObject_C_Set_Icons::K2Node_MakeStruct_Margin_2' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, K2Node_MakeStruct_Margin_3) == 0x000058, "Member 'BP_MapObject_C_Set_Icons::K2Node_MakeStruct_Margin_3' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, K2Node_MakeStruct_Margin_4) == 0x000068, "Member 'BP_MapObject_C_Set_Icons::K2Node_MakeStruct_Margin_4' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, K2Node_Select_Default) == 0x000078, "Member 'BP_MapObject_C_Set_Icons::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, K2Node_Select_Default_1) == 0x000088, "Member 'BP_MapObject_C_Set_Icons::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000090, "Member 'BP_MapObject_C_Set_Icons::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_Set_Icons, K2Node_Select_Default_2) == 0x000098, "Member 'BP_MapObject_C_Set_Icons::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.TravelStart
// 0x0020 (0x0020 - 0x0000)
struct BP_MapObject_C_TravelStart final
{
public:
	float                                         MaxKeyTimerHoldTime;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapObject_C_TravelStart) == 0x000008, "Wrong alignment on BP_MapObject_C_TravelStart");
static_assert(sizeof(BP_MapObject_C_TravelStart) == 0x000020, "Wrong size on BP_MapObject_C_TravelStart");
static_assert(offsetof(BP_MapObject_C_TravelStart, MaxKeyTimerHoldTime) == 0x000000, "Member 'BP_MapObject_C_TravelStart::MaxKeyTimerHoldTime' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_TravelStart, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_MapObject_C_TravelStart::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_TravelStart, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_MapObject_C_TravelStart::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_TravelStart, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000010, "Member 'BP_MapObject_C_TravelStart::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_TravelStart, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'BP_MapObject_C_TravelStart::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.TravelEnd
// 0x0008 (0x0008 - 0x0000)
struct BP_MapObject_C_TravelEnd final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapObject_C_TravelEnd) == 0x000008, "Wrong alignment on BP_MapObject_C_TravelEnd");
static_assert(sizeof(BP_MapObject_C_TravelEnd) == 0x000008, "Wrong size on BP_MapObject_C_TravelEnd");
static_assert(offsetof(BP_MapObject_C_TravelEnd, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_MapObject_C_TravelEnd::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.TravelAbort
// 0x0010 (0x0010 - 0x0000)
struct BP_MapObject_C_TravelAbort final
{
public:
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapObject_C_TravelAbort) == 0x000008, "Wrong alignment on BP_MapObject_C_TravelAbort");
static_assert(sizeof(BP_MapObject_C_TravelAbort) == 0x000010, "Wrong size on BP_MapObject_C_TravelAbort");
static_assert(offsetof(BP_MapObject_C_TravelAbort, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000000, "Member 'BP_MapObject_C_TravelAbort::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_TravelAbort, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_MapObject_C_TravelAbort::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_MapObject.BP_MapObject_C.ToggleEssenceVFX
// 0x0018 (0x0018 - 0x0000)
struct BP_MapObject_C_ToggleEssenceVFX final
{
public:
	bool                                          InEssence;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapObject_C_ToggleEssenceVFX) == 0x000008, "Wrong alignment on BP_MapObject_C_ToggleEssenceVFX");
static_assert(sizeof(BP_MapObject_C_ToggleEssenceVFX) == 0x000018, "Wrong size on BP_MapObject_C_ToggleEssenceVFX");
static_assert(offsetof(BP_MapObject_C_ToggleEssenceVFX, InEssence) == 0x000000, "Member 'BP_MapObject_C_ToggleEssenceVFX::InEssence' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ToggleEssenceVFX, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_MapObject_C_ToggleEssenceVFX::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapObject_C_ToggleEssenceVFX, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000010, "Member 'BP_MapObject_C_ToggleEssenceVFX::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

}

