#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapWindow_Marker

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_MapWindow_Marker.BP_MapWindow_Marker_C.ExecuteUbergraph_BP_MapWindow_Marker
// 0x001C (0x001C - 0x0000)
struct BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInSelected;                          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Event_SlateVisibility;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker) == 0x000004, "Wrong alignment on BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker");
static_assert(sizeof(BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker) == 0x00001C, "Wrong size on BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker");
static_assert(offsetof(BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker, EntryPoint) == 0x000000, "Member 'BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker, Temp_delegate_Variable) == 0x000004, "Member 'BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker, CallFunc_PostEvent_ReturnValue) == 0x000014, "Member 'BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker, K2Node_Event_IsDesignTime) == 0x000018, "Member 'BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker, K2Node_Event_bInSelected) == 0x000019, "Member 'BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker::K2Node_Event_bInSelected' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker, K2Node_Event_SlateVisibility) == 0x00001A, "Member 'BP_MapWindow_Marker_C_ExecuteUbergraph_BP_MapWindow_Marker::K2Node_Event_SlateVisibility' has a wrong offset!");

// Function BP_MapWindow_Marker.BP_MapWindow_Marker_C.OnSetBtnVisiblity
// 0x0001 (0x0001 - 0x0000)
struct BP_MapWindow_Marker_C_OnSetBtnVisiblity final
{
public:
	ESlateVisibility                              SlateVisibility;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_Marker_C_OnSetBtnVisiblity) == 0x000001, "Wrong alignment on BP_MapWindow_Marker_C_OnSetBtnVisiblity");
static_assert(sizeof(BP_MapWindow_Marker_C_OnSetBtnVisiblity) == 0x000001, "Wrong size on BP_MapWindow_Marker_C_OnSetBtnVisiblity");
static_assert(offsetof(BP_MapWindow_Marker_C_OnSetBtnVisiblity, SlateVisibility) == 0x000000, "Member 'BP_MapWindow_Marker_C_OnSetBtnVisiblity::SlateVisibility' has a wrong offset!");

// Function BP_MapWindow_Marker.BP_MapWindow_Marker_C.OnSetSelected
// 0x0001 (0x0001 - 0x0000)
struct BP_MapWindow_Marker_C_OnSetSelected final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_Marker_C_OnSetSelected) == 0x000001, "Wrong alignment on BP_MapWindow_Marker_C_OnSetSelected");
static_assert(sizeof(BP_MapWindow_Marker_C_OnSetSelected) == 0x000001, "Wrong size on BP_MapWindow_Marker_C_OnSetSelected");
static_assert(offsetof(BP_MapWindow_Marker_C_OnSetSelected, bInSelected) == 0x000000, "Member 'BP_MapWindow_Marker_C_OnSetSelected::bInSelected' has a wrong offset!");

// Function BP_MapWindow_Marker.BP_MapWindow_Marker_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_MapWindow_Marker_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_Marker_C_PreConstruct) == 0x000001, "Wrong alignment on BP_MapWindow_Marker_C_PreConstruct");
static_assert(sizeof(BP_MapWindow_Marker_C_PreConstruct) == 0x000001, "Wrong size on BP_MapWindow_Marker_C_PreConstruct");
static_assert(offsetof(BP_MapWindow_Marker_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_MapWindow_Marker_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_MapWindow_Marker.BP_MapWindow_Marker_C.SetSelected
// 0x0090 (0x0090 - 0x0000)
struct BP_MapWindow_Marker_C_SetSelected final
{
public:
	bool                                          InIsFocused;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0058(0x0028)()
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_Marker_C_SetSelected) == 0x000008, "Wrong alignment on BP_MapWindow_Marker_C_SetSelected");
static_assert(sizeof(BP_MapWindow_Marker_C_SetSelected) == 0x000090, "Wrong size on BP_MapWindow_Marker_C_SetSelected");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, InIsFocused) == 0x000000, "Member 'BP_MapWindow_Marker_C_SetSelected::InIsFocused' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, Temp_bool_Variable) == 0x000001, "Member 'BP_MapWindow_Marker_C_SetSelected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, Temp_struct_Variable) == 0x000004, "Member 'BP_MapWindow_Marker_C_SetSelected::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, Temp_struct_Variable_1) == 0x000014, "Member 'BP_MapWindow_Marker_C_SetSelected::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, Temp_bool_Variable_1) == 0x000024, "Member 'BP_MapWindow_Marker_C_SetSelected::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, Temp_struct_Variable_2) == 0x000028, "Member 'BP_MapWindow_Marker_C_SetSelected::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, Temp_struct_Variable_3) == 0x000030, "Member 'BP_MapWindow_Marker_C_SetSelected::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, Temp_bool_Variable_2) == 0x000038, "Member 'BP_MapWindow_Marker_C_SetSelected::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, Temp_float_Variable) == 0x00003C, "Member 'BP_MapWindow_Marker_C_SetSelected::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, Temp_float_Variable_1) == 0x000040, "Member 'BP_MapWindow_Marker_C_SetSelected::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, K2Node_Select_Default) == 0x000044, "Member 'BP_MapWindow_Marker_C_SetSelected::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, K2Node_MakeStruct_SlateColor) == 0x000058, "Member 'BP_MapWindow_Marker_C_SetSelected::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, K2Node_Select_Default_1) == 0x000080, "Member 'BP_MapWindow_Marker_C_SetSelected::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_Marker_C_SetSelected, K2Node_Select_Default_2) == 0x000088, "Member 'BP_MapWindow_Marker_C_SetSelected::K2Node_Select_Default_2' has a wrong offset!");

}

