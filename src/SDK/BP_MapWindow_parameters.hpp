#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapWindow

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_MapWindow.BP_MapWindow_C.ExecuteUbergraph_BP_MapWindow
// 0x0260 (0x0260 - 0x0000)
struct BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMapObjectUserWidget*>           CallFunc_GetMapObjectUserWidgets_ReturnValue;      // 0x0008(0x0010)(ReferenceParm, ContainsInstancedReference)
	float                                         Temp_float_Variable;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0048(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0058(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue_1;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x0070(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_3;                          // 0x0080(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue_2;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue_3;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapObjectUserWidget*                   CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MapObject_C*                        K2Node_DynamicCast_AsBP_Map_Object;                // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AnimDuration_1;                       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00D8(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_InMapName;                            // 0x0118(0x0018)(ConstParm)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPanEnabled;                          // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_InCurrentZoomValue;                   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InQuestText;                          // 0x0140(0x0018)(ConstParm)
	bool                                          CallFunc_TextIsEmpty_ReturnValue_1;                // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InrAngle;                             // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InRenderOpacity;                      // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MapLayerIndex;                        // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x016E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x016F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   K2Node_Event_InMarkerNumText;                      // 0x0170(0x0018)(ConstParm)
	int32                                         K2Node_Event_InCurrentMarkerNum;                   // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMaxMarkerNum;                       // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0194(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget_2;           // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x01B0(0x0028)()
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget_1;           // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget;             // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bMinTimeCancel;                       // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetFocusedWidget_ReturnValue;             // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetFocusedWidget_ReturnValue_1;           // 0x0208(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_SelectObject_ReturnValue;                 // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MapObject_C*                        K2Node_DynamicCast_AsBP_Map_Object_1;              // 0x0218(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_222[0x6];                                      // 0x0222(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetFocusedWidget_ReturnValue_2;           // 0x0228(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_SelectObject_ReturnValue_1;               // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MapObject_C*                        K2Node_DynamicCast_AsBP_Map_Object_2;              // 0x0238(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_SelectObject_ReturnValue_2;               // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MapObject_C*                        K2Node_DynamicCast_AsBP_Map_Object_3;              // 0x0250(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow) == 0x000008, "Wrong alignment on BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow");
static_assert(sizeof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow) == 0x000260, "Wrong size on BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, EntryPoint) == 0x000000, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_GetMapObjectUserWidgets_ReturnValue) == 0x000008, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_GetMapObjectUserWidgets_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_float_Variable) == 0x000018, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_float_Variable_1) == 0x000020, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_bool_Variable) == 0x000024, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_struct_Variable) == 0x000028, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_struct_Variable_1) == 0x000038, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_delegate_Variable) == 0x000048, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_delegate_Variable_1) == 0x000058, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_PostEvent_ReturnValue) == 0x000068, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_PostEvent_ReturnValue_1) == 0x00006C, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_PostEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_delegate_Variable_2) == 0x000070, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_delegate_Variable_3) == 0x000080, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_delegate_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_PostEvent_ReturnValue_2) == 0x000090, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_PostEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_PostEvent_ReturnValue_3) == 0x000094, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_PostEvent_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_int_Array_Index_Variable) == 0x000098, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_bool_Variable_1) == 0x00009C, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_DynamicCast_AsBP_Map_Object) == 0x0000A8, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_DynamicCast_AsBP_Map_Object' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_bool_IsClosed_Variable) == 0x0000B1, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_bool_Has_Been_Initd_Variable) == 0x0000B2, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_bool_IsClosed_Variable_1) == 0x0000B3, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_bool_Has_Been_Initd_Variable_1) == 0x0000B4, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_AnimDuration_1) == 0x0000B8, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_AnimDuration) == 0x0000BC, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x0000C0, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x0000C4, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_PlayAnimation_ReturnValue) == 0x0000C8, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_PlayAnimation_ReturnValue_1) == 0x0000D0, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_MyGeometry) == 0x0000D8, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InDeltaTime) == 0x000110, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InMapName) == 0x000118, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InMapName' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_TextIsEmpty_ReturnValue) == 0x000130, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_bPanEnabled) == 0x000131, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_bPanEnabled' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InCurrentZoomValue) == 0x000134, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InCurrentZoomValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_IsDesignTime) == 0x000138, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_GetFloatValue_ReturnValue) == 0x00013C, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InQuestText) == 0x000140, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InQuestText' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_TextIsEmpty_ReturnValue_1) == 0x000158, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_TextIsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Select_Default) == 0x00015C, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InrAngle) == 0x000160, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InrAngle' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InRenderOpacity) == 0x000164, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InRenderOpacity' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_MapLayerIndex) == 0x000168, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_MapLayerIndex' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00016C, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_Not_PreBool_ReturnValue) == 0x00016D, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00016E, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x00016F, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InMarkerNumText) == 0x000170, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InMarkerNumText' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InCurrentMarkerNum) == 0x000188, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InCurrentMarkerNum' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InMaxMarkerNum) == 0x00018C, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InMaxMarkerNum' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000190, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Select_Default_1) == 0x000194, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InteractButtonUserWidget_2) == 0x0001A8, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InteractButtonUserWidget_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_MakeStruct_SlateColor) == 0x0001B0, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InteractButtonUserWidget_1) == 0x0001D8, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InteractButtonUserWidget_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_InteractButtonUserWidget) == 0x0001E0, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_InteractButtonUserWidget' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_Event_bMinTimeCancel) == 0x0001E8, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_Event_bMinTimeCancel' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_GetFocusedWidget_ReturnValue) == 0x0001F0, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_GetFocusedWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, Temp_int_Loop_Counter_Variable) == 0x0001F8, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_Less_IntInt_ReturnValue) == 0x0001FC, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_Add_IntInt_ReturnValue) == 0x000200, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000204, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_GetFocusedWidget_ReturnValue_1) == 0x000208, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_GetFocusedWidget_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_SelectObject_ReturnValue) == 0x000210, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_SelectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_DynamicCast_AsBP_Map_Object_1) == 0x000218, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_DynamicCast_AsBP_Map_Object_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_DynamicCast_bSuccess_1) == 0x000220, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000221, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_GetFocusedWidget_ReturnValue_2) == 0x000228, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_GetFocusedWidget_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_SelectObject_ReturnValue_1) == 0x000230, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_SelectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_DynamicCast_AsBP_Map_Object_2) == 0x000238, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_DynamicCast_AsBP_Map_Object_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_DynamicCast_bSuccess_2) == 0x000240, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000241, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, CallFunc_SelectObject_ReturnValue_2) == 0x000248, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::CallFunc_SelectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_DynamicCast_AsBP_Map_Object_3) == 0x000250, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_DynamicCast_AsBP_Map_Object_3' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow, K2Node_DynamicCast_bSuccess_3) == 0x000258, "Member 'BP_MapWindow_C_ExecuteUbergraph_BP_MapWindow::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnHoldCanceled
// 0x0010 (0x0010 - 0x0000)
struct BP_MapWindow_C_OnHoldCanceled final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMinTimeCancel;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_OnHoldCanceled) == 0x000008, "Wrong alignment on BP_MapWindow_C_OnHoldCanceled");
static_assert(sizeof(BP_MapWindow_C_OnHoldCanceled) == 0x000010, "Wrong size on BP_MapWindow_C_OnHoldCanceled");
static_assert(offsetof(BP_MapWindow_C_OnHoldCanceled, InteractButtonUserWidget) == 0x000000, "Member 'BP_MapWindow_C_OnHoldCanceled::InteractButtonUserWidget' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_OnHoldCanceled, bMinTimeCancel) == 0x000008, "Member 'BP_MapWindow_C_OnHoldCanceled::bMinTimeCancel' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnHoldFinished
// 0x0008 (0x0008 - 0x0000)
struct BP_MapWindow_C_OnHoldFinished final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_OnHoldFinished) == 0x000008, "Wrong alignment on BP_MapWindow_C_OnHoldFinished");
static_assert(sizeof(BP_MapWindow_C_OnHoldFinished) == 0x000008, "Wrong size on BP_MapWindow_C_OnHoldFinished");
static_assert(offsetof(BP_MapWindow_C_OnHoldFinished, InteractButtonUserWidget) == 0x000000, "Member 'BP_MapWindow_C_OnHoldFinished::InteractButtonUserWidget' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnHoldStarted
// 0x0008 (0x0008 - 0x0000)
struct BP_MapWindow_C_OnHoldStarted final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_OnHoldStarted) == 0x000008, "Wrong alignment on BP_MapWindow_C_OnHoldStarted");
static_assert(sizeof(BP_MapWindow_C_OnHoldStarted) == 0x000008, "Wrong size on BP_MapWindow_C_OnHoldStarted");
static_assert(offsetof(BP_MapWindow_C_OnHoldStarted, InteractButtonUserWidget) == 0x000000, "Member 'BP_MapWindow_C_OnHoldStarted::InteractButtonUserWidget' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnSetMarkerNumText
// 0x0020 (0x0020 - 0x0000)
struct BP_MapWindow_C_OnSetMarkerNumText final
{
public:
	class FText                                   InMarkerNumText;                                   // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         InCurrentMarkerNum;                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxMarkerNum;                                    // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_OnSetMarkerNumText) == 0x000008, "Wrong alignment on BP_MapWindow_C_OnSetMarkerNumText");
static_assert(sizeof(BP_MapWindow_C_OnSetMarkerNumText) == 0x000020, "Wrong size on BP_MapWindow_C_OnSetMarkerNumText");
static_assert(offsetof(BP_MapWindow_C_OnSetMarkerNumText, InMarkerNumText) == 0x000000, "Member 'BP_MapWindow_C_OnSetMarkerNumText::InMarkerNumText' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_OnSetMarkerNumText, InCurrentMarkerNum) == 0x000018, "Member 'BP_MapWindow_C_OnSetMarkerNumText::InCurrentMarkerNum' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_OnSetMarkerNumText, InMaxMarkerNum) == 0x00001C, "Member 'BP_MapWindow_C_OnSetMarkerNumText::InMaxMarkerNum' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnToggleMapLayer
// 0x0004 (0x0004 - 0x0000)
struct BP_MapWindow_C_OnToggleMapLayer final
{
public:
	int32                                         MapLayerIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_OnToggleMapLayer) == 0x000004, "Wrong alignment on BP_MapWindow_C_OnToggleMapLayer");
static_assert(sizeof(BP_MapWindow_C_OnToggleMapLayer) == 0x000004, "Wrong size on BP_MapWindow_C_OnToggleMapLayer");
static_assert(offsetof(BP_MapWindow_C_OnToggleMapLayer, MapLayerIndex) == 0x000000, "Member 'BP_MapWindow_C_OnToggleMapLayer::MapLayerIndex' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnSetOffscreenQuestIndicator
// 0x0008 (0x0008 - 0x0000)
struct BP_MapWindow_C_OnSetOffscreenQuestIndicator final
{
public:
	float                                         InrAngle;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InRenderOpacity;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_OnSetOffscreenQuestIndicator) == 0x000004, "Wrong alignment on BP_MapWindow_C_OnSetOffscreenQuestIndicator");
static_assert(sizeof(BP_MapWindow_C_OnSetOffscreenQuestIndicator) == 0x000008, "Wrong size on BP_MapWindow_C_OnSetOffscreenQuestIndicator");
static_assert(offsetof(BP_MapWindow_C_OnSetOffscreenQuestIndicator, InrAngle) == 0x000000, "Member 'BP_MapWindow_C_OnSetOffscreenQuestIndicator::InrAngle' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_OnSetOffscreenQuestIndicator, InRenderOpacity) == 0x000004, "Member 'BP_MapWindow_C_OnSetOffscreenQuestIndicator::InRenderOpacity' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnSetQuestText
// 0x0018 (0x0018 - 0x0000)
struct BP_MapWindow_C_OnSetQuestText final
{
public:
	class FText                                   InQuestText;                                       // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_MapWindow_C_OnSetQuestText) == 0x000008, "Wrong alignment on BP_MapWindow_C_OnSetQuestText");
static_assert(sizeof(BP_MapWindow_C_OnSetQuestText) == 0x000018, "Wrong size on BP_MapWindow_C_OnSetQuestText");
static_assert(offsetof(BP_MapWindow_C_OnSetQuestText, InQuestText) == 0x000000, "Member 'BP_MapWindow_C_OnSetQuestText::InQuestText' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_MapWindow_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_PreConstruct) == 0x000001, "Wrong alignment on BP_MapWindow_C_PreConstruct");
static_assert(sizeof(BP_MapWindow_C_PreConstruct) == 0x000001, "Wrong size on BP_MapWindow_C_PreConstruct");
static_assert(offsetof(BP_MapWindow_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_MapWindow_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnChangeMapSegmentsScale
// 0x0004 (0x0004 - 0x0000)
struct BP_MapWindow_C_OnChangeMapSegmentsScale final
{
public:
	float                                         InCurrentZoomValue;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_OnChangeMapSegmentsScale) == 0x000004, "Wrong alignment on BP_MapWindow_C_OnChangeMapSegmentsScale");
static_assert(sizeof(BP_MapWindow_C_OnChangeMapSegmentsScale) == 0x000004, "Wrong size on BP_MapWindow_C_OnChangeMapSegmentsScale");
static_assert(offsetof(BP_MapWindow_C_OnChangeMapSegmentsScale, InCurrentZoomValue) == 0x000000, "Member 'BP_MapWindow_C_OnChangeMapSegmentsScale::InCurrentZoomValue' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnPanEnabled
// 0x0001 (0x0001 - 0x0000)
struct BP_MapWindow_C_OnPanEnabled final
{
public:
	bool                                          bPanEnabled;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_OnPanEnabled) == 0x000001, "Wrong alignment on BP_MapWindow_C_OnPanEnabled");
static_assert(sizeof(BP_MapWindow_C_OnPanEnabled) == 0x000001, "Wrong size on BP_MapWindow_C_OnPanEnabled");
static_assert(offsetof(BP_MapWindow_C_OnPanEnabled, bPanEnabled) == 0x000000, "Member 'BP_MapWindow_C_OnPanEnabled::bPanEnabled' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnSetMapName
// 0x0018 (0x0018 - 0x0000)
struct BP_MapWindow_C_OnSetMapName final
{
public:
	class FText                                   InMapName;                                         // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_MapWindow_C_OnSetMapName) == 0x000008, "Wrong alignment on BP_MapWindow_C_OnSetMapName");
static_assert(sizeof(BP_MapWindow_C_OnSetMapName) == 0x000018, "Wrong size on BP_MapWindow_C_OnSetMapName");
static_assert(offsetof(BP_MapWindow_C_OnSetMapName, InMapName) == 0x000000, "Member 'BP_MapWindow_C_OnSetMapName::InMapName' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_MapWindow_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_Tick) == 0x000004, "Wrong alignment on BP_MapWindow_C_Tick");
static_assert(sizeof(BP_MapWindow_C_Tick) == 0x00003C, "Wrong size on BP_MapWindow_C_Tick");
static_assert(offsetof(BP_MapWindow_C_Tick, MyGeometry) == 0x000000, "Member 'BP_MapWindow_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_MapWindow_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_MapWindow_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_OnHide) == 0x000004, "Wrong alignment on BP_MapWindow_C_OnHide");
static_assert(sizeof(BP_MapWindow_C_OnHide) == 0x000004, "Wrong size on BP_MapWindow_C_OnHide");
static_assert(offsetof(BP_MapWindow_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_MapWindow_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_MapWindow_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_OnShow) == 0x000004, "Wrong alignment on BP_MapWindow_C_OnShow");
static_assert(sizeof(BP_MapWindow_C_OnShow) == 0x000004, "Wrong size on BP_MapWindow_C_OnShow");
static_assert(offsetof(BP_MapWindow_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_MapWindow_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.BtnHotkeyBClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_MapWindow_C_BtnHotkeyBClicked final
{
public:
	bool                                          OpenPauseMenu;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_BtnHotkeyBClicked) == 0x000001, "Wrong alignment on BP_MapWindow_C_BtnHotkeyBClicked");
static_assert(sizeof(BP_MapWindow_C_BtnHotkeyBClicked) == 0x000001, "Wrong size on BP_MapWindow_C_BtnHotkeyBClicked");
static_assert(offsetof(BP_MapWindow_C_BtnHotkeyBClicked, OpenPauseMenu) == 0x000000, "Member 'BP_MapWindow_C_BtnHotkeyBClicked::OpenPauseMenu' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.BtnHotkeyXClicked
// 0x0028 (0x0028 - 0x0000)
struct BP_MapWindow_C_BtnHotkeyXClicked final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentMapLayerIndex_ReturnValue;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_BtnHotkeyXClicked) == 0x000008, "Wrong alignment on BP_MapWindow_C_BtnHotkeyXClicked");
static_assert(sizeof(BP_MapWindow_C_BtnHotkeyXClicked) == 0x000028, "Wrong size on BP_MapWindow_C_BtnHotkeyXClicked");
static_assert(offsetof(BP_MapWindow_C_BtnHotkeyXClicked, Temp_bool_Variable) == 0x000000, "Member 'BP_MapWindow_C_BtnHotkeyXClicked::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_BtnHotkeyXClicked, Temp_object_Variable) == 0x000008, "Member 'BP_MapWindow_C_BtnHotkeyXClicked::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_BtnHotkeyXClicked, Temp_object_Variable_1) == 0x000010, "Member 'BP_MapWindow_C_BtnHotkeyXClicked::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_BtnHotkeyXClicked, CallFunc_GetCurrentMapLayerIndex_ReturnValue) == 0x000018, "Member 'BP_MapWindow_C_BtnHotkeyXClicked::CallFunc_GetCurrentMapLayerIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_BtnHotkeyXClicked, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BP_MapWindow_C_BtnHotkeyXClicked::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_BtnHotkeyXClicked, K2Node_Select_Default) == 0x000020, "Member 'BP_MapWindow_C_BtnHotkeyXClicked::K2Node_Select_Default' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.ToggleLegend
// 0x0040 (0x0040 - 0x0000)
struct BP_MapWindow_C_ToggleLegend final
{
public:
	bool                                          InShowLegend;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0014(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue_1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_ToggleLegend) == 0x000008, "Wrong alignment on BP_MapWindow_C_ToggleLegend");
static_assert(sizeof(BP_MapWindow_C_ToggleLegend) == 0x000040, "Wrong size on BP_MapWindow_C_ToggleLegend");
static_assert(offsetof(BP_MapWindow_C_ToggleLegend, InShowLegend) == 0x000000, "Member 'BP_MapWindow_C_ToggleLegend::InShowLegend' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleLegend, Temp_delegate_Variable) == 0x000004, "Member 'BP_MapWindow_C_ToggleLegend::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleLegend, Temp_delegate_Variable_1) == 0x000014, "Member 'BP_MapWindow_C_ToggleLegend::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleLegend, CallFunc_PostEvent_ReturnValue) == 0x000024, "Member 'BP_MapWindow_C_ToggleLegend::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleLegend, CallFunc_PostEvent_ReturnValue_1) == 0x000028, "Member 'BP_MapWindow_C_ToggleLegend::CallFunc_PostEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleLegend, Temp_bool_Variable) == 0x00002C, "Member 'BP_MapWindow_C_ToggleLegend::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleLegend, Temp_byte_Variable) == 0x00002D, "Member 'BP_MapWindow_C_ToggleLegend::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleLegend, Temp_byte_Variable_1) == 0x00002E, "Member 'BP_MapWindow_C_ToggleLegend::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleLegend, K2Node_Select_Default) == 0x00002F, "Member 'BP_MapWindow_C_ToggleLegend::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleLegend, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'BP_MapWindow_C_ToggleLegend::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleLegend, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000038, "Member 'BP_MapWindow_C_ToggleLegend::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.SetBtnHotkeyLSState
// 0x0001 (0x0001 - 0x0000)
struct BP_MapWindow_C_SetBtnHotkeyLSState final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_SetBtnHotkeyLSState) == 0x000001, "Wrong alignment on BP_MapWindow_C_SetBtnHotkeyLSState");
static_assert(sizeof(BP_MapWindow_C_SetBtnHotkeyLSState) == 0x000001, "Wrong size on BP_MapWindow_C_SetBtnHotkeyLSState");
static_assert(offsetof(BP_MapWindow_C_SetBtnHotkeyLSState, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_MapWindow_C_SetBtnHotkeyLSState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.BtnHotkeyLS_PressClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_MapWindow_C_BtnHotkeyLS_PressClicked final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_BtnHotkeyLS_PressClicked) == 0x000001, "Wrong alignment on BP_MapWindow_C_BtnHotkeyLS_PressClicked");
static_assert(sizeof(BP_MapWindow_C_BtnHotkeyLS_PressClicked) == 0x000001, "Wrong size on BP_MapWindow_C_BtnHotkeyLS_PressClicked");
static_assert(offsetof(BP_MapWindow_C_BtnHotkeyLS_PressClicked, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_MapWindow_C_BtnHotkeyLS_PressClicked::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.SetOffscreenQuestIndicator
// 0x0040 (0x0040 - 0x0000)
struct BP_MapWindow_C_SetOffscreenQuestIndicator final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InRenderOpacity;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Y;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         X;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Width;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Diagonal;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWidgetEdgePoint_X;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWidgetEdgePoint_Y;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_SetOffscreenQuestIndicator) == 0x000008, "Wrong alignment on BP_MapWindow_C_SetOffscreenQuestIndicator");
static_assert(sizeof(BP_MapWindow_C_SetOffscreenQuestIndicator) == 0x000040, "Wrong size on BP_MapWindow_C_SetOffscreenQuestIndicator");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, InAngle) == 0x000000, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::InAngle' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, InRenderOpacity) == 0x000004, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::InRenderOpacity' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, Y) == 0x000008, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::Y' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, X) == 0x00000C, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::X' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, Height) == 0x000010, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::Height' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, Width) == 0x000014, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::Width' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, Diagonal) == 0x000018, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::Diagonal' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000020, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000028, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, CallFunc_GetWidgetEdgePoint_X) == 0x000030, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::CallFunc_GetWidgetEdgePoint_X' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, CallFunc_GetWidgetEdgePoint_Y) == 0x000034, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::CallFunc_GetWidgetEdgePoint_Y' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_SetOffscreenQuestIndicator, CallFunc_MakeVector2D_ReturnValue) == 0x000038, "Member 'BP_MapWindow_C_SetOffscreenQuestIndicator::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.GetWidgetEdgePoint
// 0x008C (0x008C - 0x0000)
struct BP_MapWindow_C_GetWidgetEdgePoint final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         X;                                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Y;                                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleDeg;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempY;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempX;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TanAngle;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleRad;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeight;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfWidth;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegreesToRadians_ReturnValue;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Tan_ReturnValue;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_GetWidgetEdgePoint) == 0x000004, "Wrong alignment on BP_MapWindow_C_GetWidgetEdgePoint");
static_assert(sizeof(BP_MapWindow_C_GetWidgetEdgePoint) == 0x00008C, "Wrong size on BP_MapWindow_C_GetWidgetEdgePoint");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, Width) == 0x000000, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::Width' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, Height) == 0x000004, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::Height' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, Angle) == 0x000008, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::Angle' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, X) == 0x00000C, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::X' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, Y) == 0x000010, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::Y' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, AngleDeg) == 0x000014, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::AngleDeg' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, TempY) == 0x000018, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::TempY' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, TempX) == 0x00001C, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::TempX' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, TanAngle) == 0x000020, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::TanAngle' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, AngleRad) == 0x000024, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::AngleRad' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, HalfHeight) == 0x000028, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::HalfHeight' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, HalfWidth) == 0x00002C, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::HalfWidth' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, Temp_bool_Variable) == 0x000030, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Abs_ReturnValue) == 0x00003C, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Less_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000048, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, K2Node_Select_Default) == 0x00004C, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_DegreesToRadians_ReturnValue) == 0x000050, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_DegreesToRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Tan_ReturnValue) == 0x000054, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Tan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000059, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00005A, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00005B, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_BooleanOR_ReturnValue) == 0x00005C, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_BooleanAND_ReturnValue) == 0x00005D, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000060, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x000068, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000070, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000074, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000078, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x00007C, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x000080, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_Abs_ReturnValue_1) == 0x000084, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_GetWidgetEdgePoint, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000088, "Member 'BP_MapWindow_C_GetWidgetEdgePoint::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.BtnHotkeyRTClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_MapWindow_C_BtnHotkeyRTClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_BtnHotkeyRTClicked) == 0x000001, "Wrong alignment on BP_MapWindow_C_BtnHotkeyRTClicked");
static_assert(sizeof(BP_MapWindow_C_BtnHotkeyRTClicked) == 0x000001, "Wrong size on BP_MapWindow_C_BtnHotkeyRTClicked");
static_assert(offsetof(BP_MapWindow_C_BtnHotkeyRTClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_MapWindow_C_BtnHotkeyRTClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.ToggleMarkers
// 0x0018 (0x0018 - 0x0000)
struct BP_MapWindow_C_ToggleMarkers final
{
public:
	bool                                          InShowMarkers;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_ToggleMarkers) == 0x000008, "Wrong alignment on BP_MapWindow_C_ToggleMarkers");
static_assert(sizeof(BP_MapWindow_C_ToggleMarkers) == 0x000018, "Wrong size on BP_MapWindow_C_ToggleMarkers");
static_assert(offsetof(BP_MapWindow_C_ToggleMarkers, InShowMarkers) == 0x000000, "Member 'BP_MapWindow_C_ToggleMarkers::InShowMarkers' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleMarkers, Temp_bool_Variable) == 0x000001, "Member 'BP_MapWindow_C_ToggleMarkers::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleMarkers, Temp_byte_Variable) == 0x000002, "Member 'BP_MapWindow_C_ToggleMarkers::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleMarkers, Temp_byte_Variable_1) == 0x000003, "Member 'BP_MapWindow_C_ToggleMarkers::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleMarkers, K2Node_Select_Default) == 0x000004, "Member 'BP_MapWindow_C_ToggleMarkers::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleMarkers, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_MapWindow_C_ToggleMarkers::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_ToggleMarkers, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000010, "Member 'BP_MapWindow_C_ToggleMarkers::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.BtnHotkeyLTClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_MapWindow_C_BtnHotkeyLTClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapWindow_C_BtnHotkeyLTClicked) == 0x000001, "Wrong alignment on BP_MapWindow_C_BtnHotkeyLTClicked");
static_assert(sizeof(BP_MapWindow_C_BtnHotkeyLTClicked) == 0x000001, "Wrong size on BP_MapWindow_C_BtnHotkeyLTClicked");
static_assert(offsetof(BP_MapWindow_C_BtnHotkeyLTClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_MapWindow_C_BtnHotkeyLTClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_MapWindow.BP_MapWindow_C.InvalidMarkerPlace
// 0x0010 (0x0010 - 0x0000)
struct BP_MapWindow_C_InvalidMarkerPlace final
{
public:
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapWindow_C_InvalidMarkerPlace) == 0x000008, "Wrong alignment on BP_MapWindow_C_InvalidMarkerPlace");
static_assert(sizeof(BP_MapWindow_C_InvalidMarkerPlace) == 0x000010, "Wrong size on BP_MapWindow_C_InvalidMarkerPlace");
static_assert(offsetof(BP_MapWindow_C_InvalidMarkerPlace, CallFunc_GetOwningPlayer_ReturnValue) == 0x000000, "Member 'BP_MapWindow_C_InvalidMarkerPlace::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapWindow_C_InvalidMarkerPlace, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_MapWindow_C_InvalidMarkerPlace::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

