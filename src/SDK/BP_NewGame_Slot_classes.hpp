#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NewGame_Slot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_NewGame_Slot.BP_NewGame_Slot_C
// 0x00E0 (0x0368 - 0x0288)
class UBP_NewGame_Slot_C final : public ULoadGameSlotUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       HighlightAnim;                                     // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Bg;                                                // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Bg_Highlight;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                ButtonFrame;                                       // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         Data;                                              // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             EmptySlotCaption;                                  // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LastPlayed;                                        // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LastPlayedLabel;                                   // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LevelAndClass;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Location;                                          // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LocationLabel;                                     // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Name_0;                                            // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TimeSpent;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TimeSpentLabel;                                    // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             VersionMismatchLabel;                              // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         Warning;                                           // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnHovered;                                         // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnUnhovered;                                       // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnReleased;                                        // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnPressed;                                         // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnUnfocus;                                         // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsSmallScreen;                                     // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ToggleSmallScreen(bool InIsSmallScreen);
	void ToggleEmpty();
	void SetSlot(const class FText& InName, const class FText& InLevelAndClass, const class FText& InLocation, const class FText& InTimeSpent, const class FText& InLastPlayed, bool InInCompatible, bool InIsCanLoad);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void BndEvt__ButtonFrame_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__ButtonFrame_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void OnSetSlot(const class FText& Param_Name_0, const class FText& LevelAndClass_0, const class FText& Location_0, const class FText& TimeSpent_0, const class FText& LastPlayed_0, bool InCompatible);
	void OnFocused(bool bAnimate);
	void OnUnfocused(bool bAnimate);
	void BndEvt__BP_NewGame_Slot_ButtonFrame_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();
	void ExecuteUbergraph_BP_NewGame_Slot(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NewGame_Slot_C">();
	}
	static class UBP_NewGame_Slot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_NewGame_Slot_C>();
	}
};
static_assert(alignof(UBP_NewGame_Slot_C) == 0x000008, "Wrong alignment on UBP_NewGame_Slot_C");
static_assert(sizeof(UBP_NewGame_Slot_C) == 0x000368, "Wrong size on UBP_NewGame_Slot_C");
static_assert(offsetof(UBP_NewGame_Slot_C, UberGraphFrame) == 0x000288, "Member 'UBP_NewGame_Slot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, HighlightAnim) == 0x000290, "Member 'UBP_NewGame_Slot_C::HighlightAnim' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, Bg) == 0x000298, "Member 'UBP_NewGame_Slot_C::Bg' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, Bg_Highlight) == 0x0002A0, "Member 'UBP_NewGame_Slot_C::Bg_Highlight' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, ButtonFrame) == 0x0002A8, "Member 'UBP_NewGame_Slot_C::ButtonFrame' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, Data) == 0x0002B0, "Member 'UBP_NewGame_Slot_C::Data' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, EmptySlotCaption) == 0x0002B8, "Member 'UBP_NewGame_Slot_C::EmptySlotCaption' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, LastPlayed) == 0x0002C0, "Member 'UBP_NewGame_Slot_C::LastPlayed' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, LastPlayedLabel) == 0x0002C8, "Member 'UBP_NewGame_Slot_C::LastPlayedLabel' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, LevelAndClass) == 0x0002D0, "Member 'UBP_NewGame_Slot_C::LevelAndClass' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, Location) == 0x0002D8, "Member 'UBP_NewGame_Slot_C::Location' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, LocationLabel) == 0x0002E0, "Member 'UBP_NewGame_Slot_C::LocationLabel' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, Name_0) == 0x0002E8, "Member 'UBP_NewGame_Slot_C::Name_0' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, TimeSpent) == 0x0002F0, "Member 'UBP_NewGame_Slot_C::TimeSpent' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, TimeSpentLabel) == 0x0002F8, "Member 'UBP_NewGame_Slot_C::TimeSpentLabel' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, VersionMismatchLabel) == 0x000300, "Member 'UBP_NewGame_Slot_C::VersionMismatchLabel' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, Warning) == 0x000308, "Member 'UBP_NewGame_Slot_C::Warning' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, OnHovered) == 0x000310, "Member 'UBP_NewGame_Slot_C::OnHovered' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, OnUnhovered) == 0x000320, "Member 'UBP_NewGame_Slot_C::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, OnReleased) == 0x000330, "Member 'UBP_NewGame_Slot_C::OnReleased' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, OnPressed) == 0x000340, "Member 'UBP_NewGame_Slot_C::OnPressed' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, OnUnfocus) == 0x000350, "Member 'UBP_NewGame_Slot_C::OnUnfocus' has a wrong offset!");
static_assert(offsetof(UBP_NewGame_Slot_C, IsSmallScreen) == 0x000360, "Member 'UBP_NewGame_Slot_C::IsSmallScreen' has a wrong offset!");

}

