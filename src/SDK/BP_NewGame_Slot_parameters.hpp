#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NewGame_Slot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_NewGame_Slot.BP_NewGame_Slot_C.ToggleSmallScreen
// 0x0138 (0x0138 - 0x0000)
struct BP_NewGame_Slot_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_4;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0028(0x0058)(HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_2;                           // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_1;                 // 0x0088(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_2;                 // 0x00E0(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_NewGame_Slot_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_NewGame_Slot_C_ToggleSmallScreen");
static_assert(sizeof(BP_NewGame_Slot_C_ToggleSmallScreen) == 0x000138, "Wrong size on BP_NewGame_Slot_C_ToggleSmallScreen");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, Temp_int_Variable) == 0x000004, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, Temp_int_Variable_1) == 0x000008, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, Temp_int_Variable_2) == 0x000010, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, Temp_int_Variable_3) == 0x000014, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, Temp_bool_Variable_2) == 0x000018, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, Temp_int_Variable_4) == 0x00001C, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, Temp_int_Variable_5) == 0x000020, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, K2Node_Select_Default) == 0x000024, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo) == 0x000028, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x000080, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, K2Node_Select_Default_2) == 0x000084, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_1) == 0x000088, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_2) == 0x0000E0, "Member 'BP_NewGame_Slot_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_2' has a wrong offset!");

// Function BP_NewGame_Slot.BP_NewGame_Slot_C.ToggleEmpty
// 0x0058 (0x0058 - 0x0000)
struct BP_NewGame_Slot_C_ToggleEmpty final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSlot_ReturnValue;                  // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSlot_ReturnValue_1;                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSlot_ReturnValue_2;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSlot_ReturnValue_3;                // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewGame_Slot_C_ToggleEmpty) == 0x000008, "Wrong alignment on BP_NewGame_Slot_C_ToggleEmpty");
static_assert(sizeof(BP_NewGame_Slot_C_ToggleEmpty) == 0x000058, "Wrong size on BP_NewGame_Slot_C_ToggleEmpty");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_bool_Variable) == 0x000000, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_object_Variable) == 0x000008, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_object_Variable_1) == 0x000010, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_bool_Variable_1) == 0x000018, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_byte_Variable) == 0x000019, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_byte_Variable_1) == 0x00001A, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_bool_Variable_2) == 0x00001B, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_object_Variable_2) == 0x000020, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_object_Variable_3) == 0x000028, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_bool_Variable_3) == 0x000030, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_byte_Variable_2) == 0x000031, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, Temp_byte_Variable_3) == 0x000032, "Member 'BP_NewGame_Slot_C_ToggleEmpty::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, CallFunc_IsValidSlot_ReturnValue) == 0x000033, "Member 'BP_NewGame_Slot_C_ToggleEmpty::CallFunc_IsValidSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, CallFunc_IsValidSlot_ReturnValue_1) == 0x000034, "Member 'BP_NewGame_Slot_C_ToggleEmpty::CallFunc_IsValidSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, K2Node_Select_Default) == 0x000038, "Member 'BP_NewGame_Slot_C_ToggleEmpty::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, K2Node_Select_Default_1) == 0x000040, "Member 'BP_NewGame_Slot_C_ToggleEmpty::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, CallFunc_IsValidSlot_ReturnValue_2) == 0x000041, "Member 'BP_NewGame_Slot_C_ToggleEmpty::CallFunc_IsValidSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, CallFunc_IsValidSlot_ReturnValue_3) == 0x000042, "Member 'BP_NewGame_Slot_C_ToggleEmpty::CallFunc_IsValidSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, K2Node_Select_Default_2) == 0x000048, "Member 'BP_NewGame_Slot_C_ToggleEmpty::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ToggleEmpty, K2Node_Select_Default_3) == 0x000050, "Member 'BP_NewGame_Slot_C_ToggleEmpty::K2Node_Select_Default_3' has a wrong offset!");

// Function BP_NewGame_Slot.BP_NewGame_Slot_C.SetSlot
// 0x0210 (0x0210 - 0x0000)
struct BP_NewGame_Slot_C_SetSlot final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InLevelAndClass;                                   // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InLocation;                                        // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InTimeSpent;                                       // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InLastPlayed;                                      // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          InInCompatible;                                    // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InIsCanLoad;                                       // 0x0079(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemAbility*                           ItemAbility;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x00BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x00CC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0104(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13B[0x5];                                      // 0x013B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0160(0x0028)()
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0198(0x0028)()
	struct FLinearColor                           K2Node_Select_Default_4;                           // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_5;                           // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x01E0(0x0028)()
	ESlateVisibility                              K2Node_Select_Default_6;                           // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewGame_Slot_C_SetSlot) == 0x000008, "Wrong alignment on BP_NewGame_Slot_C_SetSlot");
static_assert(sizeof(BP_NewGame_Slot_C_SetSlot) == 0x000210, "Wrong size on BP_NewGame_Slot_C_SetSlot");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, InName) == 0x000000, "Member 'BP_NewGame_Slot_C_SetSlot::InName' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, InLevelAndClass) == 0x000018, "Member 'BP_NewGame_Slot_C_SetSlot::InLevelAndClass' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, InLocation) == 0x000030, "Member 'BP_NewGame_Slot_C_SetSlot::InLocation' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, InTimeSpent) == 0x000048, "Member 'BP_NewGame_Slot_C_SetSlot::InTimeSpent' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, InLastPlayed) == 0x000060, "Member 'BP_NewGame_Slot_C_SetSlot::InLastPlayed' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, InInCompatible) == 0x000078, "Member 'BP_NewGame_Slot_C_SetSlot::InInCompatible' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, InIsCanLoad) == 0x000079, "Member 'BP_NewGame_Slot_C_SetSlot::InIsCanLoad' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, ItemAbility) == 0x000080, "Member 'BP_NewGame_Slot_C_SetSlot::ItemAbility' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_bool_Variable) == 0x000088, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_object_Variable) == 0x000090, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_object_Variable_1) == 0x000098, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_bool_Variable_1) == 0x0000A0, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_object_Variable_2) == 0x0000A8, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_object_Variable_3) == 0x0000B0, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_bool_Variable_2) == 0x0000B8, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_struct_Variable) == 0x0000BC, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_struct_Variable_1) == 0x0000CC, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_bool_Variable_3) == 0x0000DC, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_struct_Variable_2) == 0x0000E0, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_struct_Variable_3) == 0x0000F0, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_bool_Variable_4) == 0x000100, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_struct_Variable_4) == 0x000104, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_bool_Variable_5) == 0x000114, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_struct_Variable_5) == 0x000118, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_struct_Variable_6) == 0x000128, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_bool_Variable_6) == 0x000138, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_byte_Variable) == 0x000139, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, Temp_byte_Variable_1) == 0x00013A, "Member 'BP_NewGame_Slot_C_SetSlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, K2Node_Select_Default) == 0x000140, "Member 'BP_NewGame_Slot_C_SetSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, K2Node_Select_Default_1) == 0x000148, "Member 'BP_NewGame_Slot_C_SetSlot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, K2Node_Select_Default_2) == 0x000150, "Member 'BP_NewGame_Slot_C_SetSlot::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, K2Node_MakeStruct_SlateColor) == 0x000160, "Member 'BP_NewGame_Slot_C_SetSlot::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, K2Node_Select_Default_3) == 0x000188, "Member 'BP_NewGame_Slot_C_SetSlot::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, K2Node_MakeStruct_SlateColor_1) == 0x000198, "Member 'BP_NewGame_Slot_C_SetSlot::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, K2Node_Select_Default_4) == 0x0001C0, "Member 'BP_NewGame_Slot_C_SetSlot::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, K2Node_Select_Default_5) == 0x0001D0, "Member 'BP_NewGame_Slot_C_SetSlot::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, K2Node_MakeStruct_SlateColor_2) == 0x0001E0, "Member 'BP_NewGame_Slot_C_SetSlot::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_SetSlot, K2Node_Select_Default_6) == 0x000208, "Member 'BP_NewGame_Slot_C_SetSlot::K2Node_Select_Default_6' has a wrong offset!");

// Function BP_NewGame_Slot.BP_NewGame_Slot_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_NewGame_Slot_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewGame_Slot_C_Tick) == 0x000004, "Wrong alignment on BP_NewGame_Slot_C_Tick");
static_assert(sizeof(BP_NewGame_Slot_C_Tick) == 0x00003C, "Wrong size on BP_NewGame_Slot_C_Tick");
static_assert(offsetof(BP_NewGame_Slot_C_Tick, MyGeometry) == 0x000000, "Member 'BP_NewGame_Slot_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_NewGame_Slot_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_NewGame_Slot.BP_NewGame_Slot_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct BP_NewGame_Slot_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_NewGame_Slot_C_OnMouseEnter) == 0x000008, "Wrong alignment on BP_NewGame_Slot_C_OnMouseEnter");
static_assert(sizeof(BP_NewGame_Slot_C_OnMouseEnter) == 0x0000A8, "Wrong size on BP_NewGame_Slot_C_OnMouseEnter");
static_assert(offsetof(BP_NewGame_Slot_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'BP_NewGame_Slot_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'BP_NewGame_Slot_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function BP_NewGame_Slot.BP_NewGame_Slot_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct BP_NewGame_Slot_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_NewGame_Slot_C_OnMouseLeave) == 0x000008, "Wrong alignment on BP_NewGame_Slot_C_OnMouseLeave");
static_assert(sizeof(BP_NewGame_Slot_C_OnMouseLeave) == 0x000070, "Wrong size on BP_NewGame_Slot_C_OnMouseLeave");
static_assert(offsetof(BP_NewGame_Slot_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'BP_NewGame_Slot_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function BP_NewGame_Slot.BP_NewGame_Slot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_NewGame_Slot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NewGame_Slot_C_PreConstruct) == 0x000001, "Wrong alignment on BP_NewGame_Slot_C_PreConstruct");
static_assert(sizeof(BP_NewGame_Slot_C_PreConstruct) == 0x000001, "Wrong size on BP_NewGame_Slot_C_PreConstruct");
static_assert(offsetof(BP_NewGame_Slot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_NewGame_Slot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_NewGame_Slot.BP_NewGame_Slot_C.OnSetSlot
// 0x0080 (0x0080 - 0x0000)
struct BP_NewGame_Slot_C_OnSetSlot final
{
public:
	class FText                                   Param_Name_0;                                      // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   LevelAndClass_0;                                   // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   Location_0;                                        // 0x0030(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   TimeSpent_0;                                       // 0x0048(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   LastPlayed_0;                                      // 0x0060(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          InCompatible;                                      // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NewGame_Slot_C_OnSetSlot) == 0x000008, "Wrong alignment on BP_NewGame_Slot_C_OnSetSlot");
static_assert(sizeof(BP_NewGame_Slot_C_OnSetSlot) == 0x000080, "Wrong size on BP_NewGame_Slot_C_OnSetSlot");
static_assert(offsetof(BP_NewGame_Slot_C_OnSetSlot, Param_Name_0) == 0x000000, "Member 'BP_NewGame_Slot_C_OnSetSlot::Param_Name_0' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_OnSetSlot, LevelAndClass_0) == 0x000018, "Member 'BP_NewGame_Slot_C_OnSetSlot::LevelAndClass_0' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_OnSetSlot, Location_0) == 0x000030, "Member 'BP_NewGame_Slot_C_OnSetSlot::Location_0' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_OnSetSlot, TimeSpent_0) == 0x000048, "Member 'BP_NewGame_Slot_C_OnSetSlot::TimeSpent_0' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_OnSetSlot, LastPlayed_0) == 0x000060, "Member 'BP_NewGame_Slot_C_OnSetSlot::LastPlayed_0' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_OnSetSlot, InCompatible) == 0x000078, "Member 'BP_NewGame_Slot_C_OnSetSlot::InCompatible' has a wrong offset!");

// Function BP_NewGame_Slot.BP_NewGame_Slot_C.OnFocused
// 0x0001 (0x0001 - 0x0000)
struct BP_NewGame_Slot_C_OnFocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NewGame_Slot_C_OnFocused) == 0x000001, "Wrong alignment on BP_NewGame_Slot_C_OnFocused");
static_assert(sizeof(BP_NewGame_Slot_C_OnFocused) == 0x000001, "Wrong size on BP_NewGame_Slot_C_OnFocused");
static_assert(offsetof(BP_NewGame_Slot_C_OnFocused, bAnimate) == 0x000000, "Member 'BP_NewGame_Slot_C_OnFocused::bAnimate' has a wrong offset!");

// Function BP_NewGame_Slot.BP_NewGame_Slot_C.OnUnfocused
// 0x0001 (0x0001 - 0x0000)
struct BP_NewGame_Slot_C_OnUnfocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NewGame_Slot_C_OnUnfocused) == 0x000001, "Wrong alignment on BP_NewGame_Slot_C_OnUnfocused");
static_assert(sizeof(BP_NewGame_Slot_C_OnUnfocused) == 0x000001, "Wrong size on BP_NewGame_Slot_C_OnUnfocused");
static_assert(offsetof(BP_NewGame_Slot_C_OnUnfocused, bAnimate) == 0x000000, "Member 'BP_NewGame_Slot_C_OnUnfocused::bAnimate' has a wrong offset!");

// Function BP_NewGame_Slot.BP_NewGame_Slot_C.ExecuteUbergraph_BP_NewGame_Slot
// 0x0210 (0x0210 - 0x0000)
struct BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry_1;                         // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0040(0x0038)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0078(0x0070)(ConstParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x00F0(0x0070)(ConstParm)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlayingForward_ReturnValue;    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_173[0x5];                                      // 0x0173(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Name;                                 // 0x0178(0x0018)(ConstParm)
	class FText                                   K2Node_Event_LevelAndClass;                        // 0x0190(0x0018)(ConstParm)
	class FText                                   K2Node_Event_Location;                             // 0x01A8(0x0018)(ConstParm)
	class FText                                   K2Node_Event_TimeSpent;                            // 0x01C0(0x0018)(ConstParm)
	class FText                                   K2Node_Event_LastPlayed;                           // 0x01D8(0x0018)(ConstParm)
	bool                                          K2Node_Event_InCompatible;                         // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCanLoad_ReturnValue;                    // 0x01F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManUserWidgetBase*                     CallFunc_GetTopMostManUserWidget_ReturnValue;      // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_NewGame_C*                          K2Node_DynamicCast_AsBP_New_Game;                  // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot) == 0x000008, "Wrong alignment on BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot");
static_assert(sizeof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot) == 0x000210, "Wrong size on BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, EntryPoint) == 0x000000, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_MyGeometry_1) == 0x000004, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_MyGeometry_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_MyGeometry) == 0x000040, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_MouseEvent_1) == 0x000078, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, CallFunc_PlayAnimation_ReturnValue) == 0x0000E8, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_MouseEvent) == 0x0000F0, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_IsDesignTime) == 0x000160, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000164, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, CallFunc_PlayAnimation_ReturnValue_1) == 0x000168, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, CallFunc_IsAnimationPlayingForward_ReturnValue) == 0x000170, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::CallFunc_IsAnimationPlayingForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000171, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, CallFunc_BooleanAND_ReturnValue) == 0x000172, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_Name) == 0x000178, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_LevelAndClass) == 0x000190, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_LevelAndClass' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_Location) == 0x0001A8, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_Location' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_TimeSpent) == 0x0001C0, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_TimeSpent' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_LastPlayed) == 0x0001D8, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_LastPlayed' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_InCompatible) == 0x0001F0, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_InCompatible' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_bAnimate_1) == 0x0001F1, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_Event_bAnimate) == 0x0001F2, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, CallFunc_IsCanLoad_ReturnValue) == 0x0001F3, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::CallFunc_IsCanLoad_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, CallFunc_GetTopMostManUserWidget_ReturnValue) == 0x0001F8, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::CallFunc_GetTopMostManUserWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_DynamicCast_AsBP_New_Game) == 0x000200, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_DynamicCast_AsBP_New_Game' has a wrong offset!");
static_assert(offsetof(BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot, K2Node_DynamicCast_bSuccess) == 0x000208, "Member 'BP_NewGame_Slot_C_ExecuteUbergraph_BP_NewGame_Slot::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

