#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NewGame

#include "Basic.hpp"

#include "man_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_NewGame.BP_NewGame_C.SetBtnCloseVisibility
// 0x000B (0x000B - 0x0000)
struct BP_NewGame_C_SetBtnCloseVisibility final
{
public:
	EInputDisplay                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 CallFunc_GetInputDisplay_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewGame_C_SetBtnCloseVisibility) == 0x000001, "Wrong alignment on BP_NewGame_C_SetBtnCloseVisibility");
static_assert(sizeof(BP_NewGame_C_SetBtnCloseVisibility) == 0x00000B, "Wrong size on BP_NewGame_C_SetBtnCloseVisibility");
static_assert(offsetof(BP_NewGame_C_SetBtnCloseVisibility, Temp_byte_Variable) == 0x000000, "Member 'BP_NewGame_C_SetBtnCloseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_SetBtnCloseVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'BP_NewGame_C_SetBtnCloseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_SetBtnCloseVisibility, Temp_byte_Variable_2) == 0x000002, "Member 'BP_NewGame_C_SetBtnCloseVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_SetBtnCloseVisibility, Temp_byte_Variable_3) == 0x000003, "Member 'BP_NewGame_C_SetBtnCloseVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_SetBtnCloseVisibility, Temp_byte_Variable_4) == 0x000004, "Member 'BP_NewGame_C_SetBtnCloseVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_SetBtnCloseVisibility, Temp_byte_Variable_5) == 0x000005, "Member 'BP_NewGame_C_SetBtnCloseVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_SetBtnCloseVisibility, Temp_byte_Variable_6) == 0x000006, "Member 'BP_NewGame_C_SetBtnCloseVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_SetBtnCloseVisibility, Temp_byte_Variable_7) == 0x000007, "Member 'BP_NewGame_C_SetBtnCloseVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_SetBtnCloseVisibility, Temp_byte_Variable_8) == 0x000008, "Member 'BP_NewGame_C_SetBtnCloseVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_SetBtnCloseVisibility, CallFunc_GetInputDisplay_ReturnValue) == 0x000009, "Member 'BP_NewGame_C_SetBtnCloseVisibility::CallFunc_GetInputDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_SetBtnCloseVisibility, K2Node_Select_Default) == 0x00000A, "Member 'BP_NewGame_C_SetBtnCloseVisibility::K2Node_Select_Default' has a wrong offset!");

// Function BP_NewGame.BP_NewGame_C.BtnHotkeyAClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_NewGame_C_BtnHotkeyAClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NewGame_C_BtnHotkeyAClicked) == 0x000001, "Wrong alignment on BP_NewGame_C_BtnHotkeyAClicked");
static_assert(sizeof(BP_NewGame_C_BtnHotkeyAClicked) == 0x000001, "Wrong size on BP_NewGame_C_BtnHotkeyAClicked");
static_assert(offsetof(BP_NewGame_C_BtnHotkeyAClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_NewGame_C_BtnHotkeyAClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_NewGame.BP_NewGame_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_NewGame_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewGame_C_Tick) == 0x000004, "Wrong alignment on BP_NewGame_C_Tick");
static_assert(sizeof(BP_NewGame_C_Tick) == 0x00003C, "Wrong size on BP_NewGame_C_Tick");
static_assert(offsetof(BP_NewGame_C_Tick, MyGeometry) == 0x000000, "Member 'BP_NewGame_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_NewGame_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_NewGame.BP_NewGame_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_NewGame_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewGame_C_OnShow) == 0x000004, "Wrong alignment on BP_NewGame_C_OnShow");
static_assert(sizeof(BP_NewGame_C_OnShow) == 0x000004, "Wrong size on BP_NewGame_C_OnShow");
static_assert(offsetof(BP_NewGame_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_NewGame_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_NewGame.BP_NewGame_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_NewGame_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewGame_C_OnHide) == 0x000004, "Wrong alignment on BP_NewGame_C_OnHide");
static_assert(sizeof(BP_NewGame_C_OnHide) == 0x000004, "Wrong size on BP_NewGame_C_OnHide");
static_assert(offsetof(BP_NewGame_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_NewGame_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_NewGame.BP_NewGame_C.OnSetInputDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_NewGame_C_OnSetInputDisplay final
{
public:
	EInputDisplay                                 InInputDisplay;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 InControlDisplay;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewGame_C_OnSetInputDisplay) == 0x000001, "Wrong alignment on BP_NewGame_C_OnSetInputDisplay");
static_assert(sizeof(BP_NewGame_C_OnSetInputDisplay) == 0x000002, "Wrong size on BP_NewGame_C_OnSetInputDisplay");
static_assert(offsetof(BP_NewGame_C_OnSetInputDisplay, InInputDisplay) == 0x000000, "Member 'BP_NewGame_C_OnSetInputDisplay::InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_OnSetInputDisplay, InControlDisplay) == 0x000001, "Member 'BP_NewGame_C_OnSetInputDisplay::InControlDisplay' has a wrong offset!");

// Function BP_NewGame.BP_NewGame_C.ExecuteUbergraph_BP_NewGame
// 0x0068 (0x0068 - 0x0000)
struct BP_NewGame_C_ExecuteUbergraph_BP_NewGame final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InInputDisplay;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InControlDisplay;                     // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame) == 0x000008, "Wrong alignment on BP_NewGame_C_ExecuteUbergraph_BP_NewGame");
static_assert(sizeof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame) == 0x000068, "Wrong size on BP_NewGame_C_ExecuteUbergraph_BP_NewGame");
static_assert(offsetof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame, EntryPoint) == 0x000000, "Member 'BP_NewGame_C_ExecuteUbergraph_BP_NewGame::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame, K2Node_Event_MyGeometry) == 0x000004, "Member 'BP_NewGame_C_ExecuteUbergraph_BP_NewGame::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'BP_NewGame_C_ExecuteUbergraph_BP_NewGame::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame, K2Node_Event_AnimDuration_1) == 0x000040, "Member 'BP_NewGame_C_ExecuteUbergraph_BP_NewGame::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x000044, "Member 'BP_NewGame_C_ExecuteUbergraph_BP_NewGame::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame, CallFunc_PlayAnimation_ReturnValue) == 0x000048, "Member 'BP_NewGame_C_ExecuteUbergraph_BP_NewGame::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame, K2Node_Event_AnimDuration) == 0x000050, "Member 'BP_NewGame_C_ExecuteUbergraph_BP_NewGame::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x000054, "Member 'BP_NewGame_C_ExecuteUbergraph_BP_NewGame::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame, CallFunc_PlayAnimation_ReturnValue_1) == 0x000058, "Member 'BP_NewGame_C_ExecuteUbergraph_BP_NewGame::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame, K2Node_Event_InInputDisplay) == 0x000060, "Member 'BP_NewGame_C_ExecuteUbergraph_BP_NewGame::K2Node_Event_InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_NewGame_C_ExecuteUbergraph_BP_NewGame, K2Node_Event_InControlDisplay) == 0x000061, "Member 'BP_NewGame_C_ExecuteUbergraph_BP_NewGame::K2Node_Event_InControlDisplay' has a wrong offset!");

}

