#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OccultistNPC

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_VendorActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_OccultistNPC.BP_OccultistNPC_C
// 0x00B0 (0x0950 - 0x08A0)
class ABP_OccultistNPC_C final : public ABP_VendorActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_OccultistNPC_C;                  // 0x08A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       BrawlerLookAtSphere;                               // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           Ak;                                                // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Occultist_Rune;                                 // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Occultist_RuneHand;                             // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Occultist_Staff;                                // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTriggerBoxComponent*                   TriggerBox;                                        // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       CameraSphere;                                      // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMiniMapActorComponent*                 MiniMapActor;                                      // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Occultist;                                      // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        NotifMarker;                                       // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SpeechBubbleComponent_C*            BP_SpeechBubbleComponent;                          // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractPrompWidgetComponent_C*     BP_InteractPrompWidgetComponent;                   // 0x0900(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   Gold;                                              // 0x0908(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FLinearColor>                   Blue;                                              // 0x0918(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FLinearColor>                   Red;                                               // 0x0928(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Random;                                            // 0x0938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93C[0x4];                                      // 0x093C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RandomIndex;                                       // 0x0940(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ShuffleRandom();
	void GetRandomIndex();
	void ReceiveBeginPlay();
	void VisualVolumeEnter(class ALevelVisualVolume* Volume);
	void OnVfxEvent(class FName VfxEventType);
	void BPPostBeginPlay();
	void ExecuteUbergraph_BP_OccultistNPC(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_OccultistNPC_C">();
	}
	static class ABP_OccultistNPC_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_OccultistNPC_C>();
	}
};
static_assert(alignof(ABP_OccultistNPC_C) == 0x000008, "Wrong alignment on ABP_OccultistNPC_C");
static_assert(sizeof(ABP_OccultistNPC_C) == 0x000950, "Wrong size on ABP_OccultistNPC_C");
static_assert(offsetof(ABP_OccultistNPC_C, UberGraphFrame_BP_OccultistNPC_C) == 0x0008A0, "Member 'ABP_OccultistNPC_C::UberGraphFrame_BP_OccultistNPC_C' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, BrawlerLookAtSphere) == 0x0008A8, "Member 'ABP_OccultistNPC_C::BrawlerLookAtSphere' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, Ak) == 0x0008B0, "Member 'ABP_OccultistNPC_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, NS_Occultist_Rune) == 0x0008B8, "Member 'ABP_OccultistNPC_C::NS_Occultist_Rune' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, NS_Occultist_RuneHand) == 0x0008C0, "Member 'ABP_OccultistNPC_C::NS_Occultist_RuneHand' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, NS_Occultist_Staff) == 0x0008C8, "Member 'ABP_OccultistNPC_C::NS_Occultist_Staff' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, TriggerBox) == 0x0008D0, "Member 'ABP_OccultistNPC_C::TriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, CameraSphere) == 0x0008D8, "Member 'ABP_OccultistNPC_C::CameraSphere' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, MiniMapActor) == 0x0008E0, "Member 'ABP_OccultistNPC_C::MiniMapActor' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, SK_Occultist) == 0x0008E8, "Member 'ABP_OccultistNPC_C::SK_Occultist' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, NotifMarker) == 0x0008F0, "Member 'ABP_OccultistNPC_C::NotifMarker' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, BP_SpeechBubbleComponent) == 0x0008F8, "Member 'ABP_OccultistNPC_C::BP_SpeechBubbleComponent' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, BP_InteractPrompWidgetComponent) == 0x000900, "Member 'ABP_OccultistNPC_C::BP_InteractPrompWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, Gold) == 0x000908, "Member 'ABP_OccultistNPC_C::Gold' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, Blue) == 0x000918, "Member 'ABP_OccultistNPC_C::Blue' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, Red) == 0x000928, "Member 'ABP_OccultistNPC_C::Red' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, Random) == 0x000938, "Member 'ABP_OccultistNPC_C::Random' has a wrong offset!");
static_assert(offsetof(ABP_OccultistNPC_C, RandomIndex) == 0x000940, "Member 'ABP_OccultistNPC_C::RandomIndex' has a wrong offset!");

}

