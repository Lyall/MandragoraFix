#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OccultistNPC

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_OccultistNPC.BP_OccultistNPC_C.ShuffleRandom
// 0x0018 (0x0018 - 0x0000)
struct BP_OccultistNPC_C_ShuffleRandom final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0004(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0008(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OccultistNPC_C_ShuffleRandom) == 0x000004, "Wrong alignment on BP_OccultistNPC_C_ShuffleRandom");
static_assert(sizeof(BP_OccultistNPC_C_ShuffleRandom) == 0x000018, "Wrong size on BP_OccultistNPC_C_ShuffleRandom");
static_assert(offsetof(BP_OccultistNPC_C_ShuffleRandom, Temp_int_Variable) == 0x000000, "Member 'BP_OccultistNPC_C_ShuffleRandom::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ShuffleRandom, Temp_int_Variable_1) == 0x000004, "Member 'BP_OccultistNPC_C_ShuffleRandom::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ShuffleRandom, Temp_int_Variable_2) == 0x000008, "Member 'BP_OccultistNPC_C_ShuffleRandom::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ShuffleRandom, CallFunc_Array_Add_ReturnValue) == 0x00000C, "Member 'BP_OccultistNPC_C_ShuffleRandom::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ShuffleRandom, CallFunc_Array_Add_ReturnValue_1) == 0x000010, "Member 'BP_OccultistNPC_C_ShuffleRandom::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ShuffleRandom, CallFunc_Array_Add_ReturnValue_2) == 0x000014, "Member 'BP_OccultistNPC_C_ShuffleRandom::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");

// Function BP_OccultistNPC.BP_OccultistNPC_C.GetRandomIndex
// 0x0010 (0x0010 - 0x0000)
struct BP_OccultistNPC_C_GetRandomIndex final
{
public:
	int32                                         CallFunc_Array_Get_Item;                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutItem;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OccultistNPC_C_GetRandomIndex) == 0x000004, "Wrong alignment on BP_OccultistNPC_C_GetRandomIndex");
static_assert(sizeof(BP_OccultistNPC_C_GetRandomIndex) == 0x000010, "Wrong size on BP_OccultistNPC_C_GetRandomIndex");
static_assert(offsetof(BP_OccultistNPC_C_GetRandomIndex, CallFunc_Array_Get_Item) == 0x000000, "Member 'BP_OccultistNPC_C_GetRandomIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_GetRandomIndex, CallFunc_Array_Random_OutItem) == 0x000004, "Member 'BP_OccultistNPC_C_GetRandomIndex::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_GetRandomIndex, CallFunc_Array_Random_OutIndex) == 0x000008, "Member 'BP_OccultistNPC_C_GetRandomIndex::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_GetRandomIndex, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_OccultistNPC_C_GetRandomIndex::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_OccultistNPC.BP_OccultistNPC_C.VisualVolumeEnter
// 0x0008 (0x0008 - 0x0000)
struct BP_OccultistNPC_C_VisualVolumeEnter final
{
public:
	class ALevelVisualVolume*                     Volume;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OccultistNPC_C_VisualVolumeEnter) == 0x000008, "Wrong alignment on BP_OccultistNPC_C_VisualVolumeEnter");
static_assert(sizeof(BP_OccultistNPC_C_VisualVolumeEnter) == 0x000008, "Wrong size on BP_OccultistNPC_C_VisualVolumeEnter");
static_assert(offsetof(BP_OccultistNPC_C_VisualVolumeEnter, Volume) == 0x000000, "Member 'BP_OccultistNPC_C_VisualVolumeEnter::Volume' has a wrong offset!");

// Function BP_OccultistNPC.BP_OccultistNPC_C.OnVfxEvent
// 0x0008 (0x0008 - 0x0000)
struct BP_OccultistNPC_C_OnVfxEvent final
{
public:
	class FName                                   VfxEventType;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OccultistNPC_C_OnVfxEvent) == 0x000004, "Wrong alignment on BP_OccultistNPC_C_OnVfxEvent");
static_assert(sizeof(BP_OccultistNPC_C_OnVfxEvent) == 0x000008, "Wrong size on BP_OccultistNPC_C_OnVfxEvent");
static_assert(offsetof(BP_OccultistNPC_C_OnVfxEvent, VfxEventType) == 0x000000, "Member 'BP_OccultistNPC_C_OnVfxEvent::VfxEventType' has a wrong offset!");

// Function BP_OccultistNPC.BP_OccultistNPC_C.ExecuteUbergraph_BP_OccultistNPC
// 0x0068 (0x0068 - 0x0000)
struct BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInCaravan_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ALevelVisualVolume* Volume)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMandragoraGameMode*                    CallFunc_GetGameMode_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALevelVisualVolume*                     K2Node_CustomEvent_Volume;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Occultist_Anim_C*                   K2Node_DynamicCast_AsBP_Occultist_Anim;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_VfxEventType;                         // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   K2Node_Select_Default;                             // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC) == 0x000008, "Wrong alignment on BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC");
static_assert(sizeof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC) == 0x000068, "Wrong size on BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, EntryPoint) == 0x000000, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, CallFunc_IsInCaravan_ReturnValue) == 0x000004, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::CallFunc_IsInCaravan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, Temp_int_Variable) == 0x000018, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, CallFunc_GetGameMode_ReturnValue) == 0x000020, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, K2Node_CustomEvent_Volume) == 0x000028, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::K2Node_CustomEvent_Volume' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000030, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, CallFunc_GetAnimInstance_ReturnValue) == 0x000038, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, K2Node_DynamicCast_AsBP_Occultist_Anim) == 0x000040, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::K2Node_DynamicCast_AsBP_Occultist_Anim' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000049, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, K2Node_Event_VfxEventType) == 0x00004C, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::K2Node_Event_VfxEventType' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, K2Node_SwitchName_CmpSuccess) == 0x000054, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC, K2Node_Select_Default) == 0x000058, "Member 'BP_OccultistNPC_C_ExecuteUbergraph_BP_OccultistNPC::K2Node_Select_Default' has a wrong offset!");

}

