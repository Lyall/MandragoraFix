#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OffhandActor

#include "Basic.hpp"

#include "BP_ModelActor_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_RelicStates_structs.hpp"
#include "man_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_OffhandActor.BP_OffhandActor_C
// 0x00C0 (0x0350 - 0x0290)
class ABP_OffhandActor_C : public ABP_ModelActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_OffhandActor_C;                  // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      DischargeOnRelicVFX;                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FullChargeVFX;                                     // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      LivingInHand_Niagara;                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Living_Niagara;                                    // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               LivingEffect_InHand;                               // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               LivingEffect;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_MeshDissolve_BRF_FD5D85AE4424FF6F4EA66C965D316FBF; // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_MeshDissolve_Opacity_FD5D85AE4424FF6F4EA66C965D316FBF; // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_MeshDissolve_GradPow_FD5D85AE4424FF6F4EA66C965D316FBF; // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_MeshDissolve_Exp_FD5D85AE4424FF6F4EA66C965D316FBF; // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_MeshDissolve_Dissolve_FD5D85AE4424FF6F4EA66C965D316FBF; // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_MeshDissolve__Direction_FD5D85AE4424FF6F4EA66C965D316FBF; // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_MeshDissolve;                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_MeshScale_Scale_F5CA6DCC4638F089C123519D4AB15A9F; // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_MeshScale__Direction_F5CA6DCC4638F089C123519D4AB15A9F; // 0x02EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_MeshScale;                                // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RuneTurn_;                                         // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DissolveDelay;                                     // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrawlerHero_C*                      BrawlerRef;                                        // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckFacing_;                                      // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OldStyle;                                          // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30A[0x6];                                      // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_Brawler_Anim_C*                     BrawlerAnimRef;                                    // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RelicStates                                 RelicState;                                        // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RelicStates                                 PreviousRelicState;                                // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A[0x2];                                      // 0x031A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldScale;                                        // 0x031C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Inventory_;                                        // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RelicChargeAvailable;                              // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OnEnemy;                                           // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32B[0x5];                                      // 0x032B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemyCharacter*                        Enemy;                                             // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RelativeScale;                                     // 0x0338(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_OffhandActor(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ResetMeshScale();
	void ResetDissolve();
	void ReceiveTick(float DeltaSeconds);
	void BPPostWeaponAttachToggle(bool bAttached);
	void CheckRuneMesh();
	void ScaleMesh(bool Down_);
	void DissolveMesh(bool Appear_);
	void Timeline_MeshScale__UpdateFunc();
	void Timeline_MeshScale__FinishedFunc();
	void Timeline_MeshDissolve__UpdateFunc();
	void Timeline_MeshDissolve__FinishedFunc();
	void UserConstructionScript();
	void CheckFacing();
	bool HideByCurve_(class FName CurveName);
	bool WeaponOnBack_();
	void ToggleRuneVFX(bool On);
	void ToggleHandVFX(bool On);
	void StateCheck();
	void SetRelicState(E_RelicStates RelicState_0);
	void UpdateVisuals(E_RelicStates RelicState_0, bool ScaleMesh_Down_, bool HandVFXOn, bool RuneVFXOn, bool DissolveMesh_Appear_);
	void ToggleRelicChargeVFX(bool On);
	void ChooseFullChargeAndDischargeVFX();
	struct FVector GetFinalScale();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_OffhandActor_C">();
	}
	static class ABP_OffhandActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_OffhandActor_C>();
	}
};
static_assert(alignof(ABP_OffhandActor_C) == 0x000010, "Wrong alignment on ABP_OffhandActor_C");
static_assert(sizeof(ABP_OffhandActor_C) == 0x000350, "Wrong size on ABP_OffhandActor_C");
static_assert(offsetof(ABP_OffhandActor_C, UberGraphFrame_BP_OffhandActor_C) == 0x000290, "Member 'ABP_OffhandActor_C::UberGraphFrame_BP_OffhandActor_C' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, DischargeOnRelicVFX) == 0x000298, "Member 'ABP_OffhandActor_C::DischargeOnRelicVFX' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, FullChargeVFX) == 0x0002A0, "Member 'ABP_OffhandActor_C::FullChargeVFX' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, LivingInHand_Niagara) == 0x0002A8, "Member 'ABP_OffhandActor_C::LivingInHand_Niagara' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Living_Niagara) == 0x0002B0, "Member 'ABP_OffhandActor_C::Living_Niagara' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, LivingEffect_InHand) == 0x0002B8, "Member 'ABP_OffhandActor_C::LivingEffect_InHand' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, LivingEffect) == 0x0002C0, "Member 'ABP_OffhandActor_C::LivingEffect' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Timeline_MeshDissolve_BRF_FD5D85AE4424FF6F4EA66C965D316FBF) == 0x0002C8, "Member 'ABP_OffhandActor_C::Timeline_MeshDissolve_BRF_FD5D85AE4424FF6F4EA66C965D316FBF' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Timeline_MeshDissolve_Opacity_FD5D85AE4424FF6F4EA66C965D316FBF) == 0x0002CC, "Member 'ABP_OffhandActor_C::Timeline_MeshDissolve_Opacity_FD5D85AE4424FF6F4EA66C965D316FBF' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Timeline_MeshDissolve_GradPow_FD5D85AE4424FF6F4EA66C965D316FBF) == 0x0002D0, "Member 'ABP_OffhandActor_C::Timeline_MeshDissolve_GradPow_FD5D85AE4424FF6F4EA66C965D316FBF' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Timeline_MeshDissolve_Exp_FD5D85AE4424FF6F4EA66C965D316FBF) == 0x0002D4, "Member 'ABP_OffhandActor_C::Timeline_MeshDissolve_Exp_FD5D85AE4424FF6F4EA66C965D316FBF' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Timeline_MeshDissolve_Dissolve_FD5D85AE4424FF6F4EA66C965D316FBF) == 0x0002D8, "Member 'ABP_OffhandActor_C::Timeline_MeshDissolve_Dissolve_FD5D85AE4424FF6F4EA66C965D316FBF' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Timeline_MeshDissolve__Direction_FD5D85AE4424FF6F4EA66C965D316FBF) == 0x0002DC, "Member 'ABP_OffhandActor_C::Timeline_MeshDissolve__Direction_FD5D85AE4424FF6F4EA66C965D316FBF' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Timeline_MeshDissolve) == 0x0002E0, "Member 'ABP_OffhandActor_C::Timeline_MeshDissolve' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Timeline_MeshScale_Scale_F5CA6DCC4638F089C123519D4AB15A9F) == 0x0002E8, "Member 'ABP_OffhandActor_C::Timeline_MeshScale_Scale_F5CA6DCC4638F089C123519D4AB15A9F' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Timeline_MeshScale__Direction_F5CA6DCC4638F089C123519D4AB15A9F) == 0x0002EC, "Member 'ABP_OffhandActor_C::Timeline_MeshScale__Direction_F5CA6DCC4638F089C123519D4AB15A9F' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Timeline_MeshScale) == 0x0002F0, "Member 'ABP_OffhandActor_C::Timeline_MeshScale' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, RuneTurn_) == 0x0002F8, "Member 'ABP_OffhandActor_C::RuneTurn_' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, DissolveDelay) == 0x0002FC, "Member 'ABP_OffhandActor_C::DissolveDelay' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, BrawlerRef) == 0x000300, "Member 'ABP_OffhandActor_C::BrawlerRef' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, CheckFacing_) == 0x000308, "Member 'ABP_OffhandActor_C::CheckFacing_' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, OldStyle) == 0x000309, "Member 'ABP_OffhandActor_C::OldStyle' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, BrawlerAnimRef) == 0x000310, "Member 'ABP_OffhandActor_C::BrawlerAnimRef' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, RelicState) == 0x000318, "Member 'ABP_OffhandActor_C::RelicState' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, PreviousRelicState) == 0x000319, "Member 'ABP_OffhandActor_C::PreviousRelicState' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, WorldScale) == 0x00031C, "Member 'ABP_OffhandActor_C::WorldScale' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Inventory_) == 0x000328, "Member 'ABP_OffhandActor_C::Inventory_' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, RelicChargeAvailable) == 0x000329, "Member 'ABP_OffhandActor_C::RelicChargeAvailable' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, OnEnemy) == 0x00032A, "Member 'ABP_OffhandActor_C::OnEnemy' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, Enemy) == 0x000330, "Member 'ABP_OffhandActor_C::Enemy' has a wrong offset!");
static_assert(offsetof(ABP_OffhandActor_C, RelativeScale) == 0x000338, "Member 'ABP_OffhandActor_C::RelativeScale' has a wrong offset!");

}

