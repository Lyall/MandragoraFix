#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OffhandActor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "man_structs.hpp"
#include "E_RelicStates_structs.hpp"


namespace SDK::Params
{

// Function BP_OffhandActor.BP_OffhandActor_C.ExecuteUbergraph_BP_OffhandActor
// 0x00B0 (0x00B0 - 0x0000)
struct BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetFinalScale_ReturnValue;                // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Brawler_Anim_C*                     K2Node_DynamicCast_AsBP_Brawler_Anim;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Appear_;                        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HideByCurve__ReturnValue;                 // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HideByCurve__ReturnValue_1;               // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Down_;                          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WeaponOnBack__ReturnValue;                // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue_1;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrawlerInventoryVisual_C*           K2Node_DynamicCast_AsBP_Brawler_Inventory_Visual;  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrawlerHero_C*                      K2Node_DynamicCast_AsBP_Brawler_Hero;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAttached;                            // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue_2;       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEnemyCharacter*                        K2Node_DynamicCast_AsEnemy_Character;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityBase*                           CallFunc_GetOffhandAbilitySlot_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URelicDischargeAbility*                 K2Node_DynamicCast_AsRelic_Discharge_Ability;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentRelicCharge_ReturnValue;        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaxRelicCharge_ReturnValue;            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor) == 0x000008, "Wrong alignment on BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor");
static_assert(sizeof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor) == 0x0000B0, "Wrong size on BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, EntryPoint) == 0x000000, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_GetFinalScale_ReturnValue) == 0x000004, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_GetFinalScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000010, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_GetAnimInstance_ReturnValue) == 0x000020, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_DynamicCast_AsBP_Brawler_Anim) == 0x000028, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_DynamicCast_AsBP_Brawler_Anim' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_CustomEvent_Appear_) == 0x000031, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_CustomEvent_Appear_' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_HideByCurve__ReturnValue) == 0x000032, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_HideByCurve__ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_HideByCurve__ReturnValue_1) == 0x000033, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_HideByCurve__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_CustomEvent_Down_) == 0x000034, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_CustomEvent_Down_' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_WeaponOnBack__ReturnValue) == 0x000035, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_WeaponOnBack__ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_GetAttachParentActor_ReturnValue) == 0x000038, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_GetAttachParentActor_ReturnValue_1) == 0x000040, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_GetAttachParentActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_DynamicCast_AsBP_Brawler_Inventory_Visual) == 0x000048, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_DynamicCast_AsBP_Brawler_Inventory_Visual' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_DynamicCast_AsBP_Brawler_Hero) == 0x000058, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_DynamicCast_AsBP_Brawler_Hero' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_Event_bAttached) == 0x000061, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_Event_bAttached' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_Event_DeltaSeconds) == 0x000064, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, Temp_bool_IsClosed_Variable) == 0x000068, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_Not_PreBool_ReturnValue) == 0x000069, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, Temp_bool_Has_Been_Initd_Variable) == 0x00006A, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, Temp_bool_IsClosed_Variable_1) == 0x00006B, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, Temp_bool_Has_Been_Initd_Variable_1) == 0x00006C, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, Temp_bool_Has_Been_Initd_Variable_2) == 0x00006D, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_GetAttachParentActor_ReturnValue_2) == 0x000070, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_GetAttachParentActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_DynamicCast_AsEnemy_Character) == 0x000078, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_DynamicCast_AsEnemy_Character' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_DynamicCast_bSuccess_3) == 0x000080, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_IsValid_ReturnValue) == 0x000081, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_GetOffhandAbilitySlot_ReturnValue) == 0x000088, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_GetOffhandAbilitySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_DynamicCast_AsRelic_Discharge_Ability) == 0x000090, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_DynamicCast_AsRelic_Discharge_Ability' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, K2Node_DynamicCast_bSuccess_4) == 0x000098, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_GetCurrentRelicCharge_ReturnValue) == 0x00009C, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_GetCurrentRelicCharge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_IsValid_ReturnValue_1) == 0x0000A0, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_GetMaxRelicCharge_ReturnValue) == 0x0000A4, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_GetMaxRelicCharge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000A8, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor, Temp_bool_IsClosed_Variable_2) == 0x0000A9, "Member 'BP_OffhandActor_C_ExecuteUbergraph_BP_OffhandActor::Temp_bool_IsClosed_Variable_2' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_OffhandActor_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OffhandActor_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_OffhandActor_C_ReceiveTick");
static_assert(sizeof(BP_OffhandActor_C_ReceiveTick) == 0x000004, "Wrong size on BP_OffhandActor_C_ReceiveTick");
static_assert(offsetof(BP_OffhandActor_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_OffhandActor_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.BPPostWeaponAttachToggle
// 0x0001 (0x0001 - 0x0000)
struct BP_OffhandActor_C_BPPostWeaponAttachToggle final
{
public:
	bool                                          bAttached;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_BPPostWeaponAttachToggle) == 0x000001, "Wrong alignment on BP_OffhandActor_C_BPPostWeaponAttachToggle");
static_assert(sizeof(BP_OffhandActor_C_BPPostWeaponAttachToggle) == 0x000001, "Wrong size on BP_OffhandActor_C_BPPostWeaponAttachToggle");
static_assert(offsetof(BP_OffhandActor_C_BPPostWeaponAttachToggle, bAttached) == 0x000000, "Member 'BP_OffhandActor_C_BPPostWeaponAttachToggle::bAttached' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.ScaleMesh
// 0x0001 (0x0001 - 0x0000)
struct BP_OffhandActor_C_ScaleMesh final
{
public:
	bool                                          Down_;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_ScaleMesh) == 0x000001, "Wrong alignment on BP_OffhandActor_C_ScaleMesh");
static_assert(sizeof(BP_OffhandActor_C_ScaleMesh) == 0x000001, "Wrong size on BP_OffhandActor_C_ScaleMesh");
static_assert(offsetof(BP_OffhandActor_C_ScaleMesh, Down_) == 0x000000, "Member 'BP_OffhandActor_C_ScaleMesh::Down_' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.DissolveMesh
// 0x0001 (0x0001 - 0x0000)
struct BP_OffhandActor_C_DissolveMesh final
{
public:
	bool                                          Appear_;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_DissolveMesh) == 0x000001, "Wrong alignment on BP_OffhandActor_C_DissolveMesh");
static_assert(sizeof(BP_OffhandActor_C_DissolveMesh) == 0x000001, "Wrong size on BP_OffhandActor_C_DissolveMesh");
static_assert(offsetof(BP_OffhandActor_C_DissolveMesh, Appear_) == 0x000000, "Member 'BP_OffhandActor_C_DissolveMesh::Appear_' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.CheckFacing
// 0x0020 (0x0020 - 0x0000)
struct BP_OffhandActor_C_CheckFacing final
{
public:
	struct FVector                                CallFunc_GetFinalScale_ReturnValue;                // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_CheckFacing) == 0x000004, "Wrong alignment on BP_OffhandActor_C_CheckFacing");
static_assert(sizeof(BP_OffhandActor_C_CheckFacing) == 0x000020, "Wrong size on BP_OffhandActor_C_CheckFacing");
static_assert(offsetof(BP_OffhandActor_C_CheckFacing, CallFunc_GetFinalScale_ReturnValue) == 0x000000, "Member 'BP_OffhandActor_C_CheckFacing::CallFunc_GetFinalScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_CheckFacing, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_OffhandActor_C_CheckFacing::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_CheckFacing, CallFunc_MakeVector_ReturnValue) == 0x000010, "Member 'BP_OffhandActor_C_CheckFacing::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_CheckFacing, CallFunc_IsValid_ReturnValue_1) == 0x00001C, "Member 'BP_OffhandActor_C_CheckFacing::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.HideByCurve?
// 0x0030 (0x0030 - 0x0000)
struct BP_OffhandActor_C_HideByCurve_ final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_HideByCurve_) == 0x000008, "Wrong alignment on BP_OffhandActor_C_HideByCurve_");
static_assert(sizeof(BP_OffhandActor_C_HideByCurve_) == 0x000030, "Wrong size on BP_OffhandActor_C_HideByCurve_");
static_assert(offsetof(BP_OffhandActor_C_HideByCurve_, CurveName) == 0x000000, "Member 'BP_OffhandActor_C_HideByCurve_::CurveName' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_HideByCurve_, ReturnValue) == 0x000008, "Member 'BP_OffhandActor_C_HideByCurve_::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_HideByCurve_, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_OffhandActor_C_HideByCurve_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_HideByCurve_, CallFunc_IsValid_ReturnValue_1) == 0x00000A, "Member 'BP_OffhandActor_C_HideByCurve_::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_HideByCurve_, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'BP_OffhandActor_C_HideByCurve_::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_HideByCurve_, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000018, "Member 'BP_OffhandActor_C_HideByCurve_::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_HideByCurve_, CallFunc_GetCurveValue_ReturnValue) == 0x000020, "Member 'BP_OffhandActor_C_HideByCurve_::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_HideByCurve_, CallFunc_GetCurveValue_ReturnValue_1) == 0x000024, "Member 'BP_OffhandActor_C_HideByCurve_::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_HideByCurve_, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_OffhandActor_C_HideByCurve_::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_HideByCurve_, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000029, "Member 'BP_OffhandActor_C_HideByCurve_::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.WeaponOnBack?
// 0x0007 (0x0007 - 0x0000)
struct BP_OffhandActor_C_WeaponOnBack_ final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLeftWeaponInHand_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRightWeaponInHand_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_WeaponOnBack_) == 0x000001, "Wrong alignment on BP_OffhandActor_C_WeaponOnBack_");
static_assert(sizeof(BP_OffhandActor_C_WeaponOnBack_) == 0x000007, "Wrong size on BP_OffhandActor_C_WeaponOnBack_");
static_assert(offsetof(BP_OffhandActor_C_WeaponOnBack_, ReturnValue) == 0x000000, "Member 'BP_OffhandActor_C_WeaponOnBack_::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_WeaponOnBack_, CallFunc_IsLeftWeaponInHand_ReturnValue) == 0x000001, "Member 'BP_OffhandActor_C_WeaponOnBack_::CallFunc_IsLeftWeaponInHand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_WeaponOnBack_, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_OffhandActor_C_WeaponOnBack_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_WeaponOnBack_, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BP_OffhandActor_C_WeaponOnBack_::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_WeaponOnBack_, CallFunc_IsRightWeaponInHand_ReturnValue) == 0x000004, "Member 'BP_OffhandActor_C_WeaponOnBack_::CallFunc_IsRightWeaponInHand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_WeaponOnBack_, CallFunc_Not_PreBool_ReturnValue_1) == 0x000005, "Member 'BP_OffhandActor_C_WeaponOnBack_::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_WeaponOnBack_, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'BP_OffhandActor_C_WeaponOnBack_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.ToggleRuneVFX
// 0x0001 (0x0001 - 0x0000)
struct BP_OffhandActor_C_ToggleRuneVFX final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_ToggleRuneVFX) == 0x000001, "Wrong alignment on BP_OffhandActor_C_ToggleRuneVFX");
static_assert(sizeof(BP_OffhandActor_C_ToggleRuneVFX) == 0x000001, "Wrong size on BP_OffhandActor_C_ToggleRuneVFX");
static_assert(offsetof(BP_OffhandActor_C_ToggleRuneVFX, On) == 0x000000, "Member 'BP_OffhandActor_C_ToggleRuneVFX::On' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.ToggleHandVFX
// 0x0001 (0x0001 - 0x0000)
struct BP_OffhandActor_C_ToggleHandVFX final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_ToggleHandVFX) == 0x000001, "Wrong alignment on BP_OffhandActor_C_ToggleHandVFX");
static_assert(sizeof(BP_OffhandActor_C_ToggleHandVFX) == 0x000001, "Wrong size on BP_OffhandActor_C_ToggleHandVFX");
static_assert(offsetof(BP_OffhandActor_C_ToggleHandVFX, On) == 0x000000, "Member 'BP_OffhandActor_C_ToggleHandVFX::On' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.StateCheck
// 0x0001 (0x0001 - 0x0000)
struct BP_OffhandActor_C_StateCheck final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_StateCheck) == 0x000001, "Wrong alignment on BP_OffhandActor_C_StateCheck");
static_assert(sizeof(BP_OffhandActor_C_StateCheck) == 0x000001, "Wrong size on BP_OffhandActor_C_StateCheck");
static_assert(offsetof(BP_OffhandActor_C_StateCheck, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'BP_OffhandActor_C_StateCheck::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.SetRelicState
// 0x0001 (0x0001 - 0x0000)
struct BP_OffhandActor_C_SetRelicState final
{
public:
	E_RelicStates                                 RelicState_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OffhandActor_C_SetRelicState) == 0x000001, "Wrong alignment on BP_OffhandActor_C_SetRelicState");
static_assert(sizeof(BP_OffhandActor_C_SetRelicState) == 0x000001, "Wrong size on BP_OffhandActor_C_SetRelicState");
static_assert(offsetof(BP_OffhandActor_C_SetRelicState, RelicState_0) == 0x000000, "Member 'BP_OffhandActor_C_SetRelicState::RelicState_0' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.UpdateVisuals
// 0x0006 (0x0006 - 0x0000)
struct BP_OffhandActor_C_UpdateVisuals final
{
public:
	E_RelicStates                                 RelicState_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScaleMesh_Down_;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HandVFXOn;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RuneVFXOn;                                         // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DissolveMesh_Appear_;                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_UpdateVisuals) == 0x000001, "Wrong alignment on BP_OffhandActor_C_UpdateVisuals");
static_assert(sizeof(BP_OffhandActor_C_UpdateVisuals) == 0x000006, "Wrong size on BP_OffhandActor_C_UpdateVisuals");
static_assert(offsetof(BP_OffhandActor_C_UpdateVisuals, RelicState_0) == 0x000000, "Member 'BP_OffhandActor_C_UpdateVisuals::RelicState_0' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_UpdateVisuals, ScaleMesh_Down_) == 0x000001, "Member 'BP_OffhandActor_C_UpdateVisuals::ScaleMesh_Down_' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_UpdateVisuals, HandVFXOn) == 0x000002, "Member 'BP_OffhandActor_C_UpdateVisuals::HandVFXOn' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_UpdateVisuals, RuneVFXOn) == 0x000003, "Member 'BP_OffhandActor_C_UpdateVisuals::RuneVFXOn' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_UpdateVisuals, DissolveMesh_Appear_) == 0x000004, "Member 'BP_OffhandActor_C_UpdateVisuals::DissolveMesh_Appear_' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_UpdateVisuals, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'BP_OffhandActor_C_UpdateVisuals::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.ToggleRelicChargeVFX
// 0x0002 (0x0002 - 0x0000)
struct BP_OffhandActor_C_ToggleRelicChargeVFX final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_ToggleRelicChargeVFX) == 0x000001, "Wrong alignment on BP_OffhandActor_C_ToggleRelicChargeVFX");
static_assert(sizeof(BP_OffhandActor_C_ToggleRelicChargeVFX) == 0x000002, "Wrong size on BP_OffhandActor_C_ToggleRelicChargeVFX");
static_assert(offsetof(BP_OffhandActor_C_ToggleRelicChargeVFX, On) == 0x000000, "Member 'BP_OffhandActor_C_ToggleRelicChargeVFX::On' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ToggleRelicChargeVFX, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'BP_OffhandActor_C_ToggleRelicChargeVFX::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.ChooseFullChargeAndDischargeVFX
// 0x0048 (0x0048 - 0x0000)
struct BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX final
{
public:
	class UNiagaraSystem*                         SelectedDischargeOnRelicVFX;                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         SelectedFullRelicChargeVFX;                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMandragoraGameMode*                    CallFunc_GetManGameMode_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityController*                     CallFunc_GetAbilityController_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EDamageType>                           CallFunc_GetRelicChargeDamageType_ReturnValue;     // 0x0030(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX) == 0x000008, "Wrong alignment on BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX");
static_assert(sizeof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX) == 0x000048, "Wrong size on BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX");
static_assert(offsetof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX, SelectedDischargeOnRelicVFX) == 0x000000, "Member 'BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX::SelectedDischargeOnRelicVFX' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX, SelectedFullRelicChargeVFX) == 0x000008, "Member 'BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX::SelectedFullRelicChargeVFX' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX, CallFunc_GetManGameMode_ReturnValue) == 0x000010, "Member 'BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX::CallFunc_GetManGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX, CallFunc_GetAbilityController_ReturnValue) == 0x000020, "Member 'BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX::CallFunc_GetAbilityController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX, CallFunc_GetRelicChargeDamageType_ReturnValue) == 0x000030, "Member 'BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX::CallFunc_GetRelicChargeDamageType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX, CallFunc_IsValid_ReturnValue_2) == 0x000040, "Member 'BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX, K2Node_SwitchEnum_CmpSuccess) == 0x000041, "Member 'BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000042, "Member 'BP_OffhandActor_C_ChooseFullChargeAndDischargeVFX::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function BP_OffhandActor.BP_OffhandActor_C.GetFinalScale
// 0x0018 (0x0018 - 0x0000)
struct BP_OffhandActor_C_GetFinalScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OffhandActor_C_GetFinalScale) == 0x000004, "Wrong alignment on BP_OffhandActor_C_GetFinalScale");
static_assert(sizeof(BP_OffhandActor_C_GetFinalScale) == 0x000018, "Wrong size on BP_OffhandActor_C_GetFinalScale");
static_assert(offsetof(BP_OffhandActor_C_GetFinalScale, ReturnValue) == 0x000000, "Member 'BP_OffhandActor_C_GetFinalScale::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OffhandActor_C_GetFinalScale, CallFunc_Multiply_VectorVector_ReturnValue) == 0x00000C, "Member 'BP_OffhandActor_C_GetFinalScale::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");

}

