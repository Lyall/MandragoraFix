#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Options_Heading

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_Options_Heading.BP_Options_Heading_C
// 0x0038 (0x0298 - 0x0260)
class UBP_Options_Heading_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 DecorLeft;                                         // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DecorRight;                                        // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Heading;                                           // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   CaptionText;                                       // 0x0280(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)

public:
	void ExecuteUbergraph_BP_Options_Heading(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void PreConstruct(bool IsDesignTime);
	void SetAttributeName(const class FText& Caption);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Options_Heading_C">();
	}
	static class UBP_Options_Heading_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Options_Heading_C>();
	}
};
static_assert(alignof(UBP_Options_Heading_C) == 0x000008, "Wrong alignment on UBP_Options_Heading_C");
static_assert(sizeof(UBP_Options_Heading_C) == 0x000298, "Wrong size on UBP_Options_Heading_C");
static_assert(offsetof(UBP_Options_Heading_C, UberGraphFrame) == 0x000260, "Member 'UBP_Options_Heading_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Options_Heading_C, DecorLeft) == 0x000268, "Member 'UBP_Options_Heading_C::DecorLeft' has a wrong offset!");
static_assert(offsetof(UBP_Options_Heading_C, DecorRight) == 0x000270, "Member 'UBP_Options_Heading_C::DecorRight' has a wrong offset!");
static_assert(offsetof(UBP_Options_Heading_C, Heading) == 0x000278, "Member 'UBP_Options_Heading_C::Heading' has a wrong offset!");
static_assert(offsetof(UBP_Options_Heading_C, CaptionText) == 0x000280, "Member 'UBP_Options_Heading_C::CaptionText' has a wrong offset!");

}

