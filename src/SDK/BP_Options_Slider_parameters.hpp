#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Options_Slider

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_Options_Slider.BP_Options_Slider_C.ExecuteUbergraph_BP_Options_Slider
// 0x00C8 (0x00C8 - 0x0000)
struct BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInIsActive;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0014(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0028(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue_1;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0040(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue;                              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue_1;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_Value;                  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InDisplayName;                        // 0x00A8(0x0018)(ConstParm)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFocused_ReturnValue;                    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider) == 0x000008, "Wrong alignment on BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider");
static_assert(sizeof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider) == 0x0000C8, "Wrong size on BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, EntryPoint) == 0x000000, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, K2Node_Event_bInIsActive) == 0x000004, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::K2Node_Event_bInIsActive' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, Temp_bool_Variable) == 0x000005, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, Temp_float_Variable) == 0x000008, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, Temp_float_Variable_1) == 0x000010, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, Temp_delegate_Variable) == 0x000014, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, CallFunc_PostEvent_ReturnValue) == 0x000024, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, Temp_delegate_Variable_1) == 0x000028, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, CallFunc_PostEvent_ReturnValue_1) == 0x000038, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::CallFunc_PostEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, K2Node_Event_IsDesignTime) == 0x00003C, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, K2Node_Event_MyGeometry) == 0x000040, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, K2Node_Event_InDeltaTime) == 0x000078, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, K2Node_Event_InValue) == 0x00007C, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::K2Node_Event_InValue' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, K2Node_Event_bAnimate_1) == 0x000080, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, K2Node_Event_bAnimate) == 0x000081, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, CallFunc_GetEndTime_ReturnValue) == 0x000084, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, K2Node_Select_Default) == 0x000088, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, CallFunc_GetEndTime_ReturnValue_1) == 0x00008C, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::CallFunc_GetEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, CallFunc_PlayAnimation_ReturnValue) == 0x000090, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, K2Node_Select_Default_1) == 0x000098, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, K2Node_ComponentBoundEvent_Value) == 0x00009C, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::K2Node_ComponentBoundEvent_Value' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, CallFunc_PlayAnimation_ReturnValue_1) == 0x0000A0, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, K2Node_Event_InDisplayName) == 0x0000A8, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::K2Node_Event_InDisplayName' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x0000C0, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, CallFunc_IsFocused_ReturnValue) == 0x0000C1, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::CallFunc_IsFocused_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider, CallFunc_IsActive_ReturnValue) == 0x0000C2, "Member 'BP_Options_Slider_C_ExecuteUbergraph_BP_Options_Slider::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_Options_Slider.BP_Options_Slider_C.OnSetActive
// 0x0001 (0x0001 - 0x0000)
struct BP_Options_Slider_C_OnSetActive final
{
public:
	bool                                          bInIsActive;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Options_Slider_C_OnSetActive) == 0x000001, "Wrong alignment on BP_Options_Slider_C_OnSetActive");
static_assert(sizeof(BP_Options_Slider_C_OnSetActive) == 0x000001, "Wrong size on BP_Options_Slider_C_OnSetActive");
static_assert(offsetof(BP_Options_Slider_C_OnSetActive, bInIsActive) == 0x000000, "Member 'BP_Options_Slider_C_OnSetActive::bInIsActive' has a wrong offset!");

// Function BP_Options_Slider.BP_Options_Slider_C.OnSetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct BP_Options_Slider_C_OnSetDisplayName final
{
public:
	class FText                                   InDisplayName;                                     // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Options_Slider_C_OnSetDisplayName) == 0x000008, "Wrong alignment on BP_Options_Slider_C_OnSetDisplayName");
static_assert(sizeof(BP_Options_Slider_C_OnSetDisplayName) == 0x000018, "Wrong size on BP_Options_Slider_C_OnSetDisplayName");
static_assert(offsetof(BP_Options_Slider_C_OnSetDisplayName, InDisplayName) == 0x000000, "Member 'BP_Options_Slider_C_OnSetDisplayName::InDisplayName' has a wrong offset!");

// Function BP_Options_Slider.BP_Options_Slider_C.BndEvt__BP_Options_Slider_SliderWidget_K2Node_ComponentBoundEvent_6_OnFloatValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BP_Options_Slider_C_BndEvt__BP_Options_Slider_SliderWidget_K2Node_ComponentBoundEvent_6_OnFloatValueChangedEvent__DelegateSignature final
{
public:
	float                                         Value_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Options_Slider_C_BndEvt__BP_Options_Slider_SliderWidget_K2Node_ComponentBoundEvent_6_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on BP_Options_Slider_C_BndEvt__BP_Options_Slider_SliderWidget_K2Node_ComponentBoundEvent_6_OnFloatValueChangedEvent__DelegateSignature");
static_assert(sizeof(BP_Options_Slider_C_BndEvt__BP_Options_Slider_SliderWidget_K2Node_ComponentBoundEvent_6_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on BP_Options_Slider_C_BndEvt__BP_Options_Slider_SliderWidget_K2Node_ComponentBoundEvent_6_OnFloatValueChangedEvent__DelegateSignature");
static_assert(offsetof(BP_Options_Slider_C_BndEvt__BP_Options_Slider_SliderWidget_K2Node_ComponentBoundEvent_6_OnFloatValueChangedEvent__DelegateSignature, Value_0) == 0x000000, "Member 'BP_Options_Slider_C_BndEvt__BP_Options_Slider_SliderWidget_K2Node_ComponentBoundEvent_6_OnFloatValueChangedEvent__DelegateSignature::Value_0' has a wrong offset!");

// Function BP_Options_Slider.BP_Options_Slider_C.OnUnfocused
// 0x0001 (0x0001 - 0x0000)
struct BP_Options_Slider_C_OnUnfocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Options_Slider_C_OnUnfocused) == 0x000001, "Wrong alignment on BP_Options_Slider_C_OnUnfocused");
static_assert(sizeof(BP_Options_Slider_C_OnUnfocused) == 0x000001, "Wrong size on BP_Options_Slider_C_OnUnfocused");
static_assert(offsetof(BP_Options_Slider_C_OnUnfocused, bAnimate) == 0x000000, "Member 'BP_Options_Slider_C_OnUnfocused::bAnimate' has a wrong offset!");

// Function BP_Options_Slider.BP_Options_Slider_C.OnFocused
// 0x0001 (0x0001 - 0x0000)
struct BP_Options_Slider_C_OnFocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Options_Slider_C_OnFocused) == 0x000001, "Wrong alignment on BP_Options_Slider_C_OnFocused");
static_assert(sizeof(BP_Options_Slider_C_OnFocused) == 0x000001, "Wrong size on BP_Options_Slider_C_OnFocused");
static_assert(offsetof(BP_Options_Slider_C_OnFocused, bAnimate) == 0x000000, "Member 'BP_Options_Slider_C_OnFocused::bAnimate' has a wrong offset!");

// Function BP_Options_Slider.BP_Options_Slider_C.OnSetValue
// 0x0004 (0x0004 - 0x0000)
struct BP_Options_Slider_C_OnSetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Options_Slider_C_OnSetValue) == 0x000004, "Wrong alignment on BP_Options_Slider_C_OnSetValue");
static_assert(sizeof(BP_Options_Slider_C_OnSetValue) == 0x000004, "Wrong size on BP_Options_Slider_C_OnSetValue");
static_assert(offsetof(BP_Options_Slider_C_OnSetValue, InValue) == 0x000000, "Member 'BP_Options_Slider_C_OnSetValue::InValue' has a wrong offset!");

// Function BP_Options_Slider.BP_Options_Slider_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Options_Slider_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Options_Slider_C_Tick) == 0x000004, "Wrong alignment on BP_Options_Slider_C_Tick");
static_assert(sizeof(BP_Options_Slider_C_Tick) == 0x00003C, "Wrong size on BP_Options_Slider_C_Tick");
static_assert(offsetof(BP_Options_Slider_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Options_Slider_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Options_Slider_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Options_Slider.BP_Options_Slider_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Options_Slider_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Options_Slider_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Options_Slider_C_PreConstruct");
static_assert(sizeof(BP_Options_Slider_C_PreConstruct) == 0x000001, "Wrong size on BP_Options_Slider_C_PreConstruct");
static_assert(offsetof(BP_Options_Slider_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Options_Slider_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Options_Slider.BP_Options_Slider_C.BPSetValue
// 0x0028 (0x0028 - 0x0000)
struct BP_Options_Slider_C_BPSetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetDisplayValue_ReturnValue;              // 0x0008(0x0018)()
	float                                         CallFunc_GetPercentValue_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Options_Slider_C_BPSetValue) == 0x000008, "Wrong alignment on BP_Options_Slider_C_BPSetValue");
static_assert(sizeof(BP_Options_Slider_C_BPSetValue) == 0x000028, "Wrong size on BP_Options_Slider_C_BPSetValue");
static_assert(offsetof(BP_Options_Slider_C_BPSetValue, InValue) == 0x000000, "Member 'BP_Options_Slider_C_BPSetValue::InValue' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_BPSetValue, CallFunc_GetDisplayValue_ReturnValue) == 0x000008, "Member 'BP_Options_Slider_C_BPSetValue::CallFunc_GetDisplayValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_BPSetValue, CallFunc_GetPercentValue_ReturnValue) == 0x000020, "Member 'BP_Options_Slider_C_BPSetValue::CallFunc_GetPercentValue_ReturnValue' has a wrong offset!");

// Function BP_Options_Slider.BP_Options_Slider_C.SetAttributeName
// 0x0018 (0x0018 - 0x0000)
struct BP_Options_Slider_C_SetAttributeName final
{
public:
	class FText                                   Caption;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_Options_Slider_C_SetAttributeName) == 0x000008, "Wrong alignment on BP_Options_Slider_C_SetAttributeName");
static_assert(sizeof(BP_Options_Slider_C_SetAttributeName) == 0x000018, "Wrong size on BP_Options_Slider_C_SetAttributeName");
static_assert(offsetof(BP_Options_Slider_C_SetAttributeName, Caption) == 0x000000, "Member 'BP_Options_Slider_C_SetAttributeName::Caption' has a wrong offset!");

// Function BP_Options_Slider.BP_Options_Slider_C.ToggleActive
// 0x0028 (0x0028 - 0x0000)
struct BP_Options_Slider_C_ToggleActive final
{
public:
	bool                                          InIsActive;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Options_Slider_C_ToggleActive) == 0x000008, "Wrong alignment on BP_Options_Slider_C_ToggleActive");
static_assert(sizeof(BP_Options_Slider_C_ToggleActive) == 0x000028, "Wrong size on BP_Options_Slider_C_ToggleActive");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, InIsActive) == 0x000000, "Member 'BP_Options_Slider_C_ToggleActive::InIsActive' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, Temp_bool_Variable) == 0x000001, "Member 'BP_Options_Slider_C_ToggleActive::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, Temp_byte_Variable) == 0x000002, "Member 'BP_Options_Slider_C_ToggleActive::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, Temp_byte_Variable_1) == 0x000003, "Member 'BP_Options_Slider_C_ToggleActive::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, Temp_bool_Variable_1) == 0x000004, "Member 'BP_Options_Slider_C_ToggleActive::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, Temp_byte_Variable_2) == 0x000005, "Member 'BP_Options_Slider_C_ToggleActive::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, Temp_byte_Variable_3) == 0x000006, "Member 'BP_Options_Slider_C_ToggleActive::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, Temp_bool_Variable_2) == 0x000007, "Member 'BP_Options_Slider_C_ToggleActive::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, Temp_object_Variable) == 0x000008, "Member 'BP_Options_Slider_C_ToggleActive::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, Temp_object_Variable_1) == 0x000010, "Member 'BP_Options_Slider_C_ToggleActive::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, K2Node_Select_Default) == 0x000018, "Member 'BP_Options_Slider_C_ToggleActive::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, K2Node_Select_Default_1) == 0x000019, "Member 'BP_Options_Slider_C_ToggleActive::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Slider_C_ToggleActive, K2Node_Select_Default_2) == 0x000020, "Member 'BP_Options_Slider_C_ToggleActive::K2Node_Select_Default_2' has a wrong offset!");

}

