#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Options_Subtitle

#include "Basic.hpp"

#include "BP_Options_Subtitle_classes.hpp"
#include "BP_Options_Subtitle_parameters.hpp"


namespace SDK
{

// Function BP_Options_Subtitle.BP_Options_Subtitle_C.ExecuteUbergraph_BP_Options_Subtitle
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Options_Subtitle_C::ExecuteUbergraph_BP_Options_Subtitle(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Options_Subtitle_C", "ExecuteUbergraph_BP_Options_Subtitle");

	Params::BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Options_Subtitle.BP_Options_Subtitle_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Options_Subtitle_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Options_Subtitle_C", "Tick");

	Params::BP_Options_Subtitle_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Options_Subtitle.BP_Options_Subtitle_C.OnShow
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   AnimDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Options_Subtitle_C::OnShow(float AnimDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Options_Subtitle_C", "OnShow");

	Params::BP_Options_Subtitle_C_OnShow Parms{};

	Parms.AnimDuration = AnimDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Options_Subtitle.BP_Options_Subtitle_C.OnHide
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   AnimDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Options_Subtitle_C::OnHide(float AnimDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Options_Subtitle_C", "OnHide");

	Params::BP_Options_Subtitle_C_OnHide Parms{};

	Parms.AnimDuration = AnimDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Options_Subtitle.BP_Options_Subtitle_C.OnShowSubtitleText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             InText                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             InLineIDText                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_Options_Subtitle_C::OnShowSubtitleText(const class FText& InText, const class FText& InLineIDText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Options_Subtitle_C", "OnShowSubtitleText");

	Params::BP_Options_Subtitle_C_OnShowSubtitleText Parms{};

	Parms.InText = std::move(InText);
	Parms.InLineIDText = std::move(InLineIDText);

	UObject::ProcessEvent(Func, &Parms);
}

}

