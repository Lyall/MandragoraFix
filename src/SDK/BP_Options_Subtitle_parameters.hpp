#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Options_Subtitle

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Options_Subtitle.BP_Options_Subtitle_C.ExecuteUbergraph_BP_Options_Subtitle
// 0x0078 (0x0078 - 0x0000)
struct BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InText;                               // 0x0048(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InLineIDText;                         // 0x0060(0x0018)(ConstParm)
};
static_assert(alignof(BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle) == 0x000008, "Wrong alignment on BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle");
static_assert(sizeof(BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle) == 0x000078, "Wrong size on BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle");
static_assert(offsetof(BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle, EntryPoint) == 0x000000, "Member 'BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle, K2Node_Event_AnimDuration) == 0x000004, "Member 'BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle, K2Node_Event_AnimDuration_1) == 0x000044, "Member 'BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle, K2Node_Event_InText) == 0x000048, "Member 'BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle::K2Node_Event_InText' has a wrong offset!");
static_assert(offsetof(BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle, K2Node_Event_InLineIDText) == 0x000060, "Member 'BP_Options_Subtitle_C_ExecuteUbergraph_BP_Options_Subtitle::K2Node_Event_InLineIDText' has a wrong offset!");

// Function BP_Options_Subtitle.BP_Options_Subtitle_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Options_Subtitle_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Options_Subtitle_C_Tick) == 0x000004, "Wrong alignment on BP_Options_Subtitle_C_Tick");
static_assert(sizeof(BP_Options_Subtitle_C_Tick) == 0x00003C, "Wrong size on BP_Options_Subtitle_C_Tick");
static_assert(offsetof(BP_Options_Subtitle_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Options_Subtitle_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Options_Subtitle_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Options_Subtitle_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Options_Subtitle.BP_Options_Subtitle_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_Options_Subtitle_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Options_Subtitle_C_OnShow) == 0x000004, "Wrong alignment on BP_Options_Subtitle_C_OnShow");
static_assert(sizeof(BP_Options_Subtitle_C_OnShow) == 0x000004, "Wrong size on BP_Options_Subtitle_C_OnShow");
static_assert(offsetof(BP_Options_Subtitle_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_Options_Subtitle_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_Options_Subtitle.BP_Options_Subtitle_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_Options_Subtitle_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Options_Subtitle_C_OnHide) == 0x000004, "Wrong alignment on BP_Options_Subtitle_C_OnHide");
static_assert(sizeof(BP_Options_Subtitle_C_OnHide) == 0x000004, "Wrong size on BP_Options_Subtitle_C_OnHide");
static_assert(offsetof(BP_Options_Subtitle_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_Options_Subtitle_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_Options_Subtitle.BP_Options_Subtitle_C.OnShowSubtitleText
// 0x0030 (0x0030 - 0x0000)
struct BP_Options_Subtitle_C_OnShowSubtitleText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InLineIDText;                                      // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Options_Subtitle_C_OnShowSubtitleText) == 0x000008, "Wrong alignment on BP_Options_Subtitle_C_OnShowSubtitleText");
static_assert(sizeof(BP_Options_Subtitle_C_OnShowSubtitleText) == 0x000030, "Wrong size on BP_Options_Subtitle_C_OnShowSubtitleText");
static_assert(offsetof(BP_Options_Subtitle_C_OnShowSubtitleText, InText) == 0x000000, "Member 'BP_Options_Subtitle_C_OnShowSubtitleText::InText' has a wrong offset!");
static_assert(offsetof(BP_Options_Subtitle_C_OnShowSubtitleText, InLineIDText) == 0x000018, "Member 'BP_Options_Subtitle_C_OnShowSubtitleText::InLineIDText' has a wrong offset!");

}

