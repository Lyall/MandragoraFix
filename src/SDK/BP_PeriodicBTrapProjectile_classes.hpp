#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PeriodicBTrapProjectile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PeriodicBTrapProjectile.BP_PeriodicBTrapProjectile_C
// 0x0030 (0x0B20 - 0x0AF0)
class ABP_PeriodicBTrapProjectile_C final : public AManProjectile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AF0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak;                                                // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene1;                                            // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PeriodicBTrapProjectile(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PeriodicBTrapProjectile_C">();
	}
	static class ABP_PeriodicBTrapProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PeriodicBTrapProjectile_C>();
	}
};
static_assert(alignof(ABP_PeriodicBTrapProjectile_C) == 0x000008, "Wrong alignment on ABP_PeriodicBTrapProjectile_C");
static_assert(sizeof(ABP_PeriodicBTrapProjectile_C) == 0x000B20, "Wrong size on ABP_PeriodicBTrapProjectile_C");
static_assert(offsetof(ABP_PeriodicBTrapProjectile_C, UberGraphFrame) == 0x000AF0, "Member 'ABP_PeriodicBTrapProjectile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PeriodicBTrapProjectile_C, Ak) == 0x000AF8, "Member 'ABP_PeriodicBTrapProjectile_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_PeriodicBTrapProjectile_C, Scene1) == 0x000B00, "Member 'ABP_PeriodicBTrapProjectile_C::Scene1' has a wrong offset!");
static_assert(offsetof(ABP_PeriodicBTrapProjectile_C, Scene) == 0x000B08, "Member 'ABP_PeriodicBTrapProjectile_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_PeriodicBTrapProjectile_C, ParticleSystem) == 0x000B10, "Member 'ABP_PeriodicBTrapProjectile_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_PeriodicBTrapProjectile_C, SkeletalMesh) == 0x000B18, "Member 'ABP_PeriodicBTrapProjectile_C::SkeletalMesh' has a wrong offset!");

}

