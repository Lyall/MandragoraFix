#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerStatsWindow

#include "Basic.hpp"

#include "man_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerStatsWindow.BP_PlayerStatsWindow_C.ExecuteUbergraph_BP_PlayerStatsWindow
// 0x00B8 (0x00B8 - 0x0000)
struct BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetHeroName_ReturnValue;                  // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0078(0x0018)()
	class FText                                   K2Node_Event_LevelText;                            // 0x0090(0x0018)(ConstParm)
	float                                         K2Node_Event_PlayerCurrentXp;                      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_PlayerXpCurrentLevel;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_PlayerXpNextLevel;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InInputDisplay;                       // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InControlDisplay;                     // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow) == 0x000008, "Wrong alignment on BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow");
static_assert(sizeof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow) == 0x0000B8, "Wrong size on BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, EntryPoint) == 0x000000, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, K2Node_Event_MyGeometry) == 0x000004, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, K2Node_Event_AnimDuration_1) == 0x000040, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x000044, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, K2Node_Event_AnimDuration) == 0x000048, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, CallFunc_PlayAnimation_ReturnValue) == 0x000050, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x000058, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, CallFunc_PlayAnimation_ReturnValue_1) == 0x000060, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, CallFunc_GetHeroName_ReturnValue) == 0x000068, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::CallFunc_GetHeroName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, CallFunc_Conv_StringToText_ReturnValue) == 0x000078, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, K2Node_Event_LevelText) == 0x000090, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::K2Node_Event_LevelText' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, K2Node_Event_PlayerCurrentXp) == 0x0000A8, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::K2Node_Event_PlayerCurrentXp' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, K2Node_Event_PlayerXpCurrentLevel) == 0x0000AC, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::K2Node_Event_PlayerXpCurrentLevel' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, K2Node_Event_PlayerXpNextLevel) == 0x0000B0, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::K2Node_Event_PlayerXpNextLevel' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, K2Node_Event_InInputDisplay) == 0x0000B4, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::K2Node_Event_InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow, K2Node_Event_InControlDisplay) == 0x0000B5, "Member 'BP_PlayerStatsWindow_C_ExecuteUbergraph_BP_PlayerStatsWindow::K2Node_Event_InControlDisplay' has a wrong offset!");

// Function BP_PlayerStatsWindow.BP_PlayerStatsWindow_C.OnSetInputDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerStatsWindow_C_OnSetInputDisplay final
{
public:
	EInputDisplay                                 InInputDisplay;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 InControlDisplay;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerStatsWindow_C_OnSetInputDisplay) == 0x000001, "Wrong alignment on BP_PlayerStatsWindow_C_OnSetInputDisplay");
static_assert(sizeof(BP_PlayerStatsWindow_C_OnSetInputDisplay) == 0x000002, "Wrong size on BP_PlayerStatsWindow_C_OnSetInputDisplay");
static_assert(offsetof(BP_PlayerStatsWindow_C_OnSetInputDisplay, InInputDisplay) == 0x000000, "Member 'BP_PlayerStatsWindow_C_OnSetInputDisplay::InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_OnSetInputDisplay, InControlDisplay) == 0x000001, "Member 'BP_PlayerStatsWindow_C_OnSetInputDisplay::InControlDisplay' has a wrong offset!");

// Function BP_PlayerStatsWindow.BP_PlayerStatsWindow_C.OnSetXp
// 0x000C (0x000C - 0x0000)
struct BP_PlayerStatsWindow_C_OnSetXp final
{
public:
	float                                         PlayerCurrentXp;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerXpCurrentLevel;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerXpNextLevel;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerStatsWindow_C_OnSetXp) == 0x000004, "Wrong alignment on BP_PlayerStatsWindow_C_OnSetXp");
static_assert(sizeof(BP_PlayerStatsWindow_C_OnSetXp) == 0x00000C, "Wrong size on BP_PlayerStatsWindow_C_OnSetXp");
static_assert(offsetof(BP_PlayerStatsWindow_C_OnSetXp, PlayerCurrentXp) == 0x000000, "Member 'BP_PlayerStatsWindow_C_OnSetXp::PlayerCurrentXp' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_OnSetXp, PlayerXpCurrentLevel) == 0x000004, "Member 'BP_PlayerStatsWindow_C_OnSetXp::PlayerXpCurrentLevel' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_OnSetXp, PlayerXpNextLevel) == 0x000008, "Member 'BP_PlayerStatsWindow_C_OnSetXp::PlayerXpNextLevel' has a wrong offset!");

// Function BP_PlayerStatsWindow.BP_PlayerStatsWindow_C.OnSetHeroLevel
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerStatsWindow_C_OnSetHeroLevel final
{
public:
	class FText                                   LevelText;                                         // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_PlayerStatsWindow_C_OnSetHeroLevel) == 0x000008, "Wrong alignment on BP_PlayerStatsWindow_C_OnSetHeroLevel");
static_assert(sizeof(BP_PlayerStatsWindow_C_OnSetHeroLevel) == 0x000018, "Wrong size on BP_PlayerStatsWindow_C_OnSetHeroLevel");
static_assert(offsetof(BP_PlayerStatsWindow_C_OnSetHeroLevel, LevelText) == 0x000000, "Member 'BP_PlayerStatsWindow_C_OnSetHeroLevel::LevelText' has a wrong offset!");

// Function BP_PlayerStatsWindow.BP_PlayerStatsWindow_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerStatsWindow_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerStatsWindow_C_OnHide) == 0x000004, "Wrong alignment on BP_PlayerStatsWindow_C_OnHide");
static_assert(sizeof(BP_PlayerStatsWindow_C_OnHide) == 0x000004, "Wrong size on BP_PlayerStatsWindow_C_OnHide");
static_assert(offsetof(BP_PlayerStatsWindow_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_PlayerStatsWindow_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_PlayerStatsWindow.BP_PlayerStatsWindow_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerStatsWindow_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerStatsWindow_C_OnShow) == 0x000004, "Wrong alignment on BP_PlayerStatsWindow_C_OnShow");
static_assert(sizeof(BP_PlayerStatsWindow_C_OnShow) == 0x000004, "Wrong size on BP_PlayerStatsWindow_C_OnShow");
static_assert(offsetof(BP_PlayerStatsWindow_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_PlayerStatsWindow_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_PlayerStatsWindow.BP_PlayerStatsWindow_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_PlayerStatsWindow_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerStatsWindow_C_Tick) == 0x000004, "Wrong alignment on BP_PlayerStatsWindow_C_Tick");
static_assert(sizeof(BP_PlayerStatsWindow_C_Tick) == 0x00003C, "Wrong size on BP_PlayerStatsWindow_C_Tick");
static_assert(offsetof(BP_PlayerStatsWindow_C_Tick, MyGeometry) == 0x000000, "Member 'BP_PlayerStatsWindow_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_PlayerStatsWindow_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_PlayerStatsWindow.BP_PlayerStatsWindow_C.SetXP
// 0x000C (0x000C - 0x0000)
struct BP_PlayerStatsWindow_C_SetXP final
{
public:
	float                                         InCurrentXP;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InCurrentLevelXP;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InNextLevelXP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerStatsWindow_C_SetXP) == 0x000004, "Wrong alignment on BP_PlayerStatsWindow_C_SetXP");
static_assert(sizeof(BP_PlayerStatsWindow_C_SetXP) == 0x00000C, "Wrong size on BP_PlayerStatsWindow_C_SetXP");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetXP, InCurrentXP) == 0x000000, "Member 'BP_PlayerStatsWindow_C_SetXP::InCurrentXP' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetXP, InCurrentLevelXP) == 0x000004, "Member 'BP_PlayerStatsWindow_C_SetXP::InCurrentLevelXP' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetXP, InNextLevelXP) == 0x000008, "Member 'BP_PlayerStatsWindow_C_SetXP::InNextLevelXP' has a wrong offset!");

// Function BP_PlayerStatsWindow.BP_PlayerStatsWindow_C.ScrollToStart
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerStatsWindow_C_ScrollToStart final
{
public:
	float                                         CallFunc_GetScrollOffset_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerStatsWindow_C_ScrollToStart) == 0x000004, "Wrong alignment on BP_PlayerStatsWindow_C_ScrollToStart");
static_assert(sizeof(BP_PlayerStatsWindow_C_ScrollToStart) == 0x000008, "Wrong size on BP_PlayerStatsWindow_C_ScrollToStart");
static_assert(offsetof(BP_PlayerStatsWindow_C_ScrollToStart, CallFunc_GetScrollOffset_ReturnValue) == 0x000000, "Member 'BP_PlayerStatsWindow_C_ScrollToStart::CallFunc_GetScrollOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ScrollToStart, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerStatsWindow_C_ScrollToStart::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerStatsWindow.BP_PlayerStatsWindow_C.ScrollToEnd
// 0x001C (0x001C - 0x0000)
struct BP_PlayerStatsWindow_C_ScrollToEnd final
{
public:
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScrollOffsetOfEnd_ReturnValue;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScrollOffset_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerStatsWindow_C_ScrollToEnd) == 0x000004, "Wrong alignment on BP_PlayerStatsWindow_C_ScrollToEnd");
static_assert(sizeof(BP_PlayerStatsWindow_C_ScrollToEnd) == 0x00001C, "Wrong size on BP_PlayerStatsWindow_C_ScrollToEnd");
static_assert(offsetof(BP_PlayerStatsWindow_C_ScrollToEnd, CallFunc_GetDesiredSize_ReturnValue) == 0x000000, "Member 'BP_PlayerStatsWindow_C_ScrollToEnd::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ScrollToEnd, CallFunc_BreakVector2D_X) == 0x000008, "Member 'BP_PlayerStatsWindow_C_ScrollToEnd::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ScrollToEnd, CallFunc_BreakVector2D_Y) == 0x00000C, "Member 'BP_PlayerStatsWindow_C_ScrollToEnd::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ScrollToEnd, CallFunc_GetScrollOffsetOfEnd_ReturnValue) == 0x000010, "Member 'BP_PlayerStatsWindow_C_ScrollToEnd::CallFunc_GetScrollOffsetOfEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ScrollToEnd, CallFunc_GetScrollOffset_ReturnValue) == 0x000014, "Member 'BP_PlayerStatsWindow_C_ScrollToEnd::CallFunc_GetScrollOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_ScrollToEnd, CallFunc_Less_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_PlayerStatsWindow_C_ScrollToEnd::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerStatsWindow.BP_PlayerStatsWindow_C.SetBtnCloseVisibility
// 0x000B (0x000B - 0x0000)
struct BP_PlayerStatsWindow_C_SetBtnCloseVisibility final
{
public:
	EInputDisplay                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 CallFunc_GetInputDisplay_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility) == 0x000001, "Wrong alignment on BP_PlayerStatsWindow_C_SetBtnCloseVisibility");
static_assert(sizeof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility) == 0x00000B, "Wrong size on BP_PlayerStatsWindow_C_SetBtnCloseVisibility");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility, Temp_byte_Variable) == 0x000000, "Member 'BP_PlayerStatsWindow_C_SetBtnCloseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'BP_PlayerStatsWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_2) == 0x000002, "Member 'BP_PlayerStatsWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_3) == 0x000003, "Member 'BP_PlayerStatsWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_4) == 0x000004, "Member 'BP_PlayerStatsWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_5) == 0x000005, "Member 'BP_PlayerStatsWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_6) == 0x000006, "Member 'BP_PlayerStatsWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_7) == 0x000007, "Member 'BP_PlayerStatsWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_8) == 0x000008, "Member 'BP_PlayerStatsWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility, CallFunc_GetInputDisplay_ReturnValue) == 0x000009, "Member 'BP_PlayerStatsWindow_C_SetBtnCloseVisibility::CallFunc_GetInputDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStatsWindow_C_SetBtnCloseVisibility, K2Node_Select_Default) == 0x00000A, "Member 'BP_PlayerStatsWindow_C_SetBtnCloseVisibility::K2Node_Select_Default' has a wrong offset!");

}

