#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QuestNotification

#include "Basic.hpp"

#include "BP_QuestNotification_classes.hpp"
#include "BP_QuestNotification_parameters.hpp"


namespace SDK
{

// Function BP_QuestNotification.BP_QuestNotification_C.ExecuteUbergraph_BP_QuestNotification
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QuestNotification_C::ExecuteUbergraph_BP_QuestNotification(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "ExecuteUbergraph_BP_QuestNotification");

	Params::BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QuestNotification.BP_QuestNotification_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_QuestNotification_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "PreConstruct");

	Params::BP_QuestNotification_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QuestNotification.BP_QuestNotification_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_QuestNotification_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QuestNotification.BP_QuestNotification_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QuestNotification_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "Tick");

	Params::BP_QuestNotification_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QuestNotification.BP_QuestNotification_C.SetQuest
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UManQuest*                        InManQuest                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UManQuestObjective*>       InObjectives                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_QuestNotification_C::SetQuest(class UManQuest* InManQuest, TArray<class UManQuestObjective*>& InObjectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "SetQuest");

	Params::BP_QuestNotification_C_SetQuest Parms{};

	Parms.InManQuest = InManQuest;
	Parms.InObjectives = std::move(InObjectives);

	UObject::ProcessEvent(Func, &Parms);

	InObjectives = std::move(Parms.InObjectives);
}


// Function BP_QuestNotification.BP_QuestNotification_C.ShowQuest
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_QuestNotification_C::ShowQuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "ShowQuest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QuestNotification.BP_QuestNotification_C.HideQuest
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_QuestNotification_C::HideQuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "HideQuest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QuestNotification.BP_QuestNotification_C.UpdateObjective
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UManQuestObjective*>       InObjectives                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_QuestNotification_C::UpdateObjective(TArray<class UManQuestObjective*>& InObjectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "UpdateObjective");

	Params::BP_QuestNotification_C_UpdateObjective Parms{};

	Parms.InObjectives = std::move(InObjectives);

	UObject::ProcessEvent(Func, &Parms);

	InObjectives = std::move(Parms.InObjectives);
}


// Function BP_QuestNotification.BP_QuestNotification_C.ShowNewObjective
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_QuestNotification_C::ShowNewObjective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "ShowNewObjective");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QuestNotification.BP_QuestNotification_C.FadeQuest
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_QuestNotification_C::FadeQuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "FadeQuest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QuestNotification.BP_QuestNotification_C.SetObjectivesState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UManQuestObjective*>       InObjectives                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_QuestNotification_C::SetObjectivesState(TArray<class UManQuestObjective*>& InObjectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "SetObjectivesState");

	Params::BP_QuestNotification_C_SetObjectivesState Parms{};

	Parms.InObjectives = std::move(InObjectives);

	UObject::ProcessEvent(Func, &Parms);

	InObjectives = std::move(Parms.InObjectives);
}


// Function BP_QuestNotification.BP_QuestNotification_C.FadeOutBackground
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_QuestNotification_C::FadeOutBackground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "FadeOutBackground");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QuestNotification.BP_QuestNotification_C.FadeInBackground
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_QuestNotification_C::FadeInBackground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "FadeInBackground");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QuestNotification.BP_QuestNotification_C.ToggleSmallScreen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsSmallScreen                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_QuestNotification_C::ToggleSmallScreen(bool InIsSmallScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestNotification_C", "ToggleSmallScreen");

	Params::BP_QuestNotification_C_ToggleSmallScreen Parms{};

	Parms.InIsSmallScreen = InIsSmallScreen;

	UObject::ProcessEvent(Func, &Parms);
}

}

