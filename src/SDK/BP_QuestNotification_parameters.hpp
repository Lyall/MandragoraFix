#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QuestNotification

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_QuestNotification.BP_QuestNotification_C.ExecuteUbergraph_BP_QuestNotification
// 0x0044 (0x0044 - 0x0000)
struct BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification) == 0x000004, "Wrong alignment on BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification");
static_assert(sizeof(BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification) == 0x000044, "Wrong size on BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification");
static_assert(offsetof(BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification, EntryPoint) == 0x000000, "Member 'BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_QuestNotification_C_ExecuteUbergraph_BP_QuestNotification::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_QuestNotification_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QuestNotification_C_PreConstruct) == 0x000001, "Wrong alignment on BP_QuestNotification_C_PreConstruct");
static_assert(sizeof(BP_QuestNotification_C_PreConstruct) == 0x000001, "Wrong size on BP_QuestNotification_C_PreConstruct");
static_assert(offsetof(BP_QuestNotification_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_QuestNotification_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_QuestNotification_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestNotification_C_Tick) == 0x000004, "Wrong alignment on BP_QuestNotification_C_Tick");
static_assert(sizeof(BP_QuestNotification_C_Tick) == 0x00003C, "Wrong size on BP_QuestNotification_C_Tick");
static_assert(offsetof(BP_QuestNotification_C_Tick, MyGeometry) == 0x000000, "Member 'BP_QuestNotification_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_QuestNotification_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.SetQuest
// 0x0038 (0x0038 - 0x0000)
struct BP_QuestNotification_C_SetQuest final
{
public:
	class UManQuest*                              InManQuest;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UManQuestObjective*>             InObjectives;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   CallFunc_GetQuestDisplayName_ReturnValue;          // 0x0018(0x0018)(ConstParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QuestNotification_C_SetQuest) == 0x000008, "Wrong alignment on BP_QuestNotification_C_SetQuest");
static_assert(sizeof(BP_QuestNotification_C_SetQuest) == 0x000038, "Wrong size on BP_QuestNotification_C_SetQuest");
static_assert(offsetof(BP_QuestNotification_C_SetQuest, InManQuest) == 0x000000, "Member 'BP_QuestNotification_C_SetQuest::InManQuest' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetQuest, InObjectives) == 0x000008, "Member 'BP_QuestNotification_C_SetQuest::InObjectives' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetQuest, CallFunc_GetQuestDisplayName_ReturnValue) == 0x000018, "Member 'BP_QuestNotification_C_SetQuest::CallFunc_GetQuestDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetQuest, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_QuestNotification_C_SetQuest::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.ShowQuest
// 0x0018 (0x0018 - 0x0000)
struct BP_QuestNotification_C_ShowQuest final
{
public:
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestNotification_C_ShowQuest) == 0x000008, "Wrong alignment on BP_QuestNotification_C_ShowQuest");
static_assert(sizeof(BP_QuestNotification_C_ShowQuest) == 0x000018, "Wrong size on BP_QuestNotification_C_ShowQuest");
static_assert(offsetof(BP_QuestNotification_C_ShowQuest, CallFunc_GetRenderOpacity_ReturnValue) == 0x000000, "Member 'BP_QuestNotification_C_ShowQuest::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ShowQuest, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'BP_QuestNotification_C_ShowQuest::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ShowQuest, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_QuestNotification_C_ShowQuest::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.HideQuest
// 0x0010 (0x0010 - 0x0000)
struct BP_QuestNotification_C_HideQuest final
{
public:
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestNotification_C_HideQuest) == 0x000008, "Wrong alignment on BP_QuestNotification_C_HideQuest");
static_assert(sizeof(BP_QuestNotification_C_HideQuest) == 0x000010, "Wrong size on BP_QuestNotification_C_HideQuest");
static_assert(offsetof(BP_QuestNotification_C_HideQuest, CallFunc_GetRenderOpacity_ReturnValue) == 0x000000, "Member 'BP_QuestNotification_C_HideQuest::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_HideQuest, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_QuestNotification_C_HideQuest::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_HideQuest, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_QuestNotification_C_HideQuest::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.UpdateObjective
// 0x0010 (0x0010 - 0x0000)
struct BP_QuestNotification_C_UpdateObjective final
{
public:
	TArray<class UManQuestObjective*>             InObjectives;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_QuestNotification_C_UpdateObjective) == 0x000008, "Wrong alignment on BP_QuestNotification_C_UpdateObjective");
static_assert(sizeof(BP_QuestNotification_C_UpdateObjective) == 0x000010, "Wrong size on BP_QuestNotification_C_UpdateObjective");
static_assert(offsetof(BP_QuestNotification_C_UpdateObjective, InObjectives) == 0x000000, "Member 'BP_QuestNotification_C_UpdateObjective::InObjectives' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.ShowNewObjective
// 0x0008 (0x0008 - 0x0000)
struct BP_QuestNotification_C_ShowNewObjective final
{
public:
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestNotification_C_ShowNewObjective) == 0x000008, "Wrong alignment on BP_QuestNotification_C_ShowNewObjective");
static_assert(sizeof(BP_QuestNotification_C_ShowNewObjective) == 0x000008, "Wrong size on BP_QuestNotification_C_ShowNewObjective");
static_assert(offsetof(BP_QuestNotification_C_ShowNewObjective, CallFunc_K2_SetTimer_ReturnValue) == 0x000000, "Member 'BP_QuestNotification_C_ShowNewObjective::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.FadeQuest
// 0x0008 (0x0008 - 0x0000)
struct BP_QuestNotification_C_FadeQuest final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestNotification_C_FadeQuest) == 0x000008, "Wrong alignment on BP_QuestNotification_C_FadeQuest");
static_assert(sizeof(BP_QuestNotification_C_FadeQuest) == 0x000008, "Wrong size on BP_QuestNotification_C_FadeQuest");
static_assert(offsetof(BP_QuestNotification_C_FadeQuest, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_QuestNotification_C_FadeQuest::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.SetObjectivesState
// 0x0080 (0x0080 - 0x0000)
struct BP_QuestNotification_C_SetObjectivesState final
{
public:
	TArray<class UManQuestObjective*>             InObjectives;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         ArrayIndex;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UManQuestObjective*                     CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_BPGetObjectiveText_ReturnValue;           // 0x0020(0x0018)()
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget*>                        CallFunc_GetAllChildrenOfClass_ReturnValue;        // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item_1;                         // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_QuestNotificationObjective_C*       K2Node_DynamicCast_AsBP_Quest_Notification_Objective; // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QuestNotification_C_SetObjectivesState) == 0x000008, "Wrong alignment on BP_QuestNotification_C_SetObjectivesState");
static_assert(sizeof(BP_QuestNotification_C_SetObjectivesState) == 0x000080, "Wrong size on BP_QuestNotification_C_SetObjectivesState");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, InObjectives) == 0x000000, "Member 'BP_QuestNotification_C_SetObjectivesState::InObjectives' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, ArrayIndex) == 0x000010, "Member 'BP_QuestNotification_C_SetObjectivesState::ArrayIndex' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_QuestNotification_C_SetObjectivesState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_QuestNotification_C_SetObjectivesState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, CallFunc_BPGetObjectiveText_ReturnValue) == 0x000020, "Member 'BP_QuestNotification_C_SetObjectivesState::CallFunc_BPGetObjectiveText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000038, "Member 'BP_QuestNotification_C_SetObjectivesState::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_QuestNotification_C_SetObjectivesState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_QuestNotification_C_SetObjectivesState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_QuestNotification_C_SetObjectivesState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, CallFunc_GetAllChildrenOfClass_ReturnValue) == 0x000048, "Member 'BP_QuestNotification_C_SetObjectivesState::CallFunc_GetAllChildrenOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_QuestNotification_C_SetObjectivesState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, CallFunc_Array_Get_Item_1) == 0x000060, "Member 'BP_QuestNotification_C_SetObjectivesState::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_QuestNotification_C_SetObjectivesState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, K2Node_DynamicCast_AsBP_Quest_Notification_Objective) == 0x000070, "Member 'BP_QuestNotification_C_SetObjectivesState::K2Node_DynamicCast_AsBP_Quest_Notification_Objective' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_SetObjectivesState, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BP_QuestNotification_C_SetObjectivesState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.FadeOutBackground
// 0x0010 (0x0010 - 0x0000)
struct BP_QuestNotification_C_FadeOutBackground final
{
public:
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestNotification_C_FadeOutBackground) == 0x000008, "Wrong alignment on BP_QuestNotification_C_FadeOutBackground");
static_assert(sizeof(BP_QuestNotification_C_FadeOutBackground) == 0x000010, "Wrong size on BP_QuestNotification_C_FadeOutBackground");
static_assert(offsetof(BP_QuestNotification_C_FadeOutBackground, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000000, "Member 'BP_QuestNotification_C_FadeOutBackground::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_FadeOutBackground, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_QuestNotification_C_FadeOutBackground::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.FadeInBackground
// 0x0010 (0x0010 - 0x0000)
struct BP_QuestNotification_C_FadeInBackground final
{
public:
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestNotification_C_FadeInBackground) == 0x000008, "Wrong alignment on BP_QuestNotification_C_FadeInBackground");
static_assert(sizeof(BP_QuestNotification_C_FadeInBackground) == 0x000010, "Wrong size on BP_QuestNotification_C_FadeInBackground");
static_assert(offsetof(BP_QuestNotification_C_FadeInBackground, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000000, "Member 'BP_QuestNotification_C_FadeInBackground::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_FadeInBackground, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_QuestNotification_C_FadeInBackground::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_QuestNotification.BP_QuestNotification_C.ToggleSmallScreen
// 0x0058 (0x0058 - 0x0000)
struct BP_QuestNotification_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QuestNotification_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_QuestNotification_C_ToggleSmallScreen");
static_assert(sizeof(BP_QuestNotification_C_ToggleSmallScreen) == 0x000058, "Wrong size on BP_QuestNotification_C_ToggleSmallScreen");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_QuestNotification_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_QuestNotification_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, Temp_float_Variable) == 0x000004, "Member 'BP_QuestNotification_C_ToggleSmallScreen::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, Temp_float_Variable_1) == 0x000008, "Member 'BP_QuestNotification_C_ToggleSmallScreen::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_QuestNotification_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, Temp_float_Variable_2) == 0x000010, "Member 'BP_QuestNotification_C_ToggleSmallScreen::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, Temp_float_Variable_3) == 0x000014, "Member 'BP_QuestNotification_C_ToggleSmallScreen::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, Temp_bool_Variable_2) == 0x000018, "Member 'BP_QuestNotification_C_ToggleSmallScreen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, Temp_byte_Variable) == 0x000019, "Member 'BP_QuestNotification_C_ToggleSmallScreen::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, Temp_byte_Variable_1) == 0x00001A, "Member 'BP_QuestNotification_C_ToggleSmallScreen::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, K2Node_Select_Default) == 0x00001B, "Member 'BP_QuestNotification_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x00001C, "Member 'BP_QuestNotification_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, K2Node_MakeStruct_Margin) == 0x000020, "Member 'BP_QuestNotification_C_ToggleSmallScreen::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, CallFunc_SlotAsVerticalBoxSlot_ReturnValue) == 0x000030, "Member 'BP_QuestNotification_C_ToggleSmallScreen::CallFunc_SlotAsVerticalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, K2Node_Select_Default_2) == 0x000038, "Member 'BP_QuestNotification_C_ToggleSmallScreen::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000040, "Member 'BP_QuestNotification_C_ToggleSmallScreen::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestNotification_C_ToggleSmallScreen, K2Node_MakeStruct_Margin_1) == 0x000048, "Member 'BP_QuestNotification_C_ToggleSmallScreen::K2Node_MakeStruct_Margin_1' has a wrong offset!");

}

