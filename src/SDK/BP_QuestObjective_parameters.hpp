#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QuestObjective

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "man_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_QuestObjective.BP_QuestObjective_C.ExecuteUbergraph_BP_QuestObjective
// 0x0050 (0x0050 - 0x0000)
struct BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESmallScreenMode                              CallFunc_GetSmallScreenMode_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESmallScreenMode                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_InObjectiveText;                      // 0x0010(0x0018)(ConstParm)
	EQuestState                                   K2Node_Event_InObjectiveState;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_InCounterText;                        // 0x0030(0x0018)(ConstParm)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective) == 0x000008, "Wrong alignment on BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective");
static_assert(sizeof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective) == 0x000050, "Wrong size on BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, EntryPoint) == 0x000000, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, CallFunc_GetSmallScreenMode_ReturnValue) == 0x000004, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::CallFunc_GetSmallScreenMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, Temp_byte_Variable) == 0x000005, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, Temp_bool_Variable) == 0x000006, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, Temp_bool_Variable_1) == 0x000007, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, Temp_bool_Variable_2) == 0x000008, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, Temp_bool_Variable_3) == 0x000009, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, K2Node_Event_IsDesignTime) == 0x00000A, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, K2Node_Select_Default) == 0x00000B, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, K2Node_Event_InObjectiveText) == 0x000010, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::K2Node_Event_InObjectiveText' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, K2Node_Event_InObjectiveState) == 0x000028, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::K2Node_Event_InObjectiveState' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, K2Node_Event_InCounterText) == 0x000030, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::K2Node_Event_InCounterText' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, CallFunc_TextIsEmpty_ReturnValue) == 0x000048, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective, CallFunc_Not_PreBool_ReturnValue) == 0x000049, "Member 'BP_QuestObjective_C_ExecuteUbergraph_BP_QuestObjective::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_QuestObjective.BP_QuestObjective_C.OnSetCounterText
// 0x0018 (0x0018 - 0x0000)
struct BP_QuestObjective_C_OnSetCounterText final
{
public:
	class FText                                   InCounterText;                                     // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_QuestObjective_C_OnSetCounterText) == 0x000008, "Wrong alignment on BP_QuestObjective_C_OnSetCounterText");
static_assert(sizeof(BP_QuestObjective_C_OnSetCounterText) == 0x000018, "Wrong size on BP_QuestObjective_C_OnSetCounterText");
static_assert(offsetof(BP_QuestObjective_C_OnSetCounterText, InCounterText) == 0x000000, "Member 'BP_QuestObjective_C_OnSetCounterText::InCounterText' has a wrong offset!");

// Function BP_QuestObjective.BP_QuestObjective_C.OnSetObjectiveState
// 0x0001 (0x0001 - 0x0000)
struct BP_QuestObjective_C_OnSetObjectiveState final
{
public:
	EQuestState                                   InObjectiveState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestObjective_C_OnSetObjectiveState) == 0x000001, "Wrong alignment on BP_QuestObjective_C_OnSetObjectiveState");
static_assert(sizeof(BP_QuestObjective_C_OnSetObjectiveState) == 0x000001, "Wrong size on BP_QuestObjective_C_OnSetObjectiveState");
static_assert(offsetof(BP_QuestObjective_C_OnSetObjectiveState, InObjectiveState) == 0x000000, "Member 'BP_QuestObjective_C_OnSetObjectiveState::InObjectiveState' has a wrong offset!");

// Function BP_QuestObjective.BP_QuestObjective_C.OnSetObjectiveText
// 0x0018 (0x0018 - 0x0000)
struct BP_QuestObjective_C_OnSetObjectiveText final
{
public:
	class FText                                   InObjectiveText;                                   // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_QuestObjective_C_OnSetObjectiveText) == 0x000008, "Wrong alignment on BP_QuestObjective_C_OnSetObjectiveText");
static_assert(sizeof(BP_QuestObjective_C_OnSetObjectiveText) == 0x000018, "Wrong size on BP_QuestObjective_C_OnSetObjectiveText");
static_assert(offsetof(BP_QuestObjective_C_OnSetObjectiveText, InObjectiveText) == 0x000000, "Member 'BP_QuestObjective_C_OnSetObjectiveText::InObjectiveText' has a wrong offset!");

// Function BP_QuestObjective.BP_QuestObjective_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_QuestObjective_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QuestObjective_C_PreConstruct) == 0x000001, "Wrong alignment on BP_QuestObjective_C_PreConstruct");
static_assert(sizeof(BP_QuestObjective_C_PreConstruct) == 0x000001, "Wrong size on BP_QuestObjective_C_PreConstruct");
static_assert(offsetof(BP_QuestObjective_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_QuestObjective_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_QuestObjective.BP_QuestObjective_C.SetState
// 0x0190 (0x0190 - 0x0000)
struct BP_QuestObjective_C_SetState final
{
public:
	EQuestState                                   InObjectiveState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuestState                                   Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuestState                                   Temp_byte_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuestState                                   Temp_byte_Variable_2;                              // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0087(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuestState                                   Temp_byte_Variable_8;                              // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_7;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_8;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_9;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default;                             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x00C0(0x0088)()
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0158(0x0028)()
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_3;                           // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestObjective_C_SetState) == 0x000008, "Wrong alignment on BP_QuestObjective_C_SetState");
static_assert(sizeof(BP_QuestObjective_C_SetState) == 0x000190, "Wrong size on BP_QuestObjective_C_SetState");
static_assert(offsetof(BP_QuestObjective_C_SetState, InObjectiveState) == 0x000000, "Member 'BP_QuestObjective_C_SetState::InObjectiveState' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_byte_Variable) == 0x000001, "Member 'BP_QuestObjective_C_SetState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_object_Variable) == 0x000008, "Member 'BP_QuestObjective_C_SetState::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_object_Variable_1) == 0x000010, "Member 'BP_QuestObjective_C_SetState::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_object_Variable_2) == 0x000018, "Member 'BP_QuestObjective_C_SetState::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_object_Variable_3) == 0x000020, "Member 'BP_QuestObjective_C_SetState::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_object_Variable_4) == 0x000028, "Member 'BP_QuestObjective_C_SetState::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_byte_Variable_1) == 0x000030, "Member 'BP_QuestObjective_C_SetState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_struct_Variable) == 0x000034, "Member 'BP_QuestObjective_C_SetState::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_struct_Variable_1) == 0x000044, "Member 'BP_QuestObjective_C_SetState::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_struct_Variable_2) == 0x000054, "Member 'BP_QuestObjective_C_SetState::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_struct_Variable_3) == 0x000064, "Member 'BP_QuestObjective_C_SetState::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_struct_Variable_4) == 0x000074, "Member 'BP_QuestObjective_C_SetState::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_byte_Variable_2) == 0x000084, "Member 'BP_QuestObjective_C_SetState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_byte_Variable_3) == 0x000085, "Member 'BP_QuestObjective_C_SetState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_byte_Variable_4) == 0x000086, "Member 'BP_QuestObjective_C_SetState::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_byte_Variable_5) == 0x000087, "Member 'BP_QuestObjective_C_SetState::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_byte_Variable_6) == 0x000088, "Member 'BP_QuestObjective_C_SetState::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_byte_Variable_7) == 0x000089, "Member 'BP_QuestObjective_C_SetState::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_byte_Variable_8) == 0x00008A, "Member 'BP_QuestObjective_C_SetState::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_object_Variable_5) == 0x000090, "Member 'BP_QuestObjective_C_SetState::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_object_Variable_6) == 0x000098, "Member 'BP_QuestObjective_C_SetState::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_object_Variable_7) == 0x0000A0, "Member 'BP_QuestObjective_C_SetState::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_object_Variable_8) == 0x0000A8, "Member 'BP_QuestObjective_C_SetState::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, Temp_object_Variable_9) == 0x0000B0, "Member 'BP_QuestObjective_C_SetState::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, K2Node_Select_Default) == 0x0000B8, "Member 'BP_QuestObjective_C_SetState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, K2Node_MakeStruct_SlateBrush) == 0x0000C0, "Member 'BP_QuestObjective_C_SetState::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, K2Node_Select_Default_1) == 0x000148, "Member 'BP_QuestObjective_C_SetState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, K2Node_MakeStruct_SlateColor) == 0x000158, "Member 'BP_QuestObjective_C_SetState::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, K2Node_Select_Default_2) == 0x000180, "Member 'BP_QuestObjective_C_SetState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetState, K2Node_Select_Default_3) == 0x000188, "Member 'BP_QuestObjective_C_SetState::K2Node_Select_Default_3' has a wrong offset!");

// Function BP_QuestObjective.BP_QuestObjective_C.SetFirstItem
// 0x0005 (0x0005 - 0x0000)
struct BP_QuestObjective_C_SetFirstItem final
{
public:
	bool                                          IsTop;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestObjective_C_SetFirstItem) == 0x000001, "Wrong alignment on BP_QuestObjective_C_SetFirstItem");
static_assert(sizeof(BP_QuestObjective_C_SetFirstItem) == 0x000005, "Wrong size on BP_QuestObjective_C_SetFirstItem");
static_assert(offsetof(BP_QuestObjective_C_SetFirstItem, IsTop) == 0x000000, "Member 'BP_QuestObjective_C_SetFirstItem::IsTop' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetFirstItem, Temp_bool_Variable) == 0x000001, "Member 'BP_QuestObjective_C_SetFirstItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetFirstItem, Temp_byte_Variable) == 0x000002, "Member 'BP_QuestObjective_C_SetFirstItem::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetFirstItem, Temp_byte_Variable_1) == 0x000003, "Member 'BP_QuestObjective_C_SetFirstItem::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_SetFirstItem, K2Node_Select_Default) == 0x000004, "Member 'BP_QuestObjective_C_SetFirstItem::K2Node_Select_Default' has a wrong offset!");

// Function BP_QuestObjective.BP_QuestObjective_C.ShowCount
// 0x0005 (0x0005 - 0x0000)
struct BP_QuestObjective_C_ShowCount final
{
public:
	bool                                          IsCountVisible;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestObjective_C_ShowCount) == 0x000001, "Wrong alignment on BP_QuestObjective_C_ShowCount");
static_assert(sizeof(BP_QuestObjective_C_ShowCount) == 0x000005, "Wrong size on BP_QuestObjective_C_ShowCount");
static_assert(offsetof(BP_QuestObjective_C_ShowCount, IsCountVisible) == 0x000000, "Member 'BP_QuestObjective_C_ShowCount::IsCountVisible' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ShowCount, Temp_bool_Variable) == 0x000001, "Member 'BP_QuestObjective_C_ShowCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ShowCount, Temp_byte_Variable) == 0x000002, "Member 'BP_QuestObjective_C_ShowCount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ShowCount, Temp_byte_Variable_1) == 0x000003, "Member 'BP_QuestObjective_C_ShowCount::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ShowCount, K2Node_Select_Default) == 0x000004, "Member 'BP_QuestObjective_C_ShowCount::K2Node_Select_Default' has a wrong offset!");

// Function BP_QuestObjective.BP_QuestObjective_C.ToggleSmallScreen
// 0x00D8 (0x00D8 - 0x0000)
struct BP_QuestObjective_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0020(0x0058)(HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_1;                 // 0x0080(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestObjective_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_QuestObjective_C_ToggleSmallScreen");
static_assert(sizeof(BP_QuestObjective_C_ToggleSmallScreen) == 0x0000D8, "Wrong size on BP_QuestObjective_C_ToggleSmallScreen");
static_assert(offsetof(BP_QuestObjective_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_QuestObjective_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_QuestObjective_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ToggleSmallScreen, Temp_int_Variable) == 0x000004, "Member 'BP_QuestObjective_C_ToggleSmallScreen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ToggleSmallScreen, Temp_int_Variable_1) == 0x000008, "Member 'BP_QuestObjective_C_ToggleSmallScreen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_QuestObjective_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ToggleSmallScreen, Temp_int_Variable_2) == 0x000010, "Member 'BP_QuestObjective_C_ToggleSmallScreen::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ToggleSmallScreen, Temp_int_Variable_3) == 0x000014, "Member 'BP_QuestObjective_C_ToggleSmallScreen::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ToggleSmallScreen, K2Node_Select_Default) == 0x000018, "Member 'BP_QuestObjective_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo) == 0x000020, "Member 'BP_QuestObjective_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x000078, "Member 'BP_QuestObjective_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_QuestObjective_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_1) == 0x000080, "Member 'BP_QuestObjective_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_1' has a wrong offset!");

}

