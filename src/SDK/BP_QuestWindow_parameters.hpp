#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QuestWindow

#include "Basic.hpp"

#include "man_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_QuestWindow.BP_QuestWindow_C.ExecuteUbergraph_BP_QuestWindow
// 0x00A8 (0x00A8 - 0x0000)
struct BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_3;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_4;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_5;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_6;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_7;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          K2Node_Select_Default;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0010(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManQuest*                              K2Node_Event_ManQuest;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_StoryText;                            // 0x0070(0x0018)(ConstParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InVisibleActiveQuestNum;              // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InVisibleBountyQuestNum;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InVisibleCompletedQuestNum;           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EInputDisplay                                 K2Node_Event_InInputDisplay;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InControlDisplay;                     // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow) == 0x000008, "Wrong alignment on BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow");
static_assert(sizeof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow) == 0x0000A8, "Wrong size on BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, EntryPoint) == 0x000000, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, Temp_bool_Variable) == 0x000004, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, Temp_byte_Variable) == 0x000005, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, Temp_byte_Variable_1) == 0x000006, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, Temp_byte_Variable_2) == 0x000007, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, Temp_byte_Variable_3) == 0x000008, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, Temp_byte_Variable_4) == 0x000009, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, Temp_byte_Variable_5) == 0x00000A, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, Temp_byte_Variable_6) == 0x00000B, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, Temp_byte_Variable_7) == 0x00000C, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Select_Default) == 0x00000D, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Event_MyGeometry) == 0x000010, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Event_InDeltaTime) == 0x000048, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Event_AnimDuration_1) == 0x00004C, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x000050, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Event_AnimDuration) == 0x000054, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, CallFunc_PlayAnimation_ReturnValue) == 0x000058, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x000060, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Event_ManQuest) == 0x000068, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Event_ManQuest' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Event_StoryText) == 0x000070, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Event_StoryText' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, CallFunc_PlayAnimation_ReturnValue_1) == 0x000088, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Event_InVisibleActiveQuestNum) == 0x000090, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Event_InVisibleActiveQuestNum' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Event_InVisibleBountyQuestNum) == 0x000094, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Event_InVisibleBountyQuestNum' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Event_InVisibleCompletedQuestNum) == 0x000098, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Event_InVisibleCompletedQuestNum' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, CallFunc_Greater_IntInt_ReturnValue) == 0x00009C, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Select_Default_1) == 0x00009D, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, CallFunc_GetVisibility_ReturnValue) == 0x00009E, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00009F, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Event_InInputDisplay) == 0x0000A0, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Event_InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow, K2Node_Event_InControlDisplay) == 0x0000A1, "Member 'BP_QuestWindow_C_ExecuteUbergraph_BP_QuestWindow::K2Node_Event_InControlDisplay' has a wrong offset!");

// Function BP_QuestWindow.BP_QuestWindow_C.OnSetInputDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_QuestWindow_C_OnSetInputDisplay final
{
public:
	EInputDisplay                                 InInputDisplay;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 InControlDisplay;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestWindow_C_OnSetInputDisplay) == 0x000001, "Wrong alignment on BP_QuestWindow_C_OnSetInputDisplay");
static_assert(sizeof(BP_QuestWindow_C_OnSetInputDisplay) == 0x000002, "Wrong size on BP_QuestWindow_C_OnSetInputDisplay");
static_assert(offsetof(BP_QuestWindow_C_OnSetInputDisplay, InInputDisplay) == 0x000000, "Member 'BP_QuestWindow_C_OnSetInputDisplay::InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_OnSetInputDisplay, InControlDisplay) == 0x000001, "Member 'BP_QuestWindow_C_OnSetInputDisplay::InControlDisplay' has a wrong offset!");

// Function BP_QuestWindow.BP_QuestWindow_C.OnRebuildQuestList
// 0x000C (0x000C - 0x0000)
struct BP_QuestWindow_C_OnRebuildQuestList final
{
public:
	int32                                         InVisibleActiveQuestNum;                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InVisibleBountyQuestNum;                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InVisibleCompletedQuestNum;                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestWindow_C_OnRebuildQuestList) == 0x000004, "Wrong alignment on BP_QuestWindow_C_OnRebuildQuestList");
static_assert(sizeof(BP_QuestWindow_C_OnRebuildQuestList) == 0x00000C, "Wrong size on BP_QuestWindow_C_OnRebuildQuestList");
static_assert(offsetof(BP_QuestWindow_C_OnRebuildQuestList, InVisibleActiveQuestNum) == 0x000000, "Member 'BP_QuestWindow_C_OnRebuildQuestList::InVisibleActiveQuestNum' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_OnRebuildQuestList, InVisibleBountyQuestNum) == 0x000004, "Member 'BP_QuestWindow_C_OnRebuildQuestList::InVisibleBountyQuestNum' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_OnRebuildQuestList, InVisibleCompletedQuestNum) == 0x000008, "Member 'BP_QuestWindow_C_OnRebuildQuestList::InVisibleCompletedQuestNum' has a wrong offset!");

// Function BP_QuestWindow.BP_QuestWindow_C.OnSetSelectedQuest
// 0x0020 (0x0020 - 0x0000)
struct BP_QuestWindow_C_OnSetSelectedQuest final
{
public:
	class UManQuest*                              ManQuest;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   StoryText;                                         // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_QuestWindow_C_OnSetSelectedQuest) == 0x000008, "Wrong alignment on BP_QuestWindow_C_OnSetSelectedQuest");
static_assert(sizeof(BP_QuestWindow_C_OnSetSelectedQuest) == 0x000020, "Wrong size on BP_QuestWindow_C_OnSetSelectedQuest");
static_assert(offsetof(BP_QuestWindow_C_OnSetSelectedQuest, ManQuest) == 0x000000, "Member 'BP_QuestWindow_C_OnSetSelectedQuest::ManQuest' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_OnSetSelectedQuest, StoryText) == 0x000008, "Member 'BP_QuestWindow_C_OnSetSelectedQuest::StoryText' has a wrong offset!");

// Function BP_QuestWindow.BP_QuestWindow_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_QuestWindow_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestWindow_C_OnHide) == 0x000004, "Wrong alignment on BP_QuestWindow_C_OnHide");
static_assert(sizeof(BP_QuestWindow_C_OnHide) == 0x000004, "Wrong size on BP_QuestWindow_C_OnHide");
static_assert(offsetof(BP_QuestWindow_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_QuestWindow_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_QuestWindow.BP_QuestWindow_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_QuestWindow_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestWindow_C_OnShow) == 0x000004, "Wrong alignment on BP_QuestWindow_C_OnShow");
static_assert(sizeof(BP_QuestWindow_C_OnShow) == 0x000004, "Wrong size on BP_QuestWindow_C_OnShow");
static_assert(offsetof(BP_QuestWindow_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_QuestWindow_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_QuestWindow.BP_QuestWindow_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_QuestWindow_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestWindow_C_Tick) == 0x000004, "Wrong alignment on BP_QuestWindow_C_Tick");
static_assert(sizeof(BP_QuestWindow_C_Tick) == 0x00003C, "Wrong size on BP_QuestWindow_C_Tick");
static_assert(offsetof(BP_QuestWindow_C_Tick, MyGeometry) == 0x000000, "Member 'BP_QuestWindow_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_QuestWindow_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_QuestWindow.BP_QuestWindow_C.BP_SetSelectedQuest
// 0x00B0 (0x00B0 - 0x0000)
struct BP_QuestWindow_C_BP_SetSelectedQuest final
{
public:
	class UManQuest*                              ManQuest;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   StoryText;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	EQuestState                                   Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuestState                                   Temp_byte_Variable_6;                              // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetQuestDisplayName_ReturnValue;          // 0x0050(0x0018)(ConstParm)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x0080(0x0018)()
	class FText                                   CallFunc_GetEmptyText_ReturnValue_1;               // 0x0098(0x0018)()
};
static_assert(alignof(BP_QuestWindow_C_BP_SetSelectedQuest) == 0x000008, "Wrong alignment on BP_QuestWindow_C_BP_SetSelectedQuest");
static_assert(sizeof(BP_QuestWindow_C_BP_SetSelectedQuest) == 0x0000B0, "Wrong size on BP_QuestWindow_C_BP_SetSelectedQuest");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, ManQuest) == 0x000000, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::ManQuest' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, StoryText) == 0x000008, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::StoryText' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_byte_Variable) == 0x000020, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_byte_Variable_1) == 0x000021, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_byte_Variable_2) == 0x000022, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_byte_Variable_3) == 0x000023, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_byte_Variable_4) == 0x000024, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_byte_Variable_5) == 0x000025, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_byte_Variable_6) == 0x000026, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_object_Variable) == 0x000028, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_object_Variable_1) == 0x000030, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_object_Variable_2) == 0x000038, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_object_Variable_3) == 0x000040, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, Temp_object_Variable_4) == 0x000048, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, CallFunc_GetQuestDisplayName_ReturnValue) == 0x000050, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::CallFunc_GetQuestDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, K2Node_Select_Default) == 0x000068, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, K2Node_Select_Default_1) == 0x000070, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, CallFunc_GetEmptyText_ReturnValue) == 0x000080, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BP_SetSelectedQuest, CallFunc_GetEmptyText_ReturnValue_1) == 0x000098, "Member 'BP_QuestWindow_C_BP_SetSelectedQuest::CallFunc_GetEmptyText_ReturnValue_1' has a wrong offset!");

// Function BP_QuestWindow.BP_QuestWindow_C.BtnHotkeyBClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_QuestWindow_C_BtnHotkeyBClicked final
{
public:
	bool                                          OpenPauseMenu;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QuestWindow_C_BtnHotkeyBClicked) == 0x000001, "Wrong alignment on BP_QuestWindow_C_BtnHotkeyBClicked");
static_assert(sizeof(BP_QuestWindow_C_BtnHotkeyBClicked) == 0x000001, "Wrong size on BP_QuestWindow_C_BtnHotkeyBClicked");
static_assert(offsetof(BP_QuestWindow_C_BtnHotkeyBClicked, OpenPauseMenu) == 0x000000, "Member 'BP_QuestWindow_C_BtnHotkeyBClicked::OpenPauseMenu' has a wrong offset!");

// Function BP_QuestWindow.BP_QuestWindow_C.BtnHotkeyAClicked
// 0x0018 (0x0018 - 0x0000)
struct BP_QuestWindow_C_BtnHotkeyAClicked final
{
public:
	class UWidget*                                CallFunc_GetFocusedWidget_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuestListCategoryUserWidget*           K2Node_DynamicCast_AsQuest_List_Category_User_Widget; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QuestWindow_C_BtnHotkeyAClicked) == 0x000008, "Wrong alignment on BP_QuestWindow_C_BtnHotkeyAClicked");
static_assert(sizeof(BP_QuestWindow_C_BtnHotkeyAClicked) == 0x000018, "Wrong size on BP_QuestWindow_C_BtnHotkeyAClicked");
static_assert(offsetof(BP_QuestWindow_C_BtnHotkeyAClicked, CallFunc_GetFocusedWidget_ReturnValue) == 0x000000, "Member 'BP_QuestWindow_C_BtnHotkeyAClicked::CallFunc_GetFocusedWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BtnHotkeyAClicked, K2Node_DynamicCast_AsQuest_List_Category_User_Widget) == 0x000008, "Member 'BP_QuestWindow_C_BtnHotkeyAClicked::K2Node_DynamicCast_AsQuest_List_Category_User_Widget' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_BtnHotkeyAClicked, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_QuestWindow_C_BtnHotkeyAClicked::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_QuestWindow.BP_QuestWindow_C.SetType
// 0x0020 (0x0020 - 0x0000)
struct BP_QuestWindow_C_SetType final
{
public:
	bool                                          InIsMainQuest;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestWindow_C_SetType) == 0x000008, "Wrong alignment on BP_QuestWindow_C_SetType");
static_assert(sizeof(BP_QuestWindow_C_SetType) == 0x000020, "Wrong size on BP_QuestWindow_C_SetType");
static_assert(offsetof(BP_QuestWindow_C_SetType, InIsMainQuest) == 0x000000, "Member 'BP_QuestWindow_C_SetType::InIsMainQuest' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetType, Temp_bool_Variable) == 0x000001, "Member 'BP_QuestWindow_C_SetType::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetType, Temp_object_Variable) == 0x000008, "Member 'BP_QuestWindow_C_SetType::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetType, Temp_object_Variable_1) == 0x000010, "Member 'BP_QuestWindow_C_SetType::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetType, K2Node_Select_Default) == 0x000018, "Member 'BP_QuestWindow_C_SetType::K2Node_Select_Default' has a wrong offset!");

// Function BP_QuestWindow.BP_QuestWindow_C.SetBtnCloseVisibility
// 0x000B (0x000B - 0x0000)
struct BP_QuestWindow_C_SetBtnCloseVisibility final
{
public:
	EInputDisplay                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 CallFunc_GetInputDisplay_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestWindow_C_SetBtnCloseVisibility) == 0x000001, "Wrong alignment on BP_QuestWindow_C_SetBtnCloseVisibility");
static_assert(sizeof(BP_QuestWindow_C_SetBtnCloseVisibility) == 0x00000B, "Wrong size on BP_QuestWindow_C_SetBtnCloseVisibility");
static_assert(offsetof(BP_QuestWindow_C_SetBtnCloseVisibility, Temp_byte_Variable) == 0x000000, "Member 'BP_QuestWindow_C_SetBtnCloseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'BP_QuestWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_2) == 0x000002, "Member 'BP_QuestWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_3) == 0x000003, "Member 'BP_QuestWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_4) == 0x000004, "Member 'BP_QuestWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_5) == 0x000005, "Member 'BP_QuestWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_6) == 0x000006, "Member 'BP_QuestWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_7) == 0x000007, "Member 'BP_QuestWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetBtnCloseVisibility, Temp_byte_Variable_8) == 0x000008, "Member 'BP_QuestWindow_C_SetBtnCloseVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetBtnCloseVisibility, CallFunc_GetInputDisplay_ReturnValue) == 0x000009, "Member 'BP_QuestWindow_C_SetBtnCloseVisibility::CallFunc_GetInputDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestWindow_C_SetBtnCloseVisibility, K2Node_Select_Default) == 0x00000A, "Member 'BP_QuestWindow_C_SetBtnCloseVisibility::K2Node_Select_Default' has a wrong offset!");

}

