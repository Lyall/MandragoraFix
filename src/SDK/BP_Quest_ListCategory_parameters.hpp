#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Quest_ListCategory

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Quest_ListCategory.BP_Quest_ListCategory_C.ExecuteUbergraph_BP_Quest_ListCategory
// 0x0048 (0x0048 - 0x0000)
struct BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InIsCollapsed;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory) == 0x000004, "Wrong alignment on BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory");
static_assert(sizeof(BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory) == 0x000048, "Wrong size on BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory");
static_assert(offsetof(BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory, EntryPoint) == 0x000000, "Member 'BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory, K2Node_Event_InIsCollapsed) == 0x000004, "Member 'BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory::K2Node_Event_InIsCollapsed' has a wrong offset!");
static_assert(offsetof(BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory, K2Node_Event_IsDesignTime) == 0x000005, "Member 'BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory, K2Node_Event_bAnimate_1) == 0x000044, "Member 'BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory, K2Node_Event_bAnimate) == 0x000045, "Member 'BP_Quest_ListCategory_C_ExecuteUbergraph_BP_Quest_ListCategory::K2Node_Event_bAnimate' has a wrong offset!");

// Function BP_Quest_ListCategory.BP_Quest_ListCategory_C.OnSetState
// 0x0001 (0x0001 - 0x0000)
struct BP_Quest_ListCategory_C_OnSetState final
{
public:
	bool                                          InIsCollapsed;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Quest_ListCategory_C_OnSetState) == 0x000001, "Wrong alignment on BP_Quest_ListCategory_C_OnSetState");
static_assert(sizeof(BP_Quest_ListCategory_C_OnSetState) == 0x000001, "Wrong size on BP_Quest_ListCategory_C_OnSetState");
static_assert(offsetof(BP_Quest_ListCategory_C_OnSetState, InIsCollapsed) == 0x000000, "Member 'BP_Quest_ListCategory_C_OnSetState::InIsCollapsed' has a wrong offset!");

// Function BP_Quest_ListCategory.BP_Quest_ListCategory_C.OnUnfocused
// 0x0001 (0x0001 - 0x0000)
struct BP_Quest_ListCategory_C_OnUnfocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Quest_ListCategory_C_OnUnfocused) == 0x000001, "Wrong alignment on BP_Quest_ListCategory_C_OnUnfocused");
static_assert(sizeof(BP_Quest_ListCategory_C_OnUnfocused) == 0x000001, "Wrong size on BP_Quest_ListCategory_C_OnUnfocused");
static_assert(offsetof(BP_Quest_ListCategory_C_OnUnfocused, bAnimate) == 0x000000, "Member 'BP_Quest_ListCategory_C_OnUnfocused::bAnimate' has a wrong offset!");

// Function BP_Quest_ListCategory.BP_Quest_ListCategory_C.OnFocused
// 0x0001 (0x0001 - 0x0000)
struct BP_Quest_ListCategory_C_OnFocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Quest_ListCategory_C_OnFocused) == 0x000001, "Wrong alignment on BP_Quest_ListCategory_C_OnFocused");
static_assert(sizeof(BP_Quest_ListCategory_C_OnFocused) == 0x000001, "Wrong size on BP_Quest_ListCategory_C_OnFocused");
static_assert(offsetof(BP_Quest_ListCategory_C_OnFocused, bAnimate) == 0x000000, "Member 'BP_Quest_ListCategory_C_OnFocused::bAnimate' has a wrong offset!");

// Function BP_Quest_ListCategory.BP_Quest_ListCategory_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Quest_ListCategory_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Quest_ListCategory_C_Tick) == 0x000004, "Wrong alignment on BP_Quest_ListCategory_C_Tick");
static_assert(sizeof(BP_Quest_ListCategory_C_Tick) == 0x00003C, "Wrong size on BP_Quest_ListCategory_C_Tick");
static_assert(offsetof(BP_Quest_ListCategory_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Quest_ListCategory_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Quest_ListCategory_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Quest_ListCategory_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Quest_ListCategory.BP_Quest_ListCategory_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Quest_ListCategory_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Quest_ListCategory_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Quest_ListCategory_C_PreConstruct");
static_assert(sizeof(BP_Quest_ListCategory_C_PreConstruct) == 0x000001, "Wrong size on BP_Quest_ListCategory_C_PreConstruct");
static_assert(offsetof(BP_Quest_ListCategory_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Quest_ListCategory_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Quest_ListCategory.BP_Quest_ListCategory_C.ToggleState
// 0x0001 (0x0001 - 0x0000)
struct BP_Quest_ListCategory_C_ToggleState final
{
public:
	bool                                          InIsCollapsed;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Quest_ListCategory_C_ToggleState) == 0x000001, "Wrong alignment on BP_Quest_ListCategory_C_ToggleState");
static_assert(sizeof(BP_Quest_ListCategory_C_ToggleState) == 0x000001, "Wrong size on BP_Quest_ListCategory_C_ToggleState");
static_assert(offsetof(BP_Quest_ListCategory_C_ToggleState, InIsCollapsed) == 0x000000, "Member 'BP_Quest_ListCategory_C_ToggleState::InIsCollapsed' has a wrong offset!");

// Function BP_Quest_ListCategory.BP_Quest_ListCategory_C.Set Name
// 0x0018 (0x0018 - 0x0000)
struct BP_Quest_ListCategory_C_Set_Name final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_Quest_ListCategory_C_Set_Name) == 0x000008, "Wrong alignment on BP_Quest_ListCategory_C_Set_Name");
static_assert(sizeof(BP_Quest_ListCategory_C_Set_Name) == 0x000018, "Wrong size on BP_Quest_ListCategory_C_Set_Name");
static_assert(offsetof(BP_Quest_ListCategory_C_Set_Name, InName) == 0x000000, "Member 'BP_Quest_ListCategory_C_Set_Name::InName' has a wrong offset!");

}

