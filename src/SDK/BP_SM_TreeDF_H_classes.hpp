#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SM_TreeDF_H

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SM_TreeDF_H.BP_SM_TreeDF_H_C
// 0x00A8 (0x02D0 - 0x0228)
class ABP_SM_TreeDF_H_C final : public AActor
{
public:
	class UInstancedStaticMeshComponent*          ISM_TreeDF_H_vegetation;                           // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          ISM_TreeDF_H_branchF;                              // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          ISM_TreeDF_H_branchE;                              // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          ISM_TreeDF_H_branchD;                              // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          ISM_TreeDF_H_branchC;                              // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          ISM_TreeDF_H_branchB;                              // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          ISM_TreeDF_H_branchA;                              // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          BranchA;                                           // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BranchB;                                           // 0x0269(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BranchC;                                           // 0x026A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BranchD;                                           // 0x026B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BranchE;                                           // 0x026C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BranchF;                                           // 0x026D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Vegetation;                                        // 0x026E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Random_Tree;                                       // 0x026F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Random_Tree_Seed;                                  // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor_TreeDF_A;                                    // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Tree_Spawn_Number;                                 // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Area_Radius;                                       // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             GetRelativeTransform;                              // 0x0290(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Area_Seed;                                         // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void NewFunction_0(const struct FTransform& RelativeTo, class USceneComponent* Target_Input, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	void TreeDF_A(bool UseRandom, bool UserRandom, bool UserRandom2, bool UserRandom3, bool UserRandom4, bool UserRandom5, bool UserRandom6);
	void RandomVariant(bool UserRandom, bool User, bool* NewRandom);
	bool RandomFunction(bool UseRandom, bool User);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SM_TreeDF_H_C">();
	}
	static class ABP_SM_TreeDF_H_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SM_TreeDF_H_C>();
	}
};
static_assert(alignof(ABP_SM_TreeDF_H_C) == 0x000010, "Wrong alignment on ABP_SM_TreeDF_H_C");
static_assert(sizeof(ABP_SM_TreeDF_H_C) == 0x0002D0, "Wrong size on ABP_SM_TreeDF_H_C");
static_assert(offsetof(ABP_SM_TreeDF_H_C, ISM_TreeDF_H_vegetation) == 0x000228, "Member 'ABP_SM_TreeDF_H_C::ISM_TreeDF_H_vegetation' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, ISM_TreeDF_H_branchF) == 0x000230, "Member 'ABP_SM_TreeDF_H_C::ISM_TreeDF_H_branchF' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, ISM_TreeDF_H_branchE) == 0x000238, "Member 'ABP_SM_TreeDF_H_C::ISM_TreeDF_H_branchE' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, ISM_TreeDF_H_branchD) == 0x000240, "Member 'ABP_SM_TreeDF_H_C::ISM_TreeDF_H_branchD' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, ISM_TreeDF_H_branchC) == 0x000248, "Member 'ABP_SM_TreeDF_H_C::ISM_TreeDF_H_branchC' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, ISM_TreeDF_H_branchB) == 0x000250, "Member 'ABP_SM_TreeDF_H_C::ISM_TreeDF_H_branchB' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, ISM_TreeDF_H_branchA) == 0x000258, "Member 'ABP_SM_TreeDF_H_C::ISM_TreeDF_H_branchA' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, DefaultSceneRoot) == 0x000260, "Member 'ABP_SM_TreeDF_H_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, BranchA) == 0x000268, "Member 'ABP_SM_TreeDF_H_C::BranchA' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, BranchB) == 0x000269, "Member 'ABP_SM_TreeDF_H_C::BranchB' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, BranchC) == 0x00026A, "Member 'ABP_SM_TreeDF_H_C::BranchC' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, BranchD) == 0x00026B, "Member 'ABP_SM_TreeDF_H_C::BranchD' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, BranchE) == 0x00026C, "Member 'ABP_SM_TreeDF_H_C::BranchE' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, BranchF) == 0x00026D, "Member 'ABP_SM_TreeDF_H_C::BranchF' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, Vegetation) == 0x00026E, "Member 'ABP_SM_TreeDF_H_C::Vegetation' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, Random_Tree) == 0x00026F, "Member 'ABP_SM_TreeDF_H_C::Random_Tree' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, Random_Tree_Seed) == 0x000270, "Member 'ABP_SM_TreeDF_H_C::Random_Tree_Seed' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, Actor_TreeDF_A) == 0x000278, "Member 'ABP_SM_TreeDF_H_C::Actor_TreeDF_A' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, Tree_Spawn_Number) == 0x000280, "Member 'ABP_SM_TreeDF_H_C::Tree_Spawn_Number' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, Area_Radius) == 0x000284, "Member 'ABP_SM_TreeDF_H_C::Area_Radius' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, GetRelativeTransform) == 0x000290, "Member 'ABP_SM_TreeDF_H_C::GetRelativeTransform' has a wrong offset!");
static_assert(offsetof(ABP_SM_TreeDF_H_C, Area_Seed) == 0x0002C0, "Member 'ABP_SM_TreeDF_H_C::Area_Seed' has a wrong offset!");

}

