#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SimpleSplineMesh

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SimpleSplineMesh.BP_SimpleSplineMesh_C
// 0x0078 (0x02A0 - 0x0228)
class ABP_SimpleSplineMesh_C final : public AActor
{
public:
	class USplineComponent*                       Spline;                                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               ForwardAxis;                                       // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SectionLength;                                     // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    MiddleMeshes;                                      // 0x0240(0x0010)(Edit, BlueprintVisible)
	bool                                          EnableEndMesh;                                     // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            EndMesh;                                           // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableSectionMeshes;                               // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FlipSectionMeshes;                                 // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262[0x2];                                      // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SectionMeshScale;                                  // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SectionMeshDensity;                                // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            SectionMesh;                                       // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomOffsets;                                     // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetMin;                                         // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffsetMax;                                         // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomStream;                                      // 0x0284(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	bool                                          EnableScaling;                                     // 0x028C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinScale;                                          // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxScale;                                          // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveDensity;                                       // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SimpleSplineMesh_C">();
	}
	static class ABP_SimpleSplineMesh_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SimpleSplineMesh_C>();
	}
};
static_assert(alignof(ABP_SimpleSplineMesh_C) == 0x000008, "Wrong alignment on ABP_SimpleSplineMesh_C");
static_assert(sizeof(ABP_SimpleSplineMesh_C) == 0x0002A0, "Wrong size on ABP_SimpleSplineMesh_C");
static_assert(offsetof(ABP_SimpleSplineMesh_C, Spline) == 0x000228, "Member 'ABP_SimpleSplineMesh_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_SimpleSplineMesh_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, ForwardAxis) == 0x000238, "Member 'ABP_SimpleSplineMesh_C::ForwardAxis' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, SectionLength) == 0x00023C, "Member 'ABP_SimpleSplineMesh_C::SectionLength' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, MiddleMeshes) == 0x000240, "Member 'ABP_SimpleSplineMesh_C::MiddleMeshes' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, EnableEndMesh) == 0x000250, "Member 'ABP_SimpleSplineMesh_C::EnableEndMesh' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, EndMesh) == 0x000258, "Member 'ABP_SimpleSplineMesh_C::EndMesh' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, EnableSectionMeshes) == 0x000260, "Member 'ABP_SimpleSplineMesh_C::EnableSectionMeshes' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, FlipSectionMeshes) == 0x000261, "Member 'ABP_SimpleSplineMesh_C::FlipSectionMeshes' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, SectionMeshScale) == 0x000264, "Member 'ABP_SimpleSplineMesh_C::SectionMeshScale' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, SectionMeshDensity) == 0x000268, "Member 'ABP_SimpleSplineMesh_C::SectionMeshDensity' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, SectionMesh) == 0x000270, "Member 'ABP_SimpleSplineMesh_C::SectionMesh' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, RandomOffsets) == 0x000278, "Member 'ABP_SimpleSplineMesh_C::RandomOffsets' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, OffsetMin) == 0x00027C, "Member 'ABP_SimpleSplineMesh_C::OffsetMin' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, OffsetMax) == 0x000280, "Member 'ABP_SimpleSplineMesh_C::OffsetMax' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, RandomStream) == 0x000284, "Member 'ABP_SimpleSplineMesh_C::RandomStream' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, EnableScaling) == 0x00028C, "Member 'ABP_SimpleSplineMesh_C::EnableScaling' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, MinScale) == 0x000290, "Member 'ABP_SimpleSplineMesh_C::MinScale' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, MaxScale) == 0x000294, "Member 'ABP_SimpleSplineMesh_C::MaxScale' has a wrong offset!");
static_assert(offsetof(ABP_SimpleSplineMesh_C, WaveDensity) == 0x000298, "Member 'ABP_SimpleSplineMesh_C::WaveDensity' has a wrong offset!");

}

