#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillTreeNode_V2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "man_structs.hpp"
#include "man_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_SkillTreeNode_V2.BP_SkillTreeNode_V2_C
// 0x01D8 (0x04A0 - 0x02C8)
class UBP_SkillTreeNode_V2_C final : public USkillTreeNodeUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       BreakLockAnim;                                     // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LearnEndAnim;                                      // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LearnProgressAnim;                                 // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FocusedAnim;                                       // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Bg;                                                // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BreaklockVFX;                                      // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                ButtonFrame;                                       // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ExplosionVFX1;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ExplosionVFX2;                                     // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ExplosionVFX3;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ExplosionVFX4;                                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame;                                             // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame_Highlight;                                   // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HoldVFX_1;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HoldVFX_2;                                         // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IconImage;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Lock;                                              // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_LongPressIndicator_C*               LongPressIndicator;                                // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_32;                                        // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_1;                                       // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_2;                                       // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_3;                                       // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_4;                                       // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_5;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_6;                                       // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Upgrade1;                                          // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Upgrade2;                                          // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Upgrade3;                                          // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UpgradeLearned1;                                   // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UpgradeLearned2;                                   // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UpgradeLearned3;                                   // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         Upgrades;                                          // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         UpgradesLearned;                                   // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EManSkillTreeNodeType                         Type;                                              // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EManSkillTreeNodeState                        State;                                             // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3E2[0x6];                                      // 0x03E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             IconTexture;                                       // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             BgTexture;                                         // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameUnavailableTexture;                           // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameAvailableTexture;                             // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameUnlockedTexture;                              // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstance*                      SelectionMaterialInstance;                         // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             SelectionTexture;                                  // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           TintColor;                                         // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           TintColor_Unlocked;                                // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           TintColor_Unavailable;                             // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Cost;                                              // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HighlightPadding;                                  // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           UnlockColor_Unavailable;                           // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           UnlockColor_Available;                             // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           UnlockColor_Unlocked;                              // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Contrast;                                          // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Contrast_Unavailable;                              // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Brightness_Unavailable;                            // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Opacity_Unavailable;                               // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_SkillTreeNode_V2(int32 EntryPoint);
	void BndEvt__BP_SkillTreeNode_V2_ButtonFrame_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();
	void OnMouseUp();
	void OnMouseDown();
	void OnSetLocked(bool bInLocked, bool bPlayAkAudioEvent);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnSetLearnedUpgrades(const TArray<EAttribute>& UnlockedAttributes);
	void OnLearnFinished();
	void OnLearnStop();
	void OnLearnStart();
	void OnUnfocused(bool bAnimate);
	void OnFocused(bool bAnimate);
	void OnSetState();
	void OnSetNode(const class FText& NodeName, class UTexture2D* NodeIcon);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void SetIcon(class UTexture2D* InIcon);
	void SetupTooltip(const class FText& InName, const class FText& InDescription, int32 InCost);
	void UpdateTextures(EManSkillTreeNodeType InType);
	void Set_Upgrades(TArray<EAttribute>& InUnlockedAttributes);
	void SetHereticTextures();
	void SetArmsmanTextures();
	void SetCharlatanTextures();
	void SetLarcenistTextures();
	void SetWardenTextures();
	void SetPriestTextures();
	void SetLocked(bool InIsLocked);
	void PlayBreakLockAnim();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SkillTreeNode_V2_C">();
	}
	static class UBP_SkillTreeNode_V2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SkillTreeNode_V2_C>();
	}
};
static_assert(alignof(UBP_SkillTreeNode_V2_C) == 0x000008, "Wrong alignment on UBP_SkillTreeNode_V2_C");
static_assert(sizeof(UBP_SkillTreeNode_V2_C) == 0x0004A0, "Wrong size on UBP_SkillTreeNode_V2_C");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UberGraphFrame) == 0x0002C8, "Member 'UBP_SkillTreeNode_V2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, BreakLockAnim) == 0x0002D0, "Member 'UBP_SkillTreeNode_V2_C::BreakLockAnim' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, LearnEndAnim) == 0x0002D8, "Member 'UBP_SkillTreeNode_V2_C::LearnEndAnim' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, LearnProgressAnim) == 0x0002E0, "Member 'UBP_SkillTreeNode_V2_C::LearnProgressAnim' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, FocusedAnim) == 0x0002E8, "Member 'UBP_SkillTreeNode_V2_C::FocusedAnim' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Bg) == 0x0002F0, "Member 'UBP_SkillTreeNode_V2_C::Bg' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, BreaklockVFX) == 0x0002F8, "Member 'UBP_SkillTreeNode_V2_C::BreaklockVFX' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, ButtonFrame) == 0x000300, "Member 'UBP_SkillTreeNode_V2_C::ButtonFrame' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, ExplosionVFX1) == 0x000308, "Member 'UBP_SkillTreeNode_V2_C::ExplosionVFX1' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, ExplosionVFX2) == 0x000310, "Member 'UBP_SkillTreeNode_V2_C::ExplosionVFX2' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, ExplosionVFX3) == 0x000318, "Member 'UBP_SkillTreeNode_V2_C::ExplosionVFX3' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, ExplosionVFX4) == 0x000320, "Member 'UBP_SkillTreeNode_V2_C::ExplosionVFX4' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Frame) == 0x000328, "Member 'UBP_SkillTreeNode_V2_C::Frame' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Frame_Highlight) == 0x000330, "Member 'UBP_SkillTreeNode_V2_C::Frame_Highlight' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, HoldVFX_1) == 0x000338, "Member 'UBP_SkillTreeNode_V2_C::HoldVFX_1' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, HoldVFX_2) == 0x000340, "Member 'UBP_SkillTreeNode_V2_C::HoldVFX_2' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, IconImage) == 0x000348, "Member 'UBP_SkillTreeNode_V2_C::IconImage' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Lock) == 0x000350, "Member 'UBP_SkillTreeNode_V2_C::Lock' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, LongPressIndicator) == 0x000358, "Member 'UBP_SkillTreeNode_V2_C::LongPressIndicator' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Overlay_32) == 0x000360, "Member 'UBP_SkillTreeNode_V2_C::Overlay_32' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UnlockVFX) == 0x000368, "Member 'UBP_SkillTreeNode_V2_C::UnlockVFX' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UnlockVFX_1) == 0x000370, "Member 'UBP_SkillTreeNode_V2_C::UnlockVFX_1' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UnlockVFX_2) == 0x000378, "Member 'UBP_SkillTreeNode_V2_C::UnlockVFX_2' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UnlockVFX_3) == 0x000380, "Member 'UBP_SkillTreeNode_V2_C::UnlockVFX_3' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UnlockVFX_4) == 0x000388, "Member 'UBP_SkillTreeNode_V2_C::UnlockVFX_4' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UnlockVFX_5) == 0x000390, "Member 'UBP_SkillTreeNode_V2_C::UnlockVFX_5' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UnlockVFX_6) == 0x000398, "Member 'UBP_SkillTreeNode_V2_C::UnlockVFX_6' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Upgrade1) == 0x0003A0, "Member 'UBP_SkillTreeNode_V2_C::Upgrade1' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Upgrade2) == 0x0003A8, "Member 'UBP_SkillTreeNode_V2_C::Upgrade2' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Upgrade3) == 0x0003B0, "Member 'UBP_SkillTreeNode_V2_C::Upgrade3' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UpgradeLearned1) == 0x0003B8, "Member 'UBP_SkillTreeNode_V2_C::UpgradeLearned1' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UpgradeLearned2) == 0x0003C0, "Member 'UBP_SkillTreeNode_V2_C::UpgradeLearned2' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UpgradeLearned3) == 0x0003C8, "Member 'UBP_SkillTreeNode_V2_C::UpgradeLearned3' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Upgrades) == 0x0003D0, "Member 'UBP_SkillTreeNode_V2_C::Upgrades' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UpgradesLearned) == 0x0003D8, "Member 'UBP_SkillTreeNode_V2_C::UpgradesLearned' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Type) == 0x0003E0, "Member 'UBP_SkillTreeNode_V2_C::Type' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, State) == 0x0003E1, "Member 'UBP_SkillTreeNode_V2_C::State' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, IconTexture) == 0x0003E8, "Member 'UBP_SkillTreeNode_V2_C::IconTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, BgTexture) == 0x0003F0, "Member 'UBP_SkillTreeNode_V2_C::BgTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, FrameUnavailableTexture) == 0x0003F8, "Member 'UBP_SkillTreeNode_V2_C::FrameUnavailableTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, FrameAvailableTexture) == 0x000400, "Member 'UBP_SkillTreeNode_V2_C::FrameAvailableTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, FrameUnlockedTexture) == 0x000408, "Member 'UBP_SkillTreeNode_V2_C::FrameUnlockedTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, SelectionMaterialInstance) == 0x000410, "Member 'UBP_SkillTreeNode_V2_C::SelectionMaterialInstance' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, SelectionTexture) == 0x000418, "Member 'UBP_SkillTreeNode_V2_C::SelectionTexture' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, TintColor) == 0x000420, "Member 'UBP_SkillTreeNode_V2_C::TintColor' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, TintColor_Unlocked) == 0x000430, "Member 'UBP_SkillTreeNode_V2_C::TintColor_Unlocked' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, TintColor_Unavailable) == 0x000440, "Member 'UBP_SkillTreeNode_V2_C::TintColor_Unavailable' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Cost) == 0x000450, "Member 'UBP_SkillTreeNode_V2_C::Cost' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, HighlightPadding) == 0x000454, "Member 'UBP_SkillTreeNode_V2_C::HighlightPadding' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UnlockColor_Unavailable) == 0x000458, "Member 'UBP_SkillTreeNode_V2_C::UnlockColor_Unavailable' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UnlockColor_Available) == 0x000468, "Member 'UBP_SkillTreeNode_V2_C::UnlockColor_Available' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, UnlockColor_Unlocked) == 0x000478, "Member 'UBP_SkillTreeNode_V2_C::UnlockColor_Unlocked' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Contrast) == 0x000488, "Member 'UBP_SkillTreeNode_V2_C::Contrast' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Contrast_Unavailable) == 0x00048C, "Member 'UBP_SkillTreeNode_V2_C::Contrast_Unavailable' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Brightness_Unavailable) == 0x000490, "Member 'UBP_SkillTreeNode_V2_C::Brightness_Unavailable' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, Opacity_Unavailable) == 0x000494, "Member 'UBP_SkillTreeNode_V2_C::Opacity_Unavailable' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_V2_C, NewVar_0) == 0x000498, "Member 'UBP_SkillTreeNode_V2_C::NewVar_0' has a wrong offset!");

}

