#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillTreeTooltip

#include "Basic.hpp"

#include "BP_SkillTreeTooltip_classes.hpp"
#include "BP_SkillTreeTooltip_parameters.hpp"


namespace SDK
{

// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.ExecuteUbergraph_BP_SkillTreeTooltip
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillTreeTooltip_C::ExecuteUbergraph_BP_SkillTreeTooltip(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTreeTooltip_C", "ExecuteUbergraph_BP_SkillTreeTooltip");

	Params::BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.OnSetup
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// ESkillTreeNodeState                     SkillTreeNodeState                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Name_0                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             Description                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             CostText                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             WarningText_0                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ECharacterClass                         NodeRegion                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillTreeTooltip_C::OnSetup(ESkillTreeNodeState SkillTreeNodeState, const class FText& Name_0, const class FText& Description, const class FText& CostText, const class FText& WarningText_0, ECharacterClass NodeRegion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTreeTooltip_C", "OnSetup");

	Params::BP_SkillTreeTooltip_C_OnSetup Parms{};

	Parms.SkillTreeNodeState = SkillTreeNodeState;
	Parms.Name_0 = std::move(Name_0);
	Parms.Description = std::move(Description);
	Parms.CostText = std::move(CostText);
	Parms.WarningText_0 = std::move(WarningText_0);
	Parms.NodeRegion = NodeRegion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SkillTreeTooltip_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTreeTooltip_C", "PreConstruct");

	Params::BP_SkillTreeTooltip_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.FadeOut
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SkillTreeTooltip_C::FadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTreeTooltip_C", "FadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.FadeIn
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SkillTreeTooltip_C::FadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTreeTooltip_C", "FadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.Setup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESkillTreeNodeState                     InSkillTreeNodeState                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             InName                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             InDescription                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             InCost                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             InWarning                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// ECharacterClass                         InNodeRegion                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillTreeTooltip_C::Setup(ESkillTreeNodeState InSkillTreeNodeState, const class FText& InName, const class FText& InDescription, const class FText& InCost, const class FText& InWarning, ECharacterClass InNodeRegion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTreeTooltip_C", "Setup");

	Params::BP_SkillTreeTooltip_C_Setup Parms{};

	Parms.InSkillTreeNodeState = InSkillTreeNodeState;
	Parms.InName = std::move(InName);
	Parms.InDescription = std::move(InDescription);
	Parms.InCost = std::move(InCost);
	Parms.InWarning = std::move(InWarning);
	Parms.InNodeRegion = InNodeRegion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.Set State
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESkillTreeNodeState                     InState                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterClass                         InNodeRegion                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillTreeTooltip_C::Set_State(ESkillTreeNodeState InState, ECharacterClass InNodeRegion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTreeTooltip_C", "Set State");

	Params::BP_SkillTreeTooltip_C_Set_State Parms{};

	Parms.InState = InState;
	Parms.InNodeRegion = InNodeRegion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.ErrorHighlight
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SkillTreeTooltip_C::ErrorHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTreeTooltip_C", "ErrorHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.ToggleSmallScreen
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsSmallScreen                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SkillTreeTooltip_C::ToggleSmallScreen(bool InIsSmallScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTreeTooltip_C", "ToggleSmallScreen");

	Params::BP_SkillTreeTooltip_C_ToggleSmallScreen Parms{};

	Parms.InIsSmallScreen = InIsSmallScreen;

	UObject::ProcessEvent(Func, &Parms);
}

}

