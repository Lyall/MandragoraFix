#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillTreeTooltip

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "man_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.ExecuteUbergraph_BP_SkillTreeTooltip
// 0x0070 (0x0070 - 0x0000)
struct BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESkillTreeNodeState                           K2Node_Event_SkillTreeNodeState;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Name;                                 // 0x0008(0x0018)(ConstParm)
	class FText                                   K2Node_Event_Description;                          // 0x0020(0x0018)(ConstParm)
	class FText                                   K2Node_Event_CostText;                             // 0x0038(0x0018)(ConstParm)
	class FText                                   K2Node_Event_WarningText;                          // 0x0050(0x0018)(ConstParm)
	ECharacterClass                               K2Node_Event_NodeRegion;                           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip) == 0x000008, "Wrong alignment on BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip");
static_assert(sizeof(BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip) == 0x000070, "Wrong size on BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip");
static_assert(offsetof(BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip, EntryPoint) == 0x000000, "Member 'BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip, K2Node_Event_SkillTreeNodeState) == 0x000005, "Member 'BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip::K2Node_Event_SkillTreeNodeState' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip, K2Node_Event_Name) == 0x000008, "Member 'BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip, K2Node_Event_Description) == 0x000020, "Member 'BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip::K2Node_Event_Description' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip, K2Node_Event_CostText) == 0x000038, "Member 'BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip::K2Node_Event_CostText' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip, K2Node_Event_WarningText) == 0x000050, "Member 'BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip::K2Node_Event_WarningText' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip, K2Node_Event_NodeRegion) == 0x000068, "Member 'BP_SkillTreeTooltip_C_ExecuteUbergraph_BP_SkillTreeTooltip::K2Node_Event_NodeRegion' has a wrong offset!");

// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.OnSetup
// 0x0070 (0x0070 - 0x0000)
struct BP_SkillTreeTooltip_C_OnSetup final
{
public:
	ESkillTreeNodeState                           SkillTreeNodeState;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name_0;                                            // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   Description;                                       // 0x0020(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   CostText;                                          // 0x0038(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   WarningText_0;                                     // 0x0050(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	ECharacterClass                               NodeRegion;                                        // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTreeTooltip_C_OnSetup) == 0x000008, "Wrong alignment on BP_SkillTreeTooltip_C_OnSetup");
static_assert(sizeof(BP_SkillTreeTooltip_C_OnSetup) == 0x000070, "Wrong size on BP_SkillTreeTooltip_C_OnSetup");
static_assert(offsetof(BP_SkillTreeTooltip_C_OnSetup, SkillTreeNodeState) == 0x000000, "Member 'BP_SkillTreeTooltip_C_OnSetup::SkillTreeNodeState' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_OnSetup, Name_0) == 0x000008, "Member 'BP_SkillTreeTooltip_C_OnSetup::Name_0' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_OnSetup, Description) == 0x000020, "Member 'BP_SkillTreeTooltip_C_OnSetup::Description' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_OnSetup, CostText) == 0x000038, "Member 'BP_SkillTreeTooltip_C_OnSetup::CostText' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_OnSetup, WarningText_0) == 0x000050, "Member 'BP_SkillTreeTooltip_C_OnSetup::WarningText_0' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_OnSetup, NodeRegion) == 0x000068, "Member 'BP_SkillTreeTooltip_C_OnSetup::NodeRegion' has a wrong offset!");

// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_SkillTreeTooltip_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTreeTooltip_C_PreConstruct) == 0x000001, "Wrong alignment on BP_SkillTreeTooltip_C_PreConstruct");
static_assert(sizeof(BP_SkillTreeTooltip_C_PreConstruct) == 0x000001, "Wrong size on BP_SkillTreeTooltip_C_PreConstruct");
static_assert(offsetof(BP_SkillTreeTooltip_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_SkillTreeTooltip_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.FadeOut
// 0x0008 (0x0008 - 0x0000)
struct BP_SkillTreeTooltip_C_FadeOut final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTreeTooltip_C_FadeOut) == 0x000008, "Wrong alignment on BP_SkillTreeTooltip_C_FadeOut");
static_assert(sizeof(BP_SkillTreeTooltip_C_FadeOut) == 0x000008, "Wrong size on BP_SkillTreeTooltip_C_FadeOut");
static_assert(offsetof(BP_SkillTreeTooltip_C_FadeOut, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_SkillTreeTooltip_C_FadeOut::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.FadeIn
// 0x0008 (0x0008 - 0x0000)
struct BP_SkillTreeTooltip_C_FadeIn final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTreeTooltip_C_FadeIn) == 0x000008, "Wrong alignment on BP_SkillTreeTooltip_C_FadeIn");
static_assert(sizeof(BP_SkillTreeTooltip_C_FadeIn) == 0x000008, "Wrong size on BP_SkillTreeTooltip_C_FadeIn");
static_assert(offsetof(BP_SkillTreeTooltip_C_FadeIn, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_SkillTreeTooltip_C_FadeIn::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.Setup
// 0x0080 (0x0080 - 0x0000)
struct BP_SkillTreeTooltip_C_Setup final
{
public:
	ESkillTreeNodeState                           InSkillTreeNodeState;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InName;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InDescription;                                     // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InCost;                                            // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InWarning;                                         // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	ECharacterClass                               InNodeRegion;                                      // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue_1;                // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue_2;                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TextIsEmpty_ReturnValue_3;                // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTreeTooltip_C_Setup) == 0x000008, "Wrong alignment on BP_SkillTreeTooltip_C_Setup");
static_assert(sizeof(BP_SkillTreeTooltip_C_Setup) == 0x000080, "Wrong size on BP_SkillTreeTooltip_C_Setup");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, InSkillTreeNodeState) == 0x000000, "Member 'BP_SkillTreeTooltip_C_Setup::InSkillTreeNodeState' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, InName) == 0x000008, "Member 'BP_SkillTreeTooltip_C_Setup::InName' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, InDescription) == 0x000020, "Member 'BP_SkillTreeTooltip_C_Setup::InDescription' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, InCost) == 0x000038, "Member 'BP_SkillTreeTooltip_C_Setup::InCost' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, InWarning) == 0x000050, "Member 'BP_SkillTreeTooltip_C_Setup::InWarning' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, InNodeRegion) == 0x000068, "Member 'BP_SkillTreeTooltip_C_Setup::InNodeRegion' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_bool_Variable) == 0x000069, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_byte_Variable) == 0x00006A, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_byte_Variable_1) == 0x00006B, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_bool_Variable_1) == 0x00006C, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_byte_Variable_2) == 0x00006D, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_byte_Variable_3) == 0x00006E, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_bool_Variable_2) == 0x00006F, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_byte_Variable_4) == 0x000070, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_byte_Variable_5) == 0x000071, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_bool_Variable_3) == 0x000072, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_byte_Variable_6) == 0x000073, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, Temp_byte_Variable_7) == 0x000074, "Member 'BP_SkillTreeTooltip_C_Setup::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, CallFunc_TextIsEmpty_ReturnValue) == 0x000075, "Member 'BP_SkillTreeTooltip_C_Setup::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, K2Node_Select_Default) == 0x000076, "Member 'BP_SkillTreeTooltip_C_Setup::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, CallFunc_TextIsEmpty_ReturnValue_1) == 0x000077, "Member 'BP_SkillTreeTooltip_C_Setup::CallFunc_TextIsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, K2Node_Select_Default_1) == 0x000078, "Member 'BP_SkillTreeTooltip_C_Setup::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, CallFunc_TextIsEmpty_ReturnValue_2) == 0x000079, "Member 'BP_SkillTreeTooltip_C_Setup::CallFunc_TextIsEmpty_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, CallFunc_TextIsEmpty_ReturnValue_3) == 0x00007A, "Member 'BP_SkillTreeTooltip_C_Setup::CallFunc_TextIsEmpty_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, K2Node_Select_Default_2) == 0x00007B, "Member 'BP_SkillTreeTooltip_C_Setup::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Setup, K2Node_Select_Default_3) == 0x00007C, "Member 'BP_SkillTreeTooltip_C_Setup::K2Node_Select_Default_3' has a wrong offset!");

// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.Set State
// 0x02A0 (0x02A0 - 0x0000)
struct BP_SkillTreeTooltip_C_Set_State final
{
public:
	ESkillTreeNodeState                           InState;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterClass                               InNodeRegion;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           Temp_byte_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterClass                               Temp_byte_Variable_2;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_7;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_8;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_9;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_10;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_11;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_12;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterClass                               Temp_byte_Variable_3;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_13;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_14;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_15;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_16;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_17;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_18;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_19;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_20;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           Temp_byte_Variable_4;                              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_21;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterClass                               Temp_byte_Variable_5;                              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x00EC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x00FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x010C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x011C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x012C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x013C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x014C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_7;                            // 0x015C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           Temp_byte_Variable_6;                              // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_8;                            // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_9;                            // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_10;                           // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_11;                           // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_12;                           // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           Temp_byte_Variable_7;                              // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_13;                           // 0x01C4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_14;                           // 0x01D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_15;                           // 0x01E4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_3;                           // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_4;                           // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_5;                           // 0x0220(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_6;                           // 0x0230(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0240(0x0028)()
	struct FLinearColor                           K2Node_Select_Default_7;                           // 0x0268(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0278(0x0028)()
};
static_assert(alignof(BP_SkillTreeTooltip_C_Set_State) == 0x000008, "Wrong alignment on BP_SkillTreeTooltip_C_Set_State");
static_assert(sizeof(BP_SkillTreeTooltip_C_Set_State) == 0x0002A0, "Wrong size on BP_SkillTreeTooltip_C_Set_State");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, InState) == 0x000000, "Member 'BP_SkillTreeTooltip_C_Set_State::InState' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, InNodeRegion) == 0x000001, "Member 'BP_SkillTreeTooltip_C_Set_State::InNodeRegion' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_byte_Variable) == 0x000002, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_float_Variable) == 0x000004, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_float_Variable_1) == 0x000008, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_float_Variable_2) == 0x00000C, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_float_Variable_3) == 0x000010, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_float_Variable_4) == 0x000014, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_byte_Variable_1) == 0x000018, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable) == 0x000020, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_1) == 0x000028, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_2) == 0x000030, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_3) == 0x000038, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_4) == 0x000040, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_byte_Variable_2) == 0x000048, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_5) == 0x000050, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_6) == 0x000058, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_7) == 0x000060, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_8) == 0x000068, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_9) == 0x000070, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_10) == 0x000078, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_11) == 0x000080, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_12) == 0x000088, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_byte_Variable_3) == 0x000090, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_13) == 0x000098, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_14) == 0x0000A0, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_15) == 0x0000A8, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_16) == 0x0000B0, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_17) == 0x0000B8, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_18) == 0x0000C0, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_19) == 0x0000C8, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_20) == 0x0000D0, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_byte_Variable_4) == 0x0000D8, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_object_Variable_21) == 0x0000E0, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_byte_Variable_5) == 0x0000E8, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable) == 0x0000EC, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_1) == 0x0000FC, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_2) == 0x00010C, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_3) == 0x00011C, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_4) == 0x00012C, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_5) == 0x00013C, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_6) == 0x00014C, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_7) == 0x00015C, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_byte_Variable_6) == 0x00016C, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_8) == 0x000170, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_9) == 0x000180, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_10) == 0x000190, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_11) == 0x0001A0, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_12) == 0x0001B0, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_byte_Variable_7) == 0x0001C0, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_13) == 0x0001C4, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_14) == 0x0001D4, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, Temp_struct_Variable_15) == 0x0001E4, "Member 'BP_SkillTreeTooltip_C_Set_State::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, K2Node_Select_Default) == 0x0001F4, "Member 'BP_SkillTreeTooltip_C_Set_State::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, K2Node_Select_Default_1) == 0x0001F8, "Member 'BP_SkillTreeTooltip_C_Set_State::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000200, "Member 'BP_SkillTreeTooltip_C_Set_State::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, K2Node_Select_Default_2) == 0x000208, "Member 'BP_SkillTreeTooltip_C_Set_State::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, K2Node_Select_Default_3) == 0x000210, "Member 'BP_SkillTreeTooltip_C_Set_State::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, K2Node_Select_Default_4) == 0x000218, "Member 'BP_SkillTreeTooltip_C_Set_State::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, K2Node_Select_Default_5) == 0x000220, "Member 'BP_SkillTreeTooltip_C_Set_State::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, K2Node_Select_Default_6) == 0x000230, "Member 'BP_SkillTreeTooltip_C_Set_State::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, K2Node_MakeStruct_SlateColor) == 0x000240, "Member 'BP_SkillTreeTooltip_C_Set_State::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, K2Node_Select_Default_7) == 0x000268, "Member 'BP_SkillTreeTooltip_C_Set_State::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_Set_State, K2Node_MakeStruct_SlateColor_1) == 0x000278, "Member 'BP_SkillTreeTooltip_C_Set_State::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");

// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.ErrorHighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_SkillTreeTooltip_C_ErrorHighlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTreeTooltip_C_ErrorHighlight) == 0x000008, "Wrong alignment on BP_SkillTreeTooltip_C_ErrorHighlight");
static_assert(sizeof(BP_SkillTreeTooltip_C_ErrorHighlight) == 0x000008, "Wrong size on BP_SkillTreeTooltip_C_ErrorHighlight");
static_assert(offsetof(BP_SkillTreeTooltip_C_ErrorHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_SkillTreeTooltip_C_ErrorHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_SkillTreeTooltip.BP_SkillTreeTooltip_C.ToggleSmallScreen
// 0x0078 (0x0078 - 0x0000)
struct BP_SkillTreeTooltip_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0020(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTreeTooltip_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_SkillTreeTooltip_C_ToggleSmallScreen");
static_assert(sizeof(BP_SkillTreeTooltip_C_ToggleSmallScreen) == 0x000078, "Wrong size on BP_SkillTreeTooltip_C_ToggleSmallScreen");
static_assert(offsetof(BP_SkillTreeTooltip_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_SkillTreeTooltip_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_SkillTreeTooltip_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ToggleSmallScreen, Temp_float_Variable) == 0x000004, "Member 'BP_SkillTreeTooltip_C_ToggleSmallScreen::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ToggleSmallScreen, Temp_float_Variable_1) == 0x000008, "Member 'BP_SkillTreeTooltip_C_ToggleSmallScreen::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_SkillTreeTooltip_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ToggleSmallScreen, Temp_int_Variable) == 0x000010, "Member 'BP_SkillTreeTooltip_C_ToggleSmallScreen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ToggleSmallScreen, Temp_int_Variable_1) == 0x000014, "Member 'BP_SkillTreeTooltip_C_ToggleSmallScreen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ToggleSmallScreen, K2Node_Select_Default) == 0x000018, "Member 'BP_SkillTreeTooltip_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x00001C, "Member 'BP_SkillTreeTooltip_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeTooltip_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo) == 0x000020, "Member 'BP_SkillTreeTooltip_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

}

