#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillTree_SelectableSelectorNode

#include "Basic.hpp"

#include "BP_SkillTree_SelectableSelectorNode_classes.hpp"
#include "BP_SkillTree_SelectableSelectorNode_parameters.hpp"


namespace SDK
{

// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.ExecuteUbergraph_BP_SkillTree_SelectableSelectorNode
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillTree_SelectableSelectorNode_C::ExecuteUbergraph_BP_SkillTree_SelectableSelectorNode(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "ExecuteUbergraph_BP_SkillTree_SelectableSelectorNode");

	Params::BP_SkillTree_SelectableSelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectableSelectorNode Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.BndEvt__BP_SkillTree_SelectableSelectorNode_ButtonFrame_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::BndEvt__BP_SkillTree_SelectableSelectorNode_ButtonFrame_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "BndEvt__BP_SkillTree_SelectableSelectorNode_ButtonFrame_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillTree_SelectableSelectorNode_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "Tick");

	Params::BP_SkillTree_SelectableSelectorNode_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.OnSetLearnedUpgrades
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<EAttribute>                      UnlockedAttributes                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_SkillTree_SelectableSelectorNode_C::OnSetLearnedUpgrades(const TArray<EAttribute>& UnlockedAttributes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "OnSetLearnedUpgrades");

	Params::BP_SkillTree_SelectableSelectorNode_C_OnSetLearnedUpgrades Parms{};

	Parms.UnlockedAttributes = std::move(UnlockedAttributes);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.OnLearnFinished
// (Event, Public, BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::OnLearnFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "OnLearnFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.OnLearnStop
// (Event, Public, BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::OnLearnStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "OnLearnStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.OnLearnStart
// (Event, Public, BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::OnLearnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "OnLearnStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.OnUnfocused
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bAnimate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SkillTree_SelectableSelectorNode_C::OnUnfocused(bool bAnimate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "OnUnfocused");

	Params::BP_SkillTree_SelectableSelectorNode_C_OnUnfocused Parms{};

	Parms.bAnimate = bAnimate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.OnFocused
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bAnimate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SkillTree_SelectableSelectorNode_C::OnFocused(bool bAnimate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "OnFocused");

	Params::BP_SkillTree_SelectableSelectorNode_C_OnFocused Parms{};

	Parms.bAnimate = bAnimate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.OnSetState
// (Event, Public, BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::OnSetState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "OnSetState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.OnSetNode
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             NodeName                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UTexture2D*                       NodeIcon                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillTree_SelectableSelectorNode_C::OnSetNode(const class FText& NodeName, class UTexture2D* NodeIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "OnSetNode");

	Params::BP_SkillTree_SelectableSelectorNode_C_OnSetNode Parms{};

	Parms.NodeName = std::move(NodeName);
	Parms.NodeIcon = NodeIcon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SkillTree_SelectableSelectorNode_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "PreConstruct");

	Params::BP_SkillTree_SelectableSelectorNode_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.SetIcon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       InIcon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillTree_SelectableSelectorNode_C::SetIcon(class UTexture2D* InIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "SetIcon");

	Params::BP_SkillTree_SelectableSelectorNode_C_SetIcon Parms{};

	Parms.InIcon = InIcon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.SetupTooltip
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InName                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             InDescription                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   InCost                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillTree_SelectableSelectorNode_C::SetupTooltip(const class FText& InName, const class FText& InDescription, int32 InCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "SetupTooltip");

	Params::BP_SkillTree_SelectableSelectorNode_C_SetupTooltip Parms{};

	Parms.InName = std::move(InName);
	Parms.InDescription = std::move(InDescription);
	Parms.InCost = InCost;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.UpdateTextures
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EManSkillTreeNodeType                   InType                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillTree_SelectableSelectorNode_C::UpdateTextures(EManSkillTreeNodeType InType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "UpdateTextures");

	Params::BP_SkillTree_SelectableSelectorNode_C_UpdateTextures Parms{};

	Parms.InType = InType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.Set Upgrades
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EAttribute>                      InUnlockedAttributes                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_SkillTree_SelectableSelectorNode_C::Set_Upgrades(TArray<EAttribute>& InUnlockedAttributes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "Set Upgrades");

	Params::BP_SkillTree_SelectableSelectorNode_C_Set_Upgrades Parms{};

	Parms.InUnlockedAttributes = std::move(InUnlockedAttributes);

	UObject::ProcessEvent(Func, &Parms);

	InUnlockedAttributes = std::move(Parms.InUnlockedAttributes);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.SetHereticTextures
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::SetHereticTextures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "SetHereticTextures");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.SetArmsmanTextures
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::SetArmsmanTextures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "SetArmsmanTextures");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.SetCharlatanTextures
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::SetCharlatanTextures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "SetCharlatanTextures");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.SetLarcenistTextures
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::SetLarcenistTextures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "SetLarcenistTextures");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.SetWardenTextures
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::SetWardenTextures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "SetWardenTextures");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillTree_SelectableSelectorNode.BP_SkillTree_SelectableSelectorNode_C.SetPriestTextures
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SkillTree_SelectableSelectorNode_C::SetPriestTextures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillTree_SelectableSelectorNode_C", "SetPriestTextures");

	UObject::ProcessEvent(Func, nullptr);
}

}

