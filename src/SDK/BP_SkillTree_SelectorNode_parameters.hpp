#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillTree_SelectorNode

#include "Basic.hpp"

#include "man_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_SkillTree_SelectorNode.BP_SkillTree_SelectorNode_C.ExecuteUbergraph_BP_SkillTree_SelectorNode
// 0x0070 (0x0070 - 0x0000)
struct BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0018(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           K2Node_Event_InSkillTreeNodeState;                 // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterClass                               K2Node_Event_InCharacterClass;                     // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Event_InNodeIcon;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode) == 0x000008, "Wrong alignment on BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode");
static_assert(sizeof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode) == 0x000070, "Wrong size on BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, EntryPoint) == 0x000000, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000008, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, K2Node_Event_MyGeometry) == 0x000018, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, K2Node_Event_InDeltaTime) == 0x000050, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, K2Node_Event_InSkillTreeNodeState) == 0x000054, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::K2Node_Event_InSkillTreeNodeState' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, K2Node_Event_InCharacterClass) == 0x000055, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::K2Node_Event_InCharacterClass' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, K2Node_Event_InNodeIcon) == 0x000058, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::K2Node_Event_InNodeIcon' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, K2Node_Event_bAnimate) == 0x000060, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x000064, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode, CallFunc_PlayAnimation_ReturnValue_1) == 0x000068, "Member 'BP_SkillTree_SelectorNode_C_ExecuteUbergraph_BP_SkillTree_SelectorNode::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_SkillTree_SelectorNode.BP_SkillTree_SelectorNode_C.OnPlayUnlockVFX
// 0x0001 (0x0001 - 0x0000)
struct BP_SkillTree_SelectorNode_C_OnPlayUnlockVFX final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTree_SelectorNode_C_OnPlayUnlockVFX) == 0x000001, "Wrong alignment on BP_SkillTree_SelectorNode_C_OnPlayUnlockVFX");
static_assert(sizeof(BP_SkillTree_SelectorNode_C_OnPlayUnlockVFX) == 0x000001, "Wrong size on BP_SkillTree_SelectorNode_C_OnPlayUnlockVFX");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_OnPlayUnlockVFX, bAnimate) == 0x000000, "Member 'BP_SkillTree_SelectorNode_C_OnPlayUnlockVFX::bAnimate' has a wrong offset!");

// Function BP_SkillTree_SelectorNode.BP_SkillTree_SelectorNode_C.OnSetSelectorNode
// 0x0010 (0x0010 - 0x0000)
struct BP_SkillTree_SelectorNode_C_OnSetSelectorNode final
{
public:
	ESkillTreeNodeState                           InSkillTreeNodeState;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterClass                               InCharacterClass;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             InNodeIcon;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_SelectorNode_C_OnSetSelectorNode) == 0x000008, "Wrong alignment on BP_SkillTree_SelectorNode_C_OnSetSelectorNode");
static_assert(sizeof(BP_SkillTree_SelectorNode_C_OnSetSelectorNode) == 0x000010, "Wrong size on BP_SkillTree_SelectorNode_C_OnSetSelectorNode");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_OnSetSelectorNode, InSkillTreeNodeState) == 0x000000, "Member 'BP_SkillTree_SelectorNode_C_OnSetSelectorNode::InSkillTreeNodeState' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_OnSetSelectorNode, InCharacterClass) == 0x000001, "Member 'BP_SkillTree_SelectorNode_C_OnSetSelectorNode::InCharacterClass' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_OnSetSelectorNode, InNodeIcon) == 0x000008, "Member 'BP_SkillTree_SelectorNode_C_OnSetSelectorNode::InNodeIcon' has a wrong offset!");

// Function BP_SkillTree_SelectorNode.BP_SkillTree_SelectorNode_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_SkillTree_SelectorNode_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_SelectorNode_C_Tick) == 0x000004, "Wrong alignment on BP_SkillTree_SelectorNode_C_Tick");
static_assert(sizeof(BP_SkillTree_SelectorNode_C_Tick) == 0x00003C, "Wrong size on BP_SkillTree_SelectorNode_C_Tick");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Tick, MyGeometry) == 0x000000, "Member 'BP_SkillTree_SelectorNode_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_SkillTree_SelectorNode_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_SkillTree_SelectorNode.BP_SkillTree_SelectorNode_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_SkillTree_SelectorNode_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTree_SelectorNode_C_PreConstruct) == 0x000001, "Wrong alignment on BP_SkillTree_SelectorNode_C_PreConstruct");
static_assert(sizeof(BP_SkillTree_SelectorNode_C_PreConstruct) == 0x000001, "Wrong size on BP_SkillTree_SelectorNode_C_PreConstruct");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_SkillTree_SelectorNode_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_SkillTree_SelectorNode.BP_SkillTree_SelectorNode_C.SetIcon
// 0x0048 (0x0048 - 0x0000)
struct BP_SkillTree_SelectorNode_C_SetIcon final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NodeType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DecorationText;                                    // 0x0010(0x0018)(Edit, BlueprintVisible)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTree_SelectorNode_C_SetIcon) == 0x000008, "Wrong alignment on BP_SkillTree_SelectorNode_C_SetIcon");
static_assert(sizeof(BP_SkillTree_SelectorNode_C_SetIcon) == 0x000048, "Wrong size on BP_SkillTree_SelectorNode_C_SetIcon");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_SetIcon, InIcon) == 0x000000, "Member 'BP_SkillTree_SelectorNode_C_SetIcon::InIcon' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_SetIcon, NodeType) == 0x000008, "Member 'BP_SkillTree_SelectorNode_C_SetIcon::NodeType' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_SetIcon, DecorationText) == 0x000010, "Member 'BP_SkillTree_SelectorNode_C_SetIcon::DecorationText' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_SetIcon, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'BP_SkillTree_SelectorNode_C_SetIcon::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_SetIcon, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'BP_SkillTree_SelectorNode_C_SetIcon::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_SetIcon, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000038, "Member 'BP_SkillTree_SelectorNode_C_SetIcon::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_SetIcon, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_SkillTree_SelectorNode_C_SetIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_SkillTree_SelectorNode.BP_SkillTree_SelectorNode_C.Setup
// 0x01C0 (0x01C0 - 0x0000)
struct BP_SkillTree_SelectorNode_C_Setup final
{
public:
	ESkillTreeNodeState                           InState;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterClass                               InClass;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           Temp_byte_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterClass                               Temp_byte_Variable_2;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_7;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           Temp_byte_Variable_3;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_5;                             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_8;                             // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           Temp_byte_Variable_4;                              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_10;                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_11;                            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_12;                            // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_13;                            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_14;                            // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           Temp_byte_Variable_5;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterClass                               Temp_byte_Variable_6;                              // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_8;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_9;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_10;                           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_11;                           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_12;                           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_13;                           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_14;                           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_15;                           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterClass                               Temp_byte_Variable_7;                              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_16;                           // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_17;                           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_18;                           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_19;                           // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_20;                           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_21;                           // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_22;                           // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_23;                           // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_4;                           // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_5;                           // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_6;                           // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_7;                           // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_SelectorNode_C_Setup) == 0x000008, "Wrong alignment on BP_SkillTree_SelectorNode_C_Setup");
static_assert(sizeof(BP_SkillTree_SelectorNode_C_Setup) == 0x0001C0, "Wrong size on BP_SkillTree_SelectorNode_C_Setup");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, InState) == 0x000000, "Member 'BP_SkillTree_SelectorNode_C_Setup::InState' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, InClass) == 0x000001, "Member 'BP_SkillTree_SelectorNode_C_Setup::InClass' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_byte_Variable) == 0x000002, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable) == 0x000004, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_1) == 0x000008, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_2) == 0x00000C, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_3) == 0x000010, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_4) == 0x000014, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_byte_Variable_1) == 0x000018, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_struct_Variable) == 0x00001C, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_struct_Variable_1) == 0x00002C, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_struct_Variable_2) == 0x00003C, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_struct_Variable_3) == 0x00004C, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_struct_Variable_4) == 0x00005C, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_byte_Variable_2) == 0x00006C, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable) == 0x000070, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_1) == 0x000078, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_2) == 0x000080, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_3) == 0x000088, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_4) == 0x000090, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_5) == 0x000098, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_6) == 0x0000A0, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_7) == 0x0000A8, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_byte_Variable_3) == 0x0000B0, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_5) == 0x0000B4, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_6) == 0x0000B8, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_7) == 0x0000BC, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_8) == 0x0000C0, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_9) == 0x0000C4, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_byte_Variable_4) == 0x0000C8, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_10) == 0x0000CC, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_11) == 0x0000D0, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_12) == 0x0000D4, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_13) == 0x0000D8, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_float_Variable_14) == 0x0000DC, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_float_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_byte_Variable_5) == 0x0000E0, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_byte_Variable_6) == 0x0000E1, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_8) == 0x0000E8, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_9) == 0x0000F0, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_10) == 0x0000F8, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_11) == 0x000100, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_12) == 0x000108, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_13) == 0x000110, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_14) == 0x000118, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_15) == 0x000120, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_byte_Variable_7) == 0x000128, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_16) == 0x000130, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_17) == 0x000138, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_18) == 0x000140, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_19) == 0x000148, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_20) == 0x000150, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_21) == 0x000158, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_22) == 0x000160, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, Temp_object_Variable_23) == 0x000168, "Member 'BP_SkillTree_SelectorNode_C_Setup::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, K2Node_Select_Default) == 0x000170, "Member 'BP_SkillTree_SelectorNode_C_Setup::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, K2Node_SwitchEnum_CmpSuccess) == 0x000174, "Member 'BP_SkillTree_SelectorNode_C_Setup::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, CallFunc_MakeVector2D_ReturnValue) == 0x000178, "Member 'BP_SkillTree_SelectorNode_C_Setup::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, K2Node_Select_Default_1) == 0x000180, "Member 'BP_SkillTree_SelectorNode_C_Setup::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, K2Node_Select_Default_2) == 0x000190, "Member 'BP_SkillTree_SelectorNode_C_Setup::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, K2Node_Select_Default_3) == 0x000198, "Member 'BP_SkillTree_SelectorNode_C_Setup::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, K2Node_Select_Default_4) == 0x00019C, "Member 'BP_SkillTree_SelectorNode_C_Setup::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0001A0, "Member 'BP_SkillTree_SelectorNode_C_Setup::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, K2Node_Select_Default_5) == 0x0001A8, "Member 'BP_SkillTree_SelectorNode_C_Setup::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, K2Node_Select_Default_6) == 0x0001B0, "Member 'BP_SkillTree_SelectorNode_C_Setup::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_Setup, K2Node_Select_Default_7) == 0x0001B8, "Member 'BP_SkillTree_SelectorNode_C_Setup::K2Node_Select_Default_7' has a wrong offset!");

// Function BP_SkillTree_SelectorNode.BP_SkillTree_SelectorNode_C.PlayUnlockVFX
// 0x0028 (0x0028 - 0x0000)
struct BP_SkillTree_SelectorNode_C_PlayUnlockVFX final
{
public:
	bool                                          Animate;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_SelectorNode_C_PlayUnlockVFX) == 0x000008, "Wrong alignment on BP_SkillTree_SelectorNode_C_PlayUnlockVFX");
static_assert(sizeof(BP_SkillTree_SelectorNode_C_PlayUnlockVFX) == 0x000028, "Wrong size on BP_SkillTree_SelectorNode_C_PlayUnlockVFX");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_PlayUnlockVFX, Animate) == 0x000000, "Member 'BP_SkillTree_SelectorNode_C_PlayUnlockVFX::Animate' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_PlayUnlockVFX, Temp_bool_Variable) == 0x000001, "Member 'BP_SkillTree_SelectorNode_C_PlayUnlockVFX::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_PlayUnlockVFX, Temp_float_Variable) == 0x000004, "Member 'BP_SkillTree_SelectorNode_C_PlayUnlockVFX::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_PlayUnlockVFX, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_SkillTree_SelectorNode_C_PlayUnlockVFX::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_PlayUnlockVFX, CallFunc_GetEndTime_ReturnValue) == 0x000018, "Member 'BP_SkillTree_SelectorNode_C_PlayUnlockVFX::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_PlayUnlockVFX, K2Node_Select_Default) == 0x00001C, "Member 'BP_SkillTree_SelectorNode_C_PlayUnlockVFX::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_PlayUnlockVFX, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'BP_SkillTree_SelectorNode_C_PlayUnlockVFX::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_SkillTree_SelectorNode.BP_SkillTree_SelectorNode_C.PlayUnlockVFXFinished
// 0x0008 (0x0008 - 0x0000)
struct BP_SkillTree_SelectorNode_C_PlayUnlockVFXFinished final
{
public:
	class USkillTreeUserWidget*                   CallFunc_GetSkillTreeUserWidget_ReturnValue;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_SelectorNode_C_PlayUnlockVFXFinished) == 0x000008, "Wrong alignment on BP_SkillTree_SelectorNode_C_PlayUnlockVFXFinished");
static_assert(sizeof(BP_SkillTree_SelectorNode_C_PlayUnlockVFXFinished) == 0x000008, "Wrong size on BP_SkillTree_SelectorNode_C_PlayUnlockVFXFinished");
static_assert(offsetof(BP_SkillTree_SelectorNode_C_PlayUnlockVFXFinished, CallFunc_GetSkillTreeUserWidget_ReturnValue) == 0x000000, "Member 'BP_SkillTree_SelectorNode_C_PlayUnlockVFXFinished::CallFunc_GetSkillTreeUserWidget_ReturnValue' has a wrong offset!");

}

