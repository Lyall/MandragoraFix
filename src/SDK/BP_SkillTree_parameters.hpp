#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillTree

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "man_structs.hpp"
#include "SlateCore_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_SkillTree.BP_SkillTree_C.ExecuteUbergraph_BP_SkillTree
// 0x01A0 (0x01A0 - 0x0000)
struct BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHeroProperty                                 K2Node_Event_PropertyType;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Value;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RoundedFloatValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_RoundedIntValue;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AnimDuration_1;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeTooltipPosition                     K2Node_Event_TooltipPosition;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_InAnimDuration;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_CharacterClassName_1;                 // 0x0058(0x0018)(ConstParm)
	class USkillTreeClassUserWidget*              K2Node_Event_InCurrentSkillTreeClass;              // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkillTreeClassUserWidget*              K2Node_Event_InNextSkillTreeClass;                 // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkillTreeClassUserWidget*              K2Node_Event_InPrevSkillTreeClass;                 // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USizeBoxSlot*                           CallFunc_SlotAsSizeBoxSlot_ReturnValue;            // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterClass                               CallFunc_GetCharacterClass_ReturnValue;            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0094(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_NodeNum;                              // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPlayAnim;                            // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x00E8(0x0028)()
	bool                                          CallFunc_BPIsVisible_ReturnValue;                  // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_BonusText;                            // 0x0118(0x0018)(ConstParm)
	bool                                          K2Node_Event_bPlayBonusUnlockedAnim;               // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAllUnlocked;                         // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetColonText_ReturnValue;                 // 0x0138(0x0018)()
	EDemoMode                                     CallFunc_GetDemoMode_ReturnValue;                  // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDemoMode                                     CallFunc_GetDemoMode_ReturnValue_1;                // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0153(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDemoMode                                     CallFunc_GetDemoMode_ReturnValue_2;                // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable;                                // 0x0157(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDemoMode                                     CallFunc_GetDemoMode_ReturnValue_3;                // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDemoMode                                     CallFunc_GetDemoMode_ReturnValue_4;                // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x015B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable_1;                              // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDemoMode                                     CallFunc_GetDemoMode_ReturnValue_5;                // 0x015E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x015F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDemoMode                                     CallFunc_GetDemoMode_ReturnValue_6;                // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESkillTreeTooltipPosition                     Temp_byte_Variable_2;                              // 0x0163(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDemoMode                                     CallFunc_GetDemoMode_ReturnValue_7;                // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          K2Node_Select_Default;                             // 0x0166(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0167(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget;             // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetColonText_ReturnValue_1;               // 0x0170(0x0018)()
	class FText                                   K2Node_Event_CharacterClassName;                   // 0x0188(0x0018)(ConstParm)
};
static_assert(alignof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree) == 0x000008, "Wrong alignment on BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree");
static_assert(sizeof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree) == 0x0001A0, "Wrong size on BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, EntryPoint) == 0x000000, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, Temp_delegate_Variable) == 0x000004, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_PostEvent_ReturnValue) == 0x000014, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_PropertyType) == 0x000018, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_PropertyType' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_Value) == 0x00001C, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_RoundedFloatValue) == 0x000020, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_RoundedIntValue) == 0x000024, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_bAnimate) == 0x000028, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_AnimDuration_1) == 0x00002C, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_AnimDuration) == 0x000030, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x000034, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x000038, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_PlayAnimation_ReturnValue) == 0x000040, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_PlayAnimation_ReturnValue_1) == 0x000048, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_TooltipPosition) == 0x000050, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_TooltipPosition' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_InAnimDuration) == 0x000054, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_InAnimDuration' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_CharacterClassName_1) == 0x000058, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_CharacterClassName_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_InCurrentSkillTreeClass) == 0x000070, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_InCurrentSkillTreeClass' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_InNextSkillTreeClass) == 0x000078, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_InNextSkillTreeClass' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_InPrevSkillTreeClass) == 0x000080, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_InPrevSkillTreeClass' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_SlotAsSizeBoxSlot_ReturnValue) == 0x000088, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_SlotAsSizeBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetCharacterClass_ReturnValue) == 0x000090, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetCharacterClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_MyGeometry) == 0x000094, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_InDeltaTime) == 0x0000CC, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_SwitchEnum_CmpSuccess) == 0x0000D0, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_NodeNum) == 0x0000D4, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_NodeNum' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_bPlayAnim) == 0x0000D8, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_bPlayAnim' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_PlayAnimation_ReturnValue_2) == 0x0000E0, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_MakeStruct_SlateColor) == 0x0000E8, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_BPIsVisible_ReturnValue) == 0x000110, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_BPIsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_BonusText) == 0x000118, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_BonusText' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_bPlayBonusUnlockedAnim) == 0x000130, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_bPlayBonusUnlockedAnim' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_bAllUnlocked) == 0x000131, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_bAllUnlocked' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_IsDesignTime) == 0x000132, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetColonText_ReturnValue) == 0x000138, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetColonText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetDemoMode_ReturnValue) == 0x000150, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetDemoMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetDemoMode_ReturnValue_1) == 0x000151, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetDemoMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000152, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000153, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetDemoMode_ReturnValue_2) == 0x000154, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetDemoMode_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_BooleanOR_ReturnValue) == 0x000155, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000156, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, Temp_byte_Variable) == 0x000157, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetDemoMode_ReturnValue_3) == 0x000158, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetDemoMode_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000159, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetDemoMode_ReturnValue_4) == 0x00015A, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetDemoMode_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_BooleanOR_ReturnValue_1) == 0x00015B, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00015C, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, Temp_byte_Variable_1) == 0x00015D, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetDemoMode_ReturnValue_5) == 0x00015E, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetDemoMode_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x00015F, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetDemoMode_ReturnValue_6) == 0x000160, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetDemoMode_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_BooleanOR_ReturnValue_2) == 0x000161, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x000162, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, Temp_byte_Variable_2) == 0x000163, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetDemoMode_ReturnValue_7) == 0x000164, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetDemoMode_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x000165, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Select_Default) == 0x000166, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_BooleanOR_ReturnValue_3) == 0x000167, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_InteractButtonUserWidget) == 0x000168, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_InteractButtonUserWidget' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, CallFunc_GetColonText_ReturnValue_1) == 0x000170, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::CallFunc_GetColonText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree, K2Node_Event_CharacterClassName) == 0x000188, "Member 'BP_SkillTree_C_ExecuteUbergraph_BP_SkillTree::K2Node_Event_CharacterClassName' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.OnSetCharacterClassName
// 0x0018 (0x0018 - 0x0000)
struct BP_SkillTree_C_OnSetCharacterClassName final
{
public:
	class FText                                   CharacterClassName;                                // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_SkillTree_C_OnSetCharacterClassName) == 0x000008, "Wrong alignment on BP_SkillTree_C_OnSetCharacterClassName");
static_assert(sizeof(BP_SkillTree_C_OnSetCharacterClassName) == 0x000018, "Wrong size on BP_SkillTree_C_OnSetCharacterClassName");
static_assert(offsetof(BP_SkillTree_C_OnSetCharacterClassName, CharacterClassName) == 0x000000, "Member 'BP_SkillTree_C_OnSetCharacterClassName::CharacterClassName' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.OnErrorHiglight
// 0x0008 (0x0008 - 0x0000)
struct BP_SkillTree_C_OnErrorHiglight final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_OnErrorHiglight) == 0x000008, "Wrong alignment on BP_SkillTree_C_OnErrorHiglight");
static_assert(sizeof(BP_SkillTree_C_OnErrorHiglight) == 0x000008, "Wrong size on BP_SkillTree_C_OnErrorHiglight");
static_assert(offsetof(BP_SkillTree_C_OnErrorHiglight, InteractButtonUserWidget) == 0x000000, "Member 'BP_SkillTree_C_OnErrorHiglight::InteractButtonUserWidget' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_SkillTree_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTree_C_PreConstruct) == 0x000001, "Wrong alignment on BP_SkillTree_C_PreConstruct");
static_assert(sizeof(BP_SkillTree_C_PreConstruct) == 0x000001, "Wrong size on BP_SkillTree_C_PreConstruct");
static_assert(offsetof(BP_SkillTree_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_SkillTree_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.OnSetAttributeSelector
// 0x0020 (0x0020 - 0x0000)
struct BP_SkillTree_C_OnSetAttributeSelector final
{
public:
	class FText                                   BonusText_0;                                       // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bPlayBonusUnlockedAnim;                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAllUnlocked;                                      // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTree_C_OnSetAttributeSelector) == 0x000008, "Wrong alignment on BP_SkillTree_C_OnSetAttributeSelector");
static_assert(sizeof(BP_SkillTree_C_OnSetAttributeSelector) == 0x000020, "Wrong size on BP_SkillTree_C_OnSetAttributeSelector");
static_assert(offsetof(BP_SkillTree_C_OnSetAttributeSelector, BonusText_0) == 0x000000, "Member 'BP_SkillTree_C_OnSetAttributeSelector::BonusText_0' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_OnSetAttributeSelector, bPlayBonusUnlockedAnim) == 0x000018, "Member 'BP_SkillTree_C_OnSetAttributeSelector::bPlayBonusUnlockedAnim' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_OnSetAttributeSelector, bAllUnlocked) == 0x000019, "Member 'BP_SkillTree_C_OnSetAttributeSelector::bAllUnlocked' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.OnHideAttributeSelector
// 0x0001 (0x0001 - 0x0000)
struct BP_SkillTree_C_OnHideAttributeSelector final
{
public:
	bool                                          bPlayAnim;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTree_C_OnHideAttributeSelector) == 0x000001, "Wrong alignment on BP_SkillTree_C_OnHideAttributeSelector");
static_assert(sizeof(BP_SkillTree_C_OnHideAttributeSelector) == 0x000001, "Wrong size on BP_SkillTree_C_OnHideAttributeSelector");
static_assert(offsetof(BP_SkillTree_C_OnHideAttributeSelector, bPlayAnim) == 0x000000, "Member 'BP_SkillTree_C_OnHideAttributeSelector::bPlayAnim' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.OnShowAttributeSelector
// 0x0004 (0x0004 - 0x0000)
struct BP_SkillTree_C_OnShowAttributeSelector final
{
public:
	int32                                         NodeNum;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_OnShowAttributeSelector) == 0x000004, "Wrong alignment on BP_SkillTree_C_OnShowAttributeSelector");
static_assert(sizeof(BP_SkillTree_C_OnShowAttributeSelector) == 0x000004, "Wrong size on BP_SkillTree_C_OnShowAttributeSelector");
static_assert(offsetof(BP_SkillTree_C_OnShowAttributeSelector, NodeNum) == 0x000000, "Member 'BP_SkillTree_C_OnShowAttributeSelector::NodeNum' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_SkillTree_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_Tick) == 0x000004, "Wrong alignment on BP_SkillTree_C_Tick");
static_assert(sizeof(BP_SkillTree_C_Tick) == 0x00003C, "Wrong size on BP_SkillTree_C_Tick");
static_assert(offsetof(BP_SkillTree_C_Tick, MyGeometry) == 0x000000, "Member 'BP_SkillTree_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_SkillTree_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.OnShowPanel
// 0x0038 (0x0038 - 0x0000)
struct BP_SkillTree_C_OnShowPanel final
{
public:
	float                                         InAnimDuration;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CharacterClassName;                                // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class USkillTreeClassUserWidget*              InCurrentSkillTreeClass;                           // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkillTreeClassUserWidget*              InNextSkillTreeClass;                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkillTreeClassUserWidget*              InPrevSkillTreeClass;                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_OnShowPanel) == 0x000008, "Wrong alignment on BP_SkillTree_C_OnShowPanel");
static_assert(sizeof(BP_SkillTree_C_OnShowPanel) == 0x000038, "Wrong size on BP_SkillTree_C_OnShowPanel");
static_assert(offsetof(BP_SkillTree_C_OnShowPanel, InAnimDuration) == 0x000000, "Member 'BP_SkillTree_C_OnShowPanel::InAnimDuration' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_OnShowPanel, CharacterClassName) == 0x000008, "Member 'BP_SkillTree_C_OnShowPanel::CharacterClassName' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_OnShowPanel, InCurrentSkillTreeClass) == 0x000020, "Member 'BP_SkillTree_C_OnShowPanel::InCurrentSkillTreeClass' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_OnShowPanel, InNextSkillTreeClass) == 0x000028, "Member 'BP_SkillTree_C_OnShowPanel::InNextSkillTreeClass' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_OnShowPanel, InPrevSkillTreeClass) == 0x000030, "Member 'BP_SkillTree_C_OnShowPanel::InPrevSkillTreeClass' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.OnSetTooltipPosition
// 0x0001 (0x0001 - 0x0000)
struct BP_SkillTree_C_OnSetTooltipPosition final
{
public:
	ESkillTreeTooltipPosition                     TooltipPosition;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_OnSetTooltipPosition) == 0x000001, "Wrong alignment on BP_SkillTree_C_OnSetTooltipPosition");
static_assert(sizeof(BP_SkillTree_C_OnSetTooltipPosition) == 0x000001, "Wrong size on BP_SkillTree_C_OnSetTooltipPosition");
static_assert(offsetof(BP_SkillTree_C_OnSetTooltipPosition, TooltipPosition) == 0x000000, "Member 'BP_SkillTree_C_OnSetTooltipPosition::TooltipPosition' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_SkillTree_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_OnHide) == 0x000004, "Wrong alignment on BP_SkillTree_C_OnHide");
static_assert(sizeof(BP_SkillTree_C_OnHide) == 0x000004, "Wrong size on BP_SkillTree_C_OnHide");
static_assert(offsetof(BP_SkillTree_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_SkillTree_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_SkillTree_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_OnShow) == 0x000004, "Wrong alignment on BP_SkillTree_C_OnShow");
static_assert(sizeof(BP_SkillTree_C_OnShow) == 0x000004, "Wrong size on BP_SkillTree_C_OnShow");
static_assert(offsetof(BP_SkillTree_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_SkillTree_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.OnPropertyChanged
// 0x0014 (0x0014 - 0x0000)
struct BP_SkillTree_C_OnPropertyChanged final
{
public:
	EHeroProperty                                 PropertyType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundedFloatValue;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundedIntValue;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAnimate;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTree_C_OnPropertyChanged) == 0x000004, "Wrong alignment on BP_SkillTree_C_OnPropertyChanged");
static_assert(sizeof(BP_SkillTree_C_OnPropertyChanged) == 0x000014, "Wrong size on BP_SkillTree_C_OnPropertyChanged");
static_assert(offsetof(BP_SkillTree_C_OnPropertyChanged, PropertyType) == 0x000000, "Member 'BP_SkillTree_C_OnPropertyChanged::PropertyType' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_OnPropertyChanged, Value) == 0x000004, "Member 'BP_SkillTree_C_OnPropertyChanged::Value' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_OnPropertyChanged, RoundedFloatValue) == 0x000008, "Member 'BP_SkillTree_C_OnPropertyChanged::RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_OnPropertyChanged, RoundedIntValue) == 0x00000C, "Member 'BP_SkillTree_C_OnPropertyChanged::RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_OnPropertyChanged, bAnimate) == 0x000010, "Member 'BP_SkillTree_C_OnPropertyChanged::bAnimate' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.BtnHotkeyBClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_SkillTree_C_BtnHotkeyBClicked final
{
public:
	bool                                          OpenPauseMenu;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTree_C_BtnHotkeyBClicked) == 0x000001, "Wrong alignment on BP_SkillTree_C_BtnHotkeyBClicked");
static_assert(sizeof(BP_SkillTree_C_BtnHotkeyBClicked) == 0x000001, "Wrong size on BP_SkillTree_C_BtnHotkeyBClicked");
static_assert(offsetof(BP_SkillTree_C_BtnHotkeyBClicked, OpenPauseMenu) == 0x000000, "Member 'BP_SkillTree_C_BtnHotkeyBClicked::OpenPauseMenu' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.BP_PropertyChanged
// 0x0030 (0x0030 - 0x0000)
struct BP_SkillTree_C_BP_PropertyChanged final
{
public:
	EHeroProperty                                 PropertyType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundedFloatValue;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundedIntValue;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetLevelText_ReturnValue;                 // 0x0018(0x0018)()
};
static_assert(alignof(BP_SkillTree_C_BP_PropertyChanged) == 0x000008, "Wrong alignment on BP_SkillTree_C_BP_PropertyChanged");
static_assert(sizeof(BP_SkillTree_C_BP_PropertyChanged) == 0x000030, "Wrong size on BP_SkillTree_C_BP_PropertyChanged");
static_assert(offsetof(BP_SkillTree_C_BP_PropertyChanged, PropertyType) == 0x000000, "Member 'BP_SkillTree_C_BP_PropertyChanged::PropertyType' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_BP_PropertyChanged, Value) == 0x000004, "Member 'BP_SkillTree_C_BP_PropertyChanged::Value' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_BP_PropertyChanged, RoundedFloatValue) == 0x000008, "Member 'BP_SkillTree_C_BP_PropertyChanged::RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_BP_PropertyChanged, RoundedIntValue) == 0x00000C, "Member 'BP_SkillTree_C_BP_PropertyChanged::RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_BP_PropertyChanged, Animate) == 0x000010, "Member 'BP_SkillTree_C_BP_PropertyChanged::Animate' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_BP_PropertyChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'BP_SkillTree_C_BP_PropertyChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_BP_PropertyChanged, CallFunc_GetLevelText_ReturnValue) == 0x000018, "Member 'BP_SkillTree_C_BP_PropertyChanged::CallFunc_GetLevelText_ReturnValue' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.BlurSkillTree
// 0x0008 (0x0008 - 0x0000)
struct BP_SkillTree_C_BlurSkillTree final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_BlurSkillTree) == 0x000008, "Wrong alignment on BP_SkillTree_C_BlurSkillTree");
static_assert(sizeof(BP_SkillTree_C_BlurSkillTree) == 0x000008, "Wrong size on BP_SkillTree_C_BlurSkillTree");
static_assert(offsetof(BP_SkillTree_C_BlurSkillTree, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_SkillTree_C_BlurSkillTree::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.UnblurSkillTree
// 0x0008 (0x0008 - 0x0000)
struct BP_SkillTree_C_UnblurSkillTree final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_UnblurSkillTree) == 0x000008, "Wrong alignment on BP_SkillTree_C_UnblurSkillTree");
static_assert(sizeof(BP_SkillTree_C_UnblurSkillTree) == 0x000008, "Wrong size on BP_SkillTree_C_UnblurSkillTree");
static_assert(offsetof(BP_SkillTree_C_UnblurSkillTree, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_SkillTree_C_UnblurSkillTree::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.UpdateClassIcons
// 0x0048 (0x0048 - 0x0000)
struct BP_SkillTree_C_UpdateClassIcons final
{
public:
	ECharacterClass                               InSelectedClass;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SkillTree_ClassIcon_C*              K2Node_DynamicCast_AsBP_Skill_Tree_Class_Icon;     // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTree_C_UpdateClassIcons) == 0x000008, "Wrong alignment on BP_SkillTree_C_UpdateClassIcons");
static_assert(sizeof(BP_SkillTree_C_UpdateClassIcons) == 0x000048, "Wrong size on BP_SkillTree_C_UpdateClassIcons");
static_assert(offsetof(BP_SkillTree_C_UpdateClassIcons, InSelectedClass) == 0x000000, "Member 'BP_SkillTree_C_UpdateClassIcons::InSelectedClass' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_UpdateClassIcons, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_SkillTree_C_UpdateClassIcons::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_UpdateClassIcons, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_SkillTree_C_UpdateClassIcons::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_UpdateClassIcons, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_SkillTree_C_UpdateClassIcons::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_UpdateClassIcons, CallFunc_GetAllChildren_ReturnValue) == 0x000010, "Member 'BP_SkillTree_C_UpdateClassIcons::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_UpdateClassIcons, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_SkillTree_C_UpdateClassIcons::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_UpdateClassIcons, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_SkillTree_C_UpdateClassIcons::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_UpdateClassIcons, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_SkillTree_C_UpdateClassIcons::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_UpdateClassIcons, K2Node_DynamicCast_AsBP_Skill_Tree_Class_Icon) == 0x000038, "Member 'BP_SkillTree_C_UpdateClassIcons::K2Node_DynamicCast_AsBP_Skill_Tree_Class_Icon' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_UpdateClassIcons, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_SkillTree_C_UpdateClassIcons::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_UpdateClassIcons, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000041, "Member 'BP_SkillTree_C_UpdateClassIcons::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.BtnHotkeyAClicked
// 0x0002 (0x0002 - 0x0000)
struct BP_SkillTree_C_BtnHotkeyAClicked final
{
public:
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTree_C_BtnHotkeyAClicked) == 0x000001, "Wrong alignment on BP_SkillTree_C_BtnHotkeyAClicked");
static_assert(sizeof(BP_SkillTree_C_BtnHotkeyAClicked) == 0x000002, "Wrong size on BP_SkillTree_C_BtnHotkeyAClicked");
static_assert(offsetof(BP_SkillTree_C_BtnHotkeyAClicked, CallFunc_IsVisible_ReturnValue) == 0x000000, "Member 'BP_SkillTree_C_BtnHotkeyAClicked::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_BtnHotkeyAClicked, CallFunc_IsActive_ReturnValue) == 0x000001, "Member 'BP_SkillTree_C_BtnHotkeyAClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.SetAttributeSelectorSize
// 0x0018 (0x0018 - 0x0000)
struct BP_SkillTree_C_SetAttributeSelectorSize final
{
public:
	int32                                         InNodes;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_SetAttributeSelectorSize) == 0x000008, "Wrong alignment on BP_SkillTree_C_SetAttributeSelectorSize");
static_assert(sizeof(BP_SkillTree_C_SetAttributeSelectorSize) == 0x000018, "Wrong size on BP_SkillTree_C_SetAttributeSelectorSize");
static_assert(offsetof(BP_SkillTree_C_SetAttributeSelectorSize, InNodes) == 0x000000, "Member 'BP_SkillTree_C_SetAttributeSelectorSize::InNodes' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_SetAttributeSelectorSize, K2Node_SwitchInteger_CmpSuccess) == 0x000004, "Member 'BP_SkillTree_C_SetAttributeSelectorSize::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_SetAttributeSelectorSize, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BP_SkillTree_C_SetAttributeSelectorSize::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_SetAttributeSelectorSize, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000010, "Member 'BP_SkillTree_C_SetAttributeSelectorSize::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.PlaySelectorBonusUnlockedVFX
// 0x0008 (0x0008 - 0x0000)
struct BP_SkillTree_C_PlaySelectorBonusUnlockedVFX final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_PlaySelectorBonusUnlockedVFX) == 0x000008, "Wrong alignment on BP_SkillTree_C_PlaySelectorBonusUnlockedVFX");
static_assert(sizeof(BP_SkillTree_C_PlaySelectorBonusUnlockedVFX) == 0x000008, "Wrong size on BP_SkillTree_C_PlaySelectorBonusUnlockedVFX");
static_assert(offsetof(BP_SkillTree_C_PlaySelectorBonusUnlockedVFX, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_SkillTree_C_PlaySelectorBonusUnlockedVFX::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.PlayHideAttributeSelectorAnim
// 0x0018 (0x0018 - 0x0000)
struct BP_SkillTree_C_PlayHideAttributeSelectorAnim final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_PlayHideAttributeSelectorAnim) == 0x000008, "Wrong alignment on BP_SkillTree_C_PlayHideAttributeSelectorAnim");
static_assert(sizeof(BP_SkillTree_C_PlayHideAttributeSelectorAnim) == 0x000018, "Wrong size on BP_SkillTree_C_PlayHideAttributeSelectorAnim");
static_assert(offsetof(BP_SkillTree_C_PlayHideAttributeSelectorAnim, PlayAnim) == 0x000000, "Member 'BP_SkillTree_C_PlayHideAttributeSelectorAnim::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_PlayHideAttributeSelectorAnim, Temp_bool_Variable) == 0x000001, "Member 'BP_SkillTree_C_PlayHideAttributeSelectorAnim::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_PlayHideAttributeSelectorAnim, Temp_float_Variable) == 0x000004, "Member 'BP_SkillTree_C_PlayHideAttributeSelectorAnim::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_PlayHideAttributeSelectorAnim, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'BP_SkillTree_C_PlayHideAttributeSelectorAnim::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_PlayHideAttributeSelectorAnim, K2Node_Select_Default) == 0x00000C, "Member 'BP_SkillTree_C_PlayHideAttributeSelectorAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_PlayHideAttributeSelectorAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_SkillTree_C_PlayHideAttributeSelectorAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.ToggleAllUnlockedVFX
// 0x0018 (0x0018 - 0x0000)
struct BP_SkillTree_C_ToggleAllUnlockedVFX final
{
public:
	bool                                          IsUnlocked;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_ToggleAllUnlockedVFX) == 0x000008, "Wrong alignment on BP_SkillTree_C_ToggleAllUnlockedVFX");
static_assert(sizeof(BP_SkillTree_C_ToggleAllUnlockedVFX) == 0x000018, "Wrong size on BP_SkillTree_C_ToggleAllUnlockedVFX");
static_assert(offsetof(BP_SkillTree_C_ToggleAllUnlockedVFX, IsUnlocked) == 0x000000, "Member 'BP_SkillTree_C_ToggleAllUnlockedVFX::IsUnlocked' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ToggleAllUnlockedVFX, Temp_bool_Variable) == 0x000001, "Member 'BP_SkillTree_C_ToggleAllUnlockedVFX::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ToggleAllUnlockedVFX, Temp_byte_Variable) == 0x000002, "Member 'BP_SkillTree_C_ToggleAllUnlockedVFX::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ToggleAllUnlockedVFX, Temp_byte_Variable_1) == 0x000003, "Member 'BP_SkillTree_C_ToggleAllUnlockedVFX::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ToggleAllUnlockedVFX, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_SkillTree_C_ToggleAllUnlockedVFX::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ToggleAllUnlockedVFX, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000010, "Member 'BP_SkillTree_C_ToggleAllUnlockedVFX::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_ToggleAllUnlockedVFX, K2Node_Select_Default) == 0x000011, "Member 'BP_SkillTree_C_ToggleAllUnlockedVFX::K2Node_Select_Default' has a wrong offset!");

// Function BP_SkillTree.BP_SkillTree_C.SetSelectorState
// 0x0010 (0x0010 - 0x0000)
struct BP_SkillTree_C_SetSelectorState final
{
public:
	bool                                          AllUnlocked;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTree_C_SetSelectorState) == 0x000008, "Wrong alignment on BP_SkillTree_C_SetSelectorState");
static_assert(sizeof(BP_SkillTree_C_SetSelectorState) == 0x000010, "Wrong size on BP_SkillTree_C_SetSelectorState");
static_assert(offsetof(BP_SkillTree_C_SetSelectorState, AllUnlocked) == 0x000000, "Member 'BP_SkillTree_C_SetSelectorState::AllUnlocked' has a wrong offset!");
static_assert(offsetof(BP_SkillTree_C_SetSelectorState, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_SkillTree_C_SetSelectorState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

