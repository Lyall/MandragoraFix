#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineMoveEyeBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineMoveEyeBase.BP_SplineMoveEyeBase_C
// 0x0050 (0x1B10 - 0x1AC0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_SplineMoveEyeBase_C : public AEnemyCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1AC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           AkComp;                                            // 0x1AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHurtCapsule*                           HurtCapsule;                                       // 0x1AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ASplineActor_C*                         SplineReference;                                   // 0x1AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaitTimeBetweenCycles;                             // 0x1AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlySpeed;                                          // 0x1AE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CircularPath;                                      // 0x1AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AE9[0x7];                                     // 0x1AE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FlightSpeedCurve;                                  // 0x1AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlowDownDistance;                                  // 0x1AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlowDownSpeedRate;                                 // 0x1AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MoveBackward;                                      // 0x1B00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_SplineMoveEyeBase(int32 EntryPoint);
	void OnVfxEvent(class FName VfxEventType);
	void BPPostBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineMoveEyeBase_C">();
	}
	static class ABP_SplineMoveEyeBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplineMoveEyeBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_SplineMoveEyeBase_C) == 0x000010, "Wrong alignment on ABP_SplineMoveEyeBase_C");
static_assert(sizeof(ABP_SplineMoveEyeBase_C) == 0x001B10, "Wrong size on ABP_SplineMoveEyeBase_C");
static_assert(offsetof(ABP_SplineMoveEyeBase_C, UberGraphFrame) == 0x001AC0, "Member 'ABP_SplineMoveEyeBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveEyeBase_C, AkComp) == 0x001AC8, "Member 'ABP_SplineMoveEyeBase_C::AkComp' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveEyeBase_C, HurtCapsule) == 0x001AD0, "Member 'ABP_SplineMoveEyeBase_C::HurtCapsule' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveEyeBase_C, SplineReference) == 0x001AD8, "Member 'ABP_SplineMoveEyeBase_C::SplineReference' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveEyeBase_C, WaitTimeBetweenCycles) == 0x001AE0, "Member 'ABP_SplineMoveEyeBase_C::WaitTimeBetweenCycles' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveEyeBase_C, FlySpeed) == 0x001AE4, "Member 'ABP_SplineMoveEyeBase_C::FlySpeed' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveEyeBase_C, CircularPath) == 0x001AE8, "Member 'ABP_SplineMoveEyeBase_C::CircularPath' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveEyeBase_C, FlightSpeedCurve) == 0x001AF0, "Member 'ABP_SplineMoveEyeBase_C::FlightSpeedCurve' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveEyeBase_C, SlowDownDistance) == 0x001AF8, "Member 'ABP_SplineMoveEyeBase_C::SlowDownDistance' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveEyeBase_C, SlowDownSpeedRate) == 0x001AFC, "Member 'ABP_SplineMoveEyeBase_C::SlowDownSpeedRate' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoveEyeBase_C, MoveBackward) == 0x001B00, "Member 'ABP_SplineMoveEyeBase_C::MoveBackward' has a wrong offset!");

}

