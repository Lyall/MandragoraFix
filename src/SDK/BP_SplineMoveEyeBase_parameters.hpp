#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineMoveEyeBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_SplineMoveEyeBase.BP_SplineMoveEyeBase_C.ExecuteUbergraph_BP_SplineMoveEyeBase
// 0x004C (0x004C - 0x0000)
struct BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventAtLocation_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0018(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0028(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	class FName                                   K2Node_Event_VfxEventType;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase) == 0x000004, "Wrong alignment on BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase");
static_assert(sizeof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase) == 0x00004C, "Wrong size on BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, EntryPoint) == 0x000000, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000004, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, CallFunc_PostEventAtLocation_ReturnValue) == 0x000010, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::CallFunc_PostEventAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, CallFunc_IsValid_ReturnValue_1) == 0x000015, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, CallFunc_IsValid_ReturnValue_2) == 0x000016, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, Temp_delegate_Variable) == 0x000018, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, Temp_delegate_Variable_1) == 0x000028, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, K2Node_Event_VfxEventType) == 0x000038, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::K2Node_Event_VfxEventType' has a wrong offset!");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, CallFunc_PostAkEvent_ReturnValue) == 0x000040, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, K2Node_SwitchName_CmpSuccess) == 0x000044, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase, CallFunc_PostAkEvent_ReturnValue_1) == 0x000048, "Member 'BP_SplineMoveEyeBase_C_ExecuteUbergraph_BP_SplineMoveEyeBase::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");

// Function BP_SplineMoveEyeBase.BP_SplineMoveEyeBase_C.OnVfxEvent
// 0x0008 (0x0008 - 0x0000)
struct BP_SplineMoveEyeBase_C_OnVfxEvent final
{
public:
	class FName                                   VfxEventType;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SplineMoveEyeBase_C_OnVfxEvent) == 0x000004, "Wrong alignment on BP_SplineMoveEyeBase_C_OnVfxEvent");
static_assert(sizeof(BP_SplineMoveEyeBase_C_OnVfxEvent) == 0x000008, "Wrong size on BP_SplineMoveEyeBase_C_OnVfxEvent");
static_assert(offsetof(BP_SplineMoveEyeBase_C_OnVfxEvent, VfxEventType) == 0x000000, "Member 'BP_SplineMoveEyeBase_C_OnVfxEvent::VfxEventType' has a wrong offset!");

}

