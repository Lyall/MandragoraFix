#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TutorialScreen

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "man_structs.hpp"


namespace SDK::Params
{

// Function BP_TutorialScreen.BP_TutorialScreen_C.ExecuteUbergraph_BP_TutorialScreen
// 0x00B8 (0x00B8 - 0x0000)
struct BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Rewind_ReturnValue;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Play_ReturnValue;                         // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Title;                                // 0x0048(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InPageNumber;                         // 0x0060(0x0018)(ConstParm)
	int32                                         K2Node_Event_CurrentPage;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MaxPage;                              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFade;                                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Description;                          // 0x0088(0x0018)(ConstParm)
	EInputDisplay                                 K2Node_Event_InInputDisplay;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InControlDisplay;                     // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bUpEnabled;                           // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bDownEnabled;                         // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen) == 0x000008, "Wrong alignment on BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen");
static_assert(sizeof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen) == 0x0000B8, "Wrong size on BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, EntryPoint) == 0x000000, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, Temp_byte_Variable) == 0x000004, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, Temp_byte_Variable_1) == 0x000005, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, Temp_bool_Variable) == 0x000006, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, Temp_float_Variable) == 0x000008, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, Temp_float_Variable_1) == 0x00000C, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, Temp_bool_Variable_1) == 0x000010, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, Temp_float_Variable_2) == 0x000014, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, Temp_float_Variable_3) == 0x000018, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_AnimDuration_1) == 0x00001C, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x000020, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_AnimDuration) == 0x000024, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x000030, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, CallFunc_PlayAnimation_ReturnValue_1) == 0x000038, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, CallFunc_Rewind_ReturnValue) == 0x000040, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::CallFunc_Rewind_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, CallFunc_Play_ReturnValue) == 0x000041, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::CallFunc_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_Title) == 0x000048, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_Title' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_InPageNumber) == 0x000060, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_InPageNumber' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_CurrentPage) == 0x000078, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_CurrentPage' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_MaxPage) == 0x00007C, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_MaxPage' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_bFade) == 0x000080, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_bFade' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_Description) == 0x000088, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_Description' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_InInputDisplay) == 0x0000A0, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_InControlDisplay) == 0x0000A1, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_InControlDisplay' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_bUpEnabled) == 0x0000A2, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_bUpEnabled' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Event_bDownEnabled) == 0x0000A3, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Event_bDownEnabled' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, CallFunc_BooleanOR_ReturnValue) == 0x0000A4, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Select_Default) == 0x0000A8, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Select_Default_1) == 0x0000AC, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, Temp_bool_Variable_2) == 0x0000B0, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen, K2Node_Select_Default_2) == 0x0000B1, "Member 'BP_TutorialScreen_C_ExecuteUbergraph_BP_TutorialScreen::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.OnSetReplayBtnsState
// 0x0002 (0x0002 - 0x0000)
struct BP_TutorialScreen_C_OnSetReplayBtnsState final
{
public:
	bool                                          bUpEnabled;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDownEnabled;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialScreen_C_OnSetReplayBtnsState) == 0x000001, "Wrong alignment on BP_TutorialScreen_C_OnSetReplayBtnsState");
static_assert(sizeof(BP_TutorialScreen_C_OnSetReplayBtnsState) == 0x000002, "Wrong size on BP_TutorialScreen_C_OnSetReplayBtnsState");
static_assert(offsetof(BP_TutorialScreen_C_OnSetReplayBtnsState, bUpEnabled) == 0x000000, "Member 'BP_TutorialScreen_C_OnSetReplayBtnsState::bUpEnabled' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_OnSetReplayBtnsState, bDownEnabled) == 0x000001, "Member 'BP_TutorialScreen_C_OnSetReplayBtnsState::bDownEnabled' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.OnSetInputDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_TutorialScreen_C_OnSetInputDisplay final
{
public:
	EInputDisplay                                 InInputDisplay;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 InControlDisplay;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialScreen_C_OnSetInputDisplay) == 0x000001, "Wrong alignment on BP_TutorialScreen_C_OnSetInputDisplay");
static_assert(sizeof(BP_TutorialScreen_C_OnSetInputDisplay) == 0x000002, "Wrong size on BP_TutorialScreen_C_OnSetInputDisplay");
static_assert(offsetof(BP_TutorialScreen_C_OnSetInputDisplay, InInputDisplay) == 0x000000, "Member 'BP_TutorialScreen_C_OnSetInputDisplay::InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_OnSetInputDisplay, InControlDisplay) == 0x000001, "Member 'BP_TutorialScreen_C_OnSetInputDisplay::InControlDisplay' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.OnSetDescription
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialScreen_C_OnSetDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_TutorialScreen_C_OnSetDescription) == 0x000008, "Wrong alignment on BP_TutorialScreen_C_OnSetDescription");
static_assert(sizeof(BP_TutorialScreen_C_OnSetDescription) == 0x000018, "Wrong size on BP_TutorialScreen_C_OnSetDescription");
static_assert(offsetof(BP_TutorialScreen_C_OnSetDescription, Description) == 0x000000, "Member 'BP_TutorialScreen_C_OnSetDescription::Description' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.OnSetPage
// 0x0040 (0x0040 - 0x0000)
struct BP_TutorialScreen_C_OnSetPage final
{
public:
	class FText                                   Title_0;                                           // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InPageNumber;                                      // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CurrentPage;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxPage;                                           // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFade;                                             // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialScreen_C_OnSetPage) == 0x000008, "Wrong alignment on BP_TutorialScreen_C_OnSetPage");
static_assert(sizeof(BP_TutorialScreen_C_OnSetPage) == 0x000040, "Wrong size on BP_TutorialScreen_C_OnSetPage");
static_assert(offsetof(BP_TutorialScreen_C_OnSetPage, Title_0) == 0x000000, "Member 'BP_TutorialScreen_C_OnSetPage::Title_0' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_OnSetPage, InPageNumber) == 0x000018, "Member 'BP_TutorialScreen_C_OnSetPage::InPageNumber' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_OnSetPage, CurrentPage) == 0x000030, "Member 'BP_TutorialScreen_C_OnSetPage::CurrentPage' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_OnSetPage, MaxPage) == 0x000034, "Member 'BP_TutorialScreen_C_OnSetPage::MaxPage' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_OnSetPage, bFade) == 0x000038, "Member 'BP_TutorialScreen_C_OnSetPage::bFade' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_TutorialScreen_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialScreen_C_OnHide) == 0x000004, "Wrong alignment on BP_TutorialScreen_C_OnHide");
static_assert(sizeof(BP_TutorialScreen_C_OnHide) == 0x000004, "Wrong size on BP_TutorialScreen_C_OnHide");
static_assert(offsetof(BP_TutorialScreen_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_TutorialScreen_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_TutorialScreen_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialScreen_C_OnShow) == 0x000004, "Wrong alignment on BP_TutorialScreen_C_OnShow");
static_assert(sizeof(BP_TutorialScreen_C_OnShow) == 0x000004, "Wrong size on BP_TutorialScreen_C_OnShow");
static_assert(offsetof(BP_TutorialScreen_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_TutorialScreen_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.SetBtnCloseVisibility
// 0x000B (0x000B - 0x0000)
struct BP_TutorialScreen_C_SetBtnCloseVisibility final
{
public:
	EInputDisplay                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 CallFunc_GetInputDisplay_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialScreen_C_SetBtnCloseVisibility) == 0x000001, "Wrong alignment on BP_TutorialScreen_C_SetBtnCloseVisibility");
static_assert(sizeof(BP_TutorialScreen_C_SetBtnCloseVisibility) == 0x00000B, "Wrong size on BP_TutorialScreen_C_SetBtnCloseVisibility");
static_assert(offsetof(BP_TutorialScreen_C_SetBtnCloseVisibility, Temp_byte_Variable) == 0x000000, "Member 'BP_TutorialScreen_C_SetBtnCloseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetBtnCloseVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'BP_TutorialScreen_C_SetBtnCloseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetBtnCloseVisibility, Temp_byte_Variable_2) == 0x000002, "Member 'BP_TutorialScreen_C_SetBtnCloseVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetBtnCloseVisibility, Temp_byte_Variable_3) == 0x000003, "Member 'BP_TutorialScreen_C_SetBtnCloseVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetBtnCloseVisibility, Temp_byte_Variable_4) == 0x000004, "Member 'BP_TutorialScreen_C_SetBtnCloseVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetBtnCloseVisibility, Temp_byte_Variable_5) == 0x000005, "Member 'BP_TutorialScreen_C_SetBtnCloseVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetBtnCloseVisibility, Temp_byte_Variable_6) == 0x000006, "Member 'BP_TutorialScreen_C_SetBtnCloseVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetBtnCloseVisibility, Temp_byte_Variable_7) == 0x000007, "Member 'BP_TutorialScreen_C_SetBtnCloseVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetBtnCloseVisibility, Temp_byte_Variable_8) == 0x000008, "Member 'BP_TutorialScreen_C_SetBtnCloseVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetBtnCloseVisibility, CallFunc_GetInputDisplay_ReturnValue) == 0x000009, "Member 'BP_TutorialScreen_C_SetBtnCloseVisibility::CallFunc_GetInputDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetBtnCloseVisibility, K2Node_Select_Default) == 0x00000A, "Member 'BP_TutorialScreen_C_SetBtnCloseVisibility::K2Node_Select_Default' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.BtnHotkeyDPadUpClicked
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialScreen_C_BtnHotkeyDPadUpClicked final
{
public:
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialScreen_C_BtnHotkeyDPadUpClicked) == 0x000008, "Wrong alignment on BP_TutorialScreen_C_BtnHotkeyDPadUpClicked");
static_assert(sizeof(BP_TutorialScreen_C_BtnHotkeyDPadUpClicked) == 0x000010, "Wrong size on BP_TutorialScreen_C_BtnHotkeyDPadUpClicked");
static_assert(offsetof(BP_TutorialScreen_C_BtnHotkeyDPadUpClicked, CallFunc_IsVisible_ReturnValue) == 0x000000, "Member 'BP_TutorialScreen_C_BtnHotkeyDPadUpClicked::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_BtnHotkeyDPadUpClicked, CallFunc_IsActive_ReturnValue) == 0x000001, "Member 'BP_TutorialScreen_C_BtnHotkeyDPadUpClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_BtnHotkeyDPadUpClicked, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_TutorialScreen_C_BtnHotkeyDPadUpClicked::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.BtnHotkeyDPadDownClicked
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialScreen_C_BtnHotkeyDPadDownClicked final
{
public:
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialScreen_C_BtnHotkeyDPadDownClicked) == 0x000008, "Wrong alignment on BP_TutorialScreen_C_BtnHotkeyDPadDownClicked");
static_assert(sizeof(BP_TutorialScreen_C_BtnHotkeyDPadDownClicked) == 0x000010, "Wrong size on BP_TutorialScreen_C_BtnHotkeyDPadDownClicked");
static_assert(offsetof(BP_TutorialScreen_C_BtnHotkeyDPadDownClicked, CallFunc_IsVisible_ReturnValue) == 0x000000, "Member 'BP_TutorialScreen_C_BtnHotkeyDPadDownClicked::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_BtnHotkeyDPadDownClicked, CallFunc_IsActive_ReturnValue) == 0x000001, "Member 'BP_TutorialScreen_C_BtnHotkeyDPadDownClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_BtnHotkeyDPadDownClicked, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_TutorialScreen_C_BtnHotkeyDPadDownClicked::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.BtnHotkeyDpadLeftClicked
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialScreen_C_BtnHotkeyDpadLeftClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialScreen_C_BtnHotkeyDpadLeftClicked) == 0x000008, "Wrong alignment on BP_TutorialScreen_C_BtnHotkeyDpadLeftClicked");
static_assert(sizeof(BP_TutorialScreen_C_BtnHotkeyDpadLeftClicked) == 0x000010, "Wrong size on BP_TutorialScreen_C_BtnHotkeyDpadLeftClicked");
static_assert(offsetof(BP_TutorialScreen_C_BtnHotkeyDpadLeftClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_TutorialScreen_C_BtnHotkeyDpadLeftClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_BtnHotkeyDpadLeftClicked, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_TutorialScreen_C_BtnHotkeyDpadLeftClicked::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.BtnHotkeyDpadRightClicked
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialScreen_C_BtnHotkeyDpadRightClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialScreen_C_BtnHotkeyDpadRightClicked) == 0x000008, "Wrong alignment on BP_TutorialScreen_C_BtnHotkeyDpadRightClicked");
static_assert(sizeof(BP_TutorialScreen_C_BtnHotkeyDpadRightClicked) == 0x000010, "Wrong size on BP_TutorialScreen_C_BtnHotkeyDpadRightClicked");
static_assert(offsetof(BP_TutorialScreen_C_BtnHotkeyDpadRightClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_TutorialScreen_C_BtnHotkeyDpadRightClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_BtnHotkeyDpadRightClicked, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_TutorialScreen_C_BtnHotkeyDpadRightClicked::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.SetPageBtnsState
// 0x002C (0x002C - 0x0000)
struct BP_TutorialScreen_C_SetPageBtnsState final
{
public:
	int32                                         CurrentPage;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxPage;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialScreen_C_SetPageBtnsState) == 0x000004, "Wrong alignment on BP_TutorialScreen_C_SetPageBtnsState");
static_assert(sizeof(BP_TutorialScreen_C_SetPageBtnsState) == 0x00002C, "Wrong size on BP_TutorialScreen_C_SetPageBtnsState");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, CurrentPage) == 0x000000, "Member 'BP_TutorialScreen_C_SetPageBtnsState::CurrentPage' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, MaxPage) == 0x000004, "Member 'BP_TutorialScreen_C_SetPageBtnsState::MaxPage' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, Temp_bool_Variable) == 0x000008, "Member 'BP_TutorialScreen_C_SetPageBtnsState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, CallFunc_Greater_IntInt_ReturnValue) == 0x000009, "Member 'BP_TutorialScreen_C_SetPageBtnsState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, Temp_float_Variable) == 0x00000C, "Member 'BP_TutorialScreen_C_SetPageBtnsState::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, Temp_float_Variable_1) == 0x000010, "Member 'BP_TutorialScreen_C_SetPageBtnsState::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, Temp_bool_Variable_1) == 0x000014, "Member 'BP_TutorialScreen_C_SetPageBtnsState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, Temp_float_Variable_2) == 0x000018, "Member 'BP_TutorialScreen_C_SetPageBtnsState::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, K2Node_Select_Default) == 0x00001C, "Member 'BP_TutorialScreen_C_SetPageBtnsState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, Temp_float_Variable_3) == 0x000020, "Member 'BP_TutorialScreen_C_SetPageBtnsState::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_TutorialScreen_C_SetPageBtnsState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPageBtnsState, K2Node_Select_Default_1) == 0x000028, "Member 'BP_TutorialScreen_C_SetPageBtnsState::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_TutorialScreen.BP_TutorialScreen_C.SetPage
// 0x0098 (0x0098 - 0x0000)
struct BP_TutorialScreen_C_SetPage final
{
public:
	class FText                                   Title_0;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InPageNumber;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         CurrentPage;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxPage;                                           // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fade;                                              // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_3;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0078(0x0018)()
	bool                                          CallFunc_NotEqual_TextText_ReturnValue;            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialScreen_C_SetPage) == 0x000008, "Wrong alignment on BP_TutorialScreen_C_SetPage");
static_assert(sizeof(BP_TutorialScreen_C_SetPage) == 0x000098, "Wrong size on BP_TutorialScreen_C_SetPage");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, Title_0) == 0x000000, "Member 'BP_TutorialScreen_C_SetPage::Title_0' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, InPageNumber) == 0x000018, "Member 'BP_TutorialScreen_C_SetPage::InPageNumber' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CurrentPage) == 0x000030, "Member 'BP_TutorialScreen_C_SetPage::CurrentPage' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, MaxPage) == 0x000034, "Member 'BP_TutorialScreen_C_SetPage::MaxPage' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, Fade) == 0x000038, "Member 'BP_TutorialScreen_C_SetPage::Fade' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, Temp_byte_Variable) == 0x000039, "Member 'BP_TutorialScreen_C_SetPage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_Greater_IntInt_ReturnValue) == 0x00003A, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, Temp_bool_Variable) == 0x00003B, "Member 'BP_TutorialScreen_C_SetPage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, Temp_byte_Variable_1) == 0x00003C, "Member 'BP_TutorialScreen_C_SetPage::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, Temp_byte_Variable_2) == 0x00003D, "Member 'BP_TutorialScreen_C_SetPage::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_PlayAnimation_ReturnValue) == 0x000040, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_PlayAnimation_ReturnValue_1) == 0x000048, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, Temp_byte_Variable_3) == 0x000050, "Member 'BP_TutorialScreen_C_SetPage::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000051, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000052, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_Not_PreBool_ReturnValue) == 0x000053, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_BooleanAND_ReturnValue) == 0x000054, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_BooleanAND_ReturnValue_1) == 0x000055, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_PlayAnimation_ReturnValue_2) == 0x000058, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000060, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_PlayAnimation_ReturnValue_3) == 0x000068, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_PlayAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, Temp_bool_Variable_1) == 0x000070, "Member 'BP_TutorialScreen_C_SetPage::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, K2Node_Select_Default) == 0x000071, "Member 'BP_TutorialScreen_C_SetPage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, K2Node_Select_Default_1) == 0x000072, "Member 'BP_TutorialScreen_C_SetPage::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_GetText_ReturnValue) == 0x000078, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialScreen_C_SetPage, CallFunc_NotEqual_TextText_ReturnValue) == 0x000090, "Member 'BP_TutorialScreen_C_SetPage::CallFunc_NotEqual_TextText_ReturnValue' has a wrong offset!");

}

