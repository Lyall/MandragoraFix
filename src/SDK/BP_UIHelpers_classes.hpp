#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UIHelpers

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "man_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UIHelpers.BP_UIHelpers_C
// 0x0000 (0x0028 - 0x0028)
class UBP_UIHelpers_C final : public UBlueprintFunctionLibrary
{
public:
	static TArray<class UWidget*> GetAllChildrenOfClass(class UPanelWidget* ParentWidget, class UClass* WidgetClass, class UObject* __WorldContext);
	static void ShowWidescreenEffect(float AnimDuration, class UObject* __WorldContext);
	static void HideWidescreenEffect(float AnimDuration, class UObject* __WorldContext);
	static void Set_Hotkey_Images(TArray<class UTexture2D*>& HotkeyImages, TArray<class UImage*>& HotkeyIconUserWidgets, class UObject* __WorldContext);
	static void Set_Hotkey_Text(TArray<class FText>& HotkeyTexts, TArray<class UTextBlock*>& HotkeyTextUserWidgets, TArray<class UWidget*>& HotkeyTextBorderUserWidgets, class UObject* __WorldContext);
	static class UTexture2D* GetCurrencyIcon(EHeroProperty PropertyType, class UObject* __WorldContext);
	static class FText GetCurrencyText(EHeroProperty PropertyType, class UObject* __WorldContext);
	static void Set_Enchant_Icon(TArray<class UTexture2D*>& InEnchantIcons, class UImage* EnchantImage, bool InIsTemporary, class UObject* __WorldContext);
	static void CreateGlobalVariableNameSafe(const class FString& Name_0, const class FString& Prefix, const class FString& UniqueString, class UObject* Owner, class UObject* __WorldContext, class FString* NewName);
	static bool GetGlobalBool(class FName Name_0, class UObject* __WorldContext);
	static void StartConv(class AActorBase* Target, bool KeepCutsceneMode, bool Keep_Vendor_Portrait_After_Hide, class FName ConversationName, class UObject* __WorldContext);
	static void StoryOn(bool bFade, bool bSkippable, float Duration, class UObject* __WorldContext);
	static void StoryOff(bool bFade, float Duration, class UObject* __WorldContext);
	static void EnableAbility(class AActorBase* Actor, class UClass* AbilityClass, class UObject* __WorldContext);
	static void DisableAbility(class AActorBase* Actor, class UClass* AbilityClass, class UObject* __WorldContext);
	static bool HasItem(class UClass* ItemAbilityClass, class UObject* __WorldContext);
	static void AddItem(class UClass* ItemAbilityClass, float ConversationAddItemShowingDelayTime, class UObject* __WorldContext);
	static void RemoveItem(class UClass* ItemAbilityClass, int32 StackNum, bool UsItem, class UObject* __WorldContext);
	static void CompleteObjective(TSubclassOf<class UManQuest> QClass, class FName ObjectiveName, class UObject* __WorldContext);
	static bool IsObjectiveComplete(TSubclassOf<class UManQuest> QClass, class FName ObjectiveName, class UObject* __WorldContext);
	static void StartQuest(TSubclassOf<class UManQuest> QuestBlueprint, class UObject* __WorldContext);
	static class UFadeManager* GetFadeManager(class UObject* __WorldContext);
	static void CompleteQuest(TSubclassOf<class UManQuest> QClass, class UObject* __WorldContext);
	static bool HasQuest(TSubclassOf<class UManQuest> QClass, class UObject* __WorldContext);
	static void GetBondActor(class AActorSoul* Target, class UObject* __WorldContext, class AActor** Actor);
	static class UManQuest* AddQuest(TSubclassOf<class UManQuest> QuestBlueprint, class UObject* __WorldContext);
	static bool HasItemStack(class UClass* Item, int32 Stack, class UObject* __WorldContext);
	static bool IsItemEquipped(TSubclassOf<class UItemAbility> Item, EInventorySlot Slot, class UObject* __WorldContext);
	static void GetGlobalInt(class FName Name_0, class UObject* __WorldContext, int32* OutValue);
	static void SetDebugLineIDText(class UTextBlock* InDebugLineIDWidget, const class FText& InLineIDText, class UObject* __WorldContext);
	static void CloseDialog(class UObject* __WorldContext);
	static void SetHUDTimer(float Timer, float Delay, class UObject* __WorldContext);
	static bool IsHUDTimerVisible(class UObject* __WorldContext);
	static class UAbilityController* GetPCAbilityController(class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UIHelpers_C">();
	}
	static class UBP_UIHelpers_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UIHelpers_C>();
	}
};
static_assert(alignof(UBP_UIHelpers_C) == 0x000008, "Wrong alignment on UBP_UIHelpers_C");
static_assert(sizeof(UBP_UIHelpers_C) == 0x000028, "Wrong size on UBP_UIHelpers_C");

}

