#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vendor_Alchemist_GardenSlot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot
// 0x0130 (0x0130 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0014(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_Name;                                 // 0x0050(0x0018)(ConstParm)
	const class UTexture2D*                       K2Node_Event_Icon;                                 // 0x0068(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPlayAkAudioEvent;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_ElapsedCooldownPercent;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_TimeLeft;                             // 0x0078(0x0018)(ConstParm)
	bool                                          K2Node_Event_bInLocked;                            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_LockedLevel;                          // 0x0098(0x0018)(ConstParm)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bCompleted;                           // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bEquipState;                          // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate_2;                           // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate_1;                           // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCompleted_ReturnValue;                  // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHighlighted;                         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0100(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0118(0x0018)()
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot) == 0x000130, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, EntryPoint) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, Temp_bool_Variable) == 0x000004, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, Temp_bool_Variable_1) == 0x000005, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, Temp_float_Variable) == 0x000008, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, Temp_float_Variable_1) == 0x00000C, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_IsDesignTime) == 0x000010, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_MyGeometry) == 0x000014, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_InDeltaTime) == 0x00004C, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_Name) == 0x000050, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_Icon) == 0x000068, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_Icon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_bPlayAkAudioEvent) == 0x000070, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_bPlayAkAudioEvent' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_IsValid_ReturnValue) == 0x000071, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_ElapsedCooldownPercent) == 0x000074, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_ElapsedCooldownPercent' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_TimeLeft) == 0x000078, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_TimeLeft' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_bInLocked) == 0x000090, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_bInLocked' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_LockedLevel) == 0x000098, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_LockedLevel' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000B0, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000B1, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_bCompleted) == 0x0000B2, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_bCompleted' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_BooleanAND_ReturnValue) == 0x0000B3, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_bEquipState) == 0x0000B4, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_bEquipState' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_bAnimate_2) == 0x0000B5, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_bAnimate_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_bAnimate_1) == 0x0000B6, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_bAnimate_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_IsCompleted_ReturnValue) == 0x0000B7, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_IsCompleted_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_PlayAnimation_ReturnValue) == 0x0000B8, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x0000C0, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000C4, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x0000C8, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_PlayAnimation_ReturnValue_1) == 0x0000D0, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_PlayAnimation_ReturnValue_2) == 0x0000D8, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_bHighlighted) == 0x0000E0, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_bHighlighted' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Event_bAnimate) == 0x0000E1, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Select_Default) == 0x0000E4, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000E8, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_RandomFloatInRange_ReturnValue) == 0x0000F0, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0000F4, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x0000F8, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, Temp_text_Variable) == 0x000100, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot, K2Node_Select_Default_1) == 0x000118, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ExecuteUbergraph_BP_Vendor_Alchemist_GardenSlot::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.OnHighlighted
// 0x0002 (0x0002 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_OnHighlighted final
{
public:
	bool                                          bHighlighted;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_OnHighlighted) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_OnHighlighted");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_OnHighlighted) == 0x000002, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_OnHighlighted");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnHighlighted, bHighlighted) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnHighlighted::bHighlighted' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnHighlighted, bAnimate) == 0x000001, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnHighlighted::bAnimate' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.OnUnfocused
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_OnUnfocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_OnUnfocused) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_OnUnfocused");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_OnUnfocused) == 0x000001, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_OnUnfocused");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnUnfocused, bAnimate) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnUnfocused::bAnimate' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.OnFocused
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_OnFocused final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_OnFocused) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_OnFocused");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_OnFocused) == 0x000001, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_OnFocused");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnFocused, bAnimate) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnFocused::bAnimate' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.OnToggleEquipState
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_OnToggleEquipState final
{
public:
	bool                                          bEquipState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_OnToggleEquipState) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_OnToggleEquipState");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_OnToggleEquipState) == 0x000001, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_OnToggleEquipState");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnToggleEquipState, bEquipState) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnToggleEquipState::bEquipState' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.OnToggleCompleted
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_OnToggleCompleted final
{
public:
	bool                                          bCompleted;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_OnToggleCompleted) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_OnToggleCompleted");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_OnToggleCompleted) == 0x000001, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_OnToggleCompleted");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnToggleCompleted, bCompleted) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnToggleCompleted::bCompleted' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.OnToggleLocked
// 0x0020 (0x0020 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_OnToggleLocked final
{
public:
	bool                                          bInLocked;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LockedLevel;                                       // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_OnToggleLocked) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_OnToggleLocked");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_OnToggleLocked) == 0x000020, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_OnToggleLocked");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnToggleLocked, bInLocked) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnToggleLocked::bInLocked' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnToggleLocked, LockedLevel) == 0x000008, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnToggleLocked::LockedLevel' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.OnSetCountdown
// 0x0020 (0x0020 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_OnSetCountdown final
{
public:
	float                                         ElapsedCooldownPercent;                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimeLeft;                                          // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_OnSetCountdown) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_OnSetCountdown");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_OnSetCountdown) == 0x000020, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_OnSetCountdown");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnSetCountdown, ElapsedCooldownPercent) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnSetCountdown::ElapsedCooldownPercent' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnSetCountdown, TimeLeft) == 0x000008, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnSetCountdown::TimeLeft' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.OnSetSlot
// 0x0028 (0x0028 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_OnSetSlot final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	const class UTexture2D*                       Icon_0;                                            // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayAkAudioEvent;                                 // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_OnSetSlot) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_OnSetSlot");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_OnSetSlot) == 0x000028, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_OnSetSlot");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnSetSlot, Name_0) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnSetSlot::Name_0' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnSetSlot, Icon_0) == 0x000018, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnSetSlot::Icon_0' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_OnSetSlot, bPlayAkAudioEvent) == 0x000020, "Member 'BP_Vendor_Alchemist_GardenSlot_C_OnSetSlot::bPlayAkAudioEvent' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_Tick) == 0x000004, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_Tick");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_Tick) == 0x00003C, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_Tick");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Vendor_Alchemist_GardenSlot_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_PreConstruct");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_PreConstruct) == 0x000001, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_PreConstruct");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.SetIcon
// 0x0020 (0x0020 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_SetIcon final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_SetIcon) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_SetIcon");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_SetIcon) == 0x000020, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_SetIcon");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_SetIcon, InIcon) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_SetIcon::InIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_SetIcon, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BP_Vendor_Alchemist_GardenSlot_C_SetIcon::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_SetIcon, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000010, "Member 'BP_Vendor_Alchemist_GardenSlot_C_SetIcon::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_SetIcon, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_Vendor_Alchemist_GardenSlot_C_SetIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.ToggleLocked
// 0x00E0 (0x00E0 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked final
{
public:
	bool                                          InLocked;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LockedLevel;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0098(0x0028)()
	class FText                                   K2Node_Select_Default_3;                           // 0x00C0(0x0018)()
	class UTexture2D*                             K2Node_Select_Default_4;                           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked) == 0x0000E0, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, InLocked) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::InLocked' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, LockedLevel) == 0x000008, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::LockedLevel' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_bool_Variable) == 0x000020, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_object_Variable) == 0x000028, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_object_Variable_1) == 0x000030, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_bool_Variable_1) == 0x000038, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_bool_Variable_2) == 0x000039, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_object_Variable_2) == 0x000040, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_object_Variable_3) == 0x000048, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_bool_Variable_3) == 0x000050, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_struct_Variable) == 0x000054, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_struct_Variable_1) == 0x000064, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_bool_Variable_4) == 0x000074, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_byte_Variable) == 0x000075, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, Temp_byte_Variable_1) == 0x000076, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, K2Node_Select_Default) == 0x000078, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, K2Node_Select_Default_1) == 0x000080, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, K2Node_Select_Default_2) == 0x000084, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, K2Node_MakeStruct_SlateColor) == 0x000098, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, K2Node_Select_Default_3) == 0x0000C0, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked, K2Node_Select_Default_4) == 0x0000D8, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleLocked::K2Node_Select_Default_4' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.ToggleSelected
// 0x0040 (0x0040 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected final
{
public:
	bool                                          InIsSelected;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayAnim;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected) == 0x000040, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, InIsSelected) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::InIsSelected' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, PlayAnim) == 0x000001, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, Temp_bool_Variable) == 0x000002, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, Temp_float_Variable) == 0x000004, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, Temp_bool_Variable_1) == 0x000008, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, Temp_float_Variable_1) == 0x00000C, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, CallFunc_GetEndTime_ReturnValue) == 0x000010, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, K2Node_Select_Default) == 0x000014, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, CallFunc_GetEndTime_ReturnValue_1) == 0x000018, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::CallFunc_GetEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, K2Node_Select_Default_1) == 0x000028, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, CallFunc_PlayAnimation_ReturnValue_1) == 0x000030, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000038, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleSelected::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.ToggleEquipState
// 0x0010 (0x0010 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState final
{
public:
	bool                                          InEquipState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState) == 0x000010, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState, InEquipState) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState::InEquipState' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState, Temp_bool_Variable) == 0x000001, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState, Temp_byte_Variable) == 0x000002, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState, Temp_byte_Variable_1) == 0x000003, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState, K2Node_Select_Default) == 0x000004, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleEquipState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.ToggleCompleted
// 0x0048 (0x0048 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted final
{
public:
	bool                                          InIsCompleted;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_4;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_5;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_2;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted) == 0x000048, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted, InIsCompleted) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted::InIsCompleted' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted, CallFunc_RandomFloatInRange_ReturnValue) == 0x000010, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000018, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000020, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000024, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x000028, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted, CallFunc_RandomFloatInRange_ReturnValue_4) == 0x00002C, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted::CallFunc_RandomFloatInRange_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted, CallFunc_RandomFloatInRange_ReturnValue_5) == 0x000030, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted::CallFunc_RandomFloatInRange_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted, CallFunc_GetDynamicMaterial_ReturnValue_2) == 0x000038, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted::CallFunc_GetDynamicMaterial_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted, CallFunc_PlayAnimation_ReturnValue) == 0x000040, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCompleted::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.SetCountdown
// 0x0068 (0x0068 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_SetCountdown final
{
public:
	float                                         PercentLeft;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimeLeft;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0040(0x0028)()
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_SetCountdown) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_SetCountdown");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_SetCountdown) == 0x000068, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_SetCountdown");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_SetCountdown, PercentLeft) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_SetCountdown::PercentLeft' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_SetCountdown, TimeLeft) == 0x000008, "Member 'BP_Vendor_Alchemist_GardenSlot_C_SetCountdown::TimeLeft' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_SetCountdown, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Vendor_Alchemist_GardenSlot_C_SetCountdown::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_SetCountdown, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_Vendor_Alchemist_GardenSlot_C_SetCountdown::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_SetCountdown, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000028, "Member 'BP_Vendor_Alchemist_GardenSlot_C_SetCountdown::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_SetCountdown, CallFunc_LinearColorLerp_ReturnValue) == 0x000030, "Member 'BP_Vendor_Alchemist_GardenSlot_C_SetCountdown::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_SetCountdown, K2Node_MakeStruct_SlateColor) == 0x000040, "Member 'BP_Vendor_Alchemist_GardenSlot_C_SetCountdown::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.ToggleEnabled
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_ToggleEnabled final
{
public:
	bool                                          InIsEnabled;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_ToggleEnabled) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_ToggleEnabled");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_ToggleEnabled) == 0x000001, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_ToggleEnabled");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleEnabled, InIsEnabled) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleEnabled::InIsEnabled' has a wrong offset!");

// Function BP_Vendor_Alchemist_GardenSlot.BP_Vendor_Alchemist_GardenSlot_C.ToggleCountdown
// 0x0088 (0x0088 - 0x0000)
struct BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown final
{
public:
	bool                                          InIsCountdown;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCompleted_ReturnValue;                  // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCompleted_ReturnValue_1;                // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0060(0x0028)()
};
static_assert(alignof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown");
static_assert(sizeof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown) == 0x000088, "Wrong size on BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, InIsCountdown) == 0x000000, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::InIsCountdown' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, Temp_bool_Variable) == 0x000001, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, Temp_float_Variable) == 0x000004, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, Temp_float_Variable_1) == 0x000008, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, Temp_struct_Variable) == 0x000010, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, Temp_struct_Variable_1) == 0x000020, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, Temp_bool_Variable_2) == 0x000030, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, Temp_byte_Variable) == 0x000031, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, Temp_byte_Variable_1) == 0x000032, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, CallFunc_IsCompleted_ReturnValue) == 0x000033, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::CallFunc_IsCompleted_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, CallFunc_Not_PreBool_ReturnValue) == 0x000034, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, K2Node_Select_Default) == 0x000035, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, CallFunc_IsCompleted_ReturnValue_1) == 0x000036, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::CallFunc_IsCompleted_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, CallFunc_Not_PreBool_ReturnValue_1) == 0x000037, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, CallFunc_BooleanAND_ReturnValue) == 0x000038, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000040, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, K2Node_Select_Default_1) == 0x000048, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, CallFunc_BooleanAND_ReturnValue_1) == 0x00004C, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, K2Node_Select_Default_2) == 0x000050, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown, K2Node_MakeStruct_SlateColor) == 0x000060, "Member 'BP_Vendor_Alchemist_GardenSlot_C_ToggleCountdown::K2Node_MakeStruct_SlateColor' has a wrong offset!");

}

