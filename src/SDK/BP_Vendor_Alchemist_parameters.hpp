#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vendor_Alchemist

#include "Basic.hpp"

#include "man_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.ExecuteUbergraph_BP_Vendor_Alchemist
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetVendorCurrentLevel_ReturnValue;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetLevelText_ReturnValue;                 // 0x0070(0x0018)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_SortName;                             // 0x0090(0x0018)(ConstParm)
	EInputDisplay                                 K2Node_Event_InInputDisplay;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InControlDisplay;                     // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist");
static_assert(sizeof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist) == 0x0000B0, "Wrong size on BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, EntryPoint) == 0x000000, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, Temp_bool_Variable) == 0x000004, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, Temp_byte_Variable) == 0x000005, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, Temp_byte_Variable_1) == 0x000006, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, K2Node_Event_IsDesignTime) == 0x000007, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, K2Node_Event_AnimDuration_1) == 0x000044, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x000048, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, K2Node_Event_AnimDuration) == 0x00004C, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, CallFunc_PlayAnimation_ReturnValue) == 0x000050, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x000058, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, CallFunc_PlayAnimation_ReturnValue_1) == 0x000060, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, CallFunc_GetVendorCurrentLevel_ReturnValue) == 0x000068, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::CallFunc_GetVendorCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, CallFunc_GetLevelText_ReturnValue) == 0x000070, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::CallFunc_GetLevelText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, CallFunc_Greater_IntInt_ReturnValue) == 0x000088, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, K2Node_Select_Default) == 0x000089, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, K2Node_Event_SortName) == 0x000090, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::K2Node_Event_SortName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, K2Node_Event_InInputDisplay) == 0x0000A8, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::K2Node_Event_InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist, K2Node_Event_InControlDisplay) == 0x0000A9, "Member 'BP_Vendor_Alchemist_C_ExecuteUbergraph_BP_Vendor_Alchemist::K2Node_Event_InControlDisplay' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.OnSetInputDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_Vendor_Alchemist_C_OnSetInputDisplay final
{
public:
	EInputDisplay                                 InInputDisplay;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 InControlDisplay;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_C_OnSetInputDisplay) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_C_OnSetInputDisplay");
static_assert(sizeof(BP_Vendor_Alchemist_C_OnSetInputDisplay) == 0x000002, "Wrong size on BP_Vendor_Alchemist_C_OnSetInputDisplay");
static_assert(offsetof(BP_Vendor_Alchemist_C_OnSetInputDisplay, InInputDisplay) == 0x000000, "Member 'BP_Vendor_Alchemist_C_OnSetInputDisplay::InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_OnSetInputDisplay, InControlDisplay) == 0x000001, "Member 'BP_Vendor_Alchemist_C_OnSetInputDisplay::InControlDisplay' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.OnSortChanged
// 0x0018 (0x0018 - 0x0000)
struct BP_Vendor_Alchemist_C_OnSortChanged final
{
public:
	class FText                                   SortName;                                          // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_Alchemist_C_OnSortChanged) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_C_OnSortChanged");
static_assert(sizeof(BP_Vendor_Alchemist_C_OnSortChanged) == 0x000018, "Wrong size on BP_Vendor_Alchemist_C_OnSortChanged");
static_assert(offsetof(BP_Vendor_Alchemist_C_OnSortChanged, SortName) == 0x000000, "Member 'BP_Vendor_Alchemist_C_OnSortChanged::SortName' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_Vendor_Alchemist_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_C_OnHide) == 0x000004, "Wrong alignment on BP_Vendor_Alchemist_C_OnHide");
static_assert(sizeof(BP_Vendor_Alchemist_C_OnHide) == 0x000004, "Wrong size on BP_Vendor_Alchemist_C_OnHide");
static_assert(offsetof(BP_Vendor_Alchemist_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_Vendor_Alchemist_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_Vendor_Alchemist_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_C_OnShow) == 0x000004, "Wrong alignment on BP_Vendor_Alchemist_C_OnShow");
static_assert(sizeof(BP_Vendor_Alchemist_C_OnShow) == 0x000004, "Wrong size on BP_Vendor_Alchemist_C_OnShow");
static_assert(offsetof(BP_Vendor_Alchemist_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_Vendor_Alchemist_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Vendor_Alchemist_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_C_Tick) == 0x000004, "Wrong alignment on BP_Vendor_Alchemist_C_Tick");
static_assert(sizeof(BP_Vendor_Alchemist_C_Tick) == 0x00003C, "Wrong size on BP_Vendor_Alchemist_C_Tick");
static_assert(offsetof(BP_Vendor_Alchemist_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Vendor_Alchemist_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Vendor_Alchemist_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_C_PreConstruct");
static_assert(sizeof(BP_Vendor_Alchemist_C_PreConstruct) == 0x000001, "Wrong size on BP_Vendor_Alchemist_C_PreConstruct");
static_assert(offsetof(BP_Vendor_Alchemist_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Vendor_Alchemist_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.BtnHotkeyAClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_C_BtnHotkeyAClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_C_BtnHotkeyAClicked) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_C_BtnHotkeyAClicked");
static_assert(sizeof(BP_Vendor_Alchemist_C_BtnHotkeyAClicked) == 0x000001, "Wrong size on BP_Vendor_Alchemist_C_BtnHotkeyAClicked");
static_assert(offsetof(BP_Vendor_Alchemist_C_BtnHotkeyAClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_Vendor_Alchemist_C_BtnHotkeyAClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.BtnHotkeyLS_PressClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_C_BtnHotkeyLS_PressClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_C_BtnHotkeyLS_PressClicked) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_C_BtnHotkeyLS_PressClicked");
static_assert(sizeof(BP_Vendor_Alchemist_C_BtnHotkeyLS_PressClicked) == 0x000001, "Wrong size on BP_Vendor_Alchemist_C_BtnHotkeyLS_PressClicked");
static_assert(offsetof(BP_Vendor_Alchemist_C_BtnHotkeyLS_PressClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_Vendor_Alchemist_C_BtnHotkeyLS_PressClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.BtnHotkeyYClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_C_BtnHotkeyYClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_C_BtnHotkeyYClicked) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_C_BtnHotkeyYClicked");
static_assert(sizeof(BP_Vendor_Alchemist_C_BtnHotkeyYClicked) == 0x000001, "Wrong size on BP_Vendor_Alchemist_C_BtnHotkeyYClicked");
static_assert(offsetof(BP_Vendor_Alchemist_C_BtnHotkeyYClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_Vendor_Alchemist_C_BtnHotkeyYClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.SetPlantSeedState
// 0x0060 (0x0060 - 0x0000)
struct BP_Vendor_Alchemist_C_SetPlantSeedState final
{
public:
	bool                                          InPlantSeedState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0040(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_C_SetPlantSeedState) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_C_SetPlantSeedState");
static_assert(sizeof(BP_Vendor_Alchemist_C_SetPlantSeedState) == 0x000060, "Wrong size on BP_Vendor_Alchemist_C_SetPlantSeedState");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetPlantSeedState, InPlantSeedState) == 0x000000, "Member 'BP_Vendor_Alchemist_C_SetPlantSeedState::InPlantSeedState' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetPlantSeedState, Temp_bool_Variable) == 0x000001, "Member 'BP_Vendor_Alchemist_C_SetPlantSeedState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetPlantSeedState, Temp_text_Variable) == 0x000008, "Member 'BP_Vendor_Alchemist_C_SetPlantSeedState::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetPlantSeedState, Temp_text_Variable_1) == 0x000020, "Member 'BP_Vendor_Alchemist_C_SetPlantSeedState::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetPlantSeedState, Temp_bool_Variable_1) == 0x000038, "Member 'BP_Vendor_Alchemist_C_SetPlantSeedState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetPlantSeedState, Temp_byte_Variable) == 0x000039, "Member 'BP_Vendor_Alchemist_C_SetPlantSeedState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetPlantSeedState, Temp_byte_Variable_1) == 0x00003A, "Member 'BP_Vendor_Alchemist_C_SetPlantSeedState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetPlantSeedState, K2Node_Select_Default) == 0x000040, "Member 'BP_Vendor_Alchemist_C_SetPlantSeedState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetPlantSeedState, K2Node_Select_Default_1) == 0x000058, "Member 'BP_Vendor_Alchemist_C_SetPlantSeedState::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.SetRemoveSeedState
// 0x0060 (0x0060 - 0x0000)
struct BP_Vendor_Alchemist_C_SetRemoveSeedState final
{
public:
	bool                                          InRemoveSeedState;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x0040(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_C_SetRemoveSeedState) == 0x000008, "Wrong alignment on BP_Vendor_Alchemist_C_SetRemoveSeedState");
static_assert(sizeof(BP_Vendor_Alchemist_C_SetRemoveSeedState) == 0x000060, "Wrong size on BP_Vendor_Alchemist_C_SetRemoveSeedState");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, InRemoveSeedState) == 0x000000, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::InRemoveSeedState' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, Temp_bool_Variable) == 0x000001, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, Temp_byte_Variable) == 0x000002, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, Temp_byte_Variable_1) == 0x000003, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, Temp_bool_Variable_1) == 0x000004, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, Temp_text_Variable) == 0x000008, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, Temp_text_Variable_1) == 0x000020, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, Temp_bool_Variable_2) == 0x000038, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, Temp_byte_Variable_2) == 0x000039, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, Temp_byte_Variable_3) == 0x00003A, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, K2Node_Select_Default) == 0x00003B, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, K2Node_Select_Default_1) == 0x000040, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetRemoveSeedState, K2Node_Select_Default_2) == 0x000058, "Member 'BP_Vendor_Alchemist_C_SetRemoveSeedState::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.BtnHotkeyRSUpClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_C_BtnHotkeyRSUpClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_C_BtnHotkeyRSUpClicked) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_C_BtnHotkeyRSUpClicked");
static_assert(sizeof(BP_Vendor_Alchemist_C_BtnHotkeyRSUpClicked) == 0x000001, "Wrong size on BP_Vendor_Alchemist_C_BtnHotkeyRSUpClicked");
static_assert(offsetof(BP_Vendor_Alchemist_C_BtnHotkeyRSUpClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_Vendor_Alchemist_C_BtnHotkeyRSUpClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.BtnHotkeyRSDownClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Alchemist_C_BtnHotkeyRSDownClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Alchemist_C_BtnHotkeyRSDownClicked) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_C_BtnHotkeyRSDownClicked");
static_assert(sizeof(BP_Vendor_Alchemist_C_BtnHotkeyRSDownClicked) == 0x000001, "Wrong size on BP_Vendor_Alchemist_C_BtnHotkeyRSDownClicked");
static_assert(offsetof(BP_Vendor_Alchemist_C_BtnHotkeyRSDownClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_Vendor_Alchemist_C_BtnHotkeyRSDownClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Alchemist.BP_Vendor_Alchemist_C.SetBtnCloseVisibility
// 0x000B (0x000B - 0x0000)
struct BP_Vendor_Alchemist_C_SetBtnCloseVisibility final
{
public:
	EInputDisplay                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 CallFunc_GetInputDisplay_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility) == 0x000001, "Wrong alignment on BP_Vendor_Alchemist_C_SetBtnCloseVisibility");
static_assert(sizeof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility) == 0x00000B, "Wrong size on BP_Vendor_Alchemist_C_SetBtnCloseVisibility");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility, Temp_byte_Variable) == 0x000000, "Member 'BP_Vendor_Alchemist_C_SetBtnCloseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'BP_Vendor_Alchemist_C_SetBtnCloseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility, Temp_byte_Variable_2) == 0x000002, "Member 'BP_Vendor_Alchemist_C_SetBtnCloseVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility, Temp_byte_Variable_3) == 0x000003, "Member 'BP_Vendor_Alchemist_C_SetBtnCloseVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility, Temp_byte_Variable_4) == 0x000004, "Member 'BP_Vendor_Alchemist_C_SetBtnCloseVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility, Temp_byte_Variable_5) == 0x000005, "Member 'BP_Vendor_Alchemist_C_SetBtnCloseVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility, Temp_byte_Variable_6) == 0x000006, "Member 'BP_Vendor_Alchemist_C_SetBtnCloseVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility, Temp_byte_Variable_7) == 0x000007, "Member 'BP_Vendor_Alchemist_C_SetBtnCloseVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility, Temp_byte_Variable_8) == 0x000008, "Member 'BP_Vendor_Alchemist_C_SetBtnCloseVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility, CallFunc_GetInputDisplay_ReturnValue) == 0x000009, "Member 'BP_Vendor_Alchemist_C_SetBtnCloseVisibility::CallFunc_GetInputDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Alchemist_C_SetBtnCloseVisibility, K2Node_Select_Default) == 0x00000A, "Member 'BP_Vendor_Alchemist_C_SetBtnCloseVisibility::K2Node_Select_Default' has a wrong offset!");

}

