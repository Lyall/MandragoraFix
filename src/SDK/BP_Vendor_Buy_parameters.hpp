#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vendor_Buy

#include "Basic.hpp"

#include "man_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.ExecuteUbergraph_BP_Vendor_Buy
// 0x0210 (0x0210 - 0x0000)
struct BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_Icon;                                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_VendorName;                           // 0x0070(0x0018)(ConstParm)
	class UTexture2D*                             K2Node_Event_InItemIcon;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InItemName;                           // 0x0090(0x0018)(ConstParm)
	int32                                         K2Node_Event_InSelectedCount;                      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMaxCount;                           // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InPriceText;                          // 0x00B0(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InPriceGoldValue;                     // 0x00C8(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InPriceEssenceValue;                  // 0x00E0(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InRequirementText;                    // 0x00F8(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InItemTypeText;                       // 0x0110(0x0018)(ConstParm)
	bool                                          K2Node_Event_bHasEnoughGold;                       // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bHasEnoughEssence;                    // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget_3;           // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget_2;           // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget_1;           // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bMinTimeCancel;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_ItemRequirementText;                  // 0x0150(0x0018)(ConstParm)
	class UItemAbility*                           K2Node_Event_InItem;                               // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           K2Node_Event_InComparedItem;                       // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEquipped;                            // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17B[0x5];                                      // 0x017B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetCurrencyText_ReturnValue;              // 0x0180(0x0018)()
	class FText                                   K2Node_Event_SortName;                             // 0x0198(0x0018)(ConstParm)
	class FText                                   CallFunc_GetCurrencyText_ReturnValue_1;            // 0x01B0(0x0018)()
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget;             // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetCurrencyText_ReturnValue_2;            // 0x01D0(0x0018)()
	class FText                                   CallFunc_GetCurrencyText_ReturnValue_3;            // 0x01E8(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InInputDisplay;                       // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InControlDisplay;                     // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy");
static_assert(sizeof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy) == 0x000210, "Wrong size on BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, EntryPoint) == 0x000000, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, Temp_bool_Variable) == 0x000004, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, Temp_byte_Variable) == 0x000005, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, Temp_byte_Variable_1) == 0x000006, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_IsDesignTime) == 0x000007, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_MyGeometry) == 0x000008, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InDeltaTime) == 0x000040, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_AnimDuration_1) == 0x000044, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x000048, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_AnimDuration) == 0x00004C, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, CallFunc_PlayAnimation_ReturnValue) == 0x000050, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x000058, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, CallFunc_PlayAnimation_ReturnValue_1) == 0x000060, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_Icon) == 0x000068, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_Icon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_VendorName) == 0x000070, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_VendorName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InItemIcon) == 0x000088, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InItemName) == 0x000090, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InItemName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InSelectedCount) == 0x0000A8, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InSelectedCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InMaxCount) == 0x0000AC, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InMaxCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InPriceText) == 0x0000B0, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InPriceText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InPriceGoldValue) == 0x0000C8, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InPriceGoldValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InPriceEssenceValue) == 0x0000E0, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InPriceEssenceValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InRequirementText) == 0x0000F8, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InItemTypeText) == 0x000110, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InItemTypeText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_bHasEnoughGold) == 0x000128, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_bHasEnoughGold' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_bHasEnoughEssence) == 0x000129, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_bHasEnoughEssence' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InteractButtonUserWidget_3) == 0x000130, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InteractButtonUserWidget_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InteractButtonUserWidget_2) == 0x000138, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InteractButtonUserWidget_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InteractButtonUserWidget_1) == 0x000140, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InteractButtonUserWidget_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_bMinTimeCancel) == 0x000148, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_bMinTimeCancel' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_ItemRequirementText) == 0x000150, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_ItemRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InItem) == 0x000168, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InComparedItem) == 0x000170, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InComparedItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_bEquipped) == 0x000178, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_bEquipped' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_bAnimate) == 0x000179, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Select_Default) == 0x00017A, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, CallFunc_GetCurrencyText_ReturnValue) == 0x000180, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::CallFunc_GetCurrencyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_SortName) == 0x000198, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_SortName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, CallFunc_GetCurrencyText_ReturnValue_1) == 0x0001B0, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::CallFunc_GetCurrencyText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InteractButtonUserWidget) == 0x0001C8, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InteractButtonUserWidget' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, CallFunc_GetCurrencyText_ReturnValue_2) == 0x0001D0, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::CallFunc_GetCurrencyText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, CallFunc_GetCurrencyText_ReturnValue_3) == 0x0001E8, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::CallFunc_GetCurrencyText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, CallFunc_PlayAnimation_ReturnValue_2) == 0x000200, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InInputDisplay) == 0x000208, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy, K2Node_Event_InControlDisplay) == 0x000209, "Member 'BP_Vendor_Buy_C_ExecuteUbergraph_BP_Vendor_Buy::K2Node_Event_InControlDisplay' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnSetInputDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_Vendor_Buy_C_OnSetInputDisplay final
{
public:
	EInputDisplay                                 InInputDisplay;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 InControlDisplay;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_OnSetInputDisplay) == 0x000001, "Wrong alignment on BP_Vendor_Buy_C_OnSetInputDisplay");
static_assert(sizeof(BP_Vendor_Buy_C_OnSetInputDisplay) == 0x000002, "Wrong size on BP_Vendor_Buy_C_OnSetInputDisplay");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetInputDisplay, InInputDisplay) == 0x000000, "Member 'BP_Vendor_Buy_C_OnSetInputDisplay::InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetInputDisplay, InControlDisplay) == 0x000001, "Member 'BP_Vendor_Buy_C_OnSetInputDisplay::InControlDisplay' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnErrorHiglight
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Buy_C_OnErrorHiglight final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_OnErrorHiglight) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_OnErrorHiglight");
static_assert(sizeof(BP_Vendor_Buy_C_OnErrorHiglight) == 0x000008, "Wrong size on BP_Vendor_Buy_C_OnErrorHiglight");
static_assert(offsetof(BP_Vendor_Buy_C_OnErrorHiglight, InteractButtonUserWidget) == 0x000000, "Member 'BP_Vendor_Buy_C_OnErrorHiglight::InteractButtonUserWidget' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnSortChanged
// 0x0018 (0x0018 - 0x0000)
struct BP_Vendor_Buy_C_OnSortChanged final
{
public:
	class FText                                   SortName;                                          // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_Buy_C_OnSortChanged) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_OnSortChanged");
static_assert(sizeof(BP_Vendor_Buy_C_OnSortChanged) == 0x000018, "Wrong size on BP_Vendor_Buy_C_OnSortChanged");
static_assert(offsetof(BP_Vendor_Buy_C_OnSortChanged, SortName) == 0x000000, "Member 'BP_Vendor_Buy_C_OnSortChanged::SortName' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnUpdateSelectedItemDetailsPanel
// 0x0030 (0x0030 - 0x0000)
struct BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel final
{
public:
	class FText                                   ItemRequirementText;                               // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UItemAbility*                           InItem;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           InComparedItem;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEquipped;                                         // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel");
static_assert(sizeof(BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel) == 0x000030, "Wrong size on BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel");
static_assert(offsetof(BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel, ItemRequirementText) == 0x000000, "Member 'BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel::ItemRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel, InItem) == 0x000018, "Member 'BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel::InItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel, InComparedItem) == 0x000020, "Member 'BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel::InComparedItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel, bEquipped) == 0x000028, "Member 'BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel::bEquipped' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel, bAnimate) == 0x000029, "Member 'BP_Vendor_Buy_C_OnUpdateSelectedItemDetailsPanel::bAnimate' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnHoldCanceled
// 0x0010 (0x0010 - 0x0000)
struct BP_Vendor_Buy_C_OnHoldCanceled final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMinTimeCancel;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Buy_C_OnHoldCanceled) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_OnHoldCanceled");
static_assert(sizeof(BP_Vendor_Buy_C_OnHoldCanceled) == 0x000010, "Wrong size on BP_Vendor_Buy_C_OnHoldCanceled");
static_assert(offsetof(BP_Vendor_Buy_C_OnHoldCanceled, InteractButtonUserWidget) == 0x000000, "Member 'BP_Vendor_Buy_C_OnHoldCanceled::InteractButtonUserWidget' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnHoldCanceled, bMinTimeCancel) == 0x000008, "Member 'BP_Vendor_Buy_C_OnHoldCanceled::bMinTimeCancel' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnHoldStarted
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Buy_C_OnHoldStarted final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_OnHoldStarted) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_OnHoldStarted");
static_assert(sizeof(BP_Vendor_Buy_C_OnHoldStarted) == 0x000008, "Wrong size on BP_Vendor_Buy_C_OnHoldStarted");
static_assert(offsetof(BP_Vendor_Buy_C_OnHoldStarted, InteractButtonUserWidget) == 0x000000, "Member 'BP_Vendor_Buy_C_OnHoldStarted::InteractButtonUserWidget' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnHoldFinished
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Buy_C_OnHoldFinished final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_OnHoldFinished) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_OnHoldFinished");
static_assert(sizeof(BP_Vendor_Buy_C_OnHoldFinished) == 0x000008, "Wrong size on BP_Vendor_Buy_C_OnHoldFinished");
static_assert(offsetof(BP_Vendor_Buy_C_OnHoldFinished, InteractButtonUserWidget) == 0x000000, "Member 'BP_Vendor_Buy_C_OnHoldFinished::InteractButtonUserWidget' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnSetSelectedItemProperty
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Vendor_Buy_C_OnSetSelectedItemProperty final
{
public:
	class UTexture2D*                             InItemIcon;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InItemName;                                        // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         InSelectedCount;                                   // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxCount;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InPriceText;                                       // 0x0028(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InPriceGoldValue;                                  // 0x0040(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InPriceEssenceValue;                               // 0x0058(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InRequirementText;                                 // 0x0070(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InItemTypeText;                                    // 0x0088(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bHasEnoughGold;                                    // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bHasEnoughEssence;                                 // 0x00A1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Buy_C_OnSetSelectedItemProperty) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_OnSetSelectedItemProperty");
static_assert(sizeof(BP_Vendor_Buy_C_OnSetSelectedItemProperty) == 0x0000A8, "Wrong size on BP_Vendor_Buy_C_OnSetSelectedItemProperty");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetSelectedItemProperty, InItemIcon) == 0x000000, "Member 'BP_Vendor_Buy_C_OnSetSelectedItemProperty::InItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetSelectedItemProperty, InItemName) == 0x000008, "Member 'BP_Vendor_Buy_C_OnSetSelectedItemProperty::InItemName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetSelectedItemProperty, InSelectedCount) == 0x000020, "Member 'BP_Vendor_Buy_C_OnSetSelectedItemProperty::InSelectedCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetSelectedItemProperty, InMaxCount) == 0x000024, "Member 'BP_Vendor_Buy_C_OnSetSelectedItemProperty::InMaxCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetSelectedItemProperty, InPriceText) == 0x000028, "Member 'BP_Vendor_Buy_C_OnSetSelectedItemProperty::InPriceText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetSelectedItemProperty, InPriceGoldValue) == 0x000040, "Member 'BP_Vendor_Buy_C_OnSetSelectedItemProperty::InPriceGoldValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetSelectedItemProperty, InPriceEssenceValue) == 0x000058, "Member 'BP_Vendor_Buy_C_OnSetSelectedItemProperty::InPriceEssenceValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetSelectedItemProperty, InRequirementText) == 0x000070, "Member 'BP_Vendor_Buy_C_OnSetSelectedItemProperty::InRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetSelectedItemProperty, InItemTypeText) == 0x000088, "Member 'BP_Vendor_Buy_C_OnSetSelectedItemProperty::InItemTypeText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetSelectedItemProperty, bHasEnoughGold) == 0x0000A0, "Member 'BP_Vendor_Buy_C_OnSetSelectedItemProperty::bHasEnoughGold' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetSelectedItemProperty, bHasEnoughEssence) == 0x0000A1, "Member 'BP_Vendor_Buy_C_OnSetSelectedItemProperty::bHasEnoughEssence' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnSetVendorName
// 0x0018 (0x0018 - 0x0000)
struct BP_Vendor_Buy_C_OnSetVendorName final
{
public:
	class FText                                   VendorName_0;                                      // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_Buy_C_OnSetVendorName) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_OnSetVendorName");
static_assert(sizeof(BP_Vendor_Buy_C_OnSetVendorName) == 0x000018, "Wrong size on BP_Vendor_Buy_C_OnSetVendorName");
static_assert(offsetof(BP_Vendor_Buy_C_OnSetVendorName, VendorName_0) == 0x000000, "Member 'BP_Vendor_Buy_C_OnSetVendorName::VendorName_0' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnBuyItem
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Buy_C_OnBuyItem final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_OnBuyItem) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_OnBuyItem");
static_assert(sizeof(BP_Vendor_Buy_C_OnBuyItem) == 0x000008, "Wrong size on BP_Vendor_Buy_C_OnBuyItem");
static_assert(offsetof(BP_Vendor_Buy_C_OnBuyItem, Icon) == 0x000000, "Member 'BP_Vendor_Buy_C_OnBuyItem::Icon' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_Vendor_Buy_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_OnHide) == 0x000004, "Wrong alignment on BP_Vendor_Buy_C_OnHide");
static_assert(sizeof(BP_Vendor_Buy_C_OnHide) == 0x000004, "Wrong size on BP_Vendor_Buy_C_OnHide");
static_assert(offsetof(BP_Vendor_Buy_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_Vendor_Buy_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_Vendor_Buy_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_OnShow) == 0x000004, "Wrong alignment on BP_Vendor_Buy_C_OnShow");
static_assert(sizeof(BP_Vendor_Buy_C_OnShow) == 0x000004, "Wrong size on BP_Vendor_Buy_C_OnShow");
static_assert(offsetof(BP_Vendor_Buy_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_Vendor_Buy_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Vendor_Buy_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_Tick) == 0x000004, "Wrong alignment on BP_Vendor_Buy_C_Tick");
static_assert(sizeof(BP_Vendor_Buy_C_Tick) == 0x00003C, "Wrong size on BP_Vendor_Buy_C_Tick");
static_assert(offsetof(BP_Vendor_Buy_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Vendor_Buy_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Vendor_Buy_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Buy_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Buy_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Vendor_Buy_C_PreConstruct");
static_assert(sizeof(BP_Vendor_Buy_C_PreConstruct) == 0x000001, "Wrong size on BP_Vendor_Buy_C_PreConstruct");
static_assert(offsetof(BP_Vendor_Buy_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Vendor_Buy_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.BtnHotkeyLS_PressClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Buy_C_BtnHotkeyLS_PressClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Buy_C_BtnHotkeyLS_PressClicked) == 0x000001, "Wrong alignment on BP_Vendor_Buy_C_BtnHotkeyLS_PressClicked");
static_assert(sizeof(BP_Vendor_Buy_C_BtnHotkeyLS_PressClicked) == 0x000001, "Wrong size on BP_Vendor_Buy_C_BtnHotkeyLS_PressClicked");
static_assert(offsetof(BP_Vendor_Buy_C_BtnHotkeyLS_PressClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_Vendor_Buy_C_BtnHotkeyLS_PressClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.Set Currency
// 0x0060 (0x0060 - 0x0000)
struct BP_Vendor_Buy_C_Set_Currency final
{
public:
	class FText                                   InPriceText;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InPriceGoldValue;                                  // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InPriceEssenceValue;                               // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue_1;                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_Set_Currency) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_Set_Currency");
static_assert(sizeof(BP_Vendor_Buy_C_Set_Currency) == 0x000060, "Wrong size on BP_Vendor_Buy_C_Set_Currency");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, InPriceText) == 0x000000, "Member 'BP_Vendor_Buy_C_Set_Currency::InPriceText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, InPriceGoldValue) == 0x000018, "Member 'BP_Vendor_Buy_C_Set_Currency::InPriceGoldValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, InPriceEssenceValue) == 0x000030, "Member 'BP_Vendor_Buy_C_Set_Currency::InPriceEssenceValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, Temp_bool_Variable) == 0x000048, "Member 'BP_Vendor_Buy_C_Set_Currency::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, Temp_float_Variable) == 0x00004C, "Member 'BP_Vendor_Buy_C_Set_Currency::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, Temp_float_Variable_1) == 0x000050, "Member 'BP_Vendor_Buy_C_Set_Currency::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, Temp_bool_Variable_1) == 0x000054, "Member 'BP_Vendor_Buy_C_Set_Currency::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, Temp_byte_Variable) == 0x000055, "Member 'BP_Vendor_Buy_C_Set_Currency::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, Temp_byte_Variable_1) == 0x000056, "Member 'BP_Vendor_Buy_C_Set_Currency::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, CallFunc_TextIsEmpty_ReturnValue) == 0x000057, "Member 'BP_Vendor_Buy_C_Set_Currency::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, K2Node_Select_Default) == 0x000058, "Member 'BP_Vendor_Buy_C_Set_Currency::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, CallFunc_TextIsEmpty_ReturnValue_1) == 0x00005C, "Member 'BP_Vendor_Buy_C_Set_Currency::CallFunc_TextIsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Currency, K2Node_Select_Default_1) == 0x00005D, "Member 'BP_Vendor_Buy_C_Set_Currency::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.SetHeroResource
// 0x0058 (0x0058 - 0x0000)
struct BP_Vendor_Buy_C_SetHeroResource final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHeroEssenceResource_ReturnValue;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0010(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHeroGoldResource_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue_1;                  // 0x0038(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_SetHeroResource) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_SetHeroResource");
static_assert(sizeof(BP_Vendor_Buy_C_SetHeroResource) == 0x000058, "Wrong size on BP_Vendor_Buy_C_SetHeroResource");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, Temp_bool_Variable) == 0x000000, "Member 'BP_Vendor_Buy_C_SetHeroResource::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, Temp_byte_Variable) == 0x000001, "Member 'BP_Vendor_Buy_C_SetHeroResource::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, Temp_byte_Variable_1) == 0x000002, "Member 'BP_Vendor_Buy_C_SetHeroResource::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, Temp_bool_Variable_1) == 0x000003, "Member 'BP_Vendor_Buy_C_SetHeroResource::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, Temp_byte_Variable_2) == 0x000004, "Member 'BP_Vendor_Buy_C_SetHeroResource::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, Temp_byte_Variable_3) == 0x000005, "Member 'BP_Vendor_Buy_C_SetHeroResource::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, CallFunc_GetHeroEssenceResource_ReturnValue) == 0x000008, "Member 'BP_Vendor_Buy_C_SetHeroResource::CallFunc_GetHeroEssenceResource_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Vendor_Buy_C_SetHeroResource::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, CallFunc_IntToText_ReturnValue) == 0x000010, "Member 'BP_Vendor_Buy_C_SetHeroResource::CallFunc_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, K2Node_Select_Default) == 0x000028, "Member 'BP_Vendor_Buy_C_SetHeroResource::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, CallFunc_GetHeroGoldResource_ReturnValue) == 0x00002C, "Member 'BP_Vendor_Buy_C_SetHeroResource::CallFunc_GetHeroGoldResource_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000030, "Member 'BP_Vendor_Buy_C_SetHeroResource::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, CallFunc_IntToText_ReturnValue_1) == 0x000038, "Member 'BP_Vendor_Buy_C_SetHeroResource::CallFunc_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetHeroResource, K2Node_Select_Default_1) == 0x000050, "Member 'BP_Vendor_Buy_C_SetHeroResource::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.Set Right Panel Disabled
// 0x00E0 (0x00E0 - 0x0000)
struct BP_Vendor_Buy_C_Set_Right_Panel_Disabled final
{
public:
	bool                                          InDisabled;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InHasEnoughGold;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InHasEnoughEssence;                                // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsUnavailableByResource;                           // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         InSelectedCount;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxCount;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0058(0x0028)()
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x00A8(0x0028)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x00D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_Set_Right_Panel_Disabled");
static_assert(sizeof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled) == 0x0000E0, "Wrong size on BP_Vendor_Buy_C_Set_Right_Panel_Disabled");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, InDisabled) == 0x000000, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::InDisabled' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, InHasEnoughGold) == 0x000001, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::InHasEnoughGold' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, InHasEnoughEssence) == 0x000002, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::InHasEnoughEssence' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, IsUnavailableByResource) == 0x000003, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::IsUnavailableByResource' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, InSelectedCount) == 0x000004, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::InSelectedCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, InMaxCount) == 0x000008, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::InMaxCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, Temp_bool_Variable) == 0x00000C, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, Temp_struct_Variable) == 0x000010, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, Temp_struct_Variable_1) == 0x000020, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, Temp_bool_Variable_1) == 0x000030, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, K2Node_Select_Default) == 0x000034, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, Temp_struct_Variable_2) == 0x000044, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, K2Node_MakeStruct_SlateColor) == 0x000058, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, Temp_struct_Variable_3) == 0x000080, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, K2Node_Select_Default_1) == 0x000090, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_BooleanOR_ReturnValue) == 0x0000A0, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, K2Node_MakeStruct_SlateColor_1) == 0x0000A8, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_Not_PreBool_ReturnValue) == 0x0000D0, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000D1, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000D2, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_Not_PreBool_ReturnValue_3) == 0x0000D3, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_Greater_IntInt_ReturnValue) == 0x0000D4, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_Less_IntInt_ReturnValue) == 0x0000D5, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_Not_PreBool_ReturnValue_4) == 0x0000D6, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_BooleanOR_ReturnValue_1) == 0x0000D7, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_BooleanAND_ReturnValue) == 0x0000D8, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_BooleanOR_ReturnValue_2) == 0x0000D9, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_BooleanOR_ReturnValue_3) == 0x0000DA, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_Not_PreBool_ReturnValue_5) == 0x0000DB, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_BooleanOR_ReturnValue_4) == 0x0000DC, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_Set_Right_Panel_Disabled, CallFunc_BooleanAND_ReturnValue_1) == 0x0000DD, "Member 'BP_Vendor_Buy_C_Set_Right_Panel_Disabled::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.SetSelectedItemProperty
// 0x00E8 (0x00E8 - 0x0000)
struct BP_Vendor_Buy_C_SetSelectedItemProperty final
{
public:
	class UTexture2D*                             InItemIcon;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InItemName;                                        // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         InSelectedCount;                                   // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxCount;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InPriceText;                                       // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InPriceGoldValue;                                  // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InPriceEssenceValue;                               // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InRequirementText;                                 // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InItemTypeText;                                    // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          HasEnoughGold;                                     // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasEnoughEssence;                                  // 0x00A1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   CallFunc_GetFocusedItemHeroInventoryStackNum_ReturnValue; // 0x00B0(0x0018)()
	bool                                          CallFunc_IsItemBtnsVisible_ReturnValue;            // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemAbility*                           CallFunc_GetItemAbility_ReturnValue;               // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DB[0x1];                                       // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Buy_C_SetSelectedItemProperty) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_SetSelectedItemProperty");
static_assert(sizeof(BP_Vendor_Buy_C_SetSelectedItemProperty) == 0x0000E8, "Wrong size on BP_Vendor_Buy_C_SetSelectedItemProperty");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, InItemIcon) == 0x000000, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::InItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, InItemName) == 0x000008, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::InItemName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, InSelectedCount) == 0x000020, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::InSelectedCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, InMaxCount) == 0x000024, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::InMaxCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, InPriceText) == 0x000028, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::InPriceText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, InPriceGoldValue) == 0x000040, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::InPriceGoldValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, InPriceEssenceValue) == 0x000058, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::InPriceEssenceValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, InRequirementText) == 0x000070, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::InRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, InItemTypeText) == 0x000088, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::InItemTypeText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, HasEnoughGold) == 0x0000A0, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::HasEnoughGold' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, HasEnoughEssence) == 0x0000A1, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::HasEnoughEssence' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, Temp_float_Variable) == 0x0000A4, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, Temp_float_Variable_1) == 0x0000A8, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, Temp_bool_Variable) == 0x0000AC, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, Temp_byte_Variable) == 0x0000AD, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, Temp_byte_Variable_1) == 0x0000AE, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, Temp_bool_Variable_1) == 0x0000AF, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, CallFunc_GetFocusedItemHeroInventoryStackNum_ReturnValue) == 0x0000B0, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::CallFunc_GetFocusedItemHeroInventoryStackNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, CallFunc_IsItemBtnsVisible_ReturnValue) == 0x0000C8, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::CallFunc_IsItemBtnsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, K2Node_Select_Default) == 0x0000C9, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, CallFunc_IsValid_ReturnValue) == 0x0000CA, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, CallFunc_GetItemAbility_ReturnValue) == 0x0000D0, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::CallFunc_GetItemAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, CallFunc_IsValid_ReturnValue_1) == 0x0000D8, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, CallFunc_IsValid_ReturnValue_2) == 0x0000D9, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, CallFunc_TextIsEmpty_ReturnValue) == 0x0000DA, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, K2Node_Select_Default_1) == 0x0000DC, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, CallFunc_IsValid_ReturnValue_3) == 0x0000E0, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, CallFunc_Not_PreBool_ReturnValue) == 0x0000E1, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, CallFunc_BooleanAND_ReturnValue) == 0x0000E2, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetSelectedItemProperty, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000E3, "Member 'BP_Vendor_Buy_C_SetSelectedItemProperty::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.BtnHotkeyRSUpClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Buy_C_BtnHotkeyRSUpClicked final
{
public:
	bool                                          CallFunc_IsChangeValue_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Buy_C_BtnHotkeyRSUpClicked) == 0x000001, "Wrong alignment on BP_Vendor_Buy_C_BtnHotkeyRSUpClicked");
static_assert(sizeof(BP_Vendor_Buy_C_BtnHotkeyRSUpClicked) == 0x000001, "Wrong size on BP_Vendor_Buy_C_BtnHotkeyRSUpClicked");
static_assert(offsetof(BP_Vendor_Buy_C_BtnHotkeyRSUpClicked, CallFunc_IsChangeValue_ReturnValue) == 0x000000, "Member 'BP_Vendor_Buy_C_BtnHotkeyRSUpClicked::CallFunc_IsChangeValue_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.BtnHotkeyRSDownClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Buy_C_BtnHotkeyRSDownClicked final
{
public:
	bool                                          CallFunc_IsChangeValue_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Buy_C_BtnHotkeyRSDownClicked) == 0x000001, "Wrong alignment on BP_Vendor_Buy_C_BtnHotkeyRSDownClicked");
static_assert(sizeof(BP_Vendor_Buy_C_BtnHotkeyRSDownClicked) == 0x000001, "Wrong size on BP_Vendor_Buy_C_BtnHotkeyRSDownClicked");
static_assert(offsetof(BP_Vendor_Buy_C_BtnHotkeyRSDownClicked, CallFunc_IsChangeValue_ReturnValue) == 0x000000, "Member 'BP_Vendor_Buy_C_BtnHotkeyRSDownClicked::CallFunc_IsChangeValue_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.Balance1ErrorHighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Buy_C_Balance1ErrorHighlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_Balance1ErrorHighlight) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_Balance1ErrorHighlight");
static_assert(sizeof(BP_Vendor_Buy_C_Balance1ErrorHighlight) == 0x000008, "Wrong size on BP_Vendor_Buy_C_Balance1ErrorHighlight");
static_assert(offsetof(BP_Vendor_Buy_C_Balance1ErrorHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Vendor_Buy_C_Balance1ErrorHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.Balance2ErrorHighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Buy_C_Balance2ErrorHighlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_Balance2ErrorHighlight) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_Balance2ErrorHighlight");
static_assert(sizeof(BP_Vendor_Buy_C_Balance2ErrorHighlight) == 0x000008, "Wrong size on BP_Vendor_Buy_C_Balance2ErrorHighlight");
static_assert(offsetof(BP_Vendor_Buy_C_Balance2ErrorHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Vendor_Buy_C_Balance2ErrorHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.RequirementErrorHighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Buy_C_RequirementErrorHighlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_RequirementErrorHighlight) == 0x000008, "Wrong alignment on BP_Vendor_Buy_C_RequirementErrorHighlight");
static_assert(sizeof(BP_Vendor_Buy_C_RequirementErrorHighlight) == 0x000008, "Wrong size on BP_Vendor_Buy_C_RequirementErrorHighlight");
static_assert(offsetof(BP_Vendor_Buy_C_RequirementErrorHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Vendor_Buy_C_RequirementErrorHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Buy.BP_Vendor_Buy_C.SetBtnCloseVisibility
// 0x000B (0x000B - 0x0000)
struct BP_Vendor_Buy_C_SetBtnCloseVisibility final
{
public:
	EInputDisplay                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 CallFunc_GetInputDisplay_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Buy_C_SetBtnCloseVisibility) == 0x000001, "Wrong alignment on BP_Vendor_Buy_C_SetBtnCloseVisibility");
static_assert(sizeof(BP_Vendor_Buy_C_SetBtnCloseVisibility) == 0x00000B, "Wrong size on BP_Vendor_Buy_C_SetBtnCloseVisibility");
static_assert(offsetof(BP_Vendor_Buy_C_SetBtnCloseVisibility, Temp_byte_Variable) == 0x000000, "Member 'BP_Vendor_Buy_C_SetBtnCloseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetBtnCloseVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'BP_Vendor_Buy_C_SetBtnCloseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetBtnCloseVisibility, Temp_byte_Variable_2) == 0x000002, "Member 'BP_Vendor_Buy_C_SetBtnCloseVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetBtnCloseVisibility, Temp_byte_Variable_3) == 0x000003, "Member 'BP_Vendor_Buy_C_SetBtnCloseVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetBtnCloseVisibility, Temp_byte_Variable_4) == 0x000004, "Member 'BP_Vendor_Buy_C_SetBtnCloseVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetBtnCloseVisibility, Temp_byte_Variable_5) == 0x000005, "Member 'BP_Vendor_Buy_C_SetBtnCloseVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetBtnCloseVisibility, Temp_byte_Variable_6) == 0x000006, "Member 'BP_Vendor_Buy_C_SetBtnCloseVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetBtnCloseVisibility, Temp_byte_Variable_7) == 0x000007, "Member 'BP_Vendor_Buy_C_SetBtnCloseVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetBtnCloseVisibility, Temp_byte_Variable_8) == 0x000008, "Member 'BP_Vendor_Buy_C_SetBtnCloseVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetBtnCloseVisibility, CallFunc_GetInputDisplay_ReturnValue) == 0x000009, "Member 'BP_Vendor_Buy_C_SetBtnCloseVisibility::CallFunc_GetInputDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Buy_C_SetBtnCloseVisibility, K2Node_Select_Default) == 0x00000A, "Member 'BP_Vendor_Buy_C_SetBtnCloseVisibility::K2Node_Select_Default' has a wrong offset!");

}

