#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vendor_Enchant

#include "Basic.hpp"

#include "man_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.ExecuteUbergraph_BP_Vendor_Enchant
// 0x03D0 (0x03D0 - 0x0000)
struct BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemAbility*                           K2Node_Event_Item;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x0030(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Temp_object_Variable;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Temp_object_Variable_1;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Temp_object_Variable_2;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Temp_object_Variable_3;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0078(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          K2Node_Select_Default;                             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UTexture2D*                       K2Node_Event_UpgradeItemIcon;                      // 0x00E8(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UTexture2D*                       K2Node_Event_UpgradeRuneStoneIcon;                 // 0x00F0(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_3;              // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetVendorCurrentLevel_ReturnValue;        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_VendorName;                           // 0x0110(0x0018)(ConstParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0128(0x0040)(HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_InItemIcon;                           // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InItemName;                           // 0x0170(0x0018)(ConstParm)
	int32                                         K2Node_Event_InSelectedCount;                      // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMaxCount;                           // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InPriceText;                          // 0x0190(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InPriceGoldValue;                     // 0x01A8(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InPriceEssenceValue;                  // 0x01C0(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InRequirementText;                    // 0x01D8(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InItemTypeText;                       // 0x01F0(0x0018)(ConstParm)
	bool                                          K2Node_Event_bHasEnoughGold;                       // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bHasEnoughEssence;                    // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20A[0x6];                                      // 0x020A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0210(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0220(0x0018)()
	class FText                                   K2Node_Event_SortName;                             // 0x0238(0x0018)(ConstParm)
	EItemSlot                                     K2Node_Event_ItemSlot;                             // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_FilterName;                           // 0x0258(0x0018)(ConstParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_272[0x6];                                      // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVendorFilterSlotUserWidget*            K2Node_ComponentBoundEvent_WidgetReference_3;      // 0x0278(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVendorFilterSlotUserWidget*            K2Node_ComponentBoundEvent_WidgetReference_2;      // 0x0280(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVendorFilterSlotUserWidget*            K2Node_ComponentBoundEvent_WidgetReference_1;      // 0x0288(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVendorFilterSlotUserWidget*            K2Node_ComponentBoundEvent_WidgetReference;        // 0x0290(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_EnchantName;                          // 0x02A0(0x0018)(ConstParm)
	class FText                                   K2Node_Event_EnchantDescription;                   // 0x02B8(0x0018)(ConstParm)
	class FText                                   K2Node_Event_ItemRequirementText;                  // 0x02D0(0x0018)(ConstParm)
	class UItemAbility*                           K2Node_Event_InItem;                               // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           K2Node_Event_InComparedItem;                       // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           K2Node_Event_InEnchantItem;                        // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEquipped;                            // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0302(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_303[0x5];                                      // 0x0303(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture2D*                       K2Node_Event_DestroyRuneIcon;                      // 0x0308(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetCurrencyText_ReturnValue;              // 0x0310(0x0018)()
	class FText                                   CallFunc_GetCurrencyText_ReturnValue_1;            // 0x0328(0x0018)()
	class UItemAbility*                           K2Node_Event_UpgradeItem;                          // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           K2Node_Event_RuneStoneItem_1;                      // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0352(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_353[0x5];                                      // 0x0353(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget;             // 0x0358(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_2;                           // 0x0360(0x0018)()
	class UItemAbility*                           K2Node_Event_RuneStoneItem;                        // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_382[0x6];                                      // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          K2Node_Select_Default_3;                           // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetCurrencyText_ReturnValue_2;            // 0x0390(0x0018)()
	class FText                                   CallFunc_GetCurrencyText_ReturnValue_3;            // 0x03A8(0x0018)()
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x03C0(0x0008)(NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InInputDisplay;                       // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InControlDisplay;                     // 0x03C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant");
static_assert(sizeof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant) == 0x0003D0, "Wrong size on BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, EntryPoint) == 0x000000, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_Item) == 0x000008, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_Item' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_text_Variable) == 0x000010, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_text_Variable_1) == 0x000030, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_bool_Variable) == 0x000048, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_byte_Variable) == 0x000049, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_byte_Variable_1) == 0x00004A, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_bool_Variable_1) == 0x00004B, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_object_Variable) == 0x000050, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_object_Variable_1) == 0x000058, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_bool_Variable_2) == 0x000060, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_object_Variable_2) == 0x000068, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_object_Variable_3) == 0x000070, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_MyGeometry) == 0x000078, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InDeltaTime) == 0x0000B0, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Select_Default) == 0x0000B8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_AnimDuration_1) == 0x0000C0, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x0000C4, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_AnimDuration) == 0x0000C8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_PlayAnimation_ReturnValue) == 0x0000D0, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x0000D8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_PlayAnimation_ReturnValue_1) == 0x0000E0, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_UpgradeItemIcon) == 0x0000E8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_UpgradeItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_UpgradeRuneStoneIcon) == 0x0000F0, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_UpgradeRuneStoneIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_PlayAnimation_ReturnValue_2) == 0x0000F8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_PlayAnimation_ReturnValue_3) == 0x000100, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_PlayAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_GetVendorCurrentLevel_ReturnValue) == 0x000108, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_GetVendorCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_VendorName) == 0x000110, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_VendorName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_MakeStruct_FormatArgumentData) == 0x000128, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InItemIcon) == 0x000168, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InItemName) == 0x000170, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InItemName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InSelectedCount) == 0x000188, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InSelectedCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InMaxCount) == 0x00018C, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InMaxCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InPriceText) == 0x000190, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InPriceText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InPriceGoldValue) == 0x0001A8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InPriceGoldValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InPriceEssenceValue) == 0x0001C0, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InPriceEssenceValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InRequirementText) == 0x0001D8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InItemTypeText) == 0x0001F0, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InItemTypeText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_bHasEnoughGold) == 0x000208, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_bHasEnoughGold' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_bHasEnoughEssence) == 0x000209, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_bHasEnoughEssence' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_MakeArray_Array) == 0x000210, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_Format_ReturnValue) == 0x000220, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_SortName) == 0x000238, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_SortName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_ItemSlot) == 0x000250, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_ItemSlot' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_FilterName) == 0x000258, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_FilterName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000270, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_IsDesignTime) == 0x000271, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_ComponentBoundEvent_WidgetReference_3) == 0x000278, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_ComponentBoundEvent_WidgetReference_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_ComponentBoundEvent_WidgetReference_2) == 0x000280, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_ComponentBoundEvent_WidgetReference_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_ComponentBoundEvent_WidgetReference_1) == 0x000288, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_ComponentBoundEvent_WidgetReference_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_ComponentBoundEvent_WidgetReference) == 0x000290, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_ComponentBoundEvent_WidgetReference' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, Temp_bool_Variable_3) == 0x000298, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_EnchantName) == 0x0002A0, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_EnchantName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_EnchantDescription) == 0x0002B8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_EnchantDescription' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_ItemRequirementText) == 0x0002D0, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_ItemRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InItem) == 0x0002E8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InComparedItem) == 0x0002F0, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InComparedItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InEnchantItem) == 0x0002F8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InEnchantItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_bEquipped) == 0x000300, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_bEquipped' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_bAnimate) == 0x000301, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Select_Default_1) == 0x000302, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_DestroyRuneIcon) == 0x000308, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_DestroyRuneIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_GetCurrencyText_ReturnValue) == 0x000310, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_GetCurrencyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_GetCurrencyText_ReturnValue_1) == 0x000328, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_GetCurrencyText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_UpgradeItem) == 0x000340, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_UpgradeItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_RuneStoneItem_1) == 0x000348, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_RuneStoneItem_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_IsValid_ReturnValue_1) == 0x000350, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_IsValid_ReturnValue_2) == 0x000351, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_BooleanOR_ReturnValue) == 0x000352, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InteractButtonUserWidget) == 0x000358, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InteractButtonUserWidget' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Select_Default_2) == 0x000360, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_RuneStoneItem) == 0x000378, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_RuneStoneItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000380, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_IsValid_ReturnValue_3) == 0x000381, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Select_Default_3) == 0x000388, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_GetCurrencyText_ReturnValue_2) == 0x000390, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_GetCurrencyText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_GetCurrencyText_ReturnValue_3) == 0x0003A8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_GetCurrencyText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, CallFunc_K2_SetTimer_ReturnValue) == 0x0003C0, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InInputDisplay) == 0x0003C8, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant, K2Node_Event_InControlDisplay) == 0x0003C9, "Member 'BP_Vendor_Enchant_C_ExecuteUbergraph_BP_Vendor_Enchant::K2Node_Event_InControlDisplay' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnSetItem
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Enchant_C_OnSetItem final
{
public:
	class UItemAbility*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnSetItem) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnSetItem");
static_assert(sizeof(BP_Vendor_Enchant_C_OnSetItem) == 0x000008, "Wrong size on BP_Vendor_Enchant_C_OnSetItem");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetItem, Item) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnSetItem::Item' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnSetInputDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_Vendor_Enchant_C_OnSetInputDisplay final
{
public:
	EInputDisplay                                 InInputDisplay;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 InControlDisplay;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnSetInputDisplay) == 0x000001, "Wrong alignment on BP_Vendor_Enchant_C_OnSetInputDisplay");
static_assert(sizeof(BP_Vendor_Enchant_C_OnSetInputDisplay) == 0x000002, "Wrong size on BP_Vendor_Enchant_C_OnSetInputDisplay");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetInputDisplay, InInputDisplay) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnSetInputDisplay::InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetInputDisplay, InControlDisplay) == 0x000001, "Member 'BP_Vendor_Enchant_C_OnSetInputDisplay::InControlDisplay' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnSetRuneStone
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Enchant_C_OnSetRuneStone final
{
public:
	class UItemAbility*                           RuneStoneItem;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnSetRuneStone) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnSetRuneStone");
static_assert(sizeof(BP_Vendor_Enchant_C_OnSetRuneStone) == 0x000008, "Wrong size on BP_Vendor_Enchant_C_OnSetRuneStone");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetRuneStone, RuneStoneItem) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnSetRuneStone::RuneStoneItem' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnErrorHiglight
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Enchant_C_OnErrorHiglight final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnErrorHiglight) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnErrorHiglight");
static_assert(sizeof(BP_Vendor_Enchant_C_OnErrorHiglight) == 0x000008, "Wrong size on BP_Vendor_Enchant_C_OnErrorHiglight");
static_assert(offsetof(BP_Vendor_Enchant_C_OnErrorHiglight, InteractButtonUserWidget) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnErrorHiglight::InteractButtonUserWidget' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnSetRightPanelSlots
// 0x0010 (0x0010 - 0x0000)
struct BP_Vendor_Enchant_C_OnSetRightPanelSlots final
{
public:
	class UItemAbility*                           UpgradeItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           RuneStoneItem;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnSetRightPanelSlots) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnSetRightPanelSlots");
static_assert(sizeof(BP_Vendor_Enchant_C_OnSetRightPanelSlots) == 0x000010, "Wrong size on BP_Vendor_Enchant_C_OnSetRightPanelSlots");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetRightPanelSlots, UpgradeItem) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnSetRightPanelSlots::UpgradeItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetRightPanelSlots, RuneStoneItem) == 0x000008, "Member 'BP_Vendor_Enchant_C_OnSetRightPanelSlots::RuneStoneItem' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnDestroyRune
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Enchant_C_OnDestroyRune final
{
public:
	const class UTexture2D*                       DestroyRuneIcon;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnDestroyRune) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnDestroyRune");
static_assert(sizeof(BP_Vendor_Enchant_C_OnDestroyRune) == 0x000008, "Wrong size on BP_Vendor_Enchant_C_OnDestroyRune");
static_assert(offsetof(BP_Vendor_Enchant_C_OnDestroyRune, DestroyRuneIcon) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnDestroyRune::DestroyRuneIcon' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnUpdateUpgradeItemDetailsPanel
// 0x0038 (0x0038 - 0x0000)
struct BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel final
{
public:
	class FText                                   ItemRequirementText;                               // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UItemAbility*                           InItem;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           InComparedItem;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemAbility*                           InEnchantItem;                                     // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEquipped;                                         // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel");
static_assert(sizeof(BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel) == 0x000038, "Wrong size on BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel");
static_assert(offsetof(BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel, ItemRequirementText) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel::ItemRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel, InItem) == 0x000018, "Member 'BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel::InItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel, InComparedItem) == 0x000020, "Member 'BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel::InComparedItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel, InEnchantItem) == 0x000028, "Member 'BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel::InEnchantItem' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel, bEquipped) == 0x000030, "Member 'BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel::bEquipped' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel, bAnimate) == 0x000031, "Member 'BP_Vendor_Enchant_C_OnUpdateUpgradeItemDetailsPanel::bAnimate' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnSetEnchantText
// 0x0030 (0x0030 - 0x0000)
struct BP_Vendor_Enchant_C_OnSetEnchantText final
{
public:
	class FText                                   EnchantName;                                       // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   EnchantDescription_0;                              // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnSetEnchantText) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnSetEnchantText");
static_assert(sizeof(BP_Vendor_Enchant_C_OnSetEnchantText) == 0x000030, "Wrong size on BP_Vendor_Enchant_C_OnSetEnchantText");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetEnchantText, EnchantName) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnSetEnchantText::EnchantName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetEnchantText, EnchantDescription_0) == 0x000018, "Member 'BP_Vendor_Enchant_C_OnSetEnchantText::EnchantDescription_0' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.BndEvt__BP_InventoryWindow_Filter_Materials_K2Node_ComponentBoundEvent_23_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Materials_K2Node_ComponentBoundEvent_23_OnClicked__DelegateSignature final
{
public:
	class UVendorFilterSlotUserWidget*            WidgetReference;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Materials_K2Node_ComponentBoundEvent_23_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Materials_K2Node_ComponentBoundEvent_23_OnClicked__DelegateSignature");
static_assert(sizeof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Materials_K2Node_ComponentBoundEvent_23_OnClicked__DelegateSignature) == 0x000008, "Wrong size on BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Materials_K2Node_ComponentBoundEvent_23_OnClicked__DelegateSignature");
static_assert(offsetof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Materials_K2Node_ComponentBoundEvent_23_OnClicked__DelegateSignature, WidgetReference) == 0x000000, "Member 'BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Materials_K2Node_ComponentBoundEvent_23_OnClicked__DelegateSignature::WidgetReference' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.BndEvt__BP_InventoryWindow_Filter_Head_K2Node_ComponentBoundEvent_16_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Head_K2Node_ComponentBoundEvent_16_OnClicked__DelegateSignature final
{
public:
	class UVendorFilterSlotUserWidget*            WidgetReference;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Head_K2Node_ComponentBoundEvent_16_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Head_K2Node_ComponentBoundEvent_16_OnClicked__DelegateSignature");
static_assert(sizeof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Head_K2Node_ComponentBoundEvent_16_OnClicked__DelegateSignature) == 0x000008, "Wrong size on BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Head_K2Node_ComponentBoundEvent_16_OnClicked__DelegateSignature");
static_assert(offsetof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Head_K2Node_ComponentBoundEvent_16_OnClicked__DelegateSignature, WidgetReference) == 0x000000, "Member 'BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Head_K2Node_ComponentBoundEvent_16_OnClicked__DelegateSignature::WidgetReference' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.BndEvt__BP_InventoryWindow_Filter_Chest_K2Node_ComponentBoundEvent_14_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Chest_K2Node_ComponentBoundEvent_14_OnClicked__DelegateSignature final
{
public:
	class UVendorFilterSlotUserWidget*            WidgetReference;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Chest_K2Node_ComponentBoundEvent_14_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Chest_K2Node_ComponentBoundEvent_14_OnClicked__DelegateSignature");
static_assert(sizeof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Chest_K2Node_ComponentBoundEvent_14_OnClicked__DelegateSignature) == 0x000008, "Wrong size on BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Chest_K2Node_ComponentBoundEvent_14_OnClicked__DelegateSignature");
static_assert(offsetof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Chest_K2Node_ComponentBoundEvent_14_OnClicked__DelegateSignature, WidgetReference) == 0x000000, "Member 'BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_Chest_K2Node_ComponentBoundEvent_14_OnClicked__DelegateSignature::WidgetReference' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.BndEvt__BP_InventoryWindow_Filter_MainHand_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_MainHand_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature final
{
public:
	class UVendorFilterSlotUserWidget*            WidgetReference;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_MainHand_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_MainHand_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature");
static_assert(sizeof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_MainHand_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature) == 0x000008, "Wrong size on BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_MainHand_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature");
static_assert(offsetof(BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_MainHand_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature, WidgetReference) == 0x000000, "Member 'BP_Vendor_Enchant_C_BndEvt__BP_InventoryWindow_Filter_MainHand_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature::WidgetReference' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Enchant_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Enchant_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Vendor_Enchant_C_PreConstruct");
static_assert(sizeof(BP_Vendor_Enchant_C_PreConstruct) == 0x000001, "Wrong size on BP_Vendor_Enchant_C_PreConstruct");
static_assert(offsetof(BP_Vendor_Enchant_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Vendor_Enchant_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnSetFilterSlot
// 0x0020 (0x0020 - 0x0000)
struct BP_Vendor_Enchant_C_OnSetFilterSlot final
{
public:
	EItemSlot                                     ItemSlot;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FilterName;                                        // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnSetFilterSlot) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnSetFilterSlot");
static_assert(sizeof(BP_Vendor_Enchant_C_OnSetFilterSlot) == 0x000020, "Wrong size on BP_Vendor_Enchant_C_OnSetFilterSlot");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetFilterSlot, ItemSlot) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnSetFilterSlot::ItemSlot' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetFilterSlot, FilterName) == 0x000008, "Member 'BP_Vendor_Enchant_C_OnSetFilterSlot::FilterName' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnSortChanged
// 0x0018 (0x0018 - 0x0000)
struct BP_Vendor_Enchant_C_OnSortChanged final
{
public:
	class FText                                   SortName;                                          // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnSortChanged) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnSortChanged");
static_assert(sizeof(BP_Vendor_Enchant_C_OnSortChanged) == 0x000018, "Wrong size on BP_Vendor_Enchant_C_OnSortChanged");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSortChanged, SortName) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnSortChanged::SortName' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnSetSelectedItemProperty
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Vendor_Enchant_C_OnSetSelectedItemProperty final
{
public:
	class UTexture2D*                             InItemIcon;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InItemName;                                        // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         InSelectedCount;                                   // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxCount;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InPriceText;                                       // 0x0028(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InPriceGoldValue;                                  // 0x0040(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InPriceEssenceValue;                               // 0x0058(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InRequirementText;                                 // 0x0070(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InItemTypeText;                                    // 0x0088(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bHasEnoughGold;                                    // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bHasEnoughEssence;                                 // 0x00A1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnSetSelectedItemProperty");
static_assert(sizeof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty) == 0x0000A8, "Wrong size on BP_Vendor_Enchant_C_OnSetSelectedItemProperty");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty, InItemIcon) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnSetSelectedItemProperty::InItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty, InItemName) == 0x000008, "Member 'BP_Vendor_Enchant_C_OnSetSelectedItemProperty::InItemName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty, InSelectedCount) == 0x000020, "Member 'BP_Vendor_Enchant_C_OnSetSelectedItemProperty::InSelectedCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty, InMaxCount) == 0x000024, "Member 'BP_Vendor_Enchant_C_OnSetSelectedItemProperty::InMaxCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty, InPriceText) == 0x000028, "Member 'BP_Vendor_Enchant_C_OnSetSelectedItemProperty::InPriceText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty, InPriceGoldValue) == 0x000040, "Member 'BP_Vendor_Enchant_C_OnSetSelectedItemProperty::InPriceGoldValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty, InPriceEssenceValue) == 0x000058, "Member 'BP_Vendor_Enchant_C_OnSetSelectedItemProperty::InPriceEssenceValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty, InRequirementText) == 0x000070, "Member 'BP_Vendor_Enchant_C_OnSetSelectedItemProperty::InRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty, InItemTypeText) == 0x000088, "Member 'BP_Vendor_Enchant_C_OnSetSelectedItemProperty::InItemTypeText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty, bHasEnoughGold) == 0x0000A0, "Member 'BP_Vendor_Enchant_C_OnSetSelectedItemProperty::bHasEnoughGold' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetSelectedItemProperty, bHasEnoughEssence) == 0x0000A1, "Member 'BP_Vendor_Enchant_C_OnSetSelectedItemProperty::bHasEnoughEssence' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnSetVendorName
// 0x0018 (0x0018 - 0x0000)
struct BP_Vendor_Enchant_C_OnSetVendorName final
{
public:
	class FText                                   VendorName_0;                                      // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnSetVendorName) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnSetVendorName");
static_assert(sizeof(BP_Vendor_Enchant_C_OnSetVendorName) == 0x000018, "Wrong size on BP_Vendor_Enchant_C_OnSetVendorName");
static_assert(offsetof(BP_Vendor_Enchant_C_OnSetVendorName, VendorName_0) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnSetVendorName::VendorName_0' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnUpgradeItem
// 0x0010 (0x0010 - 0x0000)
struct BP_Vendor_Enchant_C_OnUpgradeItem final
{
public:
	const class UTexture2D*                       UpgradeItemIcon;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UTexture2D*                       UpgradeRuneStoneIcon;                              // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnUpgradeItem) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_OnUpgradeItem");
static_assert(sizeof(BP_Vendor_Enchant_C_OnUpgradeItem) == 0x000010, "Wrong size on BP_Vendor_Enchant_C_OnUpgradeItem");
static_assert(offsetof(BP_Vendor_Enchant_C_OnUpgradeItem, UpgradeItemIcon) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnUpgradeItem::UpgradeItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_OnUpgradeItem, UpgradeRuneStoneIcon) == 0x000008, "Member 'BP_Vendor_Enchant_C_OnUpgradeItem::UpgradeRuneStoneIcon' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_Vendor_Enchant_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnHide) == 0x000004, "Wrong alignment on BP_Vendor_Enchant_C_OnHide");
static_assert(sizeof(BP_Vendor_Enchant_C_OnHide) == 0x000004, "Wrong size on BP_Vendor_Enchant_C_OnHide");
static_assert(offsetof(BP_Vendor_Enchant_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_Vendor_Enchant_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_OnShow) == 0x000004, "Wrong alignment on BP_Vendor_Enchant_C_OnShow");
static_assert(sizeof(BP_Vendor_Enchant_C_OnShow) == 0x000004, "Wrong size on BP_Vendor_Enchant_C_OnShow");
static_assert(offsetof(BP_Vendor_Enchant_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_Vendor_Enchant_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Vendor_Enchant_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_Tick) == 0x000004, "Wrong alignment on BP_Vendor_Enchant_C_Tick");
static_assert(sizeof(BP_Vendor_Enchant_C_Tick) == 0x00003C, "Wrong size on BP_Vendor_Enchant_C_Tick");
static_assert(offsetof(BP_Vendor_Enchant_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Vendor_Enchant_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Vendor_Enchant_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.BtnHotkeyAClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Enchant_C_BtnHotkeyAClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Enchant_C_BtnHotkeyAClicked) == 0x000001, "Wrong alignment on BP_Vendor_Enchant_C_BtnHotkeyAClicked");
static_assert(sizeof(BP_Vendor_Enchant_C_BtnHotkeyAClicked) == 0x000001, "Wrong size on BP_Vendor_Enchant_C_BtnHotkeyAClicked");
static_assert(offsetof(BP_Vendor_Enchant_C_BtnHotkeyAClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_Vendor_Enchant_C_BtnHotkeyAClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.BtnHotkeyLS_PressClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Enchant_C_BtnHotkeyLS_PressClicked final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Enchant_C_BtnHotkeyLS_PressClicked) == 0x000001, "Wrong alignment on BP_Vendor_Enchant_C_BtnHotkeyLS_PressClicked");
static_assert(sizeof(BP_Vendor_Enchant_C_BtnHotkeyLS_PressClicked) == 0x000001, "Wrong size on BP_Vendor_Enchant_C_BtnHotkeyLS_PressClicked");
static_assert(offsetof(BP_Vendor_Enchant_C_BtnHotkeyLS_PressClicked, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_Vendor_Enchant_C_BtnHotkeyLS_PressClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.SetHeroResource
// 0x0058 (0x0058 - 0x0000)
struct BP_Vendor_Enchant_C_SetHeroResource final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHeroEssenceResource_ReturnValue;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHeroGoldResource_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0018(0x0018)()
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue_1;                  // 0x0038(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_SetHeroResource) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_SetHeroResource");
static_assert(sizeof(BP_Vendor_Enchant_C_SetHeroResource) == 0x000058, "Wrong size on BP_Vendor_Enchant_C_SetHeroResource");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, Temp_bool_Variable) == 0x000000, "Member 'BP_Vendor_Enchant_C_SetHeroResource::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, Temp_byte_Variable) == 0x000001, "Member 'BP_Vendor_Enchant_C_SetHeroResource::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, Temp_byte_Variable_1) == 0x000002, "Member 'BP_Vendor_Enchant_C_SetHeroResource::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, Temp_bool_Variable_1) == 0x000003, "Member 'BP_Vendor_Enchant_C_SetHeroResource::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, Temp_byte_Variable_2) == 0x000004, "Member 'BP_Vendor_Enchant_C_SetHeroResource::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, Temp_byte_Variable_3) == 0x000005, "Member 'BP_Vendor_Enchant_C_SetHeroResource::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, CallFunc_GetHeroEssenceResource_ReturnValue) == 0x000008, "Member 'BP_Vendor_Enchant_C_SetHeroResource::CallFunc_GetHeroEssenceResource_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, CallFunc_GetHeroGoldResource_ReturnValue) == 0x00000C, "Member 'BP_Vendor_Enchant_C_SetHeroResource::CallFunc_GetHeroGoldResource_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_Vendor_Enchant_C_SetHeroResource::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, CallFunc_IntToText_ReturnValue) == 0x000018, "Member 'BP_Vendor_Enchant_C_SetHeroResource::CallFunc_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000030, "Member 'BP_Vendor_Enchant_C_SetHeroResource::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, K2Node_Select_Default) == 0x000031, "Member 'BP_Vendor_Enchant_C_SetHeroResource::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, CallFunc_IntToText_ReturnValue_1) == 0x000038, "Member 'BP_Vendor_Enchant_C_SetHeroResource::CallFunc_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetHeroResource, K2Node_Select_Default_1) == 0x000050, "Member 'BP_Vendor_Enchant_C_SetHeroResource::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.SetVendorParams
// 0x0060 (0x0060 - 0x0000)
struct BP_Vendor_Enchant_C_SetVendorParams final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_FloatToText_ReturnValue;                  // 0x0008(0x0018)()
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetVendorCurrentLevel_ReturnValue;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetVendorCurrentLevel_ReturnValue_1;      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetVendorExperienceForNextLevel_ReturnValue; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue_1; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVendorCurrentExperience_ReturnValue;   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetVendorCurrentLevel_ReturnValue_2;      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0048(0x0018)()
};
static_assert(alignof(BP_Vendor_Enchant_C_SetVendorParams) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_SetVendorParams");
static_assert(sizeof(BP_Vendor_Enchant_C_SetVendorParams) == 0x000060, "Wrong size on BP_Vendor_Enchant_C_SetVendorParams");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, PlayAnim) == 0x000000, "Member 'BP_Vendor_Enchant_C_SetVendorParams::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue) == 0x000004, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_FloatToText_ReturnValue) == 0x000008, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_K2_SetTimer_ReturnValue) == 0x000020, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_GetVendorCurrentLevel_ReturnValue) == 0x000028, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_GetVendorCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_GetVendorCurrentLevel_ReturnValue_1) == 0x00002C, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_GetVendorCurrentLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_Greater_IntInt_ReturnValue) == 0x000030, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_GetVendorExperienceForNextLevel_ReturnValue) == 0x000034, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_GetVendorExperienceForNextLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue_1) == 0x000038, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_GetVendorCurrentExperience_ReturnValue) == 0x00003C, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_GetVendorCurrentExperience_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_GetVendorCurrentLevel_ReturnValue_2) == 0x000040, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_GetVendorCurrentLevel_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetVendorParams, CallFunc_IntToText_ReturnValue) == 0x000048, "Member 'BP_Vendor_Enchant_C_SetVendorParams::CallFunc_IntToText_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.SetXP
// 0x0040 (0x0040 - 0x0000)
struct BP_Vendor_Enchant_C_SetXP final
{
public:
	float                                         InCurrentXP;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InCurrentLevelXP;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InNextLevelXP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FloatToText_ReturnValue;                  // 0x0010(0x0018)()
	class FText                                   CallFunc_FloatToText_ReturnValue_1;                // 0x0028(0x0018)()
};
static_assert(alignof(BP_Vendor_Enchant_C_SetXP) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_SetXP");
static_assert(sizeof(BP_Vendor_Enchant_C_SetXP) == 0x000040, "Wrong size on BP_Vendor_Enchant_C_SetXP");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXP, InCurrentXP) == 0x000000, "Member 'BP_Vendor_Enchant_C_SetXP::InCurrentXP' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXP, InCurrentLevelXP) == 0x000004, "Member 'BP_Vendor_Enchant_C_SetXP::InCurrentLevelXP' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXP, InNextLevelXP) == 0x000008, "Member 'BP_Vendor_Enchant_C_SetXP::InNextLevelXP' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXP, PlayAnim) == 0x00000C, "Member 'BP_Vendor_Enchant_C_SetXP::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXP, CallFunc_FloatToText_ReturnValue) == 0x000010, "Member 'BP_Vendor_Enchant_C_SetXP::CallFunc_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXP, CallFunc_FloatToText_ReturnValue_1) == 0x000028, "Member 'BP_Vendor_Enchant_C_SetXP::CallFunc_FloatToText_ReturnValue_1' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.SetXPLevelUp
// 0x0058 (0x0058 - 0x0000)
struct BP_Vendor_Enchant_C_SetXPLevelUp final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVendorExperienceForNextLevel_ReturnValue; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVendorExperienceForNextLevel_ReturnValue_1; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVendorCurrentExperience_ReturnValue;   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue_1; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetVendorCurrentLevel_ReturnValue;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0040(0x0018)()
};
static_assert(alignof(BP_Vendor_Enchant_C_SetXPLevelUp) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_SetXPLevelUp");
static_assert(sizeof(BP_Vendor_Enchant_C_SetXPLevelUp) == 0x000058, "Wrong size on BP_Vendor_Enchant_C_SetXPLevelUp");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, Temp_bool_Variable) == 0x000000, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, Temp_float_Variable) == 0x000004, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, K2Node_Select_Default) == 0x000010, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, CallFunc_GetVendorExperienceForNextLevel_ReturnValue) == 0x000020, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::CallFunc_GetVendorExperienceForNextLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, CallFunc_GetVendorExperienceForNextLevel_ReturnValue_1) == 0x000024, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::CallFunc_GetVendorExperienceForNextLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue) == 0x000028, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, CallFunc_GetVendorCurrentExperience_ReturnValue) == 0x00002C, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::CallFunc_GetVendorCurrentExperience_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue_1) == 0x000030, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::CallFunc_GetVendorExperienceForCurrentLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, CallFunc_GetVendorCurrentLevel_ReturnValue) == 0x000034, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::CallFunc_GetVendorCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetXPLevelUp, CallFunc_IntToText_ReturnValue) == 0x000040, "Member 'BP_Vendor_Enchant_C_SetXPLevelUp::CallFunc_IntToText_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.SetSelectedItemProperty
// 0x00A0 (0x00A0 - 0x0000)
struct BP_Vendor_Enchant_C_SetSelectedItemProperty final
{
public:
	class UTexture2D*                             InItemIcon;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InSelectedCount;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxCount;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InPriceText;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InPriceGoldValue;                                  // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InPriceEssenceValue;                               // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InRequirementText;                                 // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          HasEnoughGold;                                     // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasEnoughEssence;                                  // 0x0071(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEnchantItemCalculatedXPValue_ReturnValue; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVendorCurrentExperience_ReturnValue;   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetEnchantItemCalculatedXPText_ReturnValue; // 0x0080(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Enchant_C_SetSelectedItemProperty) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_SetSelectedItemProperty");
static_assert(sizeof(BP_Vendor_Enchant_C_SetSelectedItemProperty) == 0x0000A0, "Wrong size on BP_Vendor_Enchant_C_SetSelectedItemProperty");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, InItemIcon) == 0x000000, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::InItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, InSelectedCount) == 0x000008, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::InSelectedCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, InMaxCount) == 0x00000C, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::InMaxCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, InPriceText) == 0x000010, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::InPriceText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, InPriceGoldValue) == 0x000028, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::InPriceGoldValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, InPriceEssenceValue) == 0x000040, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::InPriceEssenceValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, InRequirementText) == 0x000058, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::InRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, HasEnoughGold) == 0x000070, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::HasEnoughGold' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, HasEnoughEssence) == 0x000071, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::HasEnoughEssence' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, CallFunc_GetEnchantItemCalculatedXPValue_ReturnValue) == 0x000074, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::CallFunc_GetEnchantItemCalculatedXPValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, CallFunc_GetVendorCurrentExperience_ReturnValue) == 0x000078, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::CallFunc_GetVendorCurrentExperience_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, CallFunc_Add_FloatFloat_ReturnValue) == 0x00007C, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, CallFunc_GetEnchantItemCalculatedXPText_ReturnValue) == 0x000080, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::CallFunc_GetEnchantItemCalculatedXPText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSelectedItemProperty, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'BP_Vendor_Enchant_C_SetSelectedItemProperty::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.SetCurrency
// 0x0058 (0x0058 - 0x0000)
struct BP_Vendor_Enchant_C_SetCurrency final
{
public:
	class FText                                   InPriceText;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InPriceGoldValue;                                  // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InPriceEssenceValue;                               // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TextIsEmpty_ReturnValue_1;                // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_SetCurrency) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_SetCurrency");
static_assert(sizeof(BP_Vendor_Enchant_C_SetCurrency) == 0x000058, "Wrong size on BP_Vendor_Enchant_C_SetCurrency");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, InPriceText) == 0x000000, "Member 'BP_Vendor_Enchant_C_SetCurrency::InPriceText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, InPriceGoldValue) == 0x000018, "Member 'BP_Vendor_Enchant_C_SetCurrency::InPriceGoldValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, InPriceEssenceValue) == 0x000030, "Member 'BP_Vendor_Enchant_C_SetCurrency::InPriceEssenceValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, Temp_bool_Variable) == 0x000048, "Member 'BP_Vendor_Enchant_C_SetCurrency::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, Temp_byte_Variable) == 0x000049, "Member 'BP_Vendor_Enchant_C_SetCurrency::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, Temp_byte_Variable_1) == 0x00004A, "Member 'BP_Vendor_Enchant_C_SetCurrency::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, Temp_bool_Variable_1) == 0x00004B, "Member 'BP_Vendor_Enchant_C_SetCurrency::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, Temp_byte_Variable_2) == 0x00004C, "Member 'BP_Vendor_Enchant_C_SetCurrency::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, Temp_byte_Variable_3) == 0x00004D, "Member 'BP_Vendor_Enchant_C_SetCurrency::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, CallFunc_TextIsEmpty_ReturnValue) == 0x00004E, "Member 'BP_Vendor_Enchant_C_SetCurrency::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, CallFunc_TextIsEmpty_ReturnValue_1) == 0x00004F, "Member 'BP_Vendor_Enchant_C_SetCurrency::CallFunc_TextIsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, K2Node_Select_Default) == 0x000050, "Member 'BP_Vendor_Enchant_C_SetCurrency::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetCurrency, K2Node_Select_Default_1) == 0x000051, "Member 'BP_Vendor_Enchant_C_SetCurrency::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.SetRightPanelDisabled
// 0x00C8 (0x00C8 - 0x0000)
struct BP_Vendor_Enchant_C_SetRightPanelDisabled final
{
public:
	bool                                          InDisabled;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InHasEnoughGold;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InHasEnoughEssence;                                // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsUnavailableByResource;                           // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0050(0x0028)()
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0098(0x0028)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Enchant_C_SetRightPanelDisabled) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_SetRightPanelDisabled");
static_assert(sizeof(BP_Vendor_Enchant_C_SetRightPanelDisabled) == 0x0000C8, "Wrong size on BP_Vendor_Enchant_C_SetRightPanelDisabled");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, InDisabled) == 0x000000, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::InDisabled' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, InHasEnoughGold) == 0x000001, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::InHasEnoughGold' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, InHasEnoughEssence) == 0x000002, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::InHasEnoughEssence' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, IsUnavailableByResource) == 0x000003, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::IsUnavailableByResource' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, Temp_bool_Variable) == 0x000004, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, Temp_struct_Variable) == 0x000008, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, Temp_struct_Variable_1) == 0x000018, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, Temp_bool_Variable_1) == 0x000028, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, K2Node_Select_Default) == 0x00002C, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, Temp_struct_Variable_2) == 0x00003C, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, K2Node_MakeStruct_SlateColor) == 0x000050, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, Temp_struct_Variable_3) == 0x000078, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, K2Node_Select_Default_1) == 0x000088, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, K2Node_MakeStruct_SlateColor_1) == 0x000098, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, CallFunc_Not_PreBool_ReturnValue) == 0x0000C0, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetRightPanelDisabled, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000C1, "Member 'BP_Vendor_Enchant_C_SetRightPanelDisabled::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.SetSlotSelection
// 0x0020 (0x0020 - 0x0000)
struct BP_Vendor_Enchant_C_SetSlotSelection final
{
public:
	bool                                          InRuneSlotSelected;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default_1;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_SetSlotSelection) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_SetSlotSelection");
static_assert(sizeof(BP_Vendor_Enchant_C_SetSlotSelection) == 0x000020, "Wrong size on BP_Vendor_Enchant_C_SetSlotSelection");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, InRuneSlotSelected) == 0x000000, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::InRuneSlotSelected' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, Temp_bool_Variable) == 0x000001, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, Temp_byte_Variable) == 0x000002, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, Temp_byte_Variable_1) == 0x000003, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, Temp_bool_Variable_1) == 0x000004, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, Temp_byte_Variable_2) == 0x000005, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, Temp_byte_Variable_3) == 0x000006, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000007, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, K2Node_Select_Default) == 0x000008, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, K2Node_Select_Default_1) == 0x000009, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetSlotSelection, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'BP_Vendor_Enchant_C_SetSlotSelection::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.Balance1ErrorHighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Enchant_C_Balance1ErrorHighlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_Balance1ErrorHighlight) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_Balance1ErrorHighlight");
static_assert(sizeof(BP_Vendor_Enchant_C_Balance1ErrorHighlight) == 0x000008, "Wrong size on BP_Vendor_Enchant_C_Balance1ErrorHighlight");
static_assert(offsetof(BP_Vendor_Enchant_C_Balance1ErrorHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Vendor_Enchant_C_Balance1ErrorHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.Balance2ErrorHighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Enchant_C_Balance2ErrorHighlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_Balance2ErrorHighlight) == 0x000008, "Wrong alignment on BP_Vendor_Enchant_C_Balance2ErrorHighlight");
static_assert(sizeof(BP_Vendor_Enchant_C_Balance2ErrorHighlight) == 0x000008, "Wrong size on BP_Vendor_Enchant_C_Balance2ErrorHighlight");
static_assert(offsetof(BP_Vendor_Enchant_C_Balance2ErrorHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Vendor_Enchant_C_Balance2ErrorHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Enchant.BP_Vendor_Enchant_C.SetBtnCloseVisibility
// 0x000B (0x000B - 0x0000)
struct BP_Vendor_Enchant_C_SetBtnCloseVisibility final
{
public:
	EInputDisplay                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 CallFunc_GetInputDisplay_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Enchant_C_SetBtnCloseVisibility) == 0x000001, "Wrong alignment on BP_Vendor_Enchant_C_SetBtnCloseVisibility");
static_assert(sizeof(BP_Vendor_Enchant_C_SetBtnCloseVisibility) == 0x00000B, "Wrong size on BP_Vendor_Enchant_C_SetBtnCloseVisibility");
static_assert(offsetof(BP_Vendor_Enchant_C_SetBtnCloseVisibility, Temp_byte_Variable) == 0x000000, "Member 'BP_Vendor_Enchant_C_SetBtnCloseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetBtnCloseVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'BP_Vendor_Enchant_C_SetBtnCloseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetBtnCloseVisibility, Temp_byte_Variable_2) == 0x000002, "Member 'BP_Vendor_Enchant_C_SetBtnCloseVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetBtnCloseVisibility, Temp_byte_Variable_3) == 0x000003, "Member 'BP_Vendor_Enchant_C_SetBtnCloseVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetBtnCloseVisibility, Temp_byte_Variable_4) == 0x000004, "Member 'BP_Vendor_Enchant_C_SetBtnCloseVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetBtnCloseVisibility, Temp_byte_Variable_5) == 0x000005, "Member 'BP_Vendor_Enchant_C_SetBtnCloseVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetBtnCloseVisibility, Temp_byte_Variable_6) == 0x000006, "Member 'BP_Vendor_Enchant_C_SetBtnCloseVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetBtnCloseVisibility, Temp_byte_Variable_7) == 0x000007, "Member 'BP_Vendor_Enchant_C_SetBtnCloseVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetBtnCloseVisibility, Temp_byte_Variable_8) == 0x000008, "Member 'BP_Vendor_Enchant_C_SetBtnCloseVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetBtnCloseVisibility, CallFunc_GetInputDisplay_ReturnValue) == 0x000009, "Member 'BP_Vendor_Enchant_C_SetBtnCloseVisibility::CallFunc_GetInputDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Enchant_C_SetBtnCloseVisibility, K2Node_Select_Default) == 0x00000A, "Member 'BP_Vendor_Enchant_C_SetBtnCloseVisibility::K2Node_Select_Default' has a wrong offset!");

}

