#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vendor_ItemSlot

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.ExecuteUbergraph_BP_Vendor_ItemSlot
// 0x0098 (0x0098 - 0x0000)
struct BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0014(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UTexture2D*>                     K2Node_Event_InPermanentEnchantIcons;              // 0x0050(0x0010)(ConstParm, ReferenceParm)
	TArray<class UTexture2D*>                     K2Node_Event_InTemporaryEnchantIcons;              // 0x0060(0x0010)(ConstParm, ReferenceParm)
	const class UTexture2D*                       K2Node_Event_InIcon;                               // 0x0070(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InName;                               // 0x0078(0x0018)(ConstParm)
	bool                                          K2Node_Event_bHighlighted;                         // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot");
static_assert(sizeof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot) == 0x000098, "Wrong size on BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, EntryPoint) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, Temp_bool_Variable) == 0x000004, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, Temp_float_Variable) == 0x000008, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, Temp_float_Variable_1) == 0x00000C, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, K2Node_Event_IsDesignTime) == 0x000010, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, K2Node_Event_MyGeometry) == 0x000014, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, K2Node_Event_InDeltaTime) == 0x00004C, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, K2Node_Event_InPermanentEnchantIcons) == 0x000050, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::K2Node_Event_InPermanentEnchantIcons' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, K2Node_Event_InTemporaryEnchantIcons) == 0x000060, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::K2Node_Event_InTemporaryEnchantIcons' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, K2Node_Event_InIcon) == 0x000070, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::K2Node_Event_InIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, K2Node_Event_InName) == 0x000078, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::K2Node_Event_InName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, K2Node_Event_bHighlighted) == 0x000090, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::K2Node_Event_bHighlighted' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, K2Node_Event_bAnimate) == 0x000091, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot, K2Node_Select_Default) == 0x000094, "Member 'BP_Vendor_ItemSlot_C_ExecuteUbergraph_BP_Vendor_ItemSlot::K2Node_Select_Default' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.OnHighlighted
// 0x0002 (0x0002 - 0x0000)
struct BP_Vendor_ItemSlot_C_OnHighlighted final
{
public:
	bool                                          bHighlighted;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_OnHighlighted) == 0x000001, "Wrong alignment on BP_Vendor_ItemSlot_C_OnHighlighted");
static_assert(sizeof(BP_Vendor_ItemSlot_C_OnHighlighted) == 0x000002, "Wrong size on BP_Vendor_ItemSlot_C_OnHighlighted");
static_assert(offsetof(BP_Vendor_ItemSlot_C_OnHighlighted, bHighlighted) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_OnHighlighted::bHighlighted' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_OnHighlighted, bAnimate) == 0x000001, "Member 'BP_Vendor_ItemSlot_C_OnHighlighted::bAnimate' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.OnSetSlot
// 0x0020 (0x0020 - 0x0000)
struct BP_Vendor_ItemSlot_C_OnSetSlot final
{
public:
	const class UTexture2D*                       InIcon;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InName;                                            // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_OnSetSlot) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_OnSetSlot");
static_assert(sizeof(BP_Vendor_ItemSlot_C_OnSetSlot) == 0x000020, "Wrong size on BP_Vendor_ItemSlot_C_OnSetSlot");
static_assert(offsetof(BP_Vendor_ItemSlot_C_OnSetSlot, InIcon) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_OnSetSlot::InIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_OnSetSlot, InName) == 0x000008, "Member 'BP_Vendor_ItemSlot_C_OnSetSlot::InName' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.OnTemporaryEnchantIconsChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_Vendor_ItemSlot_C_OnTemporaryEnchantIconsChanged final
{
public:
	TArray<class UTexture2D*>                     InTemporaryEnchantIcons;                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_OnTemporaryEnchantIconsChanged) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_OnTemporaryEnchantIconsChanged");
static_assert(sizeof(BP_Vendor_ItemSlot_C_OnTemporaryEnchantIconsChanged) == 0x000010, "Wrong size on BP_Vendor_ItemSlot_C_OnTemporaryEnchantIconsChanged");
static_assert(offsetof(BP_Vendor_ItemSlot_C_OnTemporaryEnchantIconsChanged, InTemporaryEnchantIcons) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_OnTemporaryEnchantIconsChanged::InTemporaryEnchantIcons' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.OnPermanentEnchantIconsChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_Vendor_ItemSlot_C_OnPermanentEnchantIconsChanged final
{
public:
	TArray<class UTexture2D*>                     InPermanentEnchantIcons;                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_OnPermanentEnchantIconsChanged) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_OnPermanentEnchantIconsChanged");
static_assert(sizeof(BP_Vendor_ItemSlot_C_OnPermanentEnchantIconsChanged) == 0x000010, "Wrong size on BP_Vendor_ItemSlot_C_OnPermanentEnchantIconsChanged");
static_assert(offsetof(BP_Vendor_ItemSlot_C_OnPermanentEnchantIconsChanged, InPermanentEnchantIcons) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_OnPermanentEnchantIconsChanged::InPermanentEnchantIcons' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Vendor_ItemSlot_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_Tick) == 0x000004, "Wrong alignment on BP_Vendor_ItemSlot_C_Tick");
static_assert(sizeof(BP_Vendor_ItemSlot_C_Tick) == 0x00003C, "Wrong size on BP_Vendor_ItemSlot_C_Tick");
static_assert(offsetof(BP_Vendor_ItemSlot_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Vendor_ItemSlot_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_ItemSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Vendor_ItemSlot_C_PreConstruct");
static_assert(sizeof(BP_Vendor_ItemSlot_C_PreConstruct) == 0x000001, "Wrong size on BP_Vendor_ItemSlot_C_PreConstruct");
static_assert(offsetof(BP_Vendor_ItemSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.SetSlot
// 0x0020 (0x0020 - 0x0000)
struct BP_Vendor_ItemSlot_C_SetSlot final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_SetSlot) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_SetSlot");
static_assert(sizeof(BP_Vendor_ItemSlot_C_SetSlot) == 0x000020, "Wrong size on BP_Vendor_ItemSlot_C_SetSlot");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, InIcon) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_SetSlot::InIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, Temp_bool_Variable) == 0x000008, "Member 'BP_Vendor_ItemSlot_C_SetSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_Vendor_ItemSlot_C_SetSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, Temp_byte_Variable) == 0x00000A, "Member 'BP_Vendor_ItemSlot_C_SetSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, CallFunc_Not_PreBool_ReturnValue) == 0x00000B, "Member 'BP_Vendor_ItemSlot_C_SetSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, Temp_byte_Variable_1) == 0x00000C, "Member 'BP_Vendor_ItemSlot_C_SetSlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, Temp_bool_Variable_1) == 0x00000D, "Member 'BP_Vendor_ItemSlot_C_SetSlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, Temp_byte_Variable_2) == 0x00000E, "Member 'BP_Vendor_ItemSlot_C_SetSlot::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, Temp_byte_Variable_3) == 0x00000F, "Member 'BP_Vendor_ItemSlot_C_SetSlot::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, K2Node_Select_Default) == 0x000010, "Member 'BP_Vendor_ItemSlot_C_SetSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, K2Node_Select_Default_1) == 0x000011, "Member 'BP_Vendor_ItemSlot_C_SetSlot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, CallFunc_IsValid_ReturnValue_1) == 0x000012, "Member 'BP_Vendor_ItemSlot_C_SetSlot::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetSlot, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000018, "Member 'BP_Vendor_ItemSlot_C_SetSlot::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.Highlight
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_ItemSlot_C_Highlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_Highlight) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_Highlight");
static_assert(sizeof(BP_Vendor_ItemSlot_C_Highlight) == 0x000008, "Wrong size on BP_Vendor_ItemSlot_C_Highlight");
static_assert(offsetof(BP_Vendor_ItemSlot_C_Highlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_Highlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.SetCount
// 0x0020 (0x0020 - 0x0000)
struct BP_Vendor_ItemSlot_C_SetCount final
{
public:
	int32                                         Quantity_0;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0008(0x0018)()
};
static_assert(alignof(BP_Vendor_ItemSlot_C_SetCount) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_SetCount");
static_assert(sizeof(BP_Vendor_ItemSlot_C_SetCount) == 0x000020, "Wrong size on BP_Vendor_ItemSlot_C_SetCount");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetCount, Quantity_0) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_SetCount::Quantity_0' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetCount, CallFunc_IntToText_ReturnValue) == 0x000008, "Member 'BP_Vendor_ItemSlot_C_SetCount::CallFunc_IntToText_ReturnValue' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.SetUnavailable
// 0x0078 (0x0078 - 0x0000)
struct BP_Vendor_ItemSlot_C_SetUnavailable final
{
public:
	bool                                          IsUnavailable;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsUnavailableByResource;                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0040(0x0028)()
	float                                         K2Node_Select_Default_1;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_SetUnavailable) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_SetUnavailable");
static_assert(sizeof(BP_Vendor_ItemSlot_C_SetUnavailable) == 0x000078, "Wrong size on BP_Vendor_ItemSlot_C_SetUnavailable");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, IsUnavailable) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::IsUnavailable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, IsUnavailableByResource) == 0x000001, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::IsUnavailableByResource' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, Temp_bool_Variable) == 0x000002, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, Temp_struct_Variable) == 0x000004, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, Temp_struct_Variable_1) == 0x000014, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, Temp_bool_Variable_1) == 0x000024, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, Temp_float_Variable) == 0x000028, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, Temp_float_Variable_1) == 0x00002C, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, K2Node_Select_Default) == 0x000030, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, K2Node_MakeStruct_SlateColor) == 0x000040, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, K2Node_Select_Default_1) == 0x000068, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_SetUnavailable, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000070, "Member 'BP_Vendor_ItemSlot_C_SetUnavailable::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.Show Quantity
// 0x0005 (0x0005 - 0x0000)
struct BP_Vendor_ItemSlot_C_Show_Quantity final
{
public:
	bool                                          InShowQuantity;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_Show_Quantity) == 0x000001, "Wrong alignment on BP_Vendor_ItemSlot_C_Show_Quantity");
static_assert(sizeof(BP_Vendor_ItemSlot_C_Show_Quantity) == 0x000005, "Wrong size on BP_Vendor_ItemSlot_C_Show_Quantity");
static_assert(offsetof(BP_Vendor_ItemSlot_C_Show_Quantity, InShowQuantity) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_Show_Quantity::InShowQuantity' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_Show_Quantity, Temp_bool_Variable) == 0x000001, "Member 'BP_Vendor_ItemSlot_C_Show_Quantity::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_Show_Quantity, Temp_byte_Variable) == 0x000002, "Member 'BP_Vendor_ItemSlot_C_Show_Quantity::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_Show_Quantity, Temp_byte_Variable_1) == 0x000003, "Member 'BP_Vendor_ItemSlot_C_Show_Quantity::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_Show_Quantity, K2Node_Select_Default) == 0x000004, "Member 'BP_Vendor_ItemSlot_C_Show_Quantity::K2Node_Select_Default' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.Unhighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_ItemSlot_C_Unhighlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_Unhighlight) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_Unhighlight");
static_assert(sizeof(BP_Vendor_ItemSlot_C_Unhighlight) == 0x000008, "Wrong size on BP_Vendor_ItemSlot_C_Unhighlight");
static_assert(offsetof(BP_Vendor_ItemSlot_C_Unhighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_Unhighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.PlayLongpressProgressAnim
// 0x0010 (0x0010 - 0x0000)
struct BP_Vendor_ItemSlot_C_PlayLongpressProgressAnim final
{
public:
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_PlayLongpressProgressAnim) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_PlayLongpressProgressAnim");
static_assert(sizeof(BP_Vendor_ItemSlot_C_PlayLongpressProgressAnim) == 0x000010, "Wrong size on BP_Vendor_ItemSlot_C_PlayLongpressProgressAnim");
static_assert(offsetof(BP_Vendor_ItemSlot_C_PlayLongpressProgressAnim, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_PlayLongpressProgressAnim::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_PlayLongpressProgressAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_Vendor_ItemSlot_C_PlayLongpressProgressAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.PlayLongpressCancelAnim
// 0x0010 (0x0010 - 0x0000)
struct BP_Vendor_ItemSlot_C_PlayLongpressCancelAnim final
{
public:
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_PlayLongpressCancelAnim) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_PlayLongpressCancelAnim");
static_assert(sizeof(BP_Vendor_ItemSlot_C_PlayLongpressCancelAnim) == 0x000010, "Wrong size on BP_Vendor_ItemSlot_C_PlayLongpressCancelAnim");
static_assert(offsetof(BP_Vendor_ItemSlot_C_PlayLongpressCancelAnim, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_PlayLongpressCancelAnim::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_PlayLongpressCancelAnim, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_Vendor_ItemSlot_C_PlayLongpressCancelAnim::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_ItemSlot_C_PlayLongpressCancelAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_Vendor_ItemSlot_C_PlayLongpressCancelAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.PlayLongpressEndAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_ItemSlot_C_PlayLongpressEndAnim final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_PlayLongpressEndAnim) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_PlayLongpressEndAnim");
static_assert(sizeof(BP_Vendor_ItemSlot_C_PlayLongpressEndAnim) == 0x000008, "Wrong size on BP_Vendor_ItemSlot_C_PlayLongpressEndAnim");
static_assert(offsetof(BP_Vendor_ItemSlot_C_PlayLongpressEndAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_PlayLongpressEndAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_ItemSlot.BP_Vendor_ItemSlot_C.PlayLongpressResetAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_ItemSlot_C_PlayLongpressResetAnim final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_ItemSlot_C_PlayLongpressResetAnim) == 0x000008, "Wrong alignment on BP_Vendor_ItemSlot_C_PlayLongpressResetAnim");
static_assert(sizeof(BP_Vendor_ItemSlot_C_PlayLongpressResetAnim) == 0x000008, "Wrong size on BP_Vendor_ItemSlot_C_PlayLongpressResetAnim");
static_assert(offsetof(BP_Vendor_ItemSlot_C_PlayLongpressResetAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Vendor_ItemSlot_C_PlayLongpressResetAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

