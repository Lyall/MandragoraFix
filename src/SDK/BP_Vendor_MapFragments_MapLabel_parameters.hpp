#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vendor_MapFragments_MapLabel

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Vendor_MapFragments_MapLabel.BP_Vendor_MapFragments_MapLabel_C.ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_MapFragments_MapLabel_C_ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_MapFragments_MapLabel_C_ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel) == 0x000004, "Wrong alignment on BP_Vendor_MapFragments_MapLabel_C_ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel");
static_assert(sizeof(BP_Vendor_MapFragments_MapLabel_C_ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel) == 0x000008, "Wrong size on BP_Vendor_MapFragments_MapLabel_C_ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel, EntryPoint) == 0x000000, "Member 'BP_Vendor_MapFragments_MapLabel_C_ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_Vendor_MapFragments_MapLabel_C_ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel, K2Node_Event_bAnimate) == 0x000005, "Member 'BP_Vendor_MapFragments_MapLabel_C_ExecuteUbergraph_BP_Vendor_MapFragments_MapLabel::K2Node_Event_bAnimate' has a wrong offset!");

// Function BP_Vendor_MapFragments_MapLabel.BP_Vendor_MapFragments_MapLabel_C.OnUnlock
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_MapFragments_MapLabel_C_OnUnlock final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_MapFragments_MapLabel_C_OnUnlock) == 0x000001, "Wrong alignment on BP_Vendor_MapFragments_MapLabel_C_OnUnlock");
static_assert(sizeof(BP_Vendor_MapFragments_MapLabel_C_OnUnlock) == 0x000001, "Wrong size on BP_Vendor_MapFragments_MapLabel_C_OnUnlock");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_OnUnlock, bAnimate) == 0x000000, "Member 'BP_Vendor_MapFragments_MapLabel_C_OnUnlock::bAnimate' has a wrong offset!");

// Function BP_Vendor_MapFragments_MapLabel.BP_Vendor_MapFragments_MapLabel_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_MapFragments_MapLabel_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_MapFragments_MapLabel_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Vendor_MapFragments_MapLabel_C_PreConstruct");
static_assert(sizeof(BP_Vendor_MapFragments_MapLabel_C_PreConstruct) == 0x000001, "Wrong size on BP_Vendor_MapFragments_MapLabel_C_PreConstruct");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Vendor_MapFragments_MapLabel_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Vendor_MapFragments_MapLabel.BP_Vendor_MapFragments_MapLabel_C.SetLabel
// 0x0070 (0x0070 - 0x0000)
struct BP_Vendor_MapFragments_MapLabel_C_SetLabel final
{
public:
	class FText                                   InCaption;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	EHorizontalAlignment                          InAlign;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_1;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_2;                              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_3;                              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_4;                              // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_5;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_6;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_10;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_11;                             // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_12;                             // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_13;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_14;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_15;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_16;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_17;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_18;                             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_19;                             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_20;                             // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          K2Node_Select_Default_4;                           // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_MapFragments_MapLabel_C_SetLabel) == 0x000008, "Wrong alignment on BP_Vendor_MapFragments_MapLabel_C_SetLabel");
static_assert(sizeof(BP_Vendor_MapFragments_MapLabel_C_SetLabel) == 0x000070, "Wrong size on BP_Vendor_MapFragments_MapLabel_C_SetLabel");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, InCaption) == 0x000000, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::InCaption' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, InAlign) == 0x000018, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::InAlign' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable) == 0x000019, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_float_Variable) == 0x00001C, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_float_Variable_1) == 0x000020, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_float_Variable_2) == 0x000024, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_float_Variable_3) == 0x000028, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_1) == 0x00002C, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_2) == 0x00002D, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_3) == 0x00002E, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_4) == 0x00002F, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_5) == 0x000030, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_6) == 0x000031, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_7) == 0x000032, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_8) == 0x000033, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_9) == 0x000034, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_10) == 0x000035, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_11) == 0x000036, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_12) == 0x000037, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_13) == 0x000038, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_14) == 0x000039, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_15) == 0x00003A, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_16) == 0x00003B, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_17) == 0x00003C, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_18) == 0x00003D, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_19) == 0x00003E, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, Temp_byte_Variable_20) == 0x00003F, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::Temp_byte_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000040, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, K2Node_Select_Default) == 0x000048, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, K2Node_MakeStruct_Margin) == 0x00004C, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000060, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, K2Node_Select_Default_1) == 0x000068, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, K2Node_Select_Default_2) == 0x000069, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, K2Node_Select_Default_3) == 0x00006A, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetLabel, K2Node_Select_Default_4) == 0x00006B, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetLabel::K2Node_Select_Default_4' has a wrong offset!");

// Function BP_Vendor_MapFragments_MapLabel.BP_Vendor_MapFragments_MapLabel_C.SetVisible
// 0x0018 (0x0018 - 0x0000)
struct BP_Vendor_MapFragments_MapLabel_C_SetVisible final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Animate;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_MapFragments_MapLabel_C_SetVisible) == 0x000008, "Wrong alignment on BP_Vendor_MapFragments_MapLabel_C_SetVisible");
static_assert(sizeof(BP_Vendor_MapFragments_MapLabel_C_SetVisible) == 0x000018, "Wrong size on BP_Vendor_MapFragments_MapLabel_C_SetVisible");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetVisible, InVisible) == 0x000000, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetVisible::InVisible' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetVisible, Animate) == 0x000001, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetVisible::Animate' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetVisible, Temp_bool_Variable) == 0x000002, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetVisible, Temp_byte_Variable) == 0x000003, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetVisible::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetVisible, Temp_byte_Variable_1) == 0x000004, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetVisible::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetVisible, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetVisible::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetVisible, K2Node_Select_Default) == 0x000010, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetVisible::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_MapFragments_MapLabel_C_SetVisible, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'BP_Vendor_MapFragments_MapLabel_C_SetVisible::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

