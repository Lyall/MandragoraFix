#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vendor_TransmogRow

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Vendor_TransmogRow.BP_Vendor_TransmogRow_C.ExecuteUbergraph_BP_Vendor_TransmogRow
// 0x0038 (0x0038 - 0x0000)
struct BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Event_InEquippedItemIcon;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_InTransmogItemIcon;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InTransmogItemName;                   // 0x0018(0x0018)(ConstParm)
	bool                                          K2Node_Event_bInUnavailable;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow) == 0x000008, "Wrong alignment on BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow");
static_assert(sizeof(BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow) == 0x000038, "Wrong size on BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow, EntryPoint) == 0x000000, "Member 'BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow, K2Node_Event_InEquippedItemIcon) == 0x000008, "Member 'BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow::K2Node_Event_InEquippedItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow, K2Node_Event_InTransmogItemIcon) == 0x000010, "Member 'BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow::K2Node_Event_InTransmogItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow, K2Node_Event_InTransmogItemName) == 0x000018, "Member 'BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow::K2Node_Event_InTransmogItemName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow, K2Node_Event_bInUnavailable) == 0x000030, "Member 'BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow::K2Node_Event_bInUnavailable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow, K2Node_Event_IsDesignTime) == 0x000031, "Member 'BP_Vendor_TransmogRow_C_ExecuteUbergraph_BP_Vendor_TransmogRow::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function BP_Vendor_TransmogRow.BP_Vendor_TransmogRow_C.OnSetData
// 0x0030 (0x0030 - 0x0000)
struct BP_Vendor_TransmogRow_C_OnSetData final
{
public:
	class UTexture2D*                             InEquippedItemIcon;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             InTransmogItemIcon;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InTransmogItemName;                                // 0x0010(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bInUnavailable;                                    // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_TransmogRow_C_OnSetData) == 0x000008, "Wrong alignment on BP_Vendor_TransmogRow_C_OnSetData");
static_assert(sizeof(BP_Vendor_TransmogRow_C_OnSetData) == 0x000030, "Wrong size on BP_Vendor_TransmogRow_C_OnSetData");
static_assert(offsetof(BP_Vendor_TransmogRow_C_OnSetData, InEquippedItemIcon) == 0x000000, "Member 'BP_Vendor_TransmogRow_C_OnSetData::InEquippedItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_OnSetData, InTransmogItemIcon) == 0x000008, "Member 'BP_Vendor_TransmogRow_C_OnSetData::InTransmogItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_OnSetData, InTransmogItemName) == 0x000010, "Member 'BP_Vendor_TransmogRow_C_OnSetData::InTransmogItemName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_OnSetData, bInUnavailable) == 0x000028, "Member 'BP_Vendor_TransmogRow_C_OnSetData::bInUnavailable' has a wrong offset!");

// Function BP_Vendor_TransmogRow.BP_Vendor_TransmogRow_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_TransmogRow_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_TransmogRow_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Vendor_TransmogRow_C_PreConstruct");
static_assert(sizeof(BP_Vendor_TransmogRow_C_PreConstruct) == 0x000001, "Wrong size on BP_Vendor_TransmogRow_C_PreConstruct");
static_assert(offsetof(BP_Vendor_TransmogRow_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Vendor_TransmogRow_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Vendor_TransmogRow.BP_Vendor_TransmogRow_C.SetSlotName
// 0x0018 (0x0018 - 0x0000)
struct BP_Vendor_TransmogRow_C_SetSlotName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_Vendor_TransmogRow_C_SetSlotName) == 0x000008, "Wrong alignment on BP_Vendor_TransmogRow_C_SetSlotName");
static_assert(sizeof(BP_Vendor_TransmogRow_C_SetSlotName) == 0x000018, "Wrong size on BP_Vendor_TransmogRow_C_SetSlotName");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetSlotName, InName) == 0x000000, "Member 'BP_Vendor_TransmogRow_C_SetSlotName::InName' has a wrong offset!");

// Function BP_Vendor_TransmogRow.BP_Vendor_TransmogRow_C.SetTransmogItem
// 0x0020 (0x0020 - 0x0000)
struct BP_Vendor_TransmogRow_C_SetTransmogItem final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InName;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_Vendor_TransmogRow_C_SetTransmogItem) == 0x000008, "Wrong alignment on BP_Vendor_TransmogRow_C_SetTransmogItem");
static_assert(sizeof(BP_Vendor_TransmogRow_C_SetTransmogItem) == 0x000020, "Wrong size on BP_Vendor_TransmogRow_C_SetTransmogItem");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetTransmogItem, InIcon) == 0x000000, "Member 'BP_Vendor_TransmogRow_C_SetTransmogItem::InIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetTransmogItem, InName) == 0x000008, "Member 'BP_Vendor_TransmogRow_C_SetTransmogItem::InName' has a wrong offset!");

// Function BP_Vendor_TransmogRow.BP_Vendor_TransmogRow_C.SetFilterIcon
// 0x0020 (0x0020 - 0x0000)
struct BP_Vendor_TransmogRow_C_SetFilterIcon final
{
public:
	class UTexture2D*                             InFilterIconUp;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             InFilterIconOver;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             InFilterIconSel;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             InFilterIconDis;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_TransmogRow_C_SetFilterIcon) == 0x000008, "Wrong alignment on BP_Vendor_TransmogRow_C_SetFilterIcon");
static_assert(sizeof(BP_Vendor_TransmogRow_C_SetFilterIcon) == 0x000020, "Wrong size on BP_Vendor_TransmogRow_C_SetFilterIcon");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetFilterIcon, InFilterIconUp) == 0x000000, "Member 'BP_Vendor_TransmogRow_C_SetFilterIcon::InFilterIconUp' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetFilterIcon, InFilterIconOver) == 0x000008, "Member 'BP_Vendor_TransmogRow_C_SetFilterIcon::InFilterIconOver' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetFilterIcon, InFilterIconSel) == 0x000010, "Member 'BP_Vendor_TransmogRow_C_SetFilterIcon::InFilterIconSel' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetFilterIcon, InFilterIconDis) == 0x000018, "Member 'BP_Vendor_TransmogRow_C_SetFilterIcon::InFilterIconDis' has a wrong offset!");

// Function BP_Vendor_TransmogRow.BP_Vendor_TransmogRow_C.SetUnavailable
// 0x00D8 (0x00D8 - 0x0000)
struct BP_Vendor_TransmogRow_C_SetUnavailable final
{
public:
	bool                                          InUnavailable;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0070(0x0028)()
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x00B0(0x0028)()
};
static_assert(alignof(BP_Vendor_TransmogRow_C_SetUnavailable) == 0x000008, "Wrong alignment on BP_Vendor_TransmogRow_C_SetUnavailable");
static_assert(sizeof(BP_Vendor_TransmogRow_C_SetUnavailable) == 0x0000D8, "Wrong size on BP_Vendor_TransmogRow_C_SetUnavailable");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, InUnavailable) == 0x000000, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::InUnavailable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, Temp_bool_Variable) == 0x000001, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, Temp_struct_Variable) == 0x000004, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, Temp_struct_Variable_1) == 0x000014, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, Temp_bool_Variable_1) == 0x000024, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, Temp_object_Variable) == 0x000028, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, Temp_object_Variable_1) == 0x000030, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, Temp_bool_Variable_2) == 0x000038, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, Temp_struct_Variable_2) == 0x00003C, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, Temp_struct_Variable_3) == 0x00004C, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, K2Node_Select_Default) == 0x00005C, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, K2Node_MakeStruct_SlateColor) == 0x000070, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, K2Node_Select_Default_1) == 0x000098, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, K2Node_Select_Default_2) == 0x0000A0, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_SetUnavailable, K2Node_MakeStruct_SlateColor_1) == 0x0000B0, "Member 'BP_Vendor_TransmogRow_C_SetUnavailable::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");

// Function BP_Vendor_TransmogRow.BP_Vendor_TransmogRow_C.ToggleSmallScreen
// 0x00D8 (0x00D8 - 0x0000)
struct BP_Vendor_TransmogRow_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0020(0x0058)(HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_1;                 // 0x0080(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_TransmogRow_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_Vendor_TransmogRow_C_ToggleSmallScreen");
static_assert(sizeof(BP_Vendor_TransmogRow_C_ToggleSmallScreen) == 0x0000D8, "Wrong size on BP_Vendor_TransmogRow_C_ToggleSmallScreen");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_Vendor_TransmogRow_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_Vendor_TransmogRow_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ToggleSmallScreen, Temp_int_Variable) == 0x000004, "Member 'BP_Vendor_TransmogRow_C_ToggleSmallScreen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ToggleSmallScreen, Temp_int_Variable_1) == 0x000008, "Member 'BP_Vendor_TransmogRow_C_ToggleSmallScreen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_Vendor_TransmogRow_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ToggleSmallScreen, Temp_int_Variable_2) == 0x000010, "Member 'BP_Vendor_TransmogRow_C_ToggleSmallScreen::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ToggleSmallScreen, Temp_int_Variable_3) == 0x000014, "Member 'BP_Vendor_TransmogRow_C_ToggleSmallScreen::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ToggleSmallScreen, K2Node_Select_Default) == 0x000018, "Member 'BP_Vendor_TransmogRow_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo) == 0x000020, "Member 'BP_Vendor_TransmogRow_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x000078, "Member 'BP_Vendor_TransmogRow_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_TransmogRow_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_1) == 0x000080, "Member 'BP_Vendor_TransmogRow_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_1' has a wrong offset!");

}

