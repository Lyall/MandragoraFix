#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vendor_Transmog

#include "Basic.hpp"

#include "man_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.ExecuteUbergraph_BP_Vendor_Transmog
// 0x0218 (0x0218 - 0x0000)
struct BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVendorTransmogRowUserWidget*           CallFunc_GetSelectedVendorTransmogRowUserWidget_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_Vendor_TransmogRow_C*               K2Node_DynamicCast_AsBP_Vendor_Transmog_Row;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0060(0x0028)()
	float                                         Temp_float_Variable_1;                             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0090(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInTransmogMode;                      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Event_InItemIcon;                           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InItemName;                           // 0x0100(0x0018)(ConstParm)
	int32                                         K2Node_Event_InSelectedCount;                      // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMaxCount;                           // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InPriceText;                          // 0x0120(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InPriceGoldValue;                     // 0x0138(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InPriceEssenceValue;                  // 0x0150(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InRequirementText;                    // 0x0168(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InItemTypeText;                       // 0x0180(0x0018)(ConstParm)
	bool                                          K2Node_Event_bHasEnoughGold;                       // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bHasEnoughEssence;                    // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x019B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget_3;           // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EInputDisplay                                 K2Node_Event_InInputDisplay;                       // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InControlDisplay;                     // 0x01AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AB[0x5];                                      // 0x01AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget_2;           // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget_1;           // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget;             // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bMinTimeCancel;                       // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_InventorySlotSmall_V3_C*            K2Node_DynamicCast_AsBP_Inventory_Slot_Small_V3;   // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_InventorySlotSmall_V3_C*            K2Node_DynamicCast_AsBP_Inventory_Slot_Small_V3_1; // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_InventorySlotSmall_V3_C*            K2Node_DynamicCast_AsBP_Inventory_Slot_Small_V3_2; // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0210(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog) == 0x000008, "Wrong alignment on BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog");
static_assert(sizeof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog) == 0x000218, "Wrong size on BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, EntryPoint) == 0x000000, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, CallFunc_GetSelectedVendorTransmogRowUserWidget_ReturnValue) == 0x000008, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::CallFunc_GetSelectedVendorTransmogRowUserWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, Temp_bool_Variable) == 0x000010, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_DynamicCast_AsBP_Vendor_Transmog_Row) == 0x000018, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_DynamicCast_AsBP_Vendor_Transmog_Row' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, Temp_struct_Variable) == 0x000024, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, Temp_struct_Variable_1) == 0x000034, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, Temp_bool_Variable_1) == 0x000044, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Select_Default) == 0x000048, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, Temp_float_Variable) == 0x000058, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_MakeStruct_SlateColor) == 0x000060, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, Temp_float_Variable_1) == 0x000088, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_IsDesignTime) == 0x00008C, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_MyGeometry) == 0x000090, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InDeltaTime) == 0x0000C8, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_AnimDuration_1) == 0x0000CC, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x0000D0, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_AnimDuration) == 0x0000D4, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, CallFunc_PlayAnimation_ReturnValue) == 0x0000D8, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x0000E0, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, CallFunc_PlayAnimation_ReturnValue_1) == 0x0000E8, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_bInTransmogMode) == 0x0000F0, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_bInTransmogMode' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InItemIcon) == 0x0000F8, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InItemName) == 0x000100, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InItemName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InSelectedCount) == 0x000118, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InSelectedCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InMaxCount) == 0x00011C, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InMaxCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InPriceText) == 0x000120, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InPriceText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InPriceGoldValue) == 0x000138, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InPriceGoldValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InPriceEssenceValue) == 0x000150, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InPriceEssenceValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InRequirementText) == 0x000168, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InItemTypeText) == 0x000180, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InItemTypeText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_bHasEnoughGold) == 0x000198, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_bHasEnoughGold' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_bHasEnoughEssence) == 0x000199, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_bHasEnoughEssence' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, CallFunc_Not_PreBool_ReturnValue) == 0x00019A, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, CallFunc_TextIsEmpty_ReturnValue) == 0x00019B, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Select_Default_1) == 0x00019C, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InteractButtonUserWidget_3) == 0x0001A0, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InteractButtonUserWidget_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001A8, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InInputDisplay) == 0x0001A9, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InControlDisplay) == 0x0001AA, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InControlDisplay' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InteractButtonUserWidget_2) == 0x0001B0, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InteractButtonUserWidget_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InteractButtonUserWidget_1) == 0x0001B8, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InteractButtonUserWidget_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_InteractButtonUserWidget) == 0x0001C0, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_InteractButtonUserWidget' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_Event_bMinTimeCancel) == 0x0001C8, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_Event_bMinTimeCancel' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x0001D0, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x0001D8, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_DynamicCast_AsBP_Inventory_Slot_Small_V3) == 0x0001E0, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_DynamicCast_AsBP_Inventory_Slot_Small_V3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_DynamicCast_bSuccess_1) == 0x0001E8, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_DynamicCast_AsBP_Inventory_Slot_Small_V3_1) == 0x0001F0, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_DynamicCast_AsBP_Inventory_Slot_Small_V3_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_DynamicCast_bSuccess_2) == 0x0001F8, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_DynamicCast_AsBP_Inventory_Slot_Small_V3_2) == 0x000200, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_DynamicCast_AsBP_Inventory_Slot_Small_V3_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, K2Node_DynamicCast_bSuccess_3) == 0x000208, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000210, "Member 'BP_Vendor_Transmog_C_ExecuteUbergraph_BP_Vendor_Transmog::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.OnHoldCanceled
// 0x0010 (0x0010 - 0x0000)
struct BP_Vendor_Transmog_C_OnHoldCanceled final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMinTimeCancel;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Transmog_C_OnHoldCanceled) == 0x000008, "Wrong alignment on BP_Vendor_Transmog_C_OnHoldCanceled");
static_assert(sizeof(BP_Vendor_Transmog_C_OnHoldCanceled) == 0x000010, "Wrong size on BP_Vendor_Transmog_C_OnHoldCanceled");
static_assert(offsetof(BP_Vendor_Transmog_C_OnHoldCanceled, InteractButtonUserWidget) == 0x000000, "Member 'BP_Vendor_Transmog_C_OnHoldCanceled::InteractButtonUserWidget' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnHoldCanceled, bMinTimeCancel) == 0x000008, "Member 'BP_Vendor_Transmog_C_OnHoldCanceled::bMinTimeCancel' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.OnHoldFinished
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Transmog_C_OnHoldFinished final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Transmog_C_OnHoldFinished) == 0x000008, "Wrong alignment on BP_Vendor_Transmog_C_OnHoldFinished");
static_assert(sizeof(BP_Vendor_Transmog_C_OnHoldFinished) == 0x000008, "Wrong size on BP_Vendor_Transmog_C_OnHoldFinished");
static_assert(offsetof(BP_Vendor_Transmog_C_OnHoldFinished, InteractButtonUserWidget) == 0x000000, "Member 'BP_Vendor_Transmog_C_OnHoldFinished::InteractButtonUserWidget' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.OnHoldStarted
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Transmog_C_OnHoldStarted final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Transmog_C_OnHoldStarted) == 0x000008, "Wrong alignment on BP_Vendor_Transmog_C_OnHoldStarted");
static_assert(sizeof(BP_Vendor_Transmog_C_OnHoldStarted) == 0x000008, "Wrong size on BP_Vendor_Transmog_C_OnHoldStarted");
static_assert(offsetof(BP_Vendor_Transmog_C_OnHoldStarted, InteractButtonUserWidget) == 0x000000, "Member 'BP_Vendor_Transmog_C_OnHoldStarted::InteractButtonUserWidget' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.OnSetInputDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_Vendor_Transmog_C_OnSetInputDisplay final
{
public:
	EInputDisplay                                 InInputDisplay;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 InControlDisplay;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Transmog_C_OnSetInputDisplay) == 0x000001, "Wrong alignment on BP_Vendor_Transmog_C_OnSetInputDisplay");
static_assert(sizeof(BP_Vendor_Transmog_C_OnSetInputDisplay) == 0x000002, "Wrong size on BP_Vendor_Transmog_C_OnSetInputDisplay");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetInputDisplay, InInputDisplay) == 0x000000, "Member 'BP_Vendor_Transmog_C_OnSetInputDisplay::InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetInputDisplay, InControlDisplay) == 0x000001, "Member 'BP_Vendor_Transmog_C_OnSetInputDisplay::InControlDisplay' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.OnErrorHiglight
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Transmog_C_OnErrorHiglight final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Transmog_C_OnErrorHiglight) == 0x000008, "Wrong alignment on BP_Vendor_Transmog_C_OnErrorHiglight");
static_assert(sizeof(BP_Vendor_Transmog_C_OnErrorHiglight) == 0x000008, "Wrong size on BP_Vendor_Transmog_C_OnErrorHiglight");
static_assert(offsetof(BP_Vendor_Transmog_C_OnErrorHiglight, InteractButtonUserWidget) == 0x000000, "Member 'BP_Vendor_Transmog_C_OnErrorHiglight::InteractButtonUserWidget' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.OnSetSelectedItemProperty
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Vendor_Transmog_C_OnSetSelectedItemProperty final
{
public:
	class UTexture2D*                             InItemIcon;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InItemName;                                        // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         InSelectedCount;                                   // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMaxCount;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InPriceText;                                       // 0x0028(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InPriceGoldValue;                                  // 0x0040(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InPriceEssenceValue;                               // 0x0058(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InRequirementText;                                 // 0x0070(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InItemTypeText;                                    // 0x0088(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bHasEnoughGold;                                    // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bHasEnoughEssence;                                 // 0x00A1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty) == 0x000008, "Wrong alignment on BP_Vendor_Transmog_C_OnSetSelectedItemProperty");
static_assert(sizeof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty) == 0x0000A8, "Wrong size on BP_Vendor_Transmog_C_OnSetSelectedItemProperty");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty, InItemIcon) == 0x000000, "Member 'BP_Vendor_Transmog_C_OnSetSelectedItemProperty::InItemIcon' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty, InItemName) == 0x000008, "Member 'BP_Vendor_Transmog_C_OnSetSelectedItemProperty::InItemName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty, InSelectedCount) == 0x000020, "Member 'BP_Vendor_Transmog_C_OnSetSelectedItemProperty::InSelectedCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty, InMaxCount) == 0x000024, "Member 'BP_Vendor_Transmog_C_OnSetSelectedItemProperty::InMaxCount' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty, InPriceText) == 0x000028, "Member 'BP_Vendor_Transmog_C_OnSetSelectedItemProperty::InPriceText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty, InPriceGoldValue) == 0x000040, "Member 'BP_Vendor_Transmog_C_OnSetSelectedItemProperty::InPriceGoldValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty, InPriceEssenceValue) == 0x000058, "Member 'BP_Vendor_Transmog_C_OnSetSelectedItemProperty::InPriceEssenceValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty, InRequirementText) == 0x000070, "Member 'BP_Vendor_Transmog_C_OnSetSelectedItemProperty::InRequirementText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty, InItemTypeText) == 0x000088, "Member 'BP_Vendor_Transmog_C_OnSetSelectedItemProperty::InItemTypeText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty, bHasEnoughGold) == 0x0000A0, "Member 'BP_Vendor_Transmog_C_OnSetSelectedItemProperty::bHasEnoughGold' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetSelectedItemProperty, bHasEnoughEssence) == 0x0000A1, "Member 'BP_Vendor_Transmog_C_OnSetSelectedItemProperty::bHasEnoughEssence' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.OnSetTransmogMode
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Transmog_C_OnSetTransmogMode final
{
public:
	bool                                          bInTransmogMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Transmog_C_OnSetTransmogMode) == 0x000001, "Wrong alignment on BP_Vendor_Transmog_C_OnSetTransmogMode");
static_assert(sizeof(BP_Vendor_Transmog_C_OnSetTransmogMode) == 0x000001, "Wrong size on BP_Vendor_Transmog_C_OnSetTransmogMode");
static_assert(offsetof(BP_Vendor_Transmog_C_OnSetTransmogMode, bInTransmogMode) == 0x000000, "Member 'BP_Vendor_Transmog_C_OnSetTransmogMode::bInTransmogMode' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_Vendor_Transmog_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Transmog_C_OnHide) == 0x000004, "Wrong alignment on BP_Vendor_Transmog_C_OnHide");
static_assert(sizeof(BP_Vendor_Transmog_C_OnHide) == 0x000004, "Wrong size on BP_Vendor_Transmog_C_OnHide");
static_assert(offsetof(BP_Vendor_Transmog_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_Vendor_Transmog_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_Vendor_Transmog_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Transmog_C_OnShow) == 0x000004, "Wrong alignment on BP_Vendor_Transmog_C_OnShow");
static_assert(sizeof(BP_Vendor_Transmog_C_OnShow) == 0x000004, "Wrong size on BP_Vendor_Transmog_C_OnShow");
static_assert(offsetof(BP_Vendor_Transmog_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_Vendor_Transmog_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Vendor_Transmog_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Transmog_C_Tick) == 0x000004, "Wrong alignment on BP_Vendor_Transmog_C_Tick");
static_assert(sizeof(BP_Vendor_Transmog_C_Tick) == 0x00003C, "Wrong size on BP_Vendor_Transmog_C_Tick");
static_assert(offsetof(BP_Vendor_Transmog_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Vendor_Transmog_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Vendor_Transmog_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Transmog_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Transmog_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Vendor_Transmog_C_PreConstruct");
static_assert(sizeof(BP_Vendor_Transmog_C_PreConstruct) == 0x000001, "Wrong size on BP_Vendor_Transmog_C_PreConstruct");
static_assert(offsetof(BP_Vendor_Transmog_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Vendor_Transmog_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.BtnHotkeyBClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_Transmog_C_BtnHotkeyBClicked final
{
public:
	bool                                          CallFunc_IsTransmogMode_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Transmog_C_BtnHotkeyBClicked) == 0x000001, "Wrong alignment on BP_Vendor_Transmog_C_BtnHotkeyBClicked");
static_assert(sizeof(BP_Vendor_Transmog_C_BtnHotkeyBClicked) == 0x000001, "Wrong size on BP_Vendor_Transmog_C_BtnHotkeyBClicked");
static_assert(offsetof(BP_Vendor_Transmog_C_BtnHotkeyBClicked, CallFunc_IsTransmogMode_ReturnValue) == 0x000000, "Member 'BP_Vendor_Transmog_C_BtnHotkeyBClicked::CallFunc_IsTransmogMode_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.BtnHotkeyAClicked
// 0x0002 (0x0002 - 0x0000)
struct BP_Vendor_Transmog_C_BtnHotkeyAClicked final
{
public:
	bool                                          CallFunc_IsTransmogMode_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_Transmog_C_BtnHotkeyAClicked) == 0x000001, "Wrong alignment on BP_Vendor_Transmog_C_BtnHotkeyAClicked");
static_assert(sizeof(BP_Vendor_Transmog_C_BtnHotkeyAClicked) == 0x000002, "Wrong size on BP_Vendor_Transmog_C_BtnHotkeyAClicked");
static_assert(offsetof(BP_Vendor_Transmog_C_BtnHotkeyAClicked, CallFunc_IsTransmogMode_ReturnValue) == 0x000000, "Member 'BP_Vendor_Transmog_C_BtnHotkeyAClicked::CallFunc_IsTransmogMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BtnHotkeyAClicked, CallFunc_IsActive_ReturnValue) == 0x000001, "Member 'BP_Vendor_Transmog_C_BtnHotkeyAClicked::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.BP_SetTransmogMode
// 0x0078 (0x0078 - 0x0000)
struct BP_Vendor_Transmog_C_BP_SetTransmogMode final
{
public:
	bool                                          InTransmogMode;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	bool                                          Temp_bool_Variable_3;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_2;                           // 0x0050(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_4;                           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_5;                           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Transmog_C_BP_SetTransmogMode) == 0x000008, "Wrong alignment on BP_Vendor_Transmog_C_BP_SetTransmogMode");
static_assert(sizeof(BP_Vendor_Transmog_C_BP_SetTransmogMode) == 0x000078, "Wrong size on BP_Vendor_Transmog_C_BP_SetTransmogMode");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, InTransmogMode) == 0x000000, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::InTransmogMode' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_bool_Variable) == 0x000001, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_byte_Variable) == 0x000002, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_byte_Variable_1) == 0x000003, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_bool_Variable_1) == 0x000004, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_byte_Variable_2) == 0x000005, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_byte_Variable_3) == 0x000006, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_bool_Variable_2) == 0x000007, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_text_Variable) == 0x000008, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_text_Variable_1) == 0x000020, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_bool_Variable_3) == 0x000038, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_byte_Variable_4) == 0x000039, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_byte_Variable_5) == 0x00003A, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_bool_Variable_4) == 0x00003B, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_float_Variable) == 0x00003C, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_float_Variable_1) == 0x000040, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_bool_Variable_5) == 0x000044, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_byte_Variable_6) == 0x000045, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, Temp_byte_Variable_7) == 0x000046, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, K2Node_Select_Default) == 0x000047, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, K2Node_Select_Default_1) == 0x000048, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, K2Node_Select_Default_2) == 0x000050, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, K2Node_Select_Default_3) == 0x000068, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, K2Node_Select_Default_4) == 0x00006C, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_BP_SetTransmogMode, K2Node_Select_Default_5) == 0x000070, "Member 'BP_Vendor_Transmog_C_BP_SetTransmogMode::K2Node_Select_Default_5' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.SetCurrency
// 0x0030 (0x0030 - 0x0000)
struct BP_Vendor_Transmog_C_SetCurrency final
{
public:
	class FText                                   InPriceText;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InPriceGoldValue;                                  // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_Vendor_Transmog_C_SetCurrency) == 0x000008, "Wrong alignment on BP_Vendor_Transmog_C_SetCurrency");
static_assert(sizeof(BP_Vendor_Transmog_C_SetCurrency) == 0x000030, "Wrong size on BP_Vendor_Transmog_C_SetCurrency");
static_assert(offsetof(BP_Vendor_Transmog_C_SetCurrency, InPriceText) == 0x000000, "Member 'BP_Vendor_Transmog_C_SetCurrency::InPriceText' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetCurrency, InPriceGoldValue) == 0x000018, "Member 'BP_Vendor_Transmog_C_SetCurrency::InPriceGoldValue' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.SetHeroResource
// 0x0020 (0x0020 - 0x0000)
struct BP_Vendor_Transmog_C_SetHeroResource final
{
public:
	int32                                         CallFunc_GetHeroGoldResource_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_IntToText_ReturnValue;                    // 0x0008(0x0018)()
};
static_assert(alignof(BP_Vendor_Transmog_C_SetHeroResource) == 0x000008, "Wrong alignment on BP_Vendor_Transmog_C_SetHeroResource");
static_assert(sizeof(BP_Vendor_Transmog_C_SetHeroResource) == 0x000020, "Wrong size on BP_Vendor_Transmog_C_SetHeroResource");
static_assert(offsetof(BP_Vendor_Transmog_C_SetHeroResource, CallFunc_GetHeroGoldResource_ReturnValue) == 0x000000, "Member 'BP_Vendor_Transmog_C_SetHeroResource::CallFunc_GetHeroGoldResource_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetHeroResource, CallFunc_IntToText_ReturnValue) == 0x000008, "Member 'BP_Vendor_Transmog_C_SetHeroResource::CallFunc_IntToText_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.BalanceErrorHighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_Transmog_C_BalanceErrorHighlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Transmog_C_BalanceErrorHighlight) == 0x000008, "Wrong alignment on BP_Vendor_Transmog_C_BalanceErrorHighlight");
static_assert(sizeof(BP_Vendor_Transmog_C_BalanceErrorHighlight) == 0x000008, "Wrong size on BP_Vendor_Transmog_C_BalanceErrorHighlight");
static_assert(offsetof(BP_Vendor_Transmog_C_BalanceErrorHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Vendor_Transmog_C_BalanceErrorHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_Transmog.BP_Vendor_Transmog_C.SetBtnCloseVisibility
// 0x000B (0x000B - 0x0000)
struct BP_Vendor_Transmog_C_SetBtnCloseVisibility final
{
public:
	EInputDisplay                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 CallFunc_GetInputDisplay_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_Transmog_C_SetBtnCloseVisibility) == 0x000001, "Wrong alignment on BP_Vendor_Transmog_C_SetBtnCloseVisibility");
static_assert(sizeof(BP_Vendor_Transmog_C_SetBtnCloseVisibility) == 0x00000B, "Wrong size on BP_Vendor_Transmog_C_SetBtnCloseVisibility");
static_assert(offsetof(BP_Vendor_Transmog_C_SetBtnCloseVisibility, Temp_byte_Variable) == 0x000000, "Member 'BP_Vendor_Transmog_C_SetBtnCloseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetBtnCloseVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'BP_Vendor_Transmog_C_SetBtnCloseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetBtnCloseVisibility, Temp_byte_Variable_2) == 0x000002, "Member 'BP_Vendor_Transmog_C_SetBtnCloseVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetBtnCloseVisibility, Temp_byte_Variable_3) == 0x000003, "Member 'BP_Vendor_Transmog_C_SetBtnCloseVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetBtnCloseVisibility, Temp_byte_Variable_4) == 0x000004, "Member 'BP_Vendor_Transmog_C_SetBtnCloseVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetBtnCloseVisibility, Temp_byte_Variable_5) == 0x000005, "Member 'BP_Vendor_Transmog_C_SetBtnCloseVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetBtnCloseVisibility, Temp_byte_Variable_6) == 0x000006, "Member 'BP_Vendor_Transmog_C_SetBtnCloseVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetBtnCloseVisibility, Temp_byte_Variable_7) == 0x000007, "Member 'BP_Vendor_Transmog_C_SetBtnCloseVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetBtnCloseVisibility, Temp_byte_Variable_8) == 0x000008, "Member 'BP_Vendor_Transmog_C_SetBtnCloseVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetBtnCloseVisibility, CallFunc_GetInputDisplay_ReturnValue) == 0x000009, "Member 'BP_Vendor_Transmog_C_SetBtnCloseVisibility::CallFunc_GetInputDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_Transmog_C_SetBtnCloseVisibility, K2Node_Select_Default) == 0x00000A, "Member 'BP_Vendor_Transmog_C_SetBtnCloseVisibility::K2Node_Select_Default' has a wrong offset!");

}

