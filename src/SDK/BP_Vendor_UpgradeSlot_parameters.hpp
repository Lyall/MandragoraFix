#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vendor_UpgradeSlot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.ExecuteUbergraph_BP_Vendor_UpgradeSlot
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0014(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InName;                               // 0x0050(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InDescription;                        // 0x0068(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InRequirements;                       // 0x0080(0x0018)(ConstParm)
	bool                                          K2Node_Event_bInUnlocked;                          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHighlighted;                         // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAnimate;                             // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot) == 0x000008, "Wrong alignment on BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot) == 0x0000A8, "Wrong size on BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, EntryPoint) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, Temp_byte_Variable) == 0x000004, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, Temp_byte_Variable_1) == 0x000005, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, Temp_bool_Variable) == 0x000006, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, Temp_float_Variable) == 0x000008, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, Temp_float_Variable_1) == 0x00000C, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, K2Node_Event_IsDesignTime) == 0x000010, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, K2Node_Event_MyGeometry) == 0x000014, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, K2Node_Event_InDeltaTime) == 0x00004C, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, K2Node_Event_InName) == 0x000050, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::K2Node_Event_InName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, K2Node_Event_InDescription) == 0x000068, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::K2Node_Event_InDescription' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, K2Node_Event_InRequirements) == 0x000080, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::K2Node_Event_InRequirements' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, K2Node_Event_bInUnlocked) == 0x000098, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::K2Node_Event_bInUnlocked' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, Temp_bool_Variable_1) == 0x000099, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, K2Node_Select_Default) == 0x00009A, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, K2Node_Event_bHighlighted) == 0x00009B, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::K2Node_Event_bHighlighted' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, K2Node_Event_bAnimate) == 0x00009C, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot, K2Node_Select_Default_1) == 0x0000A0, "Member 'BP_Vendor_UpgradeSlot_C_ExecuteUbergraph_BP_Vendor_UpgradeSlot::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.OnHighlighted
// 0x0002 (0x0002 - 0x0000)
struct BP_Vendor_UpgradeSlot_C_OnHighlighted final
{
public:
	bool                                          bHighlighted;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_OnHighlighted) == 0x000001, "Wrong alignment on BP_Vendor_UpgradeSlot_C_OnHighlighted");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_OnHighlighted) == 0x000002, "Wrong size on BP_Vendor_UpgradeSlot_C_OnHighlighted");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_OnHighlighted, bHighlighted) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_OnHighlighted::bHighlighted' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_OnHighlighted, bAnimate) == 0x000001, "Member 'BP_Vendor_UpgradeSlot_C_OnHighlighted::bAnimate' has a wrong offset!");

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.OnSetSlot
// 0x0050 (0x0050 - 0x0000)
struct BP_Vendor_UpgradeSlot_C_OnSetSlot final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InDescription;                                     // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   InRequirements;                                    // 0x0030(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bInUnlocked;                                       // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_OnSetSlot) == 0x000008, "Wrong alignment on BP_Vendor_UpgradeSlot_C_OnSetSlot");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_OnSetSlot) == 0x000050, "Wrong size on BP_Vendor_UpgradeSlot_C_OnSetSlot");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_OnSetSlot, InName) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_OnSetSlot::InName' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_OnSetSlot, InDescription) == 0x000018, "Member 'BP_Vendor_UpgradeSlot_C_OnSetSlot::InDescription' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_OnSetSlot, InRequirements) == 0x000030, "Member 'BP_Vendor_UpgradeSlot_C_OnSetSlot::InRequirements' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_OnSetSlot, bInUnlocked) == 0x000048, "Member 'BP_Vendor_UpgradeSlot_C_OnSetSlot::bInUnlocked' has a wrong offset!");

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Vendor_UpgradeSlot_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_Tick) == 0x000004, "Wrong alignment on BP_Vendor_UpgradeSlot_C_Tick");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_Tick) == 0x00003C, "Wrong size on BP_Vendor_UpgradeSlot_C_Tick");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Vendor_UpgradeSlot_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_Vendor_UpgradeSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_PreConstruct) == 0x000001, "Wrong alignment on BP_Vendor_UpgradeSlot_C_PreConstruct");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_PreConstruct) == 0x000001, "Wrong size on BP_Vendor_UpgradeSlot_C_PreConstruct");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.SetState
// 0x0028 (0x0028 - 0x0000)
struct BP_Vendor_UpgradeSlot_C_SetState final
{
public:
	bool                                          InUnlocked;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_SetState) == 0x000008, "Wrong alignment on BP_Vendor_UpgradeSlot_C_SetState");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_SetState) == 0x000028, "Wrong size on BP_Vendor_UpgradeSlot_C_SetState");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, InUnlocked) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_SetState::InUnlocked' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, Temp_bool_Variable) == 0x000001, "Member 'BP_Vendor_UpgradeSlot_C_SetState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, Temp_byte_Variable) == 0x000002, "Member 'BP_Vendor_UpgradeSlot_C_SetState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, Temp_byte_Variable_1) == 0x000003, "Member 'BP_Vendor_UpgradeSlot_C_SetState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, Temp_bool_Variable_1) == 0x000004, "Member 'BP_Vendor_UpgradeSlot_C_SetState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, Temp_byte_Variable_2) == 0x000005, "Member 'BP_Vendor_UpgradeSlot_C_SetState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, Temp_byte_Variable_3) == 0x000006, "Member 'BP_Vendor_UpgradeSlot_C_SetState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, Temp_bool_Variable_2) == 0x000007, "Member 'BP_Vendor_UpgradeSlot_C_SetState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, Temp_object_Variable) == 0x000008, "Member 'BP_Vendor_UpgradeSlot_C_SetState::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, Temp_object_Variable_1) == 0x000010, "Member 'BP_Vendor_UpgradeSlot_C_SetState::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, K2Node_Select_Default) == 0x000018, "Member 'BP_Vendor_UpgradeSlot_C_SetState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, K2Node_Select_Default_1) == 0x000019, "Member 'BP_Vendor_UpgradeSlot_C_SetState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_SetState, K2Node_Select_Default_2) == 0x000020, "Member 'BP_Vendor_UpgradeSlot_C_SetState::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.PlayUpgradeProgressAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_UpgradeSlot_C_PlayUpgradeProgressAnim final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_PlayUpgradeProgressAnim) == 0x000008, "Wrong alignment on BP_Vendor_UpgradeSlot_C_PlayUpgradeProgressAnim");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_PlayUpgradeProgressAnim) == 0x000008, "Wrong size on BP_Vendor_UpgradeSlot_C_PlayUpgradeProgressAnim");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_PlayUpgradeProgressAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_PlayUpgradeProgressAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.PlayUpgradeCancelledAnim
// 0x0010 (0x0010 - 0x0000)
struct BP_Vendor_UpgradeSlot_C_PlayUpgradeCancelledAnim final
{
public:
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_PlayUpgradeCancelledAnim) == 0x000008, "Wrong alignment on BP_Vendor_UpgradeSlot_C_PlayUpgradeCancelledAnim");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_PlayUpgradeCancelledAnim) == 0x000010, "Wrong size on BP_Vendor_UpgradeSlot_C_PlayUpgradeCancelledAnim");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_PlayUpgradeCancelledAnim, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_PlayUpgradeCancelledAnim::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_PlayUpgradeCancelledAnim, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_Vendor_UpgradeSlot_C_PlayUpgradeCancelledAnim::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_PlayUpgradeCancelledAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_Vendor_UpgradeSlot_C_PlayUpgradeCancelledAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.PlayUpgradeFinishedAnim
// 0x0018 (0x0018 - 0x0000)
struct BP_Vendor_UpgradeSlot_C_PlayUpgradeFinishedAnim final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_PlayUpgradeFinishedAnim) == 0x000008, "Wrong alignment on BP_Vendor_UpgradeSlot_C_PlayUpgradeFinishedAnim");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_PlayUpgradeFinishedAnim) == 0x000018, "Wrong size on BP_Vendor_UpgradeSlot_C_PlayUpgradeFinishedAnim");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_PlayUpgradeFinishedAnim, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_PlayUpgradeFinishedAnim::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_PlayUpgradeFinishedAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_Vendor_UpgradeSlot_C_PlayUpgradeFinishedAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.UpgradeAnimFinished
// 0x0008 (0x0008 - 0x0000)
struct BP_Vendor_UpgradeSlot_C_UpgradeAnimFinished final
{
public:
	class UVendorUpgradeUserWidget*               CallFunc_GetVendorUpgradeUserWidget_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_UpgradeAnimFinished) == 0x000008, "Wrong alignment on BP_Vendor_UpgradeSlot_C_UpgradeAnimFinished");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_UpgradeAnimFinished) == 0x000008, "Wrong size on BP_Vendor_UpgradeSlot_C_UpgradeAnimFinished");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_UpgradeAnimFinished, CallFunc_GetVendorUpgradeUserWidget_ReturnValue) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_UpgradeAnimFinished::CallFunc_GetVendorUpgradeUserWidget_ReturnValue' has a wrong offset!");

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.ErrorHighlight
// 0x0010 (0x0010 - 0x0000)
struct BP_Vendor_UpgradeSlot_C_ErrorHighlight final
{
public:
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_ErrorHighlight) == 0x000008, "Wrong alignment on BP_Vendor_UpgradeSlot_C_ErrorHighlight");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_ErrorHighlight) == 0x000010, "Wrong size on BP_Vendor_UpgradeSlot_C_ErrorHighlight");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ErrorHighlight, CallFunc_GetVisibility_ReturnValue) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_ErrorHighlight::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ErrorHighlight, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_Vendor_UpgradeSlot_C_ErrorHighlight::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ErrorHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_Vendor_UpgradeSlot_C_ErrorHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_Vendor_UpgradeSlot.BP_Vendor_UpgradeSlot_C.ToggleSmallScreen
// 0x01A8 (0x01A8 - 0x0000)
struct BP_Vendor_UpgradeSlot_C_ToggleSmallScreen final
{
public:
	bool                                          InIsSmallScreen;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin_2;                        // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_3;                        // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin_4;                        // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_5;                        // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             K2Node_Select_Default_1;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_Select_Default_2;                           // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_Select_Default_3;                           // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_Select_Default_4;                           // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_5;                           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x00F8(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_1;                 // 0x0150(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen) == 0x000008, "Wrong alignment on BP_Vendor_UpgradeSlot_C_ToggleSmallScreen");
static_assert(sizeof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen) == 0x0001A8, "Wrong size on BP_Vendor_UpgradeSlot_C_ToggleSmallScreen");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, InIsSmallScreen) == 0x000000, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::InIsSmallScreen' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_bool_Variable) == 0x000001, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_object_Variable) == 0x000008, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_object_Variable_1) == 0x000010, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_bool_Variable_1) == 0x000018, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_MakeStruct_Margin) == 0x00001C, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_MakeStruct_Margin_1) == 0x00002C, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_bool_Variable_2) == 0x00003C, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_MakeStruct_Margin_2) == 0x000040, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_MakeStruct_Margin_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_MakeStruct_Margin_3) == 0x000050, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_MakeStruct_Margin_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_bool_Variable_3) == 0x000060, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_MakeStruct_Margin_4) == 0x000064, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_MakeStruct_Margin_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_MakeStruct_Margin_5) == 0x000074, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_MakeStruct_Margin_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_bool_Variable_4) == 0x000084, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_int_Variable) == 0x000088, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_int_Variable_1) == 0x00008C, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_bool_Variable_5) == 0x000090, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_int_Variable_2) == 0x000094, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, Temp_int_Variable_3) == 0x000098, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_Select_Default) == 0x00009C, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_Select_Default_1) == 0x0000A0, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_Select_Default_2) == 0x0000A8, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, CallFunc_SlotAsVerticalBoxSlot_ReturnValue) == 0x0000B8, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::CallFunc_SlotAsVerticalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_Select_Default_3) == 0x0000C0, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x0000D0, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_Select_Default_4) == 0x0000D8, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x0000E8, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_Select_Default_5) == 0x0000F0, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo) == 0x0000F8, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(BP_Vendor_UpgradeSlot_C_ToggleSmallScreen, K2Node_MakeStruct_SlateFontInfo_1) == 0x000150, "Member 'BP_Vendor_UpgradeSlot_C_ToggleSmallScreen::K2Node_MakeStruct_SlateFontInfo_1' has a wrong offset!");

}

