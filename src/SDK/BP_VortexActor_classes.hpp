#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VortexActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VortexActor.BP_VortexActor_C
// 0x0028 (0x0860 - 0x0838)
class ABP_VortexActor_C final : public AVortexActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0838(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak;                                                // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitBox*                                VortexHitBox;                                      // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SizeAfterPlacement;                                // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_VortexActor(int32 EntryPoint);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VortexActor_C">();
	}
	static class ABP_VortexActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VortexActor_C>();
	}
};
static_assert(alignof(ABP_VortexActor_C) == 0x000008, "Wrong alignment on ABP_VortexActor_C");
static_assert(sizeof(ABP_VortexActor_C) == 0x000860, "Wrong size on ABP_VortexActor_C");
static_assert(offsetof(ABP_VortexActor_C, UberGraphFrame) == 0x000838, "Member 'ABP_VortexActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VortexActor_C, Ak) == 0x000840, "Member 'ABP_VortexActor_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_VortexActor_C, VortexHitBox) == 0x000848, "Member 'ABP_VortexActor_C::VortexHitBox' has a wrong offset!");
static_assert(offsetof(ABP_VortexActor_C, DefaultSceneRoot) == 0x000850, "Member 'ABP_VortexActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VortexActor_C, SizeAfterPlacement) == 0x000858, "Member 'ABP_VortexActor_C::SizeAfterPlacement' has a wrong offset!");

}

