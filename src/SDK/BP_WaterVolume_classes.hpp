#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WaterVolume

#include "Basic.hpp"

#include "BP_VfxBase_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WaterVolume.BP_WaterVolume_C
// 0x00F0 (0x0320 - 0x0230)
class ABP_WaterVolume_C final : public ABP_VfxBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   TranslucencyBlocker;                               // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   UnderWaterPlane;                                   // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Icon;                                              // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMeshTemplate_for_FlowingWaters;              // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTriggerBoxComponent*                   TriggerBox;                                        // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Water_VerticalPlane;                               // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Water_HorizontalPlane;                             // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SCALE_X_WaterWidth;                                // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SCALE_Y_WaterCameraDistance;                       // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SCALE_Z_WaterVerticalDepth;                        // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SWITCH_WaterFront;                                 // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SWITCH_WaterSurfacePlane;                          // 0x027D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27E[0x2];                                      // 0x027E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      MATERIAL_WaterSurface;                             // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Y_SORT_Priority_WaterSurface;                      // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Y_SORT_Priority_WaterFront;                        // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MATERIAL_WaterFront;                               // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Custom_WaterSurfaceMesh;                           // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Downstream_WaterRing_Drift_0_100_;                 // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0xC];                                      // 0x02A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Custom_WaterSurfaceTransform;                      // 0x02B0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class UClass*                                 WaterRingAbilityClass;                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterLevel;                                        // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SWITCH_UnderWaterPlane;                            // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OFFSET_UnderWaterPlane;                            // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      MATERIAL_UnderWaterPlane;                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableTranslucencyBlocker;                         // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TranslucencyBlockerOffset;                         // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempBugfixLoc;                                     // 0x0308(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_WaterVolume(int32 EntryPoint);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void ToggleWaterRing(class AActor* TargetActor, bool On, class UAbilityBase** Ability);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WaterVolume_C">();
	}
	static class ABP_WaterVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WaterVolume_C>();
	}
};
static_assert(alignof(ABP_WaterVolume_C) == 0x000010, "Wrong alignment on ABP_WaterVolume_C");
static_assert(sizeof(ABP_WaterVolume_C) == 0x000320, "Wrong size on ABP_WaterVolume_C");
static_assert(offsetof(ABP_WaterVolume_C, UberGraphFrame) == 0x000230, "Member 'ABP_WaterVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, TranslucencyBlocker) == 0x000238, "Member 'ABP_WaterVolume_C::TranslucencyBlocker' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, UnderWaterPlane) == 0x000240, "Member 'ABP_WaterVolume_C::UnderWaterPlane' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, Icon) == 0x000248, "Member 'ABP_WaterVolume_C::Icon' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, StaticMeshTemplate_for_FlowingWaters) == 0x000250, "Member 'ABP_WaterVolume_C::StaticMeshTemplate_for_FlowingWaters' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, TriggerBox) == 0x000258, "Member 'ABP_WaterVolume_C::TriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, Water_VerticalPlane) == 0x000260, "Member 'ABP_WaterVolume_C::Water_VerticalPlane' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, Water_HorizontalPlane) == 0x000268, "Member 'ABP_WaterVolume_C::Water_HorizontalPlane' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, SCALE_X_WaterWidth) == 0x000270, "Member 'ABP_WaterVolume_C::SCALE_X_WaterWidth' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, SCALE_Y_WaterCameraDistance) == 0x000274, "Member 'ABP_WaterVolume_C::SCALE_Y_WaterCameraDistance' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, SCALE_Z_WaterVerticalDepth) == 0x000278, "Member 'ABP_WaterVolume_C::SCALE_Z_WaterVerticalDepth' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, SWITCH_WaterFront) == 0x00027C, "Member 'ABP_WaterVolume_C::SWITCH_WaterFront' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, SWITCH_WaterSurfacePlane) == 0x00027D, "Member 'ABP_WaterVolume_C::SWITCH_WaterSurfacePlane' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, MATERIAL_WaterSurface) == 0x000280, "Member 'ABP_WaterVolume_C::MATERIAL_WaterSurface' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, Y_SORT_Priority_WaterSurface) == 0x000288, "Member 'ABP_WaterVolume_C::Y_SORT_Priority_WaterSurface' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, Y_SORT_Priority_WaterFront) == 0x00028C, "Member 'ABP_WaterVolume_C::Y_SORT_Priority_WaterFront' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, MATERIAL_WaterFront) == 0x000290, "Member 'ABP_WaterVolume_C::MATERIAL_WaterFront' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, Custom_WaterSurfaceMesh) == 0x000298, "Member 'ABP_WaterVolume_C::Custom_WaterSurfaceMesh' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, Downstream_WaterRing_Drift_0_100_) == 0x0002A0, "Member 'ABP_WaterVolume_C::Downstream_WaterRing_Drift_0_100_' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, Custom_WaterSurfaceTransform) == 0x0002B0, "Member 'ABP_WaterVolume_C::Custom_WaterSurfaceTransform' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, WaterRingAbilityClass) == 0x0002E0, "Member 'ABP_WaterVolume_C::WaterRingAbilityClass' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, WaterLevel) == 0x0002E8, "Member 'ABP_WaterVolume_C::WaterLevel' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, SWITCH_UnderWaterPlane) == 0x0002EC, "Member 'ABP_WaterVolume_C::SWITCH_UnderWaterPlane' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, OFFSET_UnderWaterPlane) == 0x0002F0, "Member 'ABP_WaterVolume_C::OFFSET_UnderWaterPlane' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, MATERIAL_UnderWaterPlane) == 0x0002F8, "Member 'ABP_WaterVolume_C::MATERIAL_UnderWaterPlane' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, EnableTranslucencyBlocker) == 0x000300, "Member 'ABP_WaterVolume_C::EnableTranslucencyBlocker' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, TranslucencyBlockerOffset) == 0x000304, "Member 'ABP_WaterVolume_C::TranslucencyBlockerOffset' has a wrong offset!");
static_assert(offsetof(ABP_WaterVolume_C, TempBugfixLoc) == 0x000308, "Member 'ABP_WaterVolume_C::TempBugfixLoc' has a wrong offset!");

}

