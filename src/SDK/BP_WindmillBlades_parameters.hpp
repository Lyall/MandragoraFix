#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WindmillBlades

#include "Basic.hpp"

#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_WindmillBlades.BP_WindmillBlades_C.ExecuteUbergraph_BP_WindmillBlades
// 0x0030 (0x0030 - 0x0000)
struct BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_OtherActor;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHeroBase*                              K2Node_DynamicCast_AsHero_Base;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades) == 0x000008, "Wrong alignment on BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades");
static_assert(sizeof(BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades) == 0x000030, "Wrong size on BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades");
static_assert(offsetof(BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades, EntryPoint) == 0x000000, "Member 'BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades, Temp_delegate_Variable) == 0x000004, "Member 'BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades, K2Node_Event_OtherActor) == 0x000018, "Member 'BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades::K2Node_Event_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades, K2Node_DynamicCast_AsHero_Base) == 0x000020, "Member 'BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades::K2Node_DynamicCast_AsHero_Base' has a wrong offset!");
static_assert(offsetof(BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades, CallFunc_PostEvent_ReturnValue) == 0x00002C, "Member 'BP_WindmillBlades_C_ExecuteUbergraph_BP_WindmillBlades::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function BP_WindmillBlades.BP_WindmillBlades_C.ReceiveActorBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct BP_WindmillBlades_C_ReceiveActorBeginOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WindmillBlades_C_ReceiveActorBeginOverlap) == 0x000008, "Wrong alignment on BP_WindmillBlades_C_ReceiveActorBeginOverlap");
static_assert(sizeof(BP_WindmillBlades_C_ReceiveActorBeginOverlap) == 0x000008, "Wrong size on BP_WindmillBlades_C_ReceiveActorBeginOverlap");
static_assert(offsetof(BP_WindmillBlades_C_ReceiveActorBeginOverlap, OtherActor) == 0x000000, "Member 'BP_WindmillBlades_C_ReceiveActorBeginOverlap::OtherActor' has a wrong offset!");

// Function BP_WindmillBlades.BP_WindmillBlades_C.UserConstructionScript
// 0x0001 (0x0001 - 0x0000)
struct BP_WindmillBlades_C_UserConstructionScript final
{
public:
	bool                                          HasOverlapSound;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WindmillBlades_C_UserConstructionScript) == 0x000001, "Wrong alignment on BP_WindmillBlades_C_UserConstructionScript");
static_assert(sizeof(BP_WindmillBlades_C_UserConstructionScript) == 0x000001, "Wrong size on BP_WindmillBlades_C_UserConstructionScript");
static_assert(offsetof(BP_WindmillBlades_C_UserConstructionScript, HasOverlapSound) == 0x000000, "Member 'BP_WindmillBlades_C_UserConstructionScript::HasOverlapSound' has a wrong offset!");

}

