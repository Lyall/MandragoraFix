#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WitchLantern_0

#include "Basic.hpp"

#include "man_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_WitchLantern.BP_WitchLantern_C.ExecuteUbergraph_BP_WitchLantern
// 0x00F8 (0x00F8 - 0x0000)
struct BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration_1;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_AnimDuration;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimPlaybackSpeed_ReturnValue_1;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillTreeNodeState                           K2Node_Event_SkillTreeNodeState;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Name;                                 // 0x0038(0x0018)(ConstParm)
	class FText                                   K2Node_Event_Description;                          // 0x0050(0x0018)(ConstParm)
	class FText                                   K2Node_Event_CostText;                             // 0x0068(0x0018)(ConstParm)
	class FText                                   K2Node_Event_WarningText;                          // 0x0080(0x0018)(ConstParm)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHeroProperty                                 K2Node_Event_PropertyType;                         // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B[0x1];                                       // 0x009B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Value;                                // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RoundedFloatValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_RoundedIntValue;                      // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate;                             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetCurrencyText_ReturnValue;              // 0x00B8(0x0018)()
	class UInteractButtonUserWidget*              K2Node_Event_InteractButtonUserWidget;             // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetCurrencyText_ReturnValue_1;            // 0x00D8(0x0018)()
	EInputDisplay                                 K2Node_Event_InInputDisplay;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 K2Node_Event_InControlDisplay;                     // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern) == 0x000008, "Wrong alignment on BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern");
static_assert(sizeof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern) == 0x0000F8, "Wrong size on BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, EntryPoint) == 0x000000, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, Temp_float_Variable) == 0x000004, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, Temp_float_Variable_1) == 0x000008, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_AnimDuration_1) == 0x00000C, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_AnimDuration_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, CallFunc_GetAnimPlaybackSpeed_ReturnValue) == 0x000010, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::CallFunc_GetAnimPlaybackSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_AnimDuration) == 0x000014, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_AnimDuration' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, CallFunc_GetAnimPlaybackSpeed_ReturnValue_1) == 0x000020, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::CallFunc_GetAnimPlaybackSpeed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, CallFunc_PlayAnimation_ReturnValue_1) == 0x000028, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_SkillTreeNodeState) == 0x000030, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_SkillTreeNodeState' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_Name) == 0x000038, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_Description) == 0x000050, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_Description' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_CostText) == 0x000068, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_CostText' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_WarningText) == 0x000080, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_WarningText' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, CallFunc_TextIsEmpty_ReturnValue) == 0x000098, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, Temp_bool_Variable) == 0x000099, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_PropertyType) == 0x00009A, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_PropertyType' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_Value) == 0x00009C, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_RoundedFloatValue) == 0x0000A0, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_RoundedIntValue) == 0x0000A4, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_bAnimate) == 0x0000A8, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Select_Default) == 0x0000AC, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_IsDesignTime) == 0x0000B0, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, CallFunc_GetCurrencyText_ReturnValue) == 0x0000B8, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::CallFunc_GetCurrencyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_InteractButtonUserWidget) == 0x0000D0, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_InteractButtonUserWidget' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, CallFunc_GetCurrencyText_ReturnValue_1) == 0x0000D8, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::CallFunc_GetCurrencyText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_InInputDisplay) == 0x0000F0, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern, K2Node_Event_InControlDisplay) == 0x0000F1, "Member 'BP_WitchLantern_C_ExecuteUbergraph_BP_WitchLantern::K2Node_Event_InControlDisplay' has a wrong offset!");

// Function BP_WitchLantern.BP_WitchLantern_C.OnSetInputDisplay
// 0x0002 (0x0002 - 0x0000)
struct BP_WitchLantern_C_OnSetInputDisplay final
{
public:
	EInputDisplay                                 InInputDisplay;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 InControlDisplay;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WitchLantern_C_OnSetInputDisplay) == 0x000001, "Wrong alignment on BP_WitchLantern_C_OnSetInputDisplay");
static_assert(sizeof(BP_WitchLantern_C_OnSetInputDisplay) == 0x000002, "Wrong size on BP_WitchLantern_C_OnSetInputDisplay");
static_assert(offsetof(BP_WitchLantern_C_OnSetInputDisplay, InInputDisplay) == 0x000000, "Member 'BP_WitchLantern_C_OnSetInputDisplay::InInputDisplay' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_OnSetInputDisplay, InControlDisplay) == 0x000001, "Member 'BP_WitchLantern_C_OnSetInputDisplay::InControlDisplay' has a wrong offset!");

// Function BP_WitchLantern.BP_WitchLantern_C.OnErrorHiglight
// 0x0008 (0x0008 - 0x0000)
struct BP_WitchLantern_C_OnErrorHiglight final
{
public:
	class UInteractButtonUserWidget*              InteractButtonUserWidget;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WitchLantern_C_OnErrorHiglight) == 0x000008, "Wrong alignment on BP_WitchLantern_C_OnErrorHiglight");
static_assert(sizeof(BP_WitchLantern_C_OnErrorHiglight) == 0x000008, "Wrong size on BP_WitchLantern_C_OnErrorHiglight");
static_assert(offsetof(BP_WitchLantern_C_OnErrorHiglight, InteractButtonUserWidget) == 0x000000, "Member 'BP_WitchLantern_C_OnErrorHiglight::InteractButtonUserWidget' has a wrong offset!");

// Function BP_WitchLantern.BP_WitchLantern_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_WitchLantern_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WitchLantern_C_PreConstruct) == 0x000001, "Wrong alignment on BP_WitchLantern_C_PreConstruct");
static_assert(sizeof(BP_WitchLantern_C_PreConstruct) == 0x000001, "Wrong size on BP_WitchLantern_C_PreConstruct");
static_assert(offsetof(BP_WitchLantern_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_WitchLantern_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_WitchLantern.BP_WitchLantern_C.OnPropertyChanged
// 0x0014 (0x0014 - 0x0000)
struct BP_WitchLantern_C_OnPropertyChanged final
{
public:
	EHeroProperty                                 PropertyType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundedFloatValue;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundedIntValue;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAnimate;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WitchLantern_C_OnPropertyChanged) == 0x000004, "Wrong alignment on BP_WitchLantern_C_OnPropertyChanged");
static_assert(sizeof(BP_WitchLantern_C_OnPropertyChanged) == 0x000014, "Wrong size on BP_WitchLantern_C_OnPropertyChanged");
static_assert(offsetof(BP_WitchLantern_C_OnPropertyChanged, PropertyType) == 0x000000, "Member 'BP_WitchLantern_C_OnPropertyChanged::PropertyType' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_OnPropertyChanged, Value) == 0x000004, "Member 'BP_WitchLantern_C_OnPropertyChanged::Value' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_OnPropertyChanged, RoundedFloatValue) == 0x000008, "Member 'BP_WitchLantern_C_OnPropertyChanged::RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_OnPropertyChanged, RoundedIntValue) == 0x00000C, "Member 'BP_WitchLantern_C_OnPropertyChanged::RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_OnPropertyChanged, bAnimate) == 0x000010, "Member 'BP_WitchLantern_C_OnPropertyChanged::bAnimate' has a wrong offset!");

// Function BP_WitchLantern.BP_WitchLantern_C.OnSetTooltipData
// 0x0068 (0x0068 - 0x0000)
struct BP_WitchLantern_C_OnSetTooltipData final
{
public:
	ESkillTreeNodeState                           SkillTreeNodeState;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name_0;                                            // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   Description;                                       // 0x0020(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   CostText;                                          // 0x0038(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   WarningText;                                       // 0x0050(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_WitchLantern_C_OnSetTooltipData) == 0x000008, "Wrong alignment on BP_WitchLantern_C_OnSetTooltipData");
static_assert(sizeof(BP_WitchLantern_C_OnSetTooltipData) == 0x000068, "Wrong size on BP_WitchLantern_C_OnSetTooltipData");
static_assert(offsetof(BP_WitchLantern_C_OnSetTooltipData, SkillTreeNodeState) == 0x000000, "Member 'BP_WitchLantern_C_OnSetTooltipData::SkillTreeNodeState' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_OnSetTooltipData, Name_0) == 0x000008, "Member 'BP_WitchLantern_C_OnSetTooltipData::Name_0' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_OnSetTooltipData, Description) == 0x000020, "Member 'BP_WitchLantern_C_OnSetTooltipData::Description' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_OnSetTooltipData, CostText) == 0x000038, "Member 'BP_WitchLantern_C_OnSetTooltipData::CostText' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_OnSetTooltipData, WarningText) == 0x000050, "Member 'BP_WitchLantern_C_OnSetTooltipData::WarningText' has a wrong offset!");

// Function BP_WitchLantern.BP_WitchLantern_C.OnHide
// 0x0004 (0x0004 - 0x0000)
struct BP_WitchLantern_C_OnHide final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WitchLantern_C_OnHide) == 0x000004, "Wrong alignment on BP_WitchLantern_C_OnHide");
static_assert(sizeof(BP_WitchLantern_C_OnHide) == 0x000004, "Wrong size on BP_WitchLantern_C_OnHide");
static_assert(offsetof(BP_WitchLantern_C_OnHide, AnimDuration) == 0x000000, "Member 'BP_WitchLantern_C_OnHide::AnimDuration' has a wrong offset!");

// Function BP_WitchLantern.BP_WitchLantern_C.OnShow
// 0x0004 (0x0004 - 0x0000)
struct BP_WitchLantern_C_OnShow final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WitchLantern_C_OnShow) == 0x000004, "Wrong alignment on BP_WitchLantern_C_OnShow");
static_assert(sizeof(BP_WitchLantern_C_OnShow) == 0x000004, "Wrong size on BP_WitchLantern_C_OnShow");
static_assert(offsetof(BP_WitchLantern_C_OnShow, AnimDuration) == 0x000000, "Member 'BP_WitchLantern_C_OnShow::AnimDuration' has a wrong offset!");

// Function BP_WitchLantern.BP_WitchLantern_C.BtnHotkeyBClicked
// 0x0001 (0x0001 - 0x0000)
struct BP_WitchLantern_C_BtnHotkeyBClicked final
{
public:
	bool                                          OpenPauseMenu;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WitchLantern_C_BtnHotkeyBClicked) == 0x000001, "Wrong alignment on BP_WitchLantern_C_BtnHotkeyBClicked");
static_assert(sizeof(BP_WitchLantern_C_BtnHotkeyBClicked) == 0x000001, "Wrong size on BP_WitchLantern_C_BtnHotkeyBClicked");
static_assert(offsetof(BP_WitchLantern_C_BtnHotkeyBClicked, OpenPauseMenu) == 0x000000, "Member 'BP_WitchLantern_C_BtnHotkeyBClicked::OpenPauseMenu' has a wrong offset!");

// Function BP_WitchLantern.BP_WitchLantern_C.BP_PropertyChanged
// 0x0014 (0x0014 - 0x0000)
struct BP_WitchLantern_C_BP_PropertyChanged final
{
public:
	EHeroProperty                                 PropertyType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundedFloatValue;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundedIntValue;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WitchLantern_C_BP_PropertyChanged) == 0x000004, "Wrong alignment on BP_WitchLantern_C_BP_PropertyChanged");
static_assert(sizeof(BP_WitchLantern_C_BP_PropertyChanged) == 0x000014, "Wrong size on BP_WitchLantern_C_BP_PropertyChanged");
static_assert(offsetof(BP_WitchLantern_C_BP_PropertyChanged, PropertyType) == 0x000000, "Member 'BP_WitchLantern_C_BP_PropertyChanged::PropertyType' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_BP_PropertyChanged, Value) == 0x000004, "Member 'BP_WitchLantern_C_BP_PropertyChanged::Value' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_BP_PropertyChanged, RoundedFloatValue) == 0x000008, "Member 'BP_WitchLantern_C_BP_PropertyChanged::RoundedFloatValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_BP_PropertyChanged, RoundedIntValue) == 0x00000C, "Member 'BP_WitchLantern_C_BP_PropertyChanged::RoundedIntValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_BP_PropertyChanged, Animate) == 0x000010, "Member 'BP_WitchLantern_C_BP_PropertyChanged::Animate' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_BP_PropertyChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'BP_WitchLantern_C_BP_PropertyChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_WitchLantern.BP_WitchLantern_C.TooltipErrorHighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_WitchLantern_C_TooltipErrorHighlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WitchLantern_C_TooltipErrorHighlight) == 0x000008, "Wrong alignment on BP_WitchLantern_C_TooltipErrorHighlight");
static_assert(sizeof(BP_WitchLantern_C_TooltipErrorHighlight) == 0x000008, "Wrong size on BP_WitchLantern_C_TooltipErrorHighlight");
static_assert(offsetof(BP_WitchLantern_C_TooltipErrorHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_WitchLantern_C_TooltipErrorHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BP_WitchLantern.BP_WitchLantern_C.SetBtnCloseVisibility
// 0x000B (0x000B - 0x0000)
struct BP_WitchLantern_C_SetBtnCloseVisibility final
{
public:
	EInputDisplay                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDisplay                                 CallFunc_GetInputDisplay_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WitchLantern_C_SetBtnCloseVisibility) == 0x000001, "Wrong alignment on BP_WitchLantern_C_SetBtnCloseVisibility");
static_assert(sizeof(BP_WitchLantern_C_SetBtnCloseVisibility) == 0x00000B, "Wrong size on BP_WitchLantern_C_SetBtnCloseVisibility");
static_assert(offsetof(BP_WitchLantern_C_SetBtnCloseVisibility, Temp_byte_Variable) == 0x000000, "Member 'BP_WitchLantern_C_SetBtnCloseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_SetBtnCloseVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'BP_WitchLantern_C_SetBtnCloseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_SetBtnCloseVisibility, Temp_byte_Variable_2) == 0x000002, "Member 'BP_WitchLantern_C_SetBtnCloseVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_SetBtnCloseVisibility, Temp_byte_Variable_3) == 0x000003, "Member 'BP_WitchLantern_C_SetBtnCloseVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_SetBtnCloseVisibility, Temp_byte_Variable_4) == 0x000004, "Member 'BP_WitchLantern_C_SetBtnCloseVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_SetBtnCloseVisibility, Temp_byte_Variable_5) == 0x000005, "Member 'BP_WitchLantern_C_SetBtnCloseVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_SetBtnCloseVisibility, Temp_byte_Variable_6) == 0x000006, "Member 'BP_WitchLantern_C_SetBtnCloseVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_SetBtnCloseVisibility, Temp_byte_Variable_7) == 0x000007, "Member 'BP_WitchLantern_C_SetBtnCloseVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_SetBtnCloseVisibility, Temp_byte_Variable_8) == 0x000008, "Member 'BP_WitchLantern_C_SetBtnCloseVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_SetBtnCloseVisibility, CallFunc_GetInputDisplay_ReturnValue) == 0x000009, "Member 'BP_WitchLantern_C_SetBtnCloseVisibility::CallFunc_GetInputDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_C_SetBtnCloseVisibility, K2Node_Select_Default) == 0x00000A, "Member 'BP_WitchLantern_C_SetBtnCloseVisibility::K2Node_Select_Default' has a wrong offset!");

}

