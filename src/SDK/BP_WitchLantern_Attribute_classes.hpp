#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WitchLantern_Attribute

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "man_structs.hpp"
#include "man_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_WitchLantern_Attribute.BP_WitchLantern_Attribute_C
// 0x00D0 (0x03B8 - 0x02E8)
class UBP_WitchLantern_Attribute_C final : public UAttributeSlotUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextBlock*                             ActualValueText;                                   // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             CurrentValueText;                                  // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             NewValueText;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UManRichTextBlock*                      RichCaption;                                       // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ValueArrow;                                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ValueSlash;                                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsNewValueHighlighted;                             // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float CurrentValue, float NewValue)> ValueChange;                                       // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsCurrentValueHighlighted;                         // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EEquipLoadIndicator, struct FSlateColor> AttributeColors;                                   // 0x0340(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         FontSize;                                          // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           NewValueNormalColor;                               // 0x0394(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           NewValuHighlightColor;                             // 0x03A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_WitchLantern_Attribute(int32 EntryPoint);
	void OnCultureChanged();
	void OnSetActualValue(float Value);
	void OnSetShowCurrentValue(bool bShow);
	void OnSetNewValue(float Value);
	void OnSetCurrentValue(float Value);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void BP_SetShowCurrentValue(bool Show);
	void SetAttributeName();
	void SetNewValueHighlight(bool Highlighted);
	void SetValueColors();
	void SetCurrentValueHighlight();
	void BP_SetActualValue(float Value);
	void SetFontSize(int32 InFontSize);
	void BP_SetCurrentValue(float InValue);
	void BP_SetNewValue(float InValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WitchLantern_Attribute_C">();
	}
	static class UBP_WitchLantern_Attribute_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_WitchLantern_Attribute_C>();
	}
};
static_assert(alignof(UBP_WitchLantern_Attribute_C) == 0x000008, "Wrong alignment on UBP_WitchLantern_Attribute_C");
static_assert(sizeof(UBP_WitchLantern_Attribute_C) == 0x0003B8, "Wrong size on UBP_WitchLantern_Attribute_C");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, UberGraphFrame) == 0x0002E8, "Member 'UBP_WitchLantern_Attribute_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, ActualValueText) == 0x0002F0, "Member 'UBP_WitchLantern_Attribute_C::ActualValueText' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, CurrentValueText) == 0x0002F8, "Member 'UBP_WitchLantern_Attribute_C::CurrentValueText' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, NewValueText) == 0x000300, "Member 'UBP_WitchLantern_Attribute_C::NewValueText' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, RichCaption) == 0x000308, "Member 'UBP_WitchLantern_Attribute_C::RichCaption' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, ValueArrow) == 0x000310, "Member 'UBP_WitchLantern_Attribute_C::ValueArrow' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, ValueSlash) == 0x000318, "Member 'UBP_WitchLantern_Attribute_C::ValueSlash' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, IsNewValueHighlighted) == 0x000320, "Member 'UBP_WitchLantern_Attribute_C::IsNewValueHighlighted' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, ValueChange) == 0x000328, "Member 'UBP_WitchLantern_Attribute_C::ValueChange' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, IsCurrentValueHighlighted) == 0x000338, "Member 'UBP_WitchLantern_Attribute_C::IsCurrentValueHighlighted' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, AttributeColors) == 0x000340, "Member 'UBP_WitchLantern_Attribute_C::AttributeColors' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, FontSize) == 0x000390, "Member 'UBP_WitchLantern_Attribute_C::FontSize' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, NewValueNormalColor) == 0x000394, "Member 'UBP_WitchLantern_Attribute_C::NewValueNormalColor' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Attribute_C, NewValuHighlightColor) == 0x0003A4, "Member 'UBP_WitchLantern_Attribute_C::NewValuHighlightColor' has a wrong offset!");

}

