#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WitchLantern_Node

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "man_structs.hpp"
#include "man_classes.hpp"
#include "PrimalSkillTreePlugin_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_WitchLantern_Node.BP_WitchLantern_Node_C
// 0x0158 (0x0420 - 0x02C8)
class UBP_WitchLantern_Node_C final : public UWitchLanternNodeUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       LearnEndAnim;                                      // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LearnProgressAnim;                                 // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       StartLearnAnim;                                    // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FocusedAnim;                                       // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Bg;                                                // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                ButtonFrame;                                       // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame;                                             // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame_Highlight;                                   // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HoldVFX_1;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HoldVFX_2;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IconImage;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_LongPressIndicator_C*               LongPressIndicator;                                // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_32;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_1;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_2;                                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_3;                                       // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_4;                                       // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_5;                                       // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnlockVFX_6;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         Cost;                                              // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPrimalSkillTreeNodeInfo               NodeInfo;                                          // 0x0370(0x0028)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UTexture2D*                             IconTexture;                                       // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EManSkillTreeNodeType                         Type;                                              // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EManSkillTreeNodeState                        State;                                             // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3A2[0x6];                                      // 0x03A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             BgTexture;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameUnavailableTexture;                           // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameAvailableTexture;                             // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             FrameUnlockedTexture;                              // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstance*                      SelectionMaterialInstance;                         // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             SelectionTexture;                                  // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           TintColor_Available;                               // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           TintColor_Unlocked;                                // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           TintColor_Unavailable;                             // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         HighlightPadding;                                  // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Contrast;                                          // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Contrast_Unavailable;                              // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Brightness_Unavailable;                            // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Opacity_Unavailable;                               // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_WitchLantern_Node(int32 EntryPoint);
	void OnLearnFinished();
	void OnLearnStop();
	void OnLearnStart();
	void OnSetState();
	void OnSetNode(const class FText& NodeName, class UTexture2D* NodeIcon);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void OnUnfocused(bool bAnimate);
	void OnFocused(bool bAnimate);
	void SetIcon(class UTexture2D* InIcon);
	void SetupTooltip(const class FText& InName, const class FText& InDescription, int32 InCost);
	void UpdateTextures(EManSkillTreeNodeType InType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WitchLantern_Node_C">();
	}
	static class UBP_WitchLantern_Node_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_WitchLantern_Node_C>();
	}
};
static_assert(alignof(UBP_WitchLantern_Node_C) == 0x000008, "Wrong alignment on UBP_WitchLantern_Node_C");
static_assert(sizeof(UBP_WitchLantern_Node_C) == 0x000420, "Wrong size on UBP_WitchLantern_Node_C");
static_assert(offsetof(UBP_WitchLantern_Node_C, UberGraphFrame) == 0x0002C8, "Member 'UBP_WitchLantern_Node_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, LearnEndAnim) == 0x0002D0, "Member 'UBP_WitchLantern_Node_C::LearnEndAnim' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, LearnProgressAnim) == 0x0002D8, "Member 'UBP_WitchLantern_Node_C::LearnProgressAnim' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, StartLearnAnim) == 0x0002E0, "Member 'UBP_WitchLantern_Node_C::StartLearnAnim' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, FocusedAnim) == 0x0002E8, "Member 'UBP_WitchLantern_Node_C::FocusedAnim' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, Bg) == 0x0002F0, "Member 'UBP_WitchLantern_Node_C::Bg' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, ButtonFrame) == 0x0002F8, "Member 'UBP_WitchLantern_Node_C::ButtonFrame' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, Frame) == 0x000300, "Member 'UBP_WitchLantern_Node_C::Frame' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, Frame_Highlight) == 0x000308, "Member 'UBP_WitchLantern_Node_C::Frame_Highlight' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, HoldVFX_1) == 0x000310, "Member 'UBP_WitchLantern_Node_C::HoldVFX_1' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, HoldVFX_2) == 0x000318, "Member 'UBP_WitchLantern_Node_C::HoldVFX_2' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, IconImage) == 0x000320, "Member 'UBP_WitchLantern_Node_C::IconImage' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, LongPressIndicator) == 0x000328, "Member 'UBP_WitchLantern_Node_C::LongPressIndicator' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, Overlay_32) == 0x000330, "Member 'UBP_WitchLantern_Node_C::Overlay_32' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, UnlockVFX_1) == 0x000338, "Member 'UBP_WitchLantern_Node_C::UnlockVFX_1' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, UnlockVFX_2) == 0x000340, "Member 'UBP_WitchLantern_Node_C::UnlockVFX_2' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, UnlockVFX_3) == 0x000348, "Member 'UBP_WitchLantern_Node_C::UnlockVFX_3' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, UnlockVFX_4) == 0x000350, "Member 'UBP_WitchLantern_Node_C::UnlockVFX_4' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, UnlockVFX_5) == 0x000358, "Member 'UBP_WitchLantern_Node_C::UnlockVFX_5' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, UnlockVFX_6) == 0x000360, "Member 'UBP_WitchLantern_Node_C::UnlockVFX_6' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, Cost) == 0x000368, "Member 'UBP_WitchLantern_Node_C::Cost' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, NodeInfo) == 0x000370, "Member 'UBP_WitchLantern_Node_C::NodeInfo' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, IconTexture) == 0x000398, "Member 'UBP_WitchLantern_Node_C::IconTexture' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, Type) == 0x0003A0, "Member 'UBP_WitchLantern_Node_C::Type' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, State) == 0x0003A1, "Member 'UBP_WitchLantern_Node_C::State' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, BgTexture) == 0x0003A8, "Member 'UBP_WitchLantern_Node_C::BgTexture' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, FrameUnavailableTexture) == 0x0003B0, "Member 'UBP_WitchLantern_Node_C::FrameUnavailableTexture' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, FrameAvailableTexture) == 0x0003B8, "Member 'UBP_WitchLantern_Node_C::FrameAvailableTexture' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, FrameUnlockedTexture) == 0x0003C0, "Member 'UBP_WitchLantern_Node_C::FrameUnlockedTexture' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, SelectionMaterialInstance) == 0x0003C8, "Member 'UBP_WitchLantern_Node_C::SelectionMaterialInstance' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, SelectionTexture) == 0x0003D0, "Member 'UBP_WitchLantern_Node_C::SelectionTexture' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, TintColor_Available) == 0x0003D8, "Member 'UBP_WitchLantern_Node_C::TintColor_Available' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, TintColor_Unlocked) == 0x0003E8, "Member 'UBP_WitchLantern_Node_C::TintColor_Unlocked' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, TintColor_Unavailable) == 0x0003F8, "Member 'UBP_WitchLantern_Node_C::TintColor_Unavailable' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, HighlightPadding) == 0x000408, "Member 'UBP_WitchLantern_Node_C::HighlightPadding' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, Contrast) == 0x00040C, "Member 'UBP_WitchLantern_Node_C::Contrast' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, Contrast_Unavailable) == 0x000410, "Member 'UBP_WitchLantern_Node_C::Contrast_Unavailable' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, Brightness_Unavailable) == 0x000414, "Member 'UBP_WitchLantern_Node_C::Brightness_Unavailable' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Node_C, Opacity_Unavailable) == 0x000418, "Member 'UBP_WitchLantern_Node_C::Opacity_Unavailable' has a wrong offset!");

}

