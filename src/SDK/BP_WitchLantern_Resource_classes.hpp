#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WitchLantern_Resource

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "man_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_WitchLantern_Resource.BP_WitchLantern_Resource_C
// 0x00C0 (0x0328 - 0x0268)
class UBP_WitchLantern_Resource_C final : public UWitchLanternResourceUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0268(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ErrorAnim;                                         // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             CurrentValueText;                                  // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             NewValueText;                                      // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             PlusMinusText;                                     // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UManRichTextBlock*                      RichCaption;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Unit1;                                             // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Unit2;                                             // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ValueArrow;                                        // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          ShowCurrentValue;                                  // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AttributeName;                                     // 0x02B8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	float                                         CurrentValue;                                      // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         NewValue;                                          // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsNewValueHighlighted;                             // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Unit;                                              // 0x02E0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	TMulticastInlineDelegate<void(float CurrentValue, float NewValue)> ValueChange;                                       // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FText                                   PlusMinus;                                         // 0x0308(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          IsCurrentValueHighlighted;                         // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          SmallSize;                                         // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          UseEssenceCost;                                    // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotEnoughResource;                                 // 0x0323(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_WitchLantern_Resource(int32 EntryPoint);
	void OnSetValueColors(int32 EssenceCost);
	void PreConstruct(bool IsDesignTime);
	void SetCurrentValue(float Value);
	void SetNewValue(float Value);
	void SetShowCurrentValue(bool Show);
	void SetAttributeName(const class FText& Caption);
	void SetNewValueHighlight(bool Highlighted);
	void SetUnit(const class FText& NewUnit);
	void SetValueColors(int32 CostOverride);
	void SetCurrentValueHighlight();
	void SetSize(bool InSmallSize);
	void SetPlusMinus(const class FText& InPlusMinus);
	void ErrorHighlight();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WitchLantern_Resource_C">();
	}
	static class UBP_WitchLantern_Resource_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_WitchLantern_Resource_C>();
	}
};
static_assert(alignof(UBP_WitchLantern_Resource_C) == 0x000008, "Wrong alignment on UBP_WitchLantern_Resource_C");
static_assert(sizeof(UBP_WitchLantern_Resource_C) == 0x000328, "Wrong size on UBP_WitchLantern_Resource_C");
static_assert(offsetof(UBP_WitchLantern_Resource_C, UberGraphFrame) == 0x000268, "Member 'UBP_WitchLantern_Resource_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, ErrorAnim) == 0x000270, "Member 'UBP_WitchLantern_Resource_C::ErrorAnim' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, CurrentValueText) == 0x000278, "Member 'UBP_WitchLantern_Resource_C::CurrentValueText' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, NewValueText) == 0x000280, "Member 'UBP_WitchLantern_Resource_C::NewValueText' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, PlusMinusText) == 0x000288, "Member 'UBP_WitchLantern_Resource_C::PlusMinusText' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, RichCaption) == 0x000290, "Member 'UBP_WitchLantern_Resource_C::RichCaption' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, Unit1) == 0x000298, "Member 'UBP_WitchLantern_Resource_C::Unit1' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, Unit2) == 0x0002A0, "Member 'UBP_WitchLantern_Resource_C::Unit2' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, ValueArrow) == 0x0002A8, "Member 'UBP_WitchLantern_Resource_C::ValueArrow' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, ShowCurrentValue) == 0x0002B0, "Member 'UBP_WitchLantern_Resource_C::ShowCurrentValue' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, AttributeName) == 0x0002B8, "Member 'UBP_WitchLantern_Resource_C::AttributeName' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, CurrentValue) == 0x0002D0, "Member 'UBP_WitchLantern_Resource_C::CurrentValue' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, NewValue) == 0x0002D4, "Member 'UBP_WitchLantern_Resource_C::NewValue' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, IsNewValueHighlighted) == 0x0002D8, "Member 'UBP_WitchLantern_Resource_C::IsNewValueHighlighted' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, Unit) == 0x0002E0, "Member 'UBP_WitchLantern_Resource_C::Unit' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, ValueChange) == 0x0002F8, "Member 'UBP_WitchLantern_Resource_C::ValueChange' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, PlusMinus) == 0x000308, "Member 'UBP_WitchLantern_Resource_C::PlusMinus' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, IsCurrentValueHighlighted) == 0x000320, "Member 'UBP_WitchLantern_Resource_C::IsCurrentValueHighlighted' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, SmallSize) == 0x000321, "Member 'UBP_WitchLantern_Resource_C::SmallSize' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, UseEssenceCost) == 0x000322, "Member 'UBP_WitchLantern_Resource_C::UseEssenceCost' has a wrong offset!");
static_assert(offsetof(UBP_WitchLantern_Resource_C, NotEnoughResource) == 0x000323, "Member 'UBP_WitchLantern_Resource_C::NotEnoughResource' has a wrong offset!");

}

