#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WitchLantern_Resource

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.ExecuteUbergraph_BP_WitchLantern_Resource
// 0x000C (0x000C - 0x0000)
struct BP_WitchLantern_Resource_C_ExecuteUbergraph_BP_WitchLantern_Resource final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_EssenceCost;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WitchLantern_Resource_C_ExecuteUbergraph_BP_WitchLantern_Resource) == 0x000004, "Wrong alignment on BP_WitchLantern_Resource_C_ExecuteUbergraph_BP_WitchLantern_Resource");
static_assert(sizeof(BP_WitchLantern_Resource_C_ExecuteUbergraph_BP_WitchLantern_Resource) == 0x00000C, "Wrong size on BP_WitchLantern_Resource_C_ExecuteUbergraph_BP_WitchLantern_Resource");
static_assert(offsetof(BP_WitchLantern_Resource_C_ExecuteUbergraph_BP_WitchLantern_Resource, EntryPoint) == 0x000000, "Member 'BP_WitchLantern_Resource_C_ExecuteUbergraph_BP_WitchLantern_Resource::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_ExecuteUbergraph_BP_WitchLantern_Resource, K2Node_Event_EssenceCost) == 0x000004, "Member 'BP_WitchLantern_Resource_C_ExecuteUbergraph_BP_WitchLantern_Resource::K2Node_Event_EssenceCost' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_ExecuteUbergraph_BP_WitchLantern_Resource, K2Node_Event_IsDesignTime) == 0x000008, "Member 'BP_WitchLantern_Resource_C_ExecuteUbergraph_BP_WitchLantern_Resource::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.OnSetValueColors
// 0x0004 (0x0004 - 0x0000)
struct BP_WitchLantern_Resource_C_OnSetValueColors final
{
public:
	int32                                         EssenceCost;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WitchLantern_Resource_C_OnSetValueColors) == 0x000004, "Wrong alignment on BP_WitchLantern_Resource_C_OnSetValueColors");
static_assert(sizeof(BP_WitchLantern_Resource_C_OnSetValueColors) == 0x000004, "Wrong size on BP_WitchLantern_Resource_C_OnSetValueColors");
static_assert(offsetof(BP_WitchLantern_Resource_C_OnSetValueColors, EssenceCost) == 0x000000, "Member 'BP_WitchLantern_Resource_C_OnSetValueColors::EssenceCost' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_WitchLantern_Resource_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WitchLantern_Resource_C_PreConstruct) == 0x000001, "Wrong alignment on BP_WitchLantern_Resource_C_PreConstruct");
static_assert(sizeof(BP_WitchLantern_Resource_C_PreConstruct) == 0x000001, "Wrong size on BP_WitchLantern_Resource_C_PreConstruct");
static_assert(offsetof(BP_WitchLantern_Resource_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_WitchLantern_Resource_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.SetCurrentValue
// 0x0020 (0x0020 - 0x0000)
struct BP_WitchLantern_Resource_C_SetCurrentValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FloatToText_ReturnValue;                  // 0x0008(0x0018)()
};
static_assert(alignof(BP_WitchLantern_Resource_C_SetCurrentValue) == 0x000008, "Wrong alignment on BP_WitchLantern_Resource_C_SetCurrentValue");
static_assert(sizeof(BP_WitchLantern_Resource_C_SetCurrentValue) == 0x000020, "Wrong size on BP_WitchLantern_Resource_C_SetCurrentValue");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetCurrentValue, Value) == 0x000000, "Member 'BP_WitchLantern_Resource_C_SetCurrentValue::Value' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetCurrentValue, CallFunc_FloatToText_ReturnValue) == 0x000008, "Member 'BP_WitchLantern_Resource_C_SetCurrentValue::CallFunc_FloatToText_ReturnValue' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.SetNewValue
// 0x0020 (0x0020 - 0x0000)
struct BP_WitchLantern_Resource_C_SetNewValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FloatToText_ReturnValue;                  // 0x0008(0x0018)()
};
static_assert(alignof(BP_WitchLantern_Resource_C_SetNewValue) == 0x000008, "Wrong alignment on BP_WitchLantern_Resource_C_SetNewValue");
static_assert(sizeof(BP_WitchLantern_Resource_C_SetNewValue) == 0x000020, "Wrong size on BP_WitchLantern_Resource_C_SetNewValue");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetNewValue, Value) == 0x000000, "Member 'BP_WitchLantern_Resource_C_SetNewValue::Value' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetNewValue, CallFunc_FloatToText_ReturnValue) == 0x000008, "Member 'BP_WitchLantern_Resource_C_SetNewValue::CallFunc_FloatToText_ReturnValue' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.SetShowCurrentValue
// 0x0005 (0x0005 - 0x0000)
struct BP_WitchLantern_Resource_C_SetShowCurrentValue final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WitchLantern_Resource_C_SetShowCurrentValue) == 0x000001, "Wrong alignment on BP_WitchLantern_Resource_C_SetShowCurrentValue");
static_assert(sizeof(BP_WitchLantern_Resource_C_SetShowCurrentValue) == 0x000005, "Wrong size on BP_WitchLantern_Resource_C_SetShowCurrentValue");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetShowCurrentValue, Show) == 0x000000, "Member 'BP_WitchLantern_Resource_C_SetShowCurrentValue::Show' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetShowCurrentValue, Temp_bool_Variable) == 0x000001, "Member 'BP_WitchLantern_Resource_C_SetShowCurrentValue::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetShowCurrentValue, Temp_byte_Variable) == 0x000002, "Member 'BP_WitchLantern_Resource_C_SetShowCurrentValue::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetShowCurrentValue, Temp_byte_Variable_1) == 0x000003, "Member 'BP_WitchLantern_Resource_C_SetShowCurrentValue::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetShowCurrentValue, K2Node_Select_Default) == 0x000004, "Member 'BP_WitchLantern_Resource_C_SetShowCurrentValue::K2Node_Select_Default' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.SetAttributeName
// 0x0018 (0x0018 - 0x0000)
struct BP_WitchLantern_Resource_C_SetAttributeName final
{
public:
	class FText                                   Caption;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_WitchLantern_Resource_C_SetAttributeName) == 0x000008, "Wrong alignment on BP_WitchLantern_Resource_C_SetAttributeName");
static_assert(sizeof(BP_WitchLantern_Resource_C_SetAttributeName) == 0x000018, "Wrong size on BP_WitchLantern_Resource_C_SetAttributeName");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetAttributeName, Caption) == 0x000000, "Member 'BP_WitchLantern_Resource_C_SetAttributeName::Caption' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.SetNewValueHighlight
// 0x00A8 (0x00A8 - 0x0000)
struct BP_WitchLantern_Resource_C_SetNewValueHighlight final
{
public:
	bool                                          Highlighted;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0030(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x0058(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_3;                    // 0x0080(0x0028)()
};
static_assert(alignof(BP_WitchLantern_Resource_C_SetNewValueHighlight) == 0x000008, "Wrong alignment on BP_WitchLantern_Resource_C_SetNewValueHighlight");
static_assert(sizeof(BP_WitchLantern_Resource_C_SetNewValueHighlight) == 0x0000A8, "Wrong size on BP_WitchLantern_Resource_C_SetNewValueHighlight");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetNewValueHighlight, Highlighted) == 0x000000, "Member 'BP_WitchLantern_Resource_C_SetNewValueHighlight::Highlighted' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetNewValueHighlight, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'BP_WitchLantern_Resource_C_SetNewValueHighlight::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetNewValueHighlight, K2Node_MakeStruct_SlateColor_1) == 0x000030, "Member 'BP_WitchLantern_Resource_C_SetNewValueHighlight::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetNewValueHighlight, K2Node_MakeStruct_SlateColor_2) == 0x000058, "Member 'BP_WitchLantern_Resource_C_SetNewValueHighlight::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetNewValueHighlight, K2Node_MakeStruct_SlateColor_3) == 0x000080, "Member 'BP_WitchLantern_Resource_C_SetNewValueHighlight::K2Node_MakeStruct_SlateColor_3' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.SetUnit
// 0x0018 (0x0018 - 0x0000)
struct BP_WitchLantern_Resource_C_SetUnit final
{
public:
	class FText                                   NewUnit;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_WitchLantern_Resource_C_SetUnit) == 0x000008, "Wrong alignment on BP_WitchLantern_Resource_C_SetUnit");
static_assert(sizeof(BP_WitchLantern_Resource_C_SetUnit) == 0x000018, "Wrong size on BP_WitchLantern_Resource_C_SetUnit");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetUnit, NewUnit) == 0x000000, "Member 'BP_WitchLantern_Resource_C_SetUnit::NewUnit' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.SetValueColors
// 0x0118 (0x0118 - 0x0000)
struct BP_WitchLantern_Resource_C_SetValueColors final
{
public:
	int32                                         CostOverride;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0030(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x0058(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_3;                    // 0x0080(0x0028)()
	int32                                         CallFunc_GetCost_ReturnValue;                      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_4;                    // 0x00B0(0x0028)()
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_5;                    // 0x00E8(0x0028)()
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WitchLantern_Resource_C_SetValueColors) == 0x000008, "Wrong alignment on BP_WitchLantern_Resource_C_SetValueColors");
static_assert(sizeof(BP_WitchLantern_Resource_C_SetValueColors) == 0x000118, "Wrong size on BP_WitchLantern_Resource_C_SetValueColors");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, CostOverride) == 0x000000, "Member 'BP_WitchLantern_Resource_C_SetValueColors::CostOverride' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'BP_WitchLantern_Resource_C_SetValueColors::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, K2Node_MakeStruct_SlateColor_1) == 0x000030, "Member 'BP_WitchLantern_Resource_C_SetValueColors::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, K2Node_MakeStruct_SlateColor_2) == 0x000058, "Member 'BP_WitchLantern_Resource_C_SetValueColors::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, K2Node_MakeStruct_SlateColor_3) == 0x000080, "Member 'BP_WitchLantern_Resource_C_SetValueColors::K2Node_MakeStruct_SlateColor_3' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, CallFunc_GetCost_ReturnValue) == 0x0000A8, "Member 'BP_WitchLantern_Resource_C_SetValueColors::CallFunc_GetCost_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, K2Node_MakeStruct_SlateColor_4) == 0x0000B0, "Member 'BP_WitchLantern_Resource_C_SetValueColors::K2Node_MakeStruct_SlateColor_4' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, CallFunc_SelectInt_ReturnValue) == 0x0000D8, "Member 'BP_WitchLantern_Resource_C_SetValueColors::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000DC, "Member 'BP_WitchLantern_Resource_C_SetValueColors::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000E0, "Member 'BP_WitchLantern_Resource_C_SetValueColors::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, K2Node_MakeStruct_SlateColor_5) == 0x0000E8, "Member 'BP_WitchLantern_Resource_C_SetValueColors::K2Node_MakeStruct_SlateColor_5' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000110, "Member 'BP_WitchLantern_Resource_C_SetValueColors::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetValueColors, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000111, "Member 'BP_WitchLantern_Resource_C_SetValueColors::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.SetSize
// 0x00D0 (0x00D0 - 0x0000)
struct BP_WitchLantern_Resource_C_SetSize final
{
public:
	bool                                          InSmallSize;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0020(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_1;                 // 0x0078(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_WitchLantern_Resource_C_SetSize) == 0x000008, "Wrong alignment on BP_WitchLantern_Resource_C_SetSize");
static_assert(sizeof(BP_WitchLantern_Resource_C_SetSize) == 0x0000D0, "Wrong size on BP_WitchLantern_Resource_C_SetSize");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetSize, InSmallSize) == 0x000000, "Member 'BP_WitchLantern_Resource_C_SetSize::InSmallSize' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetSize, Temp_bool_Variable) == 0x000001, "Member 'BP_WitchLantern_Resource_C_SetSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetSize, Temp_int_Variable) == 0x000004, "Member 'BP_WitchLantern_Resource_C_SetSize::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetSize, Temp_int_Variable_1) == 0x000008, "Member 'BP_WitchLantern_Resource_C_SetSize::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetSize, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_WitchLantern_Resource_C_SetSize::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetSize, Temp_int_Variable_2) == 0x000010, "Member 'BP_WitchLantern_Resource_C_SetSize::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetSize, Temp_int_Variable_3) == 0x000014, "Member 'BP_WitchLantern_Resource_C_SetSize::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetSize, K2Node_Select_Default) == 0x000018, "Member 'BP_WitchLantern_Resource_C_SetSize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetSize, K2Node_Select_Default_1) == 0x00001C, "Member 'BP_WitchLantern_Resource_C_SetSize::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetSize, K2Node_MakeStruct_SlateFontInfo) == 0x000020, "Member 'BP_WitchLantern_Resource_C_SetSize::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetSize, K2Node_MakeStruct_SlateFontInfo_1) == 0x000078, "Member 'BP_WitchLantern_Resource_C_SetSize::K2Node_MakeStruct_SlateFontInfo_1' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.SetPlusMinus
// 0x0018 (0x0018 - 0x0000)
struct BP_WitchLantern_Resource_C_SetPlusMinus final
{
public:
	class FText                                   InPlusMinus;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_WitchLantern_Resource_C_SetPlusMinus) == 0x000008, "Wrong alignment on BP_WitchLantern_Resource_C_SetPlusMinus");
static_assert(sizeof(BP_WitchLantern_Resource_C_SetPlusMinus) == 0x000018, "Wrong size on BP_WitchLantern_Resource_C_SetPlusMinus");
static_assert(offsetof(BP_WitchLantern_Resource_C_SetPlusMinus, InPlusMinus) == 0x000000, "Member 'BP_WitchLantern_Resource_C_SetPlusMinus::InPlusMinus' has a wrong offset!");

// Function BP_WitchLantern_Resource.BP_WitchLantern_Resource_C.ErrorHighlight
// 0x0008 (0x0008 - 0x0000)
struct BP_WitchLantern_Resource_C_ErrorHighlight final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WitchLantern_Resource_C_ErrorHighlight) == 0x000008, "Wrong alignment on BP_WitchLantern_Resource_C_ErrorHighlight");
static_assert(sizeof(BP_WitchLantern_Resource_C_ErrorHighlight) == 0x000008, "Wrong size on BP_WitchLantern_Resource_C_ErrorHighlight");
static_assert(offsetof(BP_WitchLantern_Resource_C_ErrorHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BP_WitchLantern_Resource_C_ErrorHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

