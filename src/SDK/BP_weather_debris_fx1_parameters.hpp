#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_weather_debris_fx1

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_weather_debris_fx1.BP_weather_debris_fx1_C.ExecuteUbergraph_BP_weather_debris_fx1
// 0x0020 (0x0020 - 0x0000)
struct BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateNamedDynamicMaterialInstance_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1) == 0x000008, "Wrong alignment on BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1");
static_assert(sizeof(BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1) == 0x000020, "Wrong size on BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1");
static_assert(offsetof(BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1, EntryPoint) == 0x000000, "Member 'BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1, CallFunc_RandomFloatInRange_ReturnValue) == 0x00000C, "Member 'BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1, CallFunc_CreateNamedDynamicMaterialInstance_ReturnValue) == 0x000018, "Member 'BP_weather_debris_fx1_C_ExecuteUbergraph_BP_weather_debris_fx1::CallFunc_CreateNamedDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function BP_weather_debris_fx1.BP_weather_debris_fx1_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_weather_debris_fx1_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_weather_debris_fx1_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_weather_debris_fx1_C_ReceiveTick");
static_assert(sizeof(BP_weather_debris_fx1_C_ReceiveTick) == 0x000004, "Wrong size on BP_weather_debris_fx1_C_ReceiveTick");
static_assert(offsetof(BP_weather_debris_fx1_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_weather_debris_fx1_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_weather_debris_fx1.BP_weather_debris_fx1_C.UpdateDebrisParams
// 0x0010 (0x0010 - 0x0000)
struct BP_weather_debris_fx1_C_UpdateDebrisParams final
{
public:
	float                                         Hue_0;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Brightness_0;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeafDensity_0;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DustDensity_0;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_weather_debris_fx1_C_UpdateDebrisParams) == 0x000004, "Wrong alignment on BP_weather_debris_fx1_C_UpdateDebrisParams");
static_assert(sizeof(BP_weather_debris_fx1_C_UpdateDebrisParams) == 0x000010, "Wrong size on BP_weather_debris_fx1_C_UpdateDebrisParams");
static_assert(offsetof(BP_weather_debris_fx1_C_UpdateDebrisParams, Hue_0) == 0x000000, "Member 'BP_weather_debris_fx1_C_UpdateDebrisParams::Hue_0' has a wrong offset!");
static_assert(offsetof(BP_weather_debris_fx1_C_UpdateDebrisParams, Brightness_0) == 0x000004, "Member 'BP_weather_debris_fx1_C_UpdateDebrisParams::Brightness_0' has a wrong offset!");
static_assert(offsetof(BP_weather_debris_fx1_C_UpdateDebrisParams, LeafDensity_0) == 0x000008, "Member 'BP_weather_debris_fx1_C_UpdateDebrisParams::LeafDensity_0' has a wrong offset!");
static_assert(offsetof(BP_weather_debris_fx1_C_UpdateDebrisParams, DustDensity_0) == 0x00000C, "Member 'BP_weather_debris_fx1_C_UpdateDebrisParams::DustDensity_0' has a wrong offset!");

// Function BP_weather_debris_fx1.BP_weather_debris_fx1_C.GetDebriesParams
// 0x0010 (0x0010 - 0x0000)
struct BP_weather_debris_fx1_C_GetDebriesParams final
{
public:
	float                                         Hue_0;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Brightness_0;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Leaf_Density;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dust_Density;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_weather_debris_fx1_C_GetDebriesParams) == 0x000004, "Wrong alignment on BP_weather_debris_fx1_C_GetDebriesParams");
static_assert(sizeof(BP_weather_debris_fx1_C_GetDebriesParams) == 0x000010, "Wrong size on BP_weather_debris_fx1_C_GetDebriesParams");
static_assert(offsetof(BP_weather_debris_fx1_C_GetDebriesParams, Hue_0) == 0x000000, "Member 'BP_weather_debris_fx1_C_GetDebriesParams::Hue_0' has a wrong offset!");
static_assert(offsetof(BP_weather_debris_fx1_C_GetDebriesParams, Brightness_0) == 0x000004, "Member 'BP_weather_debris_fx1_C_GetDebriesParams::Brightness_0' has a wrong offset!");
static_assert(offsetof(BP_weather_debris_fx1_C_GetDebriesParams, Leaf_Density) == 0x000008, "Member 'BP_weather_debris_fx1_C_GetDebriesParams::Leaf_Density' has a wrong offset!");
static_assert(offsetof(BP_weather_debris_fx1_C_GetDebriesParams, Dust_Density) == 0x00000C, "Member 'BP_weather_debris_fx1_C_GetDebriesParams::Dust_Density' has a wrong offset!");

}

