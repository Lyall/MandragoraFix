#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PrimalConversation

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum PrimalConversation.EPrimalConversationSpeakerPosition
// NumValues: 0x0003
enum class EPrimalConversationSpeakerPosition : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Max                                      = 2,
};

// Enum PrimalConversation.EPrimalConversationConditionNumericOperator
// NumValues: 0x0004
enum class EPrimalConversationConditionNumericOperator : uint8
{
	Equal                                    = 0,
	LesserOrEqual                            = 1,
	GreaterOrEqual                           = 2,
	Max                                      = 3,
};

// Enum PrimalConversation.EPrimalConversationVariableListId
// NumValues: 0x0004
enum class EPrimalConversationVariableListId : uint8
{
	Local                                    = 0,
	Global                                   = 1,
	Context                                  = 2,
	Max                                      = 3,
};

// Enum PrimalConversation.EPrimalConversationPlayerStage
// NumValues: 0x0005
enum class EPrimalConversationPlayerStage : uint8
{
	Off                                      = 0,
	Start                                    = 1,
	Talk                                     = 2,
	Stop                                     = 3,
	EPrimalConversationPlayerStage_MAX       = 4,
};

// Enum PrimalConversation.EPrimalConversationResponseButtonType
// NumValues: 0x0013
enum class EPrimalConversationResponseButtonType : uint8
{
	Default                                  = 0,
	Leave                                    = 1,
	Quest                                    = 2,
	QuestComplete                            = 3,
	Trade                                    = 4,
	Craft                                    = 5,
	Teach                                    = 6,
	Alchemist                                = 7,
	Upgrade                                  = 8,
	Attack                                   = 9,
	Bestiary                                 = 10,
	Sell                                     = 11,
	Buy                                      = 12,
	MapFragment                              = 13,
	Question                                 = 14,
	QuestCompleteLeave                       = 15,
	Transmog                                 = 16,
	Back                                     = 17,
	EPrimalConversationResponseButtonType_MAX = 18,
};

// ScriptStruct PrimalConversation.PrimalConversationNodeTalkLineInfo
// 0x0028 (0x0028 - 0x0000)
struct FPrimalConversationNodeTalkLineInfo final
{
public:
	class FText                                   Line;                                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class USoundCue*                              VoiceOver;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreDelay;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrimalConversationNodeTalkLineInfo) == 0x000008, "Wrong alignment on FPrimalConversationNodeTalkLineInfo");
static_assert(sizeof(FPrimalConversationNodeTalkLineInfo) == 0x000028, "Wrong size on FPrimalConversationNodeTalkLineInfo");
static_assert(offsetof(FPrimalConversationNodeTalkLineInfo, Line) == 0x000000, "Member 'FPrimalConversationNodeTalkLineInfo::Line' has a wrong offset!");
static_assert(offsetof(FPrimalConversationNodeTalkLineInfo, VoiceOver) == 0x000018, "Member 'FPrimalConversationNodeTalkLineInfo::VoiceOver' has a wrong offset!");
static_assert(offsetof(FPrimalConversationNodeTalkLineInfo, PreDelay) == 0x000020, "Member 'FPrimalConversationNodeTalkLineInfo::PreDelay' has a wrong offset!");

// ScriptStruct PrimalConversation.PrimalConversationPlayerShowInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPrimalConversationPlayerShowInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrimalConversationPlayerShowInfo) == 0x000008, "Wrong alignment on FPrimalConversationPlayerShowInfo");
static_assert(sizeof(FPrimalConversationPlayerShowInfo) == 0x000020, "Wrong size on FPrimalConversationPlayerShowInfo");

// ScriptStruct PrimalConversation.PrimalConversationSpeakerInfo
// 0x0010 (0x0010 - 0x0000)
struct FPrimalConversationSpeakerInfo final
{
public:
	class UPrimalConversationSpeaker*             Speaker;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPrimalConversationSpeakerPosition            position;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrimalConversationSpeakerInfo) == 0x000008, "Wrong alignment on FPrimalConversationSpeakerInfo");
static_assert(sizeof(FPrimalConversationSpeakerInfo) == 0x000010, "Wrong size on FPrimalConversationSpeakerInfo");
static_assert(offsetof(FPrimalConversationSpeakerInfo, Speaker) == 0x000000, "Member 'FPrimalConversationSpeakerInfo::Speaker' has a wrong offset!");
static_assert(offsetof(FPrimalConversationSpeakerInfo, position) == 0x000008, "Member 'FPrimalConversationSpeakerInfo::position' has a wrong offset!");

// ScriptStruct PrimalConversation.PrimalConversationInfo
// 0x0028 (0x0028 - 0x0000)
struct FPrimalConversationInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilePath                              FilePath;                                          // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FPrimalConversationSpeakerInfo> Speakers;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrimalConversationInfo) == 0x000008, "Wrong alignment on FPrimalConversationInfo");
static_assert(sizeof(FPrimalConversationInfo) == 0x000028, "Wrong size on FPrimalConversationInfo");
static_assert(offsetof(FPrimalConversationInfo, ID) == 0x000000, "Member 'FPrimalConversationInfo::ID' has a wrong offset!");
static_assert(offsetof(FPrimalConversationInfo, FilePath) == 0x000008, "Member 'FPrimalConversationInfo::FilePath' has a wrong offset!");
static_assert(offsetof(FPrimalConversationInfo, Speakers) == 0x000018, "Member 'FPrimalConversationInfo::Speakers' has a wrong offset!");

// ScriptStruct PrimalConversation.PrimalConversationNodeResponseLineInfo
// 0x0028 (0x0028 - 0x0000)
struct FPrimalConversationNodeResponseLineInfo final
{
public:
	class FText                                   Line;                                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class USoundCue*                              VoiceOver;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreDelay;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrimalConversationNodeResponseLineInfo) == 0x000008, "Wrong alignment on FPrimalConversationNodeResponseLineInfo");
static_assert(sizeof(FPrimalConversationNodeResponseLineInfo) == 0x000028, "Wrong size on FPrimalConversationNodeResponseLineInfo");
static_assert(offsetof(FPrimalConversationNodeResponseLineInfo, Line) == 0x000000, "Member 'FPrimalConversationNodeResponseLineInfo::Line' has a wrong offset!");
static_assert(offsetof(FPrimalConversationNodeResponseLineInfo, VoiceOver) == 0x000018, "Member 'FPrimalConversationNodeResponseLineInfo::VoiceOver' has a wrong offset!");
static_assert(offsetof(FPrimalConversationNodeResponseLineInfo, PreDelay) == 0x000020, "Member 'FPrimalConversationNodeResponseLineInfo::PreDelay' has a wrong offset!");

// ScriptStruct PrimalConversation.PrimalConversationNodeResponseLine
// 0x0028 (0x0028 - 0x0000)
struct FPrimalConversationNodeResponseLine final
{
public:
	struct FPrimalConversationNodeResponseLineInfo Info;                                              // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrimalConversationNodeResponseLine) == 0x000008, "Wrong alignment on FPrimalConversationNodeResponseLine");
static_assert(sizeof(FPrimalConversationNodeResponseLine) == 0x000028, "Wrong size on FPrimalConversationNodeResponseLine");
static_assert(offsetof(FPrimalConversationNodeResponseLine, Info) == 0x000000, "Member 'FPrimalConversationNodeResponseLine::Info' has a wrong offset!");

// ScriptStruct PrimalConversation.PrimalConversationEventId
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FPrimalConversationEventId final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrimalConversationEventId) == 0x000004, "Wrong alignment on FPrimalConversationEventId");
static_assert(sizeof(FPrimalConversationEventId) == 0x000004, "Wrong size on FPrimalConversationEventId");

// ScriptStruct PrimalConversation.PrimalConversationNodeTalkLine
// 0x0028 (0x0028 - 0x0000)
struct FPrimalConversationNodeTalkLine final
{
public:
	struct FPrimalConversationNodeTalkLineInfo    Info;                                              // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrimalConversationNodeTalkLine) == 0x000008, "Wrong alignment on FPrimalConversationNodeTalkLine");
static_assert(sizeof(FPrimalConversationNodeTalkLine) == 0x000028, "Wrong size on FPrimalConversationNodeTalkLine");
static_assert(offsetof(FPrimalConversationNodeTalkLine, Info) == 0x000000, "Member 'FPrimalConversationNodeTalkLine::Info' has a wrong offset!");

// ScriptStruct PrimalConversation.PortraitVideoIdleBridge
// 0x0018 (0x0018 - 0x0000)
struct FPortraitVideoIdleBridge final
{
public:
	struct FFilePath                              PortraitVideoIdleBridge;                           // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	int32                                         Chance;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPortraitVideoIdleBridge) == 0x000008, "Wrong alignment on FPortraitVideoIdleBridge");
static_assert(sizeof(FPortraitVideoIdleBridge) == 0x000018, "Wrong size on FPortraitVideoIdleBridge");
static_assert(offsetof(FPortraitVideoIdleBridge, PortraitVideoIdleBridge) == 0x000000, "Member 'FPortraitVideoIdleBridge::PortraitVideoIdleBridge' has a wrong offset!");
static_assert(offsetof(FPortraitVideoIdleBridge, Chance) == 0x000010, "Member 'FPortraitVideoIdleBridge::Chance' has a wrong offset!");

// ScriptStruct PrimalConversation.PrimalConversationResponseInfo
// 0x0001 (0x0001 - 0x0000)
struct FPrimalConversationResponseInfo final
{
public:
	bool                                          bSkippable;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrimalConversationResponseInfo) == 0x000001, "Wrong alignment on FPrimalConversationResponseInfo");
static_assert(sizeof(FPrimalConversationResponseInfo) == 0x000001, "Wrong size on FPrimalConversationResponseInfo");
static_assert(offsetof(FPrimalConversationResponseInfo, bSkippable) == 0x000000, "Member 'FPrimalConversationResponseInfo::bSkippable' has a wrong offset!");

// ScriptStruct PrimalConversation.PrimalConversationNodeTalkInfo
// 0x0018 (0x0018 - 0x0000)
struct FPrimalConversationNodeTalkInfo final
{
public:
	struct FPrimalConversationSpeakerInfo         SpeakerInfo;                                       // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSkippable;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrimalConversationNodeTalkInfo) == 0x000008, "Wrong alignment on FPrimalConversationNodeTalkInfo");
static_assert(sizeof(FPrimalConversationNodeTalkInfo) == 0x000018, "Wrong size on FPrimalConversationNodeTalkInfo");
static_assert(offsetof(FPrimalConversationNodeTalkInfo, SpeakerInfo) == 0x000000, "Member 'FPrimalConversationNodeTalkInfo::SpeakerInfo' has a wrong offset!");
static_assert(offsetof(FPrimalConversationNodeTalkInfo, bSkippable) == 0x000010, "Member 'FPrimalConversationNodeTalkInfo::bSkippable' has a wrong offset!");

}

