#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PrimalSkillTreePlugin

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct PrimalSkillTreePlugin.SkillTreeNodeUINavigationData
// 0x000C (0x000C - 0x0000)
struct FSkillTreeNodeUINavigationData final
{
public:
	float                                         MinJumpAngle;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxJumpAngle;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetNodeID;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillTreeNodeUINavigationData) == 0x000004, "Wrong alignment on FSkillTreeNodeUINavigationData");
static_assert(sizeof(FSkillTreeNodeUINavigationData) == 0x00000C, "Wrong size on FSkillTreeNodeUINavigationData");
static_assert(offsetof(FSkillTreeNodeUINavigationData, MinJumpAngle) == 0x000000, "Member 'FSkillTreeNodeUINavigationData::MinJumpAngle' has a wrong offset!");
static_assert(offsetof(FSkillTreeNodeUINavigationData, MaxJumpAngle) == 0x000004, "Member 'FSkillTreeNodeUINavigationData::MaxJumpAngle' has a wrong offset!");
static_assert(offsetof(FSkillTreeNodeUINavigationData, TargetNodeID) == 0x000008, "Member 'FSkillTreeNodeUINavigationData::TargetNodeID' has a wrong offset!");

// ScriptStruct PrimalSkillTreePlugin.PrimalSkillTreeNodeInfo
// 0x0028 (0x0028 - 0x0000)
struct FPrimalSkillTreeNodeInfo final
{
public:
	class FText                                   SkillNodeName;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture2D*                             SkillNodeIcon;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomPrimalSkillTreeNodeData*         CustomNodeData;                                    // 0x0020(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrimalSkillTreeNodeInfo) == 0x000008, "Wrong alignment on FPrimalSkillTreeNodeInfo");
static_assert(sizeof(FPrimalSkillTreeNodeInfo) == 0x000028, "Wrong size on FPrimalSkillTreeNodeInfo");
static_assert(offsetof(FPrimalSkillTreeNodeInfo, SkillNodeName) == 0x000000, "Member 'FPrimalSkillTreeNodeInfo::SkillNodeName' has a wrong offset!");
static_assert(offsetof(FPrimalSkillTreeNodeInfo, SkillNodeIcon) == 0x000018, "Member 'FPrimalSkillTreeNodeInfo::SkillNodeIcon' has a wrong offset!");
static_assert(offsetof(FPrimalSkillTreeNodeInfo, CustomNodeData) == 0x000020, "Member 'FPrimalSkillTreeNodeInfo::CustomNodeData' has a wrong offset!");

}

